"use strict";var A=require("node:fs"),e=require("node:os"),t=require("node:path"),n=require("node:crypto"),s=require("node:http"),r=require("node:https"),o=require("node:net"),i=require("node:tls"),a=require("node:events"),c=require("node:assert"),g=require("node:util"),E=require("node:stream"),Q=require("node:buffer"),h=require("node:querystring"),l=require("node:stream/web"),C=require("node:worker_threads"),B=require("node:perf_hooks"),I=require("node:util/types"),u=require("node:async_hooks"),d=require("node:console"),f=require("node:url"),p=require("node:zlib"),y=require("node:string_decoder"),m=require("node:diagnostics_channel"),w=require("node:child_process"),D=require("node:timers"),k=require("node:timers/promises"),b="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function R(A){return A&&A.__esModule&&Object.prototype.hasOwnProperty.call(A,"default")?A.default:A}var N,S,F={},U={},L={};function M(){if(N)return L;return N=1,Object.defineProperty(L,"__esModule",{value:!0}),L.toCommandProperties=L.toCommandValue=void 0,L.toCommandValue=function(A){return null==A?"":"string"==typeof A||A instanceof String?A:JSON.stringify(A)},L.toCommandProperties=function(A){return Object.keys(A).length?{title:A.title,file:A.file,line:A.startLine,endLine:A.endLine,col:A.startColumn,endColumn:A.endColumn}:{}},L}function v(){if(S)return U;S=1;var A=U&&U.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(e,t);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(A,n,s)}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),t=U&&U.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),n=U&&U.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&A(n,e,s);return t(n,e),n};Object.defineProperty(U,"__esModule",{value:!0}),U.issue=U.issueCommand=void 0;const s=n(e),r=M();function o(A,e,t){const n=new i(A,e,t);process.stdout.write(n.toString()+s.EOL)}U.issueCommand=o,U.issue=function(A,e=""){o(A,{},e)};class i{constructor(A,e,t){A||(A="missing.command"),this.command=A,this.properties=e,this.message=t}toString(){let A="::"+this.command;if(this.properties&&Object.keys(this.properties).length>0){A+=" ";let t=!0;for(const n in this.properties)if(this.properties.hasOwnProperty(n)){const s=this.properties[n];s&&(t?t=!1:A+=",",A+=`${n}=${e=s,(0,r.toCommandValue)(e).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/:/g,"%3A").replace(/,/g,"%2C")}`)}}var e;return A+=`::${function(A){return(0,r.toCommandValue)(A).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A")}(this.message)}`,A}}return U}var T,Y={};var J,G={},H={},O={};var V,x,q,W={};function P(){return q||(q=1,x=function(){if(V)return W;V=1;var A,e=i,t=s,n=r,o=a,c=g;function E(A){var e=this;e.options=A||{},e.proxyOptions=e.options.proxy||{},e.maxSockets=e.options.maxSockets||t.Agent.defaultMaxSockets,e.requests=[],e.sockets=[],e.on("free",(function(A,t,n,s){for(var r=h(t,n,s),o=0,i=e.requests.length;o<i;++o){var a=e.requests[o];if(a.host===r.host&&a.port===r.port)return e.requests.splice(o,1),void a.request.onSocket(A)}A.destroy(),e.removeSocket(A)}))}function Q(A,t){var n=this;E.prototype.createSocket.call(n,A,(function(s){var r=A.request.getHeader("host"),o=l({},n.options,{socket:s,servername:r?r.replace(/:.*$/,""):A.host}),i=e.connect(0,o);n.sockets[n.sockets.indexOf(s)]=i,t(i)}))}function h(A,e,t){return"string"==typeof A?{host:A,port:e,localAddress:t}:A}function l(A){for(var e=1,t=arguments.length;e<t;++e){var n=arguments[e];if("object"==typeof n)for(var s=Object.keys(n),r=0,o=s.length;r<o;++r){var i=s[r];void 0!==n[i]&&(A[i]=n[i])}}return A}return W.httpOverHttp=function(A){var e=new E(A);return e.request=t.request,e},W.httpsOverHttp=function(A){var e=new E(A);return e.request=t.request,e.createSocket=Q,e.defaultPort=443,e},W.httpOverHttps=function(A){var e=new E(A);return e.request=n.request,e},W.httpsOverHttps=function(A){var e=new E(A);return e.request=n.request,e.createSocket=Q,e.defaultPort=443,e},c.inherits(E,o.EventEmitter),E.prototype.addRequest=function(A,e,t,n){var s=this,r=l({request:A},s.options,h(e,t,n));s.sockets.length>=this.maxSockets?s.requests.push(r):s.createSocket(r,(function(e){function t(){s.emit("free",e,r)}function n(A){s.removeSocket(e),e.removeListener("free",t),e.removeListener("close",n),e.removeListener("agentRemove",n)}e.on("free",t),e.on("close",n),e.on("agentRemove",n),A.onSocket(e)}))},E.prototype.createSocket=function(e,t){var n=this,s={};n.sockets.push(s);var r=l({},n.proxyOptions,{method:"CONNECT",path:e.host+":"+e.port,agent:!1,headers:{host:e.host+":"+e.port}});e.localAddress&&(r.localAddress=e.localAddress),r.proxyAuth&&(r.headers=r.headers||{},r.headers["Proxy-Authorization"]="Basic "+new Buffer(r.proxyAuth).toString("base64")),A("making CONNECT request");var o=n.request(r);function i(r,i,a){var c;return o.removeAllListeners(),i.removeAllListeners(),200!==r.statusCode?(A("tunneling socket could not be established, statusCode=%d",r.statusCode),i.destroy(),(c=new Error("tunneling socket could not be established, statusCode="+r.statusCode)).code="ECONNRESET",e.request.emit("error",c),void n.removeSocket(s)):a.length>0?(A("got illegal response body from proxy"),i.destroy(),(c=new Error("got illegal response body from proxy")).code="ECONNRESET",e.request.emit("error",c),void n.removeSocket(s)):(A("tunneling connection has established"),n.sockets[n.sockets.indexOf(s)]=i,t(i))}o.useChunkedEncodingByDefault=!1,o.once("response",(function(A){A.upgrade=!0})),o.once("upgrade",(function(A,e,t){process.nextTick((function(){i(A,e,t)}))})),o.once("connect",i),o.once("error",(function(t){o.removeAllListeners(),A("tunneling socket could not be established, cause=%s\n",t.message,t.stack);var r=new Error("tunneling socket could not be established, cause="+t.message);r.code="ECONNRESET",e.request.emit("error",r),n.removeSocket(s)})),o.end()},E.prototype.removeSocket=function(A){var e=this.sockets.indexOf(A);if(-1!==e){this.sockets.splice(e,1);var t=this.requests.shift();t&&this.createSocket(t,(function(A){t.request.onSocket(A)}))}},A=process.env.NODE_DEBUG&&/\btunnel\b/.test(process.env.NODE_DEBUG)?function(){var A=Array.prototype.slice.call(arguments);"string"==typeof A[0]?A[0]="TUNNEL: "+A[0]:A.unshift("TUNNEL:"),console.error.apply(console,A)}:function(){},W.debug=A,W}()),x}var _,j,K,Z,X,z,$,AA,eA,tA,nA={};function sA(){return j?_:(j=1,_={kClose:Symbol("close"),kDestroy:Symbol("destroy"),kDispatch:Symbol("dispatch"),kUrl:Symbol("url"),kWriting:Symbol("writing"),kResuming:Symbol("resuming"),kQueue:Symbol("queue"),kConnect:Symbol("connect"),kConnecting:Symbol("connecting"),kHeadersList:Symbol("headers list"),kKeepAliveDefaultTimeout:Symbol("default keep alive timeout"),kKeepAliveMaxTimeout:Symbol("max keep alive timeout"),kKeepAliveTimeoutThreshold:Symbol("keep alive timeout threshold"),kKeepAliveTimeoutValue:Symbol("keep alive timeout"),kKeepAlive:Symbol("keep alive"),kHeadersTimeout:Symbol("headers timeout"),kBodyTimeout:Symbol("body timeout"),kServerName:Symbol("server name"),kLocalAddress:Symbol("local address"),kHost:Symbol("host"),kNoRef:Symbol("no ref"),kBodyUsed:Symbol("used"),kRunning:Symbol("running"),kBlocking:Symbol("blocking"),kPending:Symbol("pending"),kSize:Symbol("size"),kBusy:Symbol("busy"),kQueued:Symbol("queued"),kFree:Symbol("free"),kConnected:Symbol("connected"),kClosed:Symbol("closed"),kNeedDrain:Symbol("need drain"),kReset:Symbol("reset"),kDestroyed:Symbol.for("nodejs.stream.destroyed"),kMaxHeadersSize:Symbol("max headers size"),kRunningIdx:Symbol("running index"),kPendingIdx:Symbol("pending index"),kError:Symbol("error"),kClients:Symbol("clients"),kClient:Symbol("client"),kParser:Symbol("parser"),kOnDestroyed:Symbol("destroy callbacks"),kPipelining:Symbol("pipelining"),kSocket:Symbol("socket"),kHostHeader:Symbol("host header"),kConnector:Symbol("connector"),kStrictContentLength:Symbol("strict content length"),kMaxRedirections:Symbol("maxRedirections"),kMaxRequests:Symbol("maxRequestsPerClient"),kProxy:Symbol("proxy agent options"),kCounter:Symbol("socket request counter"),kInterceptors:Symbol("dispatch interceptors"),kMaxResponseSize:Symbol("max response size"),kHTTP2Session:Symbol("http2Session"),kHTTP2SessionState:Symbol("http2Session state"),kHTTP2BuildRequest:Symbol("http2 build request"),kHTTP1BuildRequest:Symbol("http1 build request"),kHTTP2CopyHeaders:Symbol("http2 copy headers"),kHTTPConnVersion:Symbol("http connection version"),kRetryHandlerDefaultRetry:Symbol("retry agent default retry"),kConstruct:Symbol("constructable")})}function rA(){if(Z)return K;Z=1;class A extends Error{constructor(A){super(A),this.name="UndiciError",this.code="UND_ERR"}}class e extends A{constructor(A){super(A),Error.captureStackTrace(this,e),this.name="ConnectTimeoutError",this.message=A||"Connect Timeout Error",this.code="UND_ERR_CONNECT_TIMEOUT"}}class t extends A{constructor(A){super(A),Error.captureStackTrace(this,t),this.name="HeadersTimeoutError",this.message=A||"Headers Timeout Error",this.code="UND_ERR_HEADERS_TIMEOUT"}}class n extends A{constructor(A){super(A),Error.captureStackTrace(this,n),this.name="HeadersOverflowError",this.message=A||"Headers Overflow Error",this.code="UND_ERR_HEADERS_OVERFLOW"}}class s extends A{constructor(A){super(A),Error.captureStackTrace(this,s),this.name="BodyTimeoutError",this.message=A||"Body Timeout Error",this.code="UND_ERR_BODY_TIMEOUT"}}class r extends A{constructor(A,e,t,n){super(A),Error.captureStackTrace(this,r),this.name="ResponseStatusCodeError",this.message=A||"Response Status Code Error",this.code="UND_ERR_RESPONSE_STATUS_CODE",this.body=n,this.status=e,this.statusCode=e,this.headers=t}}class o extends A{constructor(A){super(A),Error.captureStackTrace(this,o),this.name="InvalidArgumentError",this.message=A||"Invalid Argument Error",this.code="UND_ERR_INVALID_ARG"}}class i extends A{constructor(A){super(A),Error.captureStackTrace(this,i),this.name="InvalidReturnValueError",this.message=A||"Invalid Return Value Error",this.code="UND_ERR_INVALID_RETURN_VALUE"}}class a extends A{constructor(A){super(A),Error.captureStackTrace(this,a),this.name="AbortError",this.message=A||"Request aborted",this.code="UND_ERR_ABORTED"}}class c extends A{constructor(A){super(A),Error.captureStackTrace(this,c),this.name="InformationalError",this.message=A||"Request information",this.code="UND_ERR_INFO"}}class g extends A{constructor(A){super(A),Error.captureStackTrace(this,g),this.name="RequestContentLengthMismatchError",this.message=A||"Request body length does not match content-length header",this.code="UND_ERR_REQ_CONTENT_LENGTH_MISMATCH"}}class E extends A{constructor(A){super(A),Error.captureStackTrace(this,E),this.name="ResponseContentLengthMismatchError",this.message=A||"Response body length does not match content-length header",this.code="UND_ERR_RES_CONTENT_LENGTH_MISMATCH"}}class Q extends A{constructor(A){super(A),Error.captureStackTrace(this,Q),this.name="ClientDestroyedError",this.message=A||"The client is destroyed",this.code="UND_ERR_DESTROYED"}}class h extends A{constructor(A){super(A),Error.captureStackTrace(this,h),this.name="ClientClosedError",this.message=A||"The client is closed",this.code="UND_ERR_CLOSED"}}class l extends A{constructor(A,e){super(A),Error.captureStackTrace(this,l),this.name="SocketError",this.message=A||"Socket error",this.code="UND_ERR_SOCKET",this.socket=e}}class C extends A{constructor(A){super(A),Error.captureStackTrace(this,C),this.name="NotSupportedError",this.message=A||"Not supported error",this.code="UND_ERR_NOT_SUPPORTED"}}class B extends Error{constructor(A,e,t){super(A),Error.captureStackTrace(this,B),this.name="HTTPParserError",this.code=e?`HPE_${e}`:void 0,this.data=t?t.toString():void 0}}class I extends A{constructor(A){super(A),Error.captureStackTrace(this,I),this.name="ResponseExceededMaxSizeError",this.message=A||"Response content exceeded max size",this.code="UND_ERR_RES_EXCEEDED_MAX_SIZE"}}class u extends A{constructor(A,e,{headers:t,data:n}){super(A),Error.captureStackTrace(this,u),this.name="RequestRetryError",this.message=A||"Request retry error",this.code="UND_ERR_REQ_RETRY",this.statusCode=e,this.data=n,this.headers=t}}return K={HTTPParserError:B,UndiciError:A,HeadersTimeoutError:t,HeadersOverflowError:n,BodyTimeoutError:s,RequestContentLengthMismatchError:g,ConnectTimeoutError:e,ResponseStatusCodeError:r,InvalidArgumentError:o,InvalidReturnValueError:i,RequestAbortedError:a,ClientDestroyedError:Q,ClientClosedError:h,InformationalError:c,SocketError:l,NotSupportedError:C,ResponseContentLengthMismatchError:E,BalancedPoolMissingUpstreamError:class extends A{constructor(A){super(A),Error.captureStackTrace(this,C),this.name="MissingUpstreamError",this.message=A||"No upstream has been added to the BalancedPool",this.code="UND_ERR_BPL_MISSING_UPSTREAM"}},ResponseExceededMaxSizeError:I,RequestRetryError:u}}function oA(){if(AA)return $;AA=1;const A=c,{kDestroyed:e,kBodyUsed:t}=sA(),{IncomingMessage:n}=s,r=E,i=o,{InvalidArgumentError:a}=rA(),{Blob:C}=Q,B=g,{stringify:I}=h,{headerNameLowerCasedRecord:u}=function(){if(z)return X;z=1;const A={},e=["Accept","Accept-Encoding","Accept-Language","Accept-Ranges","Access-Control-Allow-Credentials","Access-Control-Allow-Headers","Access-Control-Allow-Methods","Access-Control-Allow-Origin","Access-Control-Expose-Headers","Access-Control-Max-Age","Access-Control-Request-Headers","Access-Control-Request-Method","Age","Allow","Alt-Svc","Alt-Used","Authorization","Cache-Control","Clear-Site-Data","Connection","Content-Disposition","Content-Encoding","Content-Language","Content-Length","Content-Location","Content-Range","Content-Security-Policy","Content-Security-Policy-Report-Only","Content-Type","Cookie","Cross-Origin-Embedder-Policy","Cross-Origin-Opener-Policy","Cross-Origin-Resource-Policy","Date","Device-Memory","Downlink","ECT","ETag","Expect","Expect-CT","Expires","Forwarded","From","Host","If-Match","If-Modified-Since","If-None-Match","If-Range","If-Unmodified-Since","Keep-Alive","Last-Modified","Link","Location","Max-Forwards","Origin","Permissions-Policy","Pragma","Proxy-Authenticate","Proxy-Authorization","RTT","Range","Referer","Referrer-Policy","Refresh","Retry-After","Sec-WebSocket-Accept","Sec-WebSocket-Extensions","Sec-WebSocket-Key","Sec-WebSocket-Protocol","Sec-WebSocket-Version","Server","Server-Timing","Service-Worker-Allowed","Service-Worker-Navigation-Preload","Set-Cookie","SourceMap","Strict-Transport-Security","Supports-Loading-Mode","TE","Timing-Allow-Origin","Trailer","Transfer-Encoding","Upgrade","Upgrade-Insecure-Requests","User-Agent","Vary","Via","WWW-Authenticate","X-Content-Type-Options","X-DNS-Prefetch-Control","X-Frame-Options","X-Permitted-Cross-Domain-Policies","X-Powered-By","X-Requested-With","X-XSS-Protection"];for(let t=0;t<e.length;++t){const n=e[t],s=n.toLowerCase();A[n]=A[s]=s}return Object.setPrototypeOf(A,null),X={wellknownHeaderNames:e,headerNameLowerCasedRecord:A}}(),[d,f]=process.versions.node.split(".").map((A=>Number(A)));function p(A){return A&&"object"==typeof A&&"function"==typeof A.pipe&&"function"==typeof A.on}function y(A){return C&&A instanceof C||A&&"object"==typeof A&&("function"==typeof A.stream||"function"==typeof A.arrayBuffer)&&/^(Blob|File)$/.test(A[Symbol.toStringTag])}function m(A){if("string"==typeof A){if(A=new URL(A),!/^https?:/.test(A.origin||A.protocol))throw new a("Invalid URL protocol: the URL must start with `http:` or `https:`.");return A}if(!A||"object"!=typeof A)throw new a("Invalid URL: The URL argument must be a non-null object.");if(!/^https?:/.test(A.origin||A.protocol))throw new a("Invalid URL protocol: the URL must start with `http:` or `https:`.");if(!(A instanceof URL)){if(null!=A.port&&""!==A.port&&!Number.isFinite(parseInt(A.port)))throw new a("Invalid URL: port must be a valid integer or a string representation of an integer.");if(null!=A.path&&"string"!=typeof A.path)throw new a("Invalid URL path: the path must be a string or null/undefined.");if(null!=A.pathname&&"string"!=typeof A.pathname)throw new a("Invalid URL pathname: the pathname must be a string or null/undefined.");if(null!=A.hostname&&"string"!=typeof A.hostname)throw new a("Invalid URL hostname: the hostname must be a string or null/undefined.");if(null!=A.origin&&"string"!=typeof A.origin)throw new a("Invalid URL origin: the origin must be a string or null/undefined.");const e=null!=A.port?A.port:"https:"===A.protocol?443:80;let t=null!=A.origin?A.origin:`${A.protocol}//${A.hostname}:${e}`,n=null!=A.path?A.path:`${A.pathname||""}${A.search||""}`;t.endsWith("/")&&(t=t.substring(0,t.length-1)),n&&!n.startsWith("/")&&(n=`/${n}`),A=new URL(t+n)}return A}function w(A){return!A||!(!A.destroyed&&!A[e])}function D(A){const e=A&&A._readableState;return w(A)&&e&&!e.endEmitted}const k=/timeout=(\d+)/;function b(A){return A instanceof Uint8Array||Buffer.isBuffer(A)}let R;const N=!!String.prototype.toWellFormed;const S=Object.create(null);return S.enumerable=!0,$={kEnumerableProperty:S,nop:function(){},isDisturbed:function(A){return!(!A||!(r.isDisturbed?r.isDisturbed(A)||A[t]:A[t]||A.readableDidRead||A._readableState&&A._readableState.dataEmitted||D(A)))},isErrored:function(A){return!(!A||!(r.isErrored?r.isErrored(A):/state: 'errored'/.test(B.inspect(A))))},isReadable:function(A){return!(!A||!(r.isReadable?r.isReadable(A):/state: 'readable'/.test(B.inspect(A))))},toUSVString:function(A){return N?`${A}`.toWellFormed():B.toUSVString?B.toUSVString(A):`${A}`},isReadableAborted:D,isBlobLike:y,parseOrigin:function(A){if("/"!==(A=m(A)).pathname||A.search||A.hash)throw new a("invalid url");return A},parseURL:m,getServerName:function(e){if(!e)return null;A.strictEqual(typeof e,"string");const t=function(e){if("["===e[0]){const t=e.indexOf("]");return A(-1!==t),e.substring(1,t)}const t=e.indexOf(":");return-1===t?e:e.substring(0,t)}(e);return i.isIP(t)?"":t},isStream:p,isIterable:function(A){return!(null==A||"function"!=typeof A[Symbol.iterator]&&"function"!=typeof A[Symbol.asyncIterator])},isAsyncIterable:function(A){return!(null==A||"function"!=typeof A[Symbol.asyncIterator])},isDestroyed:w,headerNameToString:function(A){return u[A]||A.toLowerCase()},parseRawHeaders:function(A){const e=[];let t=!1,n=-1;for(let s=0;s<A.length;s+=2){const r=A[s+0].toString(),o=A[s+1].toString("utf8");14!==r.length||"content-length"!==r&&"content-length"!==r.toLowerCase()?19!==r.length||"content-disposition"!==r&&"content-disposition"!==r.toLowerCase()?e.push(r,o):n=e.push(r,o)-1:(e.push(r,o),t=!0)}return t&&-1!==n&&(e[n]=Buffer.from(e[n]).toString("latin1")),e},parseHeaders:function(A,e={}){if(!Array.isArray(A))return A;for(let t=0;t<A.length;t+=2){const n=A[t].toString().toLowerCase();let s=e[n];s?(Array.isArray(s)||(s=[s],e[n]=s),s.push(A[t+1].toString("utf8"))):Array.isArray(A[t+1])?e[n]=A[t+1].map((A=>A.toString("utf8"))):e[n]=A[t+1].toString("utf8")}return"content-length"in e&&"content-disposition"in e&&(e["content-disposition"]=Buffer.from(e["content-disposition"]).toString("latin1")),e},parseKeepAliveTimeout:function(A){const e=A.toString().match(k);return e?1e3*parseInt(e[1],10):null},destroy:function(A,t){null!=A&&p(A)&&!w(A)&&("function"==typeof A.destroy?(Object.getPrototypeOf(A).constructor===n&&(A.socket=null),A.destroy(t)):t&&process.nextTick(((A,e)=>{A.emit("error",e)}),A,t),!0!==A.destroyed&&(A[e]=!0))},bodyLength:function(A){if(null==A)return 0;if(p(A)){const e=A._readableState;return e&&!1===e.objectMode&&!0===e.ended&&Number.isFinite(e.length)?e.length:null}return y(A)?null!=A.size?A.size:null:b(A)?A.byteLength:null},deepClone:function(A){return JSON.parse(JSON.stringify(A))},ReadableStreamFrom:function(A){if(R||(R=l.ReadableStream),R.from)return R.from(async function*(A){for await(const e of A)yield Buffer.isBuffer(e)?e:Buffer.from(e)}(A));let e;return new R({async start(){e=A[Symbol.asyncIterator]()},async pull(A){const{done:t,value:n}=await e.next();if(t)queueMicrotask((()=>{A.close()}));else{const e=Buffer.isBuffer(n)?n:Buffer.from(n);A.enqueue(new Uint8Array(e))}return A.desiredSize>0},async cancel(A){await e.return()}},0)},isBuffer:b,validateHandler:function(A,e,t){if(!A||"object"!=typeof A)throw new a("handler must be an object");if("function"!=typeof A.onConnect)throw new a("invalid onConnect method");if("function"!=typeof A.onError)throw new a("invalid onError method");if("function"!=typeof A.onBodySent&&void 0!==A.onBodySent)throw new a("invalid onBodySent method");if(t||"CONNECT"===e){if("function"!=typeof A.onUpgrade)throw new a("invalid onUpgrade method")}else{if("function"!=typeof A.onHeaders)throw new a("invalid onHeaders method");if("function"!=typeof A.onData)throw new a("invalid onData method");if("function"!=typeof A.onComplete)throw new a("invalid onComplete method")}},getSocketInfo:function(A){return{localAddress:A.localAddress,localPort:A.localPort,remoteAddress:A.remoteAddress,remotePort:A.remotePort,remoteFamily:A.remoteFamily,timeout:A.timeout,bytesWritten:A.bytesWritten,bytesRead:A.bytesRead}},isFormDataLike:function(A){return A&&"object"==typeof A&&"function"==typeof A.append&&"function"==typeof A.delete&&"function"==typeof A.get&&"function"==typeof A.getAll&&"function"==typeof A.has&&"function"==typeof A.set&&"FormData"===A[Symbol.toStringTag]},buildURL:function(A,e){if(A.includes("?")||A.includes("#"))throw new Error('Query params cannot be passed when url already contains "?" or "#".');const t=I(e);return t&&(A+="?"+t),A},throwIfAborted:function(A){if(A)if("function"==typeof A.throwIfAborted)A.throwIfAborted();else if(A.aborted){const A=new Error("The operation was aborted");throw A.name="AbortError",A}},addAbortListener:function(A,e){return"addEventListener"in A?(A.addEventListener("abort",e,{once:!0}),()=>A.removeEventListener("abort",e)):(A.addListener("abort",e),()=>A.removeListener("abort",e))},parseRangeHeader:function(A){if(null==A||""===A)return{start:0,end:null,size:null};const e=A?A.match(/^bytes (\d+)-(\d+)\/(\d+)?$/):null;return e?{start:parseInt(e[1]),end:e[2]?parseInt(e[2]):null,size:e[3]?parseInt(e[3]):null}:null},nodeMajor:d,nodeMinor:f,nodeHasAutoSelectFamily:d>18||18===d&&f>=13,safeHTTPMethods:["GET","HEAD","OPTIONS","TRACE"]},$}function iA(){if(tA)return eA;tA=1;let A,e=Date.now();const t=[];function n(){e=Date.now();let A=t.length,n=0;for(;n<A;){const s=t[n];0===s.state?s.state=e+s.delay:s.state>0&&e>=s.state&&(s.state=-1,s.callback(s.opaque)),-1===s.state?(s.state=-2,n!==A-1?t[n]=t.pop():t.pop(),A-=1):n+=1}t.length>0&&s()}function s(){A&&A.refresh?A.refresh():(clearTimeout(A),A=setTimeout(n,1e3),A.unref&&A.unref())}class r{constructor(A,e,t){this.callback=A,this.delay=e,this.opaque=t,this.state=-2,this.refresh()}refresh(){-2===this.state&&(t.push(this),A&&1!==t.length||s()),this.state=0}clear(){this.state=-1}}return eA={setTimeout:(A,e,t)=>e<1e3?setTimeout(A,e,t):new r(A,e,t),clearTimeout(A){A instanceof r?A.clear():clearTimeout(A)}}}var aA,cA,gA,EA,QA,hA,lA,CA,BA,IA,uA,dA,fA,pA,yA,mA,wA,DA,kA,bA,RA,NA,SA,FA,UA,LA,MA,vA,TA,YA,JA,GA,HA,OA,VA,xA,qA,WA,PA,_A,jA,KA,ZA,XA,zA,$A,Ae,ee,te,ne={exports:{}};function se(){if(cA)return aA;cA=1;const A=a.EventEmitter;function e(A){if("string"==typeof A&&(A=Buffer.from(A)),!Buffer.isBuffer(A))throw new TypeError("The needle has to be a String or a Buffer.");const e=A.length;if(0===e)throw new Error("The needle cannot be an empty String/Buffer.");if(e>256)throw new Error("The needle cannot have a length bigger than 256.");this.maxMatches=1/0,this.matches=0,this._occ=new Array(256).fill(e),this._lookbehind_size=0,this._needle=A,this._bufpos=0,this._lookbehind=Buffer.alloc(e);for(var t=0;t<e-1;++t)this._occ[A[t]]=e-1-t}return(0,g.inherits)(e,A),e.prototype.reset=function(){this._lookbehind_size=0,this.matches=0,this._bufpos=0},e.prototype.push=function(A,e){Buffer.isBuffer(A)||(A=Buffer.from(A,"binary"));const t=A.length;let n;for(this._bufpos=e||0;n!==t&&this.matches<this.maxMatches;)n=this._sbmh_feed(A);return n},e.prototype._sbmh_feed=function(A){const e=A.length,t=this._needle,n=t.length,s=t[n-1];let r,o=-this._lookbehind_size;if(o<0){for(;o<0&&o<=e-n;){if(r=this._sbmh_lookup_char(A,o+n-1),r===s&&this._sbmh_memcmp(A,o,n-1))return this._lookbehind_size=0,++this.matches,this.emit("info",!0),this._bufpos=o+n;o+=this._occ[r]}if(o<0)for(;o<0&&!this._sbmh_memcmp(A,o,e-o);)++o;if(!(o>=0)){const t=this._lookbehind_size+o;return t>0&&this.emit("info",!1,this._lookbehind,0,t),this._lookbehind.copy(this._lookbehind,0,t,this._lookbehind_size-t),this._lookbehind_size-=t,A.copy(this._lookbehind,this._lookbehind_size),this._lookbehind_size+=e,this._bufpos=e,e}this.emit("info",!1,this._lookbehind,0,this._lookbehind_size),this._lookbehind_size=0}if(o+=(o>=0)*this._bufpos,-1!==A.indexOf(t,o))return o=A.indexOf(t,o),++this.matches,o>0?this.emit("info",!0,A,this._bufpos,o):this.emit("info",!0),this._bufpos=o+n;for(o=e-n;o<e&&(A[o]!==t[0]||0!==Buffer.compare(A.subarray(o,o+e-o),t.subarray(0,e-o)));)++o;return o<e&&(A.copy(this._lookbehind,0,o,o+(e-o)),this._lookbehind_size=e-o),o>0&&this.emit("info",!1,A,this._bufpos,o<e?o:e),this._bufpos=e,e},e.prototype._sbmh_lookup_char=function(A,e){return e<0?this._lookbehind[this._lookbehind_size+e]:A[e]},e.prototype._sbmh_memcmp=function(A,e,t){for(var n=0;n<t;++n)if(this._sbmh_lookup_char(A,e+n)!==this._needle[n])return!1;return!0},aA=e}function re(){return hA?QA:(hA=1,QA=function(A,e,t){if(!A||void 0===A[e]||null===A[e])return t;if("number"!=typeof A[e]||isNaN(A[e]))throw new TypeError("Limit "+e+" is not a valid number");return A[e]})}function oe(){if(IA)return BA;IA=1;const A=E.Writable,e=g.inherits,t=se(),n=function(){if(EA)return gA;EA=1;const A=g.inherits,e=E.Readable;function t(A){e.call(this,A)}return A(t,e),t.prototype._read=function(A){},gA=t}(),s=function(){if(CA)return lA;CA=1;const A=a.EventEmitter,e=g.inherits,t=re(),n=se(),s=Buffer.from("\r\n\r\n"),r=/\r\n/g,o=/^([^:]+):[ \t]?([\x00-\xFF]+)?$/;function i(e){A.call(this),e=e||{};const r=this;this.nread=0,this.maxed=!1,this.npairs=0,this.maxHeaderPairs=t(e,"maxHeaderPairs",2e3),this.maxHeaderSize=t(e,"maxHeaderSize",81920),this.buffer="",this.header={},this.finished=!1,this.ss=new n(s),this.ss.on("info",(function(A,e,t,n){e&&!r.maxed&&(r.nread+n-t>=r.maxHeaderSize?(n=r.maxHeaderSize-r.nread+t,r.nread=r.maxHeaderSize,r.maxed=!0):r.nread+=n-t,r.buffer+=e.toString("binary",t,n)),A&&r._finish()}))}return e(i,A),i.prototype.push=function(A){const e=this.ss.push(A);if(this.finished)return e},i.prototype.reset=function(){this.finished=!1,this.buffer="",this.header={},this.ss.reset()},i.prototype._finish=function(){this.buffer&&this._parseHeader(),this.ss.matches=this.ss.maxMatches;const A=this.header;this.header={},this.buffer="",this.finished=!0,this.nread=this.npairs=0,this.maxed=!1,this.emit("header",A)},i.prototype._parseHeader=function(){if(this.npairs===this.maxHeaderPairs)return;const A=this.buffer.split(r),e=A.length;let t,n;for(var s=0;s<e;++s){if(0===A[s].length)continue;if(("\t"===A[s][0]||" "===A[s][0])&&n){this.header[n][this.header[n].length-1]+=A[s];continue}const e=A[s].indexOf(":");if(-1===e||0===e)return;if(t=o.exec(A[s]),n=t[1].toLowerCase(),this.header[n]=this.header[n]||[],this.header[n].push(t[2]||""),++this.npairs===this.maxHeaderPairs)break}},lA=i}(),r=Buffer.from("-"),o=Buffer.from("\r\n"),i=function(){};function c(e){if(!(this instanceof c))return new c(e);if(A.call(this,e),!e||!e.headerFirst&&"string"!=typeof e.boundary)throw new TypeError("Boundary required");"string"==typeof e.boundary?this.setBoundary(e.boundary):this._bparser=void 0,this._headerFirst=e.headerFirst,this._dashes=0,this._parts=0,this._finished=!1,this._realFinish=!1,this._isPreamble=!0,this._justMatched=!1,this._firstWrite=!0,this._inHeader=!0,this._part=void 0,this._cb=void 0,this._ignoreData=!1,this._partOpts={highWaterMark:e.partHwm},this._pause=!1;const t=this;this._hparser=new s(e),this._hparser.on("header",(function(A){t._inHeader=!1,t._part.emit("header",A)}))}return e(c,A),c.prototype.emit=function(e){if("finish"!==e||this._realFinish)A.prototype.emit.apply(this,arguments);else if(!this._finished){const A=this;process.nextTick((function(){if(A.emit("error",new Error("Unexpected end of multipart data")),A._part&&!A._ignoreData){const e=A._isPreamble?"Preamble":"Part";return A._part.emit("error",new Error(e+" terminated early due to unexpected end of multipart data")),A._part.push(null),void process.nextTick((function(){A._realFinish=!0,A.emit("finish"),A._realFinish=!1}))}A._realFinish=!0,A.emit("finish"),A._realFinish=!1}))}},c.prototype._write=function(A,e,t){if(!this._hparser&&!this._bparser)return t();if(this._headerFirst&&this._isPreamble){this._part||(this._part=new n(this._partOpts),0!==this.listenerCount("preamble")?this.emit("preamble",this._part):this._ignore());const e=this._hparser.push(A);if(this._inHeader||void 0===e||!(e<A.length))return t();A=A.slice(e)}this._firstWrite&&(this._bparser.push(o),this._firstWrite=!1),this._bparser.push(A),this._pause?this._cb=t:t()},c.prototype.reset=function(){this._part=void 0,this._bparser=void 0,this._hparser=void 0},c.prototype.setBoundary=function(A){const e=this;this._bparser=new t("\r\n--"+A),this._bparser.on("info",(function(A,t,n,s){e._oninfo(A,t,n,s)}))},c.prototype._ignore=function(){this._part&&!this._ignoreData&&(this._ignoreData=!0,this._part.on("error",i),this._part.resume())},c.prototype._oninfo=function(A,e,t,s){let o;const i=this;let a,c=0,g=!0;if(!this._part&&this._justMatched&&e){for(;this._dashes<2&&t+c<s;){if(45!==e[t+c]){this._dashes&&(o=r),this._dashes=0;break}++c,++this._dashes}if(2===this._dashes&&(t+c<s&&0!==this.listenerCount("trailer")&&this.emit("trailer",e.slice(t+c,s)),this.reset(),this._finished=!0,0===i._parts&&(i._realFinish=!0,i.emit("finish"),i._realFinish=!1)),this._dashes)return}this._justMatched&&(this._justMatched=!1),this._part||(this._part=new n(this._partOpts),this._part._read=function(A){i._unpause()},this._isPreamble&&0!==this.listenerCount("preamble")?this.emit("preamble",this._part):!0!==this._isPreamble&&0!==this.listenerCount("part")?this.emit("part",this._part):this._ignore(),this._isPreamble||(this._inHeader=!0)),e&&t<s&&!this._ignoreData&&(this._isPreamble||!this._inHeader?(o&&(g=this._part.push(o)),g=this._part.push(e.slice(t,s)),g||(this._pause=!0)):!this._isPreamble&&this._inHeader&&(o&&this._hparser.push(o),a=this._hparser.push(e.slice(t,s)),!this._inHeader&&void 0!==a&&a<s&&this._oninfo(!1,e,t+a,s))),A&&(this._hparser.reset(),this._isPreamble?this._isPreamble=!1:t!==s&&(++this._parts,this._part.on("end",(function(){0==--i._parts&&(i._finished?(i._realFinish=!0,i.emit("finish"),i._realFinish=!1):i._unpause())}))),this._part.push(null),this._part=void 0,this._ignoreData=!1,this._justMatched=!0,this._dashes=0)},c.prototype._unpause=function(){if(this._pause&&(this._pause=!1,this._cb)){const A=this._cb;this._cb=void 0,A()}},BA=c}function ie(){if(dA)return uA;dA=1;const A=new TextDecoder("utf-8"),e=new Map([["utf-8",A],["utf8",A]]);const t={utf8:(A,e)=>0===A.length?"":("string"==typeof A&&(A=Buffer.from(A,e)),A.utf8Slice(0,A.length)),latin1:(A,e)=>0===A.length?"":"string"==typeof A?A:A.latin1Slice(0,A.length),utf16le:(A,e)=>0===A.length?"":("string"==typeof A&&(A=Buffer.from(A,e)),A.ucs2Slice(0,A.length)),base64:(A,e)=>0===A.length?"":("string"==typeof A&&(A=Buffer.from(A,e)),A.base64Slice(0,A.length)),other:(A,t)=>{if(0===A.length)return"";if("string"==typeof A&&(A=Buffer.from(A,t)),e.has(this.toString()))try{return e.get(this).decode(A)}catch{}return"string"==typeof A?A:A.toString()}};return uA=function(A,e,n){return A?function(A){let e;for(;;)switch(A){case"utf-8":case"utf8":return t.utf8;case"latin1":case"ascii":case"us-ascii":case"iso-8859-1":case"iso8859-1":case"iso88591":case"iso_8859-1":case"windows-1252":case"iso_8859-1:1987":case"cp1252":case"x-cp1252":return t.latin1;case"utf16le":case"utf-16le":case"ucs2":case"ucs-2":return t.utf16le;case"base64":return t.base64;default:if(void 0===e){e=!0,A=A.toLowerCase();continue}return t.other.bind(A)}}(n)(A,e):A}}function ae(){if(pA)return fA;pA=1;const A=ie(),e=/%[a-fA-F0-9][a-fA-F0-9]/g,t={"%00":"\0","%01":"","%02":"","%03":"","%04":"","%05":"","%06":"","%07":"","%08":"\b","%09":"\t","%0a":"\n","%0A":"\n","%0b":"\v","%0B":"\v","%0c":"\f","%0C":"\f","%0d":"\r","%0D":"\r","%0e":"","%0E":"","%0f":"","%0F":"","%10":"","%11":"","%12":"","%13":"","%14":"","%15":"","%16":"","%17":"","%18":"","%19":"","%1a":"","%1A":"","%1b":"","%1B":"","%1c":"","%1C":"","%1d":"","%1D":"","%1e":"","%1E":"","%1f":"","%1F":"","%20":" ","%21":"!","%22":'"',"%23":"#","%24":"$","%25":"%","%26":"&","%27":"'","%28":"(","%29":")","%2a":"*","%2A":"*","%2b":"+","%2B":"+","%2c":",","%2C":",","%2d":"-","%2D":"-","%2e":".","%2E":".","%2f":"/","%2F":"/","%30":"0","%31":"1","%32":"2","%33":"3","%34":"4","%35":"5","%36":"6","%37":"7","%38":"8","%39":"9","%3a":":","%3A":":","%3b":";","%3B":";","%3c":"<","%3C":"<","%3d":"=","%3D":"=","%3e":">","%3E":">","%3f":"?","%3F":"?","%40":"@","%41":"A","%42":"B","%43":"C","%44":"D","%45":"E","%46":"F","%47":"G","%48":"H","%49":"I","%4a":"J","%4A":"J","%4b":"K","%4B":"K","%4c":"L","%4C":"L","%4d":"M","%4D":"M","%4e":"N","%4E":"N","%4f":"O","%4F":"O","%50":"P","%51":"Q","%52":"R","%53":"S","%54":"T","%55":"U","%56":"V","%57":"W","%58":"X","%59":"Y","%5a":"Z","%5A":"Z","%5b":"[","%5B":"[","%5c":"\\","%5C":"\\","%5d":"]","%5D":"]","%5e":"^","%5E":"^","%5f":"_","%5F":"_","%60":"`","%61":"a","%62":"b","%63":"c","%64":"d","%65":"e","%66":"f","%67":"g","%68":"h","%69":"i","%6a":"j","%6A":"j","%6b":"k","%6B":"k","%6c":"l","%6C":"l","%6d":"m","%6D":"m","%6e":"n","%6E":"n","%6f":"o","%6F":"o","%70":"p","%71":"q","%72":"r","%73":"s","%74":"t","%75":"u","%76":"v","%77":"w","%78":"x","%79":"y","%7a":"z","%7A":"z","%7b":"{","%7B":"{","%7c":"|","%7C":"|","%7d":"}","%7D":"}","%7e":"~","%7E":"~","%7f":"","%7F":"","%80":"","%81":"","%82":"","%83":"","%84":"","%85":"","%86":"","%87":"","%88":"","%89":"","%8a":"","%8A":"","%8b":"","%8B":"","%8c":"","%8C":"","%8d":"","%8D":"","%8e":"","%8E":"","%8f":"","%8F":"","%90":"","%91":"","%92":"","%93":"","%94":"","%95":"","%96":"","%97":"","%98":"","%99":"","%9a":"","%9A":"","%9b":"","%9B":"","%9c":"","%9C":"","%9d":"","%9D":"","%9e":"","%9E":"","%9f":"","%9F":"","%a0":" ","%A0":" ","%a1":"¡","%A1":"¡","%a2":"¢","%A2":"¢","%a3":"£","%A3":"£","%a4":"¤","%A4":"¤","%a5":"¥","%A5":"¥","%a6":"¦","%A6":"¦","%a7":"§","%A7":"§","%a8":"¨","%A8":"¨","%a9":"©","%A9":"©","%aa":"ª","%Aa":"ª","%aA":"ª","%AA":"ª","%ab":"«","%Ab":"«","%aB":"«","%AB":"«","%ac":"¬","%Ac":"¬","%aC":"¬","%AC":"¬","%ad":"­","%Ad":"­","%aD":"­","%AD":"­","%ae":"®","%Ae":"®","%aE":"®","%AE":"®","%af":"¯","%Af":"¯","%aF":"¯","%AF":"¯","%b0":"°","%B0":"°","%b1":"±","%B1":"±","%b2":"²","%B2":"²","%b3":"³","%B3":"³","%b4":"´","%B4":"´","%b5":"µ","%B5":"µ","%b6":"¶","%B6":"¶","%b7":"·","%B7":"·","%b8":"¸","%B8":"¸","%b9":"¹","%B9":"¹","%ba":"º","%Ba":"º","%bA":"º","%BA":"º","%bb":"»","%Bb":"»","%bB":"»","%BB":"»","%bc":"¼","%Bc":"¼","%bC":"¼","%BC":"¼","%bd":"½","%Bd":"½","%bD":"½","%BD":"½","%be":"¾","%Be":"¾","%bE":"¾","%BE":"¾","%bf":"¿","%Bf":"¿","%bF":"¿","%BF":"¿","%c0":"À","%C0":"À","%c1":"Á","%C1":"Á","%c2":"Â","%C2":"Â","%c3":"Ã","%C3":"Ã","%c4":"Ä","%C4":"Ä","%c5":"Å","%C5":"Å","%c6":"Æ","%C6":"Æ","%c7":"Ç","%C7":"Ç","%c8":"È","%C8":"È","%c9":"É","%C9":"É","%ca":"Ê","%Ca":"Ê","%cA":"Ê","%CA":"Ê","%cb":"Ë","%Cb":"Ë","%cB":"Ë","%CB":"Ë","%cc":"Ì","%Cc":"Ì","%cC":"Ì","%CC":"Ì","%cd":"Í","%Cd":"Í","%cD":"Í","%CD":"Í","%ce":"Î","%Ce":"Î","%cE":"Î","%CE":"Î","%cf":"Ï","%Cf":"Ï","%cF":"Ï","%CF":"Ï","%d0":"Ð","%D0":"Ð","%d1":"Ñ","%D1":"Ñ","%d2":"Ò","%D2":"Ò","%d3":"Ó","%D3":"Ó","%d4":"Ô","%D4":"Ô","%d5":"Õ","%D5":"Õ","%d6":"Ö","%D6":"Ö","%d7":"×","%D7":"×","%d8":"Ø","%D8":"Ø","%d9":"Ù","%D9":"Ù","%da":"Ú","%Da":"Ú","%dA":"Ú","%DA":"Ú","%db":"Û","%Db":"Û","%dB":"Û","%DB":"Û","%dc":"Ü","%Dc":"Ü","%dC":"Ü","%DC":"Ü","%dd":"Ý","%Dd":"Ý","%dD":"Ý","%DD":"Ý","%de":"Þ","%De":"Þ","%dE":"Þ","%DE":"Þ","%df":"ß","%Df":"ß","%dF":"ß","%DF":"ß","%e0":"à","%E0":"à","%e1":"á","%E1":"á","%e2":"â","%E2":"â","%e3":"ã","%E3":"ã","%e4":"ä","%E4":"ä","%e5":"å","%E5":"å","%e6":"æ","%E6":"æ","%e7":"ç","%E7":"ç","%e8":"è","%E8":"è","%e9":"é","%E9":"é","%ea":"ê","%Ea":"ê","%eA":"ê","%EA":"ê","%eb":"ë","%Eb":"ë","%eB":"ë","%EB":"ë","%ec":"ì","%Ec":"ì","%eC":"ì","%EC":"ì","%ed":"í","%Ed":"í","%eD":"í","%ED":"í","%ee":"î","%Ee":"î","%eE":"î","%EE":"î","%ef":"ï","%Ef":"ï","%eF":"ï","%EF":"ï","%f0":"ð","%F0":"ð","%f1":"ñ","%F1":"ñ","%f2":"ò","%F2":"ò","%f3":"ó","%F3":"ó","%f4":"ô","%F4":"ô","%f5":"õ","%F5":"õ","%f6":"ö","%F6":"ö","%f7":"÷","%F7":"÷","%f8":"ø","%F8":"ø","%f9":"ù","%F9":"ù","%fa":"ú","%Fa":"ú","%fA":"ú","%FA":"ú","%fb":"û","%Fb":"û","%fB":"û","%FB":"û","%fc":"ü","%Fc":"ü","%fC":"ü","%FC":"ü","%fd":"ý","%Fd":"ý","%fD":"ý","%FD":"ý","%fe":"þ","%Fe":"þ","%fE":"þ","%FE":"þ","%ff":"ÿ","%Ff":"ÿ","%fF":"ÿ","%FF":"ÿ"};function n(A){return t[A]}return fA=function(t){const s=[];let r=0,o="",i=!1,a=!1,c=0,g="";const E=t.length;for(var Q=0;Q<E;++Q){const E=t[Q];if("\\"===E&&i){if(!a){a=!0;continue}a=!1}else if('"'===E){if(!a){i?(i=!1,r=0):i=!0;continue}a=!1}else{if(a&&i&&(g+="\\"),a=!1,(2===r||3===r)&&"'"===E){2===r?(r=3,o=g.substring(1)):r=1,g="";continue}if(0===r&&("*"===E||"="===E)&&s.length){r="*"===E?2:1,s[c]=[g,void 0],g="";continue}if(!i&&";"===E){r=0,o?(g.length&&(g=A(g.replace(e,n),"binary",o)),o=""):g.length&&(g=A(g,"binary","utf8")),void 0===s[c]?s[c]=g:s[c][1]=g,g="",++c;continue}if(!i&&(" "===E||"\t"===E))continue}g+=E}return o&&g.length?g=A(g.replace(e,n),"binary",o):g&&(g=A(g,"binary","utf8")),void 0===s[c]?g&&(s[c]=g):s[c][1]=g,s}}function ce(){return mA?yA:(mA=1,yA=function(A){if("string"!=typeof A)return"";for(var e=A.length-1;e>=0;--e)switch(A.charCodeAt(e)){case 47:case 92:return".."===(A=A.slice(e+1))||"."===A?"":A}return".."===A||"."===A?"":A})}function ge(){if(NA)return RA;NA=1;const A=function(){if(bA)return kA;bA=1;const A=/\+/g,e=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];function t(){this.buffer=void 0}return t.prototype.write=function(t){let n="",s=0,r=0;const o=(t=t.replace(A," ")).length;for(;s<o;++s)void 0!==this.buffer?e[t.charCodeAt(s)]?(this.buffer+=t[s],++r,2===this.buffer.length&&(n+=String.fromCharCode(parseInt(this.buffer,16)),this.buffer=void 0)):(n+="%"+this.buffer,this.buffer=void 0,--s):"%"===t[s]&&(s>r&&(n+=t.substring(r,s),r=s),this.buffer="",++r);return r<o&&void 0===this.buffer&&(n+=t.substring(r)),n},t.prototype.reset=function(){this.buffer=void 0},kA=t}(),e=ie(),t=re(),n=/^charset$/i;function s(e,s){const r=s.limits,o=s.parsedConType;let i;this.boy=e,this.fieldSizeLimit=t(r,"fieldSize",1048576),this.fieldNameSizeLimit=t(r,"fieldNameSize",100),this.fieldsLimit=t(r,"fields",1/0);for(var a=0,c=o.length;a<c;++a)if(Array.isArray(o[a])&&n.test(o[a][0])){i=o[a][1].toLowerCase();break}void 0===i&&(i=s.defCharset||"utf8"),this.decoder=new A,this.charset=i,this._fields=0,this._state="key",this._checkingBytes=!0,this._bytesKey=0,this._bytesVal=0,this._key="",this._val="",this._keyTrunc=!1,this._valTrunc=!1,this._hitLimit=!1}return s.detect=/^application\/x-www-form-urlencoded/i,s.prototype.write=function(A,t){if(this._fields===this.fieldsLimit)return this.boy.hitFieldsLimit||(this.boy.hitFieldsLimit=!0,this.boy.emit("fieldsLimit")),t();let n,s,r,o=0;const i=A.length;for(;o<i;)if("key"===this._state){for(n=s=void 0,r=o;r<i;++r){if(this._checkingBytes||++o,61===A[r]){n=r;break}if(38===A[r]){s=r;break}if(this._checkingBytes&&this._bytesKey===this.fieldNameSizeLimit){this._hitLimit=!0;break}this._checkingBytes&&++this._bytesKey}if(void 0!==n)n>o&&(this._key+=this.decoder.write(A.toString("binary",o,n))),this._state="val",this._hitLimit=!1,this._checkingBytes=!0,this._val="",this._bytesVal=0,this._valTrunc=!1,this.decoder.reset(),o=n+1;else if(void 0!==s){let n;++this._fields;const r=this._keyTrunc;if(n=s>o?this._key+=this.decoder.write(A.toString("binary",o,s)):this._key,this._hitLimit=!1,this._checkingBytes=!0,this._key="",this._bytesKey=0,this._keyTrunc=!1,this.decoder.reset(),n.length&&this.boy.emit("field",e(n,"binary",this.charset),"",r,!1),o=s+1,this._fields===this.fieldsLimit)return t()}else this._hitLimit?(r>o&&(this._key+=this.decoder.write(A.toString("binary",o,r))),o=r,(this._bytesKey=this._key.length)===this.fieldNameSizeLimit&&(this._checkingBytes=!1,this._keyTrunc=!0)):(o<i&&(this._key+=this.decoder.write(A.toString("binary",o))),o=i)}else{for(s=void 0,r=o;r<i;++r){if(this._checkingBytes||++o,38===A[r]){s=r;break}if(this._checkingBytes&&this._bytesVal===this.fieldSizeLimit){this._hitLimit=!0;break}this._checkingBytes&&++this._bytesVal}if(void 0!==s){if(++this._fields,s>o&&(this._val+=this.decoder.write(A.toString("binary",o,s))),this.boy.emit("field",e(this._key,"binary",this.charset),e(this._val,"binary",this.charset),this._keyTrunc,this._valTrunc),this._state="key",this._hitLimit=!1,this._checkingBytes=!0,this._key="",this._bytesKey=0,this._keyTrunc=!1,this.decoder.reset(),o=s+1,this._fields===this.fieldsLimit)return t()}else this._hitLimit?(r>o&&(this._val+=this.decoder.write(A.toString("binary",o,r))),o=r,(""===this._val&&0===this.fieldSizeLimit||(this._bytesVal=this._val.length)===this.fieldSizeLimit)&&(this._checkingBytes=!1,this._valTrunc=!0)):(o<i&&(this._val+=this.decoder.write(A.toString("binary",o))),o=i)}t()},s.prototype.end=function(){this.boy._done||("key"===this._state&&this._key.length>0?this.boy.emit("field",e(this._key,"binary",this.charset),"",this._keyTrunc,!1):"val"===this._state&&this.boy.emit("field",e(this._key,"binary",this.charset),e(this._val,"binary",this.charset),this._keyTrunc,this._valTrunc),this.boy._done=!0,this.boy.emit("finish"))},RA=s}function Ee(){if(SA)return ne.exports;SA=1;const A=E.Writable,{inherits:e}=g,t=oe(),n=function(){if(DA)return wA;DA=1;const{Readable:A}=E,{inherits:e}=g,t=oe(),n=ae(),s=ie(),r=ce(),o=re(),i=/^boundary$/i,a=/^form-data$/i,c=/^charset$/i,Q=/^filename$/i,h=/^name$/i;function l(A,e){let g,E;const l=this;let I;const u=e.limits,d=e.isPartAFile||((A,e,t)=>"application/octet-stream"===e||void 0!==t),f=e.parsedConType||[],p=e.defCharset||"utf8",y=e.preservePath,m={highWaterMark:e.fileHwm};for(g=0,E=f.length;g<E;++g)if(Array.isArray(f[g])&&i.test(f[g][0])){I=f[g][1];break}function w(){0===T&&Y&&!A._done&&(Y=!1,l.end())}if("string"!=typeof I)throw new Error("Multipart: Boundary not found");const D=o(u,"fieldSize",1048576),k=o(u,"fileSize",1/0),b=o(u,"files",1/0),R=o(u,"fields",1/0),N=o(u,"parts",1/0),S=o(u,"headerPairs",2e3),F=o(u,"headerSize",81920);let U,L,M=0,v=0,T=0,Y=!1;this._needDrain=!1,this._pause=!1,this._cb=void 0,this._nparts=0,this._boy=A;const J={boundary:I,maxHeaderPairs:S,maxHeaderSize:F,partHwm:m.highWaterMark,highWaterMark:e.highWaterMark};this.parser=new t(J),this.parser.on("drain",(function(){if(l._needDrain=!1,l._cb&&!l._pause){const A=l._cb;l._cb=void 0,A()}})).on("part",(function e(t){if(++l._nparts>N)return l.parser.removeListener("part",e),l.parser.on("part",C),A.hitPartsLimit=!0,A.emit("partsLimit"),C(t);if(L){const A=L;A.emit("end"),A.removeAllListeners("end")}t.on("header",(function(e){let o,i,I,u,f,N,S,F,Y=0;if(e["content-type"]&&(I=n(e["content-type"][0]),I[0]))for(o=I[0].toLowerCase(),g=0,E=I.length;g<E;++g)if(c.test(I[g][0])){u=I[g][1].toLowerCase();break}if(void 0===o&&(o="text/plain"),void 0===u&&(u=p),!e["content-disposition"])return C(t);if(I=n(e["content-disposition"][0]),!a.test(I[0]))return C(t);for(g=0,E=I.length;g<E;++g)h.test(I[g][0])?i=I[g][1]:Q.test(I[g][0])&&(N=I[g][1],y||(N=r(N)));if(f=e["content-transfer-encoding"]?e["content-transfer-encoding"][0].toLowerCase():"7bit",d(i,o,N)){if(M===b)return A.hitFilesLimit||(A.hitFilesLimit=!0,A.emit("filesLimit")),C(t);if(++M,0===A.listenerCount("file"))return void l.parser._ignore();++T;const e=new B(m);U=e,e.on("end",(function(){if(--T,l._pause=!1,w(),l._cb&&!l._needDrain){const A=l._cb;l._cb=void 0,A()}})),e._read=function(A){if(l._pause&&(l._pause=!1,l._cb&&!l._needDrain)){const A=l._cb;l._cb=void 0,A()}},A.emit("file",i,e,N,f,o),S=function(A){if((Y+=A.length)>k){const n=k-Y+A.length;return n>0&&e.push(A.slice(0,n)),e.truncated=!0,e.bytesRead=k,t.removeAllListeners("data"),void e.emit("limit")}e.push(A)||(l._pause=!0),e.bytesRead=Y},F=function(){U=void 0,e.push(null)}}else{if(v===R)return A.hitFieldsLimit||(A.hitFieldsLimit=!0,A.emit("fieldsLimit")),C(t);++v,++T;let e="",n=!1;L=t,S=function(A){if((Y+=A.length)>D){const s=D-(Y-A.length);e+=A.toString("binary",0,s),n=!0,t.removeAllListeners("data")}else e+=A.toString("binary")},F=function(){L=void 0,e.length&&(e=s(e,"binary",u)),A.emit("field",i,e,!1,n,f,o),--T,w()}}t._readableState.sync=!1,t.on("data",S),t.on("end",F)})).on("error",(function(A){U&&U.emit("error",A)}))})).on("error",(function(e){A.emit("error",e)})).on("finish",(function(){Y=!0,w()}))}function C(A){A.resume()}function B(e){A.call(this,e),this.bytesRead=0,this.truncated=!1}return l.detect=/^multipart\/form-data/i,l.prototype.write=function(A,e){const t=this.parser.write(A);t&&!this._pause?e():(this._needDrain=!t,this._cb=e)},l.prototype.end=function(){const A=this;A.parser.writable?A.parser.end():A._boy._done||process.nextTick((function(){A._boy._done=!0,A._boy.emit("finish")}))},e(B,A),B.prototype._read=function(A){},wA=l}(),s=ge(),r=ae();function o(e){if(!(this instanceof o))return new o(e);if("object"!=typeof e)throw new TypeError("Busboy expected an options-Object.");if("object"!=typeof e.headers)throw new TypeError("Busboy expected an options-Object with headers-attribute.");if("string"!=typeof e.headers["content-type"])throw new TypeError("Missing Content-Type-header.");const{headers:t,...n}=e;this.opts={autoDestroy:!1,...n},A.call(this,this.opts),this._done=!1,this._parser=this.getParserByHeaders(t),this._finished=!1}return e(o,A),o.prototype.emit=function(e){if("finish"===e){if(!this._done)return void this._parser?.end();if(this._finished)return;this._finished=!0}A.prototype.emit.apply(this,arguments)},o.prototype.getParserByHeaders=function(A){const e=r(A["content-type"]),t={defCharset:this.opts.defCharset,fileHwm:this.opts.fileHwm,headers:A,highWaterMark:this.opts.highWaterMark,isPartAFile:this.opts.isPartAFile,limits:this.opts.limits,parsedConType:e,preservePath:this.opts.preservePath};if(n.detect.test(e[0]))return new n(this,t);if(s.detect.test(e[0]))return new s(this,t);throw new Error("Unsupported Content-Type.")},o.prototype._write=function(A,e,t){this._parser.write(A,t)},ne.exports=o,ne.exports.default=o,ne.exports.Busboy=o,ne.exports.Dicer=t,ne.exports}function Qe(){if(UA)return FA;UA=1;const{MessageChannel:A,receiveMessageOnPort:e}=C,t=["GET","HEAD","POST"],n=new Set(t),s=[301,302,303,307,308],r=new Set(s),o=["1","7","9","11","13","15","17","19","20","21","22","23","25","37","42","43","53","69","77","79","87","95","101","102","103","104","109","110","111","113","115","117","119","123","135","137","139","143","161","179","389","427","465","512","513","514","515","526","530","531","532","540","548","554","556","563","587","601","636","989","990","993","995","1719","1720","1723","2049","3659","4045","5060","5061","6000","6566","6665","6666","6667","6668","6669","6697","10080"],i=new Set(o),a=["","no-referrer","no-referrer-when-downgrade","same-origin","origin","strict-origin","origin-when-cross-origin","strict-origin-when-cross-origin","unsafe-url"],c=new Set(a),g=["GET","HEAD","OPTIONS","TRACE"],E=new Set(g),Q=["CONNECT","TRACE","TRACK"],h=new Set(Q),l=["audio","audioworklet","font","image","manifest","paintworklet","script","style","track","video","xslt",""],B=new Set(l),I=globalThis.DOMException??(()=>{try{atob("~")}catch(A){return Object.getPrototypeOf(A).constructor}})();let u;const d=globalThis.structuredClone??function(t,n=void 0){if(0===arguments.length)throw new TypeError("missing argument");return u||(u=new A),u.port1.unref(),u.port2.unref(),u.port1.postMessage(t,n?.transfer),e(u.port2).message};return FA={DOMException:I,structuredClone:d,subresource:l,forbiddenMethods:Q,requestBodyHeader:["content-encoding","content-language","content-location","content-type","content-length"],referrerPolicy:a,requestRedirect:["follow","manual","error"],requestMode:["navigate","same-origin","no-cors","cors"],requestCredentials:["omit","same-origin","include"],requestCache:["default","no-store","reload","no-cache","force-cache","only-if-cached"],redirectStatus:s,corsSafeListedMethods:t,nullBodyStatus:[101,204,205,304],safeMethods:g,badPorts:o,requestDuplex:["half"],subresourceSet:B,badPortsSet:i,redirectStatusSet:r,corsSafeListedMethodsSet:n,safeMethodsSet:E,forbiddenMethodsSet:h,referrerPolicySet:c}}function he(){if(MA)return LA;MA=1;const A=Symbol.for("undici.globalOrigin.1");return LA={getGlobalOrigin:function(){return globalThis[A]},setGlobalOrigin:function(e){if(void 0===e)return void Object.defineProperty(globalThis,A,{value:void 0,writable:!0,enumerable:!1,configurable:!1});const t=new URL(e);if("http:"!==t.protocol&&"https:"!==t.protocol)throw new TypeError(`Only http & https urls are allowed, received ${t.protocol}`);Object.defineProperty(globalThis,A,{value:t,writable:!0,enumerable:!1,configurable:!1})}}}function le(){if(TA)return vA;TA=1;const{redirectStatusSet:A,referrerPolicySet:e,badPortsSet:t}=Qe(),{getGlobalOrigin:n}=he(),{performance:s}=B,{isBlobLike:r,toUSVString:o,ReadableStreamFrom:i}=oA(),a=c,{isUint8Array:g}=I;let E,Q=[];try{E=require("crypto");const A=["sha256","sha384","sha512"];Q=E.getHashes().filter((e=>A.includes(e)))}catch{}function h(A){const e=A.urlList,t=e.length;return 0===t?null:e[t-1].toString()}function C(A){return A.urlList[A.urlList.length-1]}function u(A){switch(A){case 34:case 40:case 41:case 44:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 123:case 125:return!1;default:return A>=33&&A<=126}}function d(A){if(0===A.length)return!1;for(let e=0;e<A.length;++e)if(!u(A.charCodeAt(e)))return!1;return!0}function f(A){return!(A.startsWith("\t")||A.startsWith(" ")||A.endsWith("\t")||A.endsWith(" "))&&!(A.includes("\0")||A.includes("\r")||A.includes("\n"))}function p(A,e){return a(A instanceof URL),"file:"===A.protocol||"about:"===A.protocol||"blank:"===A.protocol?"no-referrer":(A.username="",A.password="",A.hash="",e&&(A.pathname="",A.search=""),A)}function y(A){return A instanceof URL&&("about:blank"===A.href||"about:srcdoc"===A.href||("data:"===A.protocol||("file:"===A.protocol||function(A){if(null==A||"null"===A)return!1;const e=new URL(A);if("https:"===e.protocol||"wss:"===e.protocol)return!0;if(/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(e.hostname)||"localhost"===e.hostname||e.hostname.includes("localhost.")||e.hostname.endsWith(".localhost"))return!0;return!1}(A.origin))))}const m=/(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;function w(A){const e=[];let t=!0;for(const n of A.split(" ")){t=!1;const A=m.exec(n);if(null===A||void 0===A.groups||void 0===A.groups.algo)continue;const s=A.groups.algo.toLowerCase();Q.includes(s)&&e.push(A.groups)}return!0===t?"no metadata":e}function D(A,e){if(A.length!==e.length)return!1;for(let t=0;t<A.length;++t)if(A[t]!==e[t]){if("+"===A[t]&&"-"===e[t]||"/"===A[t]&&"_"===e[t])continue;return!1}return!0}function k(A,e){return A.origin===e.origin&&"null"===A.origin||A.protocol===e.protocol&&A.hostname===e.hostname&&A.port===e.port}const b={delete:"DELETE",DELETE:"DELETE",get:"GET",GET:"GET",head:"HEAD",HEAD:"HEAD",options:"OPTIONS",OPTIONS:"OPTIONS",post:"POST",POST:"POST",put:"PUT",PUT:"PUT"};Object.setPrototypeOf(b,null);const R=Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));let N=globalThis.ReadableStream;async function S(A){const e=[];let t=0;for(;;){const{done:n,value:s}=await A.read();if(n)return Buffer.concat(e,t);if(!g(s))throw new TypeError("Received non-Uint8Array chunk");e.push(s),t+=s.length}}function F(A){return"string"==typeof A?A.startsWith("https:"):"https:"===A.protocol}function U(A){a("protocol"in A);const e=A.protocol;return"http:"===e||"https:"===e}const L=Object.hasOwn||((A,e)=>Object.prototype.hasOwnProperty.call(A,e));return vA={isAborted:function(A){return"aborted"===A.controller.state},isCancelled:function(A){return"aborted"===A.controller.state||"terminated"===A.controller.state},createDeferredPromise:function(){let A,e;return{promise:new Promise(((t,n)=>{A=t,e=n})),resolve:A,reject:e}},ReadableStreamFrom:i,toUSVString:o,tryUpgradeRequestToAPotentiallyTrustworthyURL:function(A){},coarsenedSharedCurrentTime:function(A){return s.now()},determineRequestsReferrer:function(A){const e=A.referrerPolicy;a(e);let t=null;if("client"===A.referrer){const A=n();if(!A||"null"===A.origin)return"no-referrer";t=new URL(A)}else A.referrer instanceof URL&&(t=A.referrer);let s=p(t);const r=p(t,!0);s.toString().length>4096&&(s=r);const o=k(A,s),i=y(s)&&!y(A.url);switch(e){case"origin":return null!=r?r:p(t,!0);case"unsafe-url":return s;case"same-origin":return o?r:"no-referrer";case"origin-when-cross-origin":return o?s:r;case"strict-origin-when-cross-origin":{const e=C(A);return k(s,e)?s:y(s)&&!y(e)?"no-referrer":r}default:return i?"no-referrer":r}},makePolicyContainer:function(){return{referrerPolicy:"strict-origin-when-cross-origin"}},clonePolicyContainer:function(A){return{referrerPolicy:A.referrerPolicy}},appendFetchMetadata:function(A){let e=null;e=A.mode,A.headersList.set("sec-fetch-mode",e)},appendRequestOriginHeader:function(A){let e=A.origin;if("cors"===A.responseTainting||"websocket"===A.mode)e&&A.headersList.append("origin",e);else if("GET"!==A.method&&"HEAD"!==A.method){switch(A.referrerPolicy){case"no-referrer":e=null;break;case"no-referrer-when-downgrade":case"strict-origin":case"strict-origin-when-cross-origin":A.origin&&F(A.origin)&&!F(C(A))&&(e=null);break;case"same-origin":k(A,C(A))||(e=null)}e&&A.headersList.append("origin",e)}},TAOCheck:function(){return"success"},corsCheck:function(){return"success"},crossOriginResourcePolicyCheck:function(){return"allowed"},createOpaqueTimingInfo:function(A){return{startTime:A.startTime??0,redirectStartTime:0,redirectEndTime:0,postRedirectStartTime:A.startTime??0,finalServiceWorkerStartTime:0,finalNetworkResponseStartTime:0,finalNetworkRequestStartTime:0,endTime:0,encodedBodySize:0,decodedBodySize:0,finalConnectionTimingInfo:null}},setRequestReferrerPolicyOnRedirect:function(A,t){const{headersList:n}=t,s=(n.get("referrer-policy")??"").split(",");let r="";if(s.length>0)for(let A=s.length;0!==A;A--){const t=s[A-1].trim();if(e.has(t)){r=t;break}}""!==r&&(A.referrerPolicy=r)},isValidHTTPToken:d,requestBadPort:function(A){const e=C(A);return U(e)&&t.has(e.port)?"blocked":"allowed"},requestCurrentURL:C,responseURL:h,responseLocationURL:function(e,t){if(!A.has(e.status))return null;let n=e.headersList.get("location");return null!==n&&f(n)&&(n=new URL(n,h(e))),n&&!n.hash&&(n.hash=t),n},isBlobLike:r,isURLPotentiallyTrustworthy:y,isValidReasonPhrase:function(A){for(let e=0;e<A.length;++e){const t=A.charCodeAt(e);if(!(9===t||t>=32&&t<=126||t>=128&&t<=255))return!1}return!0},sameOrigin:k,normalizeMethod:function(A){return b[A.toLowerCase()]??A},serializeJavascriptValueToJSONString:function(A){const e=JSON.stringify(A);if(void 0===e)throw new TypeError("Value is not JSON serializable");return a("string"==typeof e),e},makeIterator:function(A,e,t){const n={index:0,kind:t,target:A},s={next(){if(Object.getPrototypeOf(this)!==s)throw new TypeError(`'next' called on an object that does not implement interface ${e} Iterator.`);const{index:A,kind:t,target:r}=n,o=r();if(A>=o.length)return{value:void 0,done:!0};const i=o[A];return n.index=A+1,function(A,e){let t;switch(e){case"key":t=A[0];break;case"value":t=A[1];break;case"key+value":t=A}return{value:t,done:!1}}(i,t)},[Symbol.toStringTag]:`${e} Iterator`};return Object.setPrototypeOf(s,R),Object.setPrototypeOf({},s)},isValidHeaderName:function(A){return d(A)},isValidHeaderValue:f,hasOwn:L,isErrorLike:function(A){return A instanceof Error||"Error"===A?.constructor?.name||"DOMException"===A?.constructor?.name},fullyReadBody:async function(A,e,t){const n=e,s=t;let r;try{r=A.stream.getReader()}catch(A){return void s(A)}try{n(await S(r))}catch(A){s(A)}},bytesMatch:function(A,e){if(void 0===E)return!0;const t=w(e);if("no metadata"===t)return!0;if(0===t.length)return!0;const n=function(A){let e=A[0].algo;if("5"===e[3])return e;for(let t=1;t<A.length;++t){const n=A[t];if("5"===n.algo[3]){e="sha512";break}"3"!==e[3]&&("3"===n.algo[3]&&(e="sha384"))}return e}(t),s=function(A,e){if(1===A.length)return A;let t=0;for(let n=0;n<A.length;++n)A[n].algo===e&&(A[t++]=A[n]);return A.length=t,A}(t,n);for(const e of s){const t=e.algo,n=e.hash;let s=E.createHash(t).update(A).digest("base64");if("="===s[s.length-1]&&(s="="===s[s.length-2]?s.slice(0,-2):s.slice(0,-1)),D(s,n))return!0}return!1},isReadableStreamLike:function(A){return N||(N=l.ReadableStream),A instanceof N||"ReadableStream"===A[Symbol.toStringTag]&&"function"==typeof A.tee},readableStreamClose:function(A){try{A.close()}catch(A){if(!A.message.includes("Controller is already closed"))throw A}},isomorphicEncode:function(A){for(let e=0;e<A.length;e++)a(A.charCodeAt(e)<=255);return A},isomorphicDecode:function(A){return A.length<65535?String.fromCharCode(...A):A.reduce(((A,e)=>A+String.fromCharCode(e)),"")},urlIsLocal:function(A){a("protocol"in A);const e=A.protocol;return"about:"===e||"blob:"===e||"data:"===e},urlHasHttpsScheme:F,urlIsHttpHttpsScheme:U,readAllBytes:S,normalizeMethodRecord:b,parseMetadata:w},vA}function Ce(){return JA?YA:(JA=1,YA={kUrl:Symbol("url"),kHeaders:Symbol("headers"),kSignal:Symbol("signal"),kState:Symbol("state"),kGuard:Symbol("guard"),kRealm:Symbol("realm")})}function Be(){if(HA)return GA;HA=1;const{types:A}=g,{hasOwn:e,toUSVString:t}=le(),n={converters:{},util:{},errors:{}};return n.errors.exception=function(A){return new TypeError(`${A.header}: ${A.message}`)},n.errors.conversionFailed=function(A){const e=1===A.types.length?"":" one of",t=`${A.argument} could not be converted to${e}: ${A.types.join(", ")}.`;return n.errors.exception({header:A.prefix,message:t})},n.errors.invalidArgument=function(A){return n.errors.exception({header:A.prefix,message:`"${A.value}" is an invalid ${A.type}.`})},n.brandCheck=function(A,e,t=void 0){if(!1===t?.strict||A instanceof e)return A?.[Symbol.toStringTag]===e.prototype[Symbol.toStringTag];throw new TypeError("Illegal invocation")},n.argumentLengthCheck=function({length:A},e,t){if(A<e)throw n.errors.exception({message:`${e} argument${1!==e?"s":""} required, but${A?" only":""} ${A} found.`,...t})},n.illegalConstructor=function(){throw n.errors.exception({header:"TypeError",message:"Illegal constructor"})},n.util.Type=function(A){switch(typeof A){case"undefined":return"Undefined";case"boolean":return"Boolean";case"string":return"String";case"symbol":return"Symbol";case"number":return"Number";case"bigint":return"BigInt";case"function":case"object":return null===A?"Null":"Object"}},n.util.ConvertToInt=function(A,e,t,s={}){let r,o;64===e?(r=Math.pow(2,53)-1,o="unsigned"===t?0:Math.pow(-2,53)+1):"unsigned"===t?(o=0,r=Math.pow(2,e)-1):(o=Math.pow(-2,e)-1,r=Math.pow(2,e-1)-1);let i=Number(A);if(0===i&&(i=0),!0===s.enforceRange){if(Number.isNaN(i)||i===Number.POSITIVE_INFINITY||i===Number.NEGATIVE_INFINITY)throw n.errors.exception({header:"Integer conversion",message:`Could not convert ${A} to an integer.`});if(i=n.util.IntegerPart(i),i<o||i>r)throw n.errors.exception({header:"Integer conversion",message:`Value must be between ${o}-${r}, got ${i}.`});return i}return Number.isNaN(i)||!0!==s.clamp?Number.isNaN(i)||0===i&&Object.is(0,i)||i===Number.POSITIVE_INFINITY||i===Number.NEGATIVE_INFINITY?0:(i=n.util.IntegerPart(i),i%=Math.pow(2,e),"signed"===t&&i>=Math.pow(2,e)-1?i-Math.pow(2,e):i):(i=Math.min(Math.max(i,o),r),i=Math.floor(i)%2==0?Math.floor(i):Math.ceil(i),i)},n.util.IntegerPart=function(A){const e=Math.floor(Math.abs(A));return A<0?-1*e:e},n.sequenceConverter=function(A){return e=>{if("Object"!==n.util.Type(e))throw n.errors.exception({header:"Sequence",message:`Value of type ${n.util.Type(e)} is not an Object.`});const t=e?.[Symbol.iterator]?.(),s=[];if(void 0===t||"function"!=typeof t.next)throw n.errors.exception({header:"Sequence",message:"Object is not an iterator."});for(;;){const{done:e,value:n}=t.next();if(e)break;s.push(A(n))}return s}},n.recordConverter=function(e,t){return s=>{if("Object"!==n.util.Type(s))throw n.errors.exception({header:"Record",message:`Value of type ${n.util.Type(s)} is not an Object.`});const r={};if(!A.isProxy(s)){const A=Object.keys(s);for(const n of A){const A=e(n),o=t(s[n]);r[A]=o}return r}const o=Reflect.ownKeys(s);for(const A of o){const n=Reflect.getOwnPropertyDescriptor(s,A);if(n?.enumerable){const n=e(A),o=t(s[A]);r[n]=o}}return r}},n.interfaceConverter=function(A){return(e,t={})=>{if(!1!==t.strict&&!(e instanceof A))throw n.errors.exception({header:A.name,message:`Expected ${e} to be an instance of ${A.name}.`});return e}},n.dictionaryConverter=function(A){return t=>{const s=n.util.Type(t),r={};if("Null"===s||"Undefined"===s)return r;if("Object"!==s)throw n.errors.exception({header:"Dictionary",message:`Expected ${t} to be one of: Null, Undefined, Object.`});for(const s of A){const{key:A,defaultValue:o,required:i,converter:a}=s;if(!0===i&&!e(t,A))throw n.errors.exception({header:"Dictionary",message:`Missing required key "${A}".`});let c=t[A];const g=e(s,"defaultValue");if(g&&null!==c&&(c=c??o),i||g||void 0!==c){if(c=a(c),s.allowedValues&&!s.allowedValues.includes(c))throw n.errors.exception({header:"Dictionary",message:`${c} is not an accepted type. Expected one of ${s.allowedValues.join(", ")}.`});r[A]=c}}return r}},n.nullableConverter=function(A){return e=>null===e?e:A(e)},n.converters.DOMString=function(A,e={}){if(null===A&&e.legacyNullToEmptyString)return"";if("symbol"==typeof A)throw new TypeError("Could not convert argument of type symbol to string.");return String(A)},n.converters.ByteString=function(A){const e=n.converters.DOMString(A);for(let A=0;A<e.length;A++)if(e.charCodeAt(A)>255)throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${A} has a value of ${e.charCodeAt(A)} which is greater than 255.`);return e},n.converters.USVString=t,n.converters.boolean=function(A){return Boolean(A)},n.converters.any=function(A){return A},n.converters["long long"]=function(A){return n.util.ConvertToInt(A,64,"signed")},n.converters["unsigned long long"]=function(A){return n.util.ConvertToInt(A,64,"unsigned")},n.converters["unsigned long"]=function(A){return n.util.ConvertToInt(A,32,"unsigned")},n.converters["unsigned short"]=function(A,e){return n.util.ConvertToInt(A,16,"unsigned",e)},n.converters.ArrayBuffer=function(e,t={}){if("Object"!==n.util.Type(e)||!A.isAnyArrayBuffer(e))throw n.errors.conversionFailed({prefix:`${e}`,argument:`${e}`,types:["ArrayBuffer"]});if(!1===t.allowShared&&A.isSharedArrayBuffer(e))throw n.errors.exception({header:"ArrayBuffer",message:"SharedArrayBuffer is not allowed."});return e},n.converters.TypedArray=function(e,t,s={}){if("Object"!==n.util.Type(e)||!A.isTypedArray(e)||e.constructor.name!==t.name)throw n.errors.conversionFailed({prefix:`${t.name}`,argument:`${e}`,types:[t.name]});if(!1===s.allowShared&&A.isSharedArrayBuffer(e.buffer))throw n.errors.exception({header:"ArrayBuffer",message:"SharedArrayBuffer is not allowed."});return e},n.converters.DataView=function(e,t={}){if("Object"!==n.util.Type(e)||!A.isDataView(e))throw n.errors.exception({header:"DataView",message:"Object is not a DataView."});if(!1===t.allowShared&&A.isSharedArrayBuffer(e.buffer))throw n.errors.exception({header:"ArrayBuffer",message:"SharedArrayBuffer is not allowed."});return e},n.converters.BufferSource=function(e,t={}){if(A.isAnyArrayBuffer(e))return n.converters.ArrayBuffer(e,t);if(A.isTypedArray(e))return n.converters.TypedArray(e,e.constructor);if(A.isDataView(e))return n.converters.DataView(e,t);throw new TypeError(`Could not convert ${e} to a BufferSource.`)},n.converters["sequence<ByteString>"]=n.sequenceConverter(n.converters.ByteString),n.converters["sequence<sequence<ByteString>>"]=n.sequenceConverter(n.converters["sequence<ByteString>"]),n.converters["record<ByteString, ByteString>"]=n.recordConverter(n.converters.ByteString,n.converters.ByteString),GA={webidl:n}}function Ie(){if(VA)return OA;VA=1;const A=c,{atob:e}=Q,{isomorphicDecode:t}=le(),n=new TextEncoder,s=/^[!#$%&'*+-.^_|~A-Za-z0-9]+$/,r=/(\u000A|\u000D|\u0009|\u0020)/,o=/[\u0009|\u0020-\u007E|\u0080-\u00FF]/;function i(A,e=!1){if(!e)return A.href;const t=A.href,n=A.hash.length;return 0===n?t:t.substring(0,t.length-n)}function a(A,e,t){let n="";for(;t.position<e.length&&A(e[t.position]);)n+=e[t.position],t.position++;return n}function g(A,e,t){const n=e.indexOf(A,t.position),s=t.position;return-1===n?(t.position=e.length,e.slice(s)):(t.position=n,e.slice(s,t.position))}function E(A){return function(A){const e=[];for(let t=0;t<A.length;t++){const n=A[t];if(37!==n)e.push(n);else if(37!==n||/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(A[t+1],A[t+2]))){const n=String.fromCharCode(A[t+1],A[t+2]),s=Number.parseInt(n,16);e.push(s),t+=2}else e.push(37)}return Uint8Array.from(e)}(n.encode(A))}function h(A){const e={position:0},t=g("/",A=B(A,!0,!0),e);if(0===t.length||!s.test(t))return"failure";if(e.position>A.length)return"failure";e.position++;let n=g(";",A,e);if(n=B(n,!1,!0),0===n.length||!s.test(n))return"failure";const i=t.toLowerCase(),c=n.toLowerCase(),E={type:i,subtype:c,parameters:new Map,essence:`${i}/${c}`};for(;e.position<A.length;){e.position++,a((A=>r.test(A)),A,e);let t=a((A=>";"!==A&&"="!==A),A,e);if(t=t.toLowerCase(),e.position<A.length){if(";"===A[e.position])continue;e.position++}if(e.position>A.length)break;let n=null;if('"'===A[e.position])n=l(A,e,!0),g(";",A,e);else if(n=g(";",A,e),n=B(n,!1,!0),0===n.length)continue;0===t.length||!s.test(t)||0!==n.length&&!o.test(n)||E.parameters.has(t)||E.parameters.set(t,n)}return E}function l(e,t,n){const s=t.position;let r="";for(A('"'===e[t.position]),t.position++;r+=a((A=>'"'!==A&&"\\"!==A),e,t),!(t.position>=e.length);){const n=e[t.position];if(t.position++,"\\"!==n){A('"'===n);break}if(t.position>=e.length){r+="\\";break}r+=e[t.position],t.position++}return n?r:e.slice(s,t.position)}function C(A){return"\r"===A||"\n"===A||"\t"===A||" "===A}function B(A,e=!0,t=!0){let n=0,s=A.length-1;if(e)for(;n<A.length&&C(A[n]);n++);if(t)for(;s>0&&C(A[s]);s--);return A.slice(n,s+1)}function I(A){return"\r"===A||"\n"===A||"\t"===A||"\f"===A||" "===A}return OA={dataURLProcessor:function(n){A("data:"===n.protocol);let s=i(n,!0);s=s.slice(5);const r={position:0};let o=g(",",s,r);const a=o.length;if(o=function(A,e=!0,t=!0){let n=0,s=A.length-1;if(e)for(;n<A.length&&I(A[n]);n++);if(t)for(;s>0&&I(A[s]);s--);return A.slice(n,s+1)}(o,!0,!0),r.position>=s.length)return"failure";r.position++;let c=E(s.slice(a+1));if(/;(\u0020){0,}base64$/i.test(o)){if(c=function(A){(A=A.replace(/[\u0009\u000A\u000C\u000D\u0020]/g,"")).length%4==0&&(A=A.replace(/=?=$/,""));if(A.length%4==1)return"failure";if(/[^+/0-9A-Za-z]/.test(A))return"failure";const t=e(A),n=new Uint8Array(t.length);for(let A=0;A<t.length;A++)n[A]=t.charCodeAt(A);return n}(t(c)),"failure"===c)return"failure";o=o.slice(0,-6),o=o.replace(/(\u0020)+$/,""),o=o.slice(0,-1)}o.startsWith(";")&&(o="text/plain"+o);let Q=h(o);return"failure"===Q&&(Q=h("text/plain;charset=US-ASCII")),{mimeType:Q,body:c}},URLSerializer:i,collectASequenceOfCodePoints:a,collectASequenceOfCodePointsFast:g,stringPercentDecode:E,parseMIMEType:h,collectAnHTTPQuotedString:l,serializeAMimeType:function(e){A("failure"!==e);const{parameters:t,essence:n}=e;let r=n;for(let[A,e]of t.entries())r+=";",r+=A,r+="=",s.test(e)||(e=e.replace(/(\\|")/g,"\\$1"),e='"'+e,e+='"'),r+=e;return r}},OA}function ue(){if(qA)return xA;qA=1;const{Blob:A,File:e}=Q,{types:t}=g,{kState:n}=Ce(),{isBlobLike:s}=le(),{webidl:r}=Be(),{parseMIMEType:o,serializeAMimeType:i}=Ie(),{kEnumerableProperty:a}=oA(),c=new TextEncoder;class E extends A{constructor(A,e,a={}){r.argumentLengthCheck(arguments,2,{header:"File constructor"}),A=r.converters["sequence<BlobPart>"](A);const g=e=r.converters.USVString(e);let E,Q=(a=r.converters.FilePropertyBag(a)).type;A:{if(Q){if(Q=o(Q),"failure"===Q){Q="";break A}Q=i(Q).toLowerCase()}E=a.lastModified}super(function(A,e){const n=[];for(const r of A)if("string"==typeof r){let A=r;"native"===e.endings&&(A=l(A)),n.push(c.encode(A))}else t.isAnyArrayBuffer(r)||t.isTypedArray(r)?r.buffer?n.push(new Uint8Array(r.buffer,r.byteOffset,r.byteLength)):n.push(new Uint8Array(r)):s(r)&&n.push(r);return n}(A,a),{type:Q}),this[n]={name:g,lastModified:E,type:Q}}get name(){return r.brandCheck(this,E),this[n].name}get lastModified(){return r.brandCheck(this,E),this[n].lastModified}get type(){return r.brandCheck(this,E),this[n].type}}class h{constructor(A,e,t={}){const s=e,r=t.type,o=t.lastModified??Date.now();this[n]={blobLike:A,name:s,type:r,lastModified:o}}stream(...A){return r.brandCheck(this,h),this[n].blobLike.stream(...A)}arrayBuffer(...A){return r.brandCheck(this,h),this[n].blobLike.arrayBuffer(...A)}slice(...A){return r.brandCheck(this,h),this[n].blobLike.slice(...A)}text(...A){return r.brandCheck(this,h),this[n].blobLike.text(...A)}get size(){return r.brandCheck(this,h),this[n].blobLike.size}get type(){return r.brandCheck(this,h),this[n].blobLike.type}get name(){return r.brandCheck(this,h),this[n].name}get lastModified(){return r.brandCheck(this,h),this[n].lastModified}get[Symbol.toStringTag](){return"File"}}function l(A){let e="\n";return"win32"===process.platform&&(e="\r\n"),A.replace(/\r?\n/g,e)}return Object.defineProperties(E.prototype,{[Symbol.toStringTag]:{value:"File",configurable:!0},name:a,lastModified:a}),r.converters.Blob=r.interfaceConverter(A),r.converters.BlobPart=function(A,e){if("Object"===r.util.Type(A)){if(s(A))return r.converters.Blob(A,{strict:!1});if(ArrayBuffer.isView(A)||t.isAnyArrayBuffer(A))return r.converters.BufferSource(A,e)}return r.converters.USVString(A,e)},r.converters["sequence<BlobPart>"]=r.sequenceConverter(r.converters.BlobPart),r.converters.FilePropertyBag=r.dictionaryConverter([{key:"lastModified",converter:r.converters["long long"],get defaultValue(){return Date.now()}},{key:"type",converter:r.converters.DOMString,defaultValue:""},{key:"endings",converter:A=>("native"!==(A=(A=r.converters.DOMString(A)).toLowerCase())&&(A="transparent"),A),defaultValue:"transparent"}]),xA={File:E,FileLike:h,isFileLike:function(A){return e&&A instanceof e||A instanceof E||A&&("function"==typeof A.stream||"function"==typeof A.arrayBuffer)&&"File"===A[Symbol.toStringTag]}}}function de(){if(PA)return WA;PA=1;const{isBlobLike:A,toUSVString:e,makeIterator:t}=le(),{kState:n}=Ce(),{File:s,FileLike:r,isFileLike:o}=ue(),{webidl:i}=Be(),{Blob:a,File:c}=Q,g=c??s;class E{constructor(A){if(void 0!==A)throw i.errors.conversionFailed({prefix:"FormData constructor",argument:"Argument 1",types:["undefined"]});this[n]=[]}append(e,t,s=void 0){if(i.brandCheck(this,E),i.argumentLengthCheck(arguments,2,{header:"FormData.append"}),3===arguments.length&&!A(t))throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");const r=h(e=i.converters.USVString(e),t=A(t)?i.converters.Blob(t,{strict:!1}):i.converters.USVString(t),s=3===arguments.length?i.converters.USVString(s):void 0);this[n].push(r)}delete(A){i.brandCheck(this,E),i.argumentLengthCheck(arguments,1,{header:"FormData.delete"}),A=i.converters.USVString(A),this[n]=this[n].filter((e=>e.name!==A))}get(A){i.brandCheck(this,E),i.argumentLengthCheck(arguments,1,{header:"FormData.get"}),A=i.converters.USVString(A);const e=this[n].findIndex((e=>e.name===A));return-1===e?null:this[n][e].value}getAll(A){return i.brandCheck(this,E),i.argumentLengthCheck(arguments,1,{header:"FormData.getAll"}),A=i.converters.USVString(A),this[n].filter((e=>e.name===A)).map((A=>A.value))}has(A){return i.brandCheck(this,E),i.argumentLengthCheck(arguments,1,{header:"FormData.has"}),A=i.converters.USVString(A),-1!==this[n].findIndex((e=>e.name===A))}set(t,s,r=void 0){if(i.brandCheck(this,E),i.argumentLengthCheck(arguments,2,{header:"FormData.set"}),3===arguments.length&&!A(s))throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");t=i.converters.USVString(t),s=A(s)?i.converters.Blob(s,{strict:!1}):i.converters.USVString(s),r=3===arguments.length?e(r):void 0;const o=h(t,s,r),a=this[n].findIndex((A=>A.name===t));-1!==a?this[n]=[...this[n].slice(0,a),o,...this[n].slice(a+1).filter((A=>A.name!==t))]:this[n].push(o)}entries(){return i.brandCheck(this,E),t((()=>this[n].map((A=>[A.name,A.value]))),"FormData","key+value")}keys(){return i.brandCheck(this,E),t((()=>this[n].map((A=>[A.name,A.value]))),"FormData","key")}values(){return i.brandCheck(this,E),t((()=>this[n].map((A=>[A.name,A.value]))),"FormData","value")}forEach(A,e=globalThis){if(i.brandCheck(this,E),i.argumentLengthCheck(arguments,1,{header:"FormData.forEach"}),"function"!=typeof A)throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");for(const[t,n]of this)A.apply(e,[n,t,this])}}function h(A,e,t){if(A=Buffer.from(A).toString("utf8"),"string"==typeof e)e=Buffer.from(e).toString("utf8");else if(o(e)||(e=e instanceof a?new g([e],"blob",{type:e.type}):new r(e,"blob",{type:e.type})),void 0!==t){const A={type:e.type,lastModified:e.lastModified};e=c&&e instanceof c||e instanceof s?new g([e],t,A):new r(e,t,A)}return{name:A,value:e}}return E.prototype[Symbol.iterator]=E.prototype.entries,Object.defineProperties(E.prototype,{[Symbol.toStringTag]:{value:"FormData",configurable:!0}}),WA={FormData:E}}function fe(){if(jA)return _A;jA=1;const A=Ee(),e=oA(),{ReadableStreamFrom:t,isBlobLike:n,isReadableStreamLike:s,readableStreamClose:r,createDeferredPromise:o,fullyReadBody:i}=le(),{FormData:a}=de(),{kState:g}=Ce(),{webidl:E}=Be(),{DOMException:h,structuredClone:C}=Qe(),{Blob:B,File:u}=Q,{kBodyUsed:d}=sA(),f=c,{isErrored:p}=oA(),{isUint8Array:y,isArrayBuffer:m}=I,{File:w}=ue(),{parseMIMEType:D,serializeAMimeType:k}=Ie();let b;try{const A=require("node:crypto");b=e=>A.randomInt(0,e)}catch{b=A=>Math.floor(Math.random(A))}let R=globalThis.ReadableStream;const N=u??w,S=new TextEncoder,F=new TextDecoder;function U(A,o=!1){R||(R=l.ReadableStream);let i=null;i=A instanceof R?A:n(A)?A.stream():new R({async pull(A){A.enqueue("string"==typeof c?S.encode(c):c),queueMicrotask((()=>r(A)))},start(){},type:void 0}),f(s(i));let a=null,c=null,g=null,E=null;if("string"==typeof A)c=A,E="text/plain;charset=UTF-8";else if(A instanceof URLSearchParams)c=A.toString(),E="application/x-www-form-urlencoded;charset=UTF-8";else if(m(A))c=new Uint8Array(A.slice());else if(ArrayBuffer.isView(A))c=new Uint8Array(A.buffer.slice(A.byteOffset,A.byteOffset+A.byteLength));else if(e.isFormDataLike(A)){const e=`----formdata-undici-0${`${b(1e11)}`.padStart(11,"0")}`,t=`--${e}\r\nContent-Disposition: form-data`
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */,n=A=>A.replace(/\n/g,"%0A").replace(/\r/g,"%0D").replace(/"/g,"%22"),s=A=>A.replace(/\r?\n|\r/g,"\r\n"),r=[],o=new Uint8Array([13,10]);g=0;let i=!1;for(const[e,a]of A)if("string"==typeof a){const A=S.encode(t+`; name="${n(s(e))}"`+`\r\n\r\n${s(a)}\r\n`);r.push(A),g+=A.byteLength}else{const A=S.encode(`${t}; name="${n(s(e))}"`+(a.name?`; filename="${n(a.name)}"`:"")+"\r\n"+`Content-Type: ${a.type||"application/octet-stream"}\r\n\r\n`);r.push(A,a,o),"number"==typeof a.size?g+=A.byteLength+a.size+o.byteLength:i=!0}const Q=S.encode(`--${e}--`);r.push(Q),g+=Q.byteLength,i&&(g=null),c=A,a=async function*(){for(const A of r)A.stream?yield*A.stream():yield A},E="multipart/form-data; boundary="+e}else if(n(A))c=A,g=A.size,A.type&&(E=A.type);else if("function"==typeof A[Symbol.asyncIterator]){if(o)throw new TypeError("keepalive");if(e.isDisturbed(A)||A.locked)throw new TypeError("Response body object should not be disturbed or locked");i=A instanceof R?A:t(A)}if(("string"==typeof c||e.isBuffer(c))&&(g=Buffer.byteLength(c)),null!=a){let e;i=new R({async start(){e=a(A)[Symbol.asyncIterator]()},async pull(A){const{value:t,done:n}=await e.next();return n?queueMicrotask((()=>{A.close()})):p(i)||A.enqueue(new Uint8Array(t)),A.desiredSize>0},async cancel(A){await e.return()},type:void 0})}return[{stream:i,source:c,length:g},E]}async function*L(A){if(A)if(y(A))yield A;else{const t=A.stream;if(e.isDisturbed(t))throw new TypeError("The body has already been consumed.");if(t.locked)throw new TypeError("The stream is locked.");t[d]=!0,yield*t}}function M(A){if(A.aborted)throw new h("The operation was aborted.","AbortError")}function v(e){const t={blob(){return T(this,(A=>{let e=function(A){const{headersList:e}=A[g],t=e.get("content-type");if(null===t)return"failure";return D(t)}(this);return"failure"===e?e="":e&&(e=k(e)),new B([A],{type:e})}),e)},arrayBuffer(){return T(this,(A=>new Uint8Array(A).buffer),e)},text(){return T(this,Y,e)},json(){return T(this,J,e)},async formData(){E.brandCheck(this,e),M(this[g]);const t=this.headers.get("Content-Type");if(/multipart\/form-data/.test(t)){const e={};for(const[A,t]of this.headers)e[A.toLowerCase()]=t;const t=new a;let n;try{n=new A({headers:e,preservePath:!0})}catch(A){throw new h(`${A}`,"AbortError")}n.on("field",((A,e)=>{t.append(A,e)})),n.on("file",((A,e,n,s,r)=>{const o=[];if("base64"===s||"base64"===s.toLowerCase()){let s="";e.on("data",(A=>{s+=A.toString().replace(/[\r\n]/gm,"");const e=s.length-s.length%4;o.push(Buffer.from(s.slice(0,e),"base64")),s=s.slice(e)})),e.on("end",(()=>{o.push(Buffer.from(s,"base64")),t.append(A,new N(o,n,{type:r}))}))}else e.on("data",(A=>{o.push(A)})),e.on("end",(()=>{t.append(A,new N(o,n,{type:r}))}))}));const s=new Promise(((A,e)=>{n.on("finish",A),n.on("error",(A=>e(new TypeError(A))))}));if(null!==this.body)for await(const A of L(this[g].body))n.write(A);return n.end(),await s,t}if(/application\/x-www-form-urlencoded/.test(t)){let A;try{let e="";const t=new TextDecoder("utf-8",{ignoreBOM:!0});for await(const A of L(this[g].body)){if(!y(A))throw new TypeError("Expected Uint8Array chunk");e+=t.decode(A,{stream:!0})}e+=t.decode(),A=new URLSearchParams(e)}catch(A){throw Object.assign(new TypeError,{cause:A})}const e=new a;for(const[t,n]of A)e.append(t,n);return e}throw await Promise.resolve(),M(this[g]),E.errors.exception({header:`${e.name}.formData`,message:"Could not parse content as FormData."})}};return t}async function T(A,t,n){if(E.brandCheck(A,n),M(A[g]),function(A){return null!=A&&(A.stream.locked||e.isDisturbed(A.stream))}(A[g].body))throw new TypeError("Body is unusable");const s=o(),r=A=>s.reject(A),a=A=>{try{s.resolve(t(A))}catch(A){r(A)}};return null==A[g].body?(a(new Uint8Array),s.promise):(await i(A[g].body,a,r),s.promise)}function Y(A){if(0===A.length)return"";239===A[0]&&187===A[1]&&191===A[2]&&(A=A.subarray(3));return F.decode(A)}function J(A){return JSON.parse(Y(A))}return _A={extractBody:U,safelyExtractBody:function(A,t=!1){return R||(R=l.ReadableStream),A instanceof R&&(f(!e.isDisturbed(A),"The body has already been consumed."),f(!A.locked,"The stream is locked.")),U(A,t)},cloneBody:function(A){const[e,t]=A.stream.tee(),n=C(t,{transfer:[t]}),[,s]=n.tee();return A.stream=e,{stream:s,length:A.length,source:A.source}},mixinBody:function(A){Object.assign(A.prototype,v(A))}}}function pe(){if(zA)return XA;zA=1;const A=a;return XA=class extends A{dispatch(){throw new Error("not implemented")}close(){throw new Error("not implemented")}destroy(){throw new Error("not implemented")}}}function ye(){if(Ae)return $A;Ae=1;const A=pe(),{ClientDestroyedError:e,ClientClosedError:t,InvalidArgumentError:n}=rA(),{kDestroy:s,kClose:r,kDispatch:o,kInterceptors:i}=sA(),a=Symbol("destroyed"),c=Symbol("closed"),g=Symbol("onDestroyed"),E=Symbol("onClosed"),Q=Symbol("Intercepted Dispatch");return $A=class extends A{constructor(){super(),this[a]=!1,this[g]=null,this[c]=!1,this[E]=[]}get destroyed(){return this[a]}get closed(){return this[c]}get interceptors(){return this[i]}set interceptors(A){if(A)for(let e=A.length-1;e>=0;e--){if("function"!=typeof this[i][e])throw new n("interceptor must be an function")}this[i]=A}close(A){if(void 0===A)return new Promise(((A,e)=>{this.close(((t,n)=>t?e(t):A(n)))}));if("function"!=typeof A)throw new n("invalid callback");if(this[a])return void queueMicrotask((()=>A(new e,null)));if(this[c])return void(this[E]?this[E].push(A):queueMicrotask((()=>A(null,null))));this[c]=!0,this[E].push(A);const t=()=>{const A=this[E];this[E]=null;for(let e=0;e<A.length;e++)A[e](null,null)};this[r]().then((()=>this.destroy())).then((()=>{queueMicrotask(t)}))}destroy(A,t){if("function"==typeof A&&(t=A,A=null),void 0===t)return new Promise(((e,t)=>{this.destroy(A,((A,n)=>A?t(A):e(n)))}));if("function"!=typeof t)throw new n("invalid callback");if(this[a])return void(this[g]?this[g].push(t):queueMicrotask((()=>t(null,null))));A||(A=new e),this[a]=!0,this[g]=this[g]||[],this[g].push(t);const r=()=>{const A=this[g];this[g]=null;for(let e=0;e<A.length;e++)A[e](null,null)};this[s](A).then((()=>{queueMicrotask(r)}))}[Q](A,e){if(!this[i]||0===this[i].length)return this[Q]=this[o],this[o](A,e);let t=this[o].bind(this);for(let A=this[i].length-1;A>=0;A--)t=this[i][A](t);return this[Q]=t,t(A,e)}dispatch(A,s){if(!s||"object"!=typeof s)throw new n("handler must be an object");try{if(!A||"object"!=typeof A)throw new n("opts must be an object.");if(this[a]||this[g])throw new e;if(this[c])throw new t;return this[Q](A,s)}catch(A){if("function"!=typeof s.onError)throw new n("invalid onError method");return s.onError(A),!1}}}}function me(){if(te)return ee;te=1;const A=o,e=c,t=oA(),{InvalidArgumentError:n,ConnectTimeoutError:s}=rA();let r,a;return a=b.FinalizationRegistry&&!process.env.NODE_V8_COVERAGE?class{constructor(A){this._maxCachedSessions=A,this._sessionCache=new Map,this._sessionRegistry=new b.FinalizationRegistry((A=>{if(this._sessionCache.size<this._maxCachedSessions)return;const e=this._sessionCache.get(A);void 0!==e&&void 0===e.deref()&&this._sessionCache.delete(A)}))}get(A){const e=this._sessionCache.get(A);return e?e.deref():null}set(A,e){0!==this._maxCachedSessions&&(this._sessionCache.set(A,new WeakRef(e)),this._sessionRegistry.register(e,A))}}:class{constructor(A){this._maxCachedSessions=A,this._sessionCache=new Map}get(A){return this._sessionCache.get(A)}set(A,e){if(0!==this._maxCachedSessions){if(this._sessionCache.size>=this._maxCachedSessions){const{value:A}=this._sessionCache.keys().next();this._sessionCache.delete(A)}this._sessionCache.set(A,e)}}},ee=function({allowH2:o,maxCachedSessions:c,socketPath:g,timeout:E,...Q}){if(null!=c&&(!Number.isInteger(c)||c<0))throw new n("maxCachedSessions must be a positive integer or zero");const h={path:g,...Q},l=new a(null==c?100:c);return E=null==E?1e4:E,o=null!=o&&o,function({hostname:n,host:a,protocol:c,port:g,servername:Q,localAddress:C,httpSocket:B},I){let u;if("https:"===c){r||(r=i);const A=(Q=Q||h.servername||t.getServerName(a)||null)||n,s=l.get(A)||null;e(A),u=r.connect({highWaterMark:16384,...h,servername:Q,session:s,localAddress:C,ALPNProtocols:o?["http/1.1","h2"]:["http/1.1"],socket:B,port:g||443,host:n}),u.on("session",(function(e){l.set(A,e)}))}else e(!B,"httpSocket can only be sent on TLS update"),u=A.connect({highWaterMark:65536,...h,localAddress:C,port:g||80,host:n});if(null==h.keepAlive||h.keepAlive){const A=void 0===h.keepAliveInitialDelay?6e4:h.keepAliveInitialDelay;u.setKeepAlive(!0,A)}const d=function(A,e){if(!e)return()=>{};let t=null,n=null;const s=setTimeout((()=>{t=setImmediate((()=>{"win32"===process.platform?n=setImmediate((()=>A())):A()}))}),e);return()=>{clearTimeout(s),clearImmediate(t),clearImmediate(n)}}((()=>function(A){t.destroy(A,new s)}(u)),E);return u.setNoDelay(!0).once("https:"===c?"secureConnect":"connect",(function(){if(d(),I){const A=I;I=null,A(null,this)}})).on("error",(function(A){if(d(),I){const e=I;I=null,e(A)}})),u}},ee}var we,De,ke,be,Re,Ne,Se,Fe,Ue,Le,Me,ve,Te,Ye,Je,Ge,He,Oe,Ve,xe,qe,We,Pe,_e,je,Ke,Ze={},Xe={};function ze(){return De||(De=1,function(A){Object.defineProperty(A,"__esModule",{value:!0}),A.SPECIAL_HEADERS=A.HEADER_STATE=A.MINOR=A.MAJOR=A.CONNECTION_TOKEN_CHARS=A.HEADER_CHARS=A.TOKEN=A.STRICT_TOKEN=A.HEX=A.URL_CHAR=A.STRICT_URL_CHAR=A.USERINFO_CHARS=A.MARK=A.ALPHANUM=A.NUM=A.HEX_MAP=A.NUM_MAP=A.ALPHA=A.FINISH=A.H_METHOD_MAP=A.METHOD_MAP=A.METHODS_RTSP=A.METHODS_ICE=A.METHODS_HTTP=A.METHODS=A.LENIENT_FLAGS=A.FLAGS=A.TYPE=A.ERROR=void 0;const e=(we||(we=1,Object.defineProperty(Xe,"__esModule",{value:!0}),Xe.enumToMap=void 0,Xe.enumToMap=function(A){const e={};return Object.keys(A).forEach((t=>{const n=A[t];"number"==typeof n&&(e[t]=n)})),e}),Xe);var t,n,s,r,o,i,a;(t=A.ERROR||(A.ERROR={}))[t.OK=0]="OK",t[t.INTERNAL=1]="INTERNAL",t[t.STRICT=2]="STRICT",t[t.LF_EXPECTED=3]="LF_EXPECTED",t[t.UNEXPECTED_CONTENT_LENGTH=4]="UNEXPECTED_CONTENT_LENGTH",t[t.CLOSED_CONNECTION=5]="CLOSED_CONNECTION",t[t.INVALID_METHOD=6]="INVALID_METHOD",t[t.INVALID_URL=7]="INVALID_URL",t[t.INVALID_CONSTANT=8]="INVALID_CONSTANT",t[t.INVALID_VERSION=9]="INVALID_VERSION",t[t.INVALID_HEADER_TOKEN=10]="INVALID_HEADER_TOKEN",t[t.INVALID_CONTENT_LENGTH=11]="INVALID_CONTENT_LENGTH",t[t.INVALID_CHUNK_SIZE=12]="INVALID_CHUNK_SIZE",t[t.INVALID_STATUS=13]="INVALID_STATUS",t[t.INVALID_EOF_STATE=14]="INVALID_EOF_STATE",t[t.INVALID_TRANSFER_ENCODING=15]="INVALID_TRANSFER_ENCODING",t[t.CB_MESSAGE_BEGIN=16]="CB_MESSAGE_BEGIN",t[t.CB_HEADERS_COMPLETE=17]="CB_HEADERS_COMPLETE",t[t.CB_MESSAGE_COMPLETE=18]="CB_MESSAGE_COMPLETE",t[t.CB_CHUNK_HEADER=19]="CB_CHUNK_HEADER",t[t.CB_CHUNK_COMPLETE=20]="CB_CHUNK_COMPLETE",t[t.PAUSED=21]="PAUSED",t[t.PAUSED_UPGRADE=22]="PAUSED_UPGRADE",t[t.PAUSED_H2_UPGRADE=23]="PAUSED_H2_UPGRADE",t[t.USER=24]="USER",(n=A.TYPE||(A.TYPE={}))[n.BOTH=0]="BOTH",n[n.REQUEST=1]="REQUEST",n[n.RESPONSE=2]="RESPONSE",(s=A.FLAGS||(A.FLAGS={}))[s.CONNECTION_KEEP_ALIVE=1]="CONNECTION_KEEP_ALIVE",s[s.CONNECTION_CLOSE=2]="CONNECTION_CLOSE",s[s.CONNECTION_UPGRADE=4]="CONNECTION_UPGRADE",s[s.CHUNKED=8]="CHUNKED",s[s.UPGRADE=16]="UPGRADE",s[s.CONTENT_LENGTH=32]="CONTENT_LENGTH",s[s.SKIPBODY=64]="SKIPBODY",s[s.TRAILING=128]="TRAILING",s[s.TRANSFER_ENCODING=512]="TRANSFER_ENCODING",(r=A.LENIENT_FLAGS||(A.LENIENT_FLAGS={}))[r.HEADERS=1]="HEADERS",r[r.CHUNKED_LENGTH=2]="CHUNKED_LENGTH",r[r.KEEP_ALIVE=4]="KEEP_ALIVE",function(A){A[A.DELETE=0]="DELETE",A[A.GET=1]="GET",A[A.HEAD=2]="HEAD",A[A.POST=3]="POST",A[A.PUT=4]="PUT",A[A.CONNECT=5]="CONNECT",A[A.OPTIONS=6]="OPTIONS",A[A.TRACE=7]="TRACE",A[A.COPY=8]="COPY",A[A.LOCK=9]="LOCK",A[A.MKCOL=10]="MKCOL",A[A.MOVE=11]="MOVE",A[A.PROPFIND=12]="PROPFIND",A[A.PROPPATCH=13]="PROPPATCH",A[A.SEARCH=14]="SEARCH",A[A.UNLOCK=15]="UNLOCK",A[A.BIND=16]="BIND",A[A.REBIND=17]="REBIND",A[A.UNBIND=18]="UNBIND",A[A.ACL=19]="ACL",A[A.REPORT=20]="REPORT",A[A.MKACTIVITY=21]="MKACTIVITY",A[A.CHECKOUT=22]="CHECKOUT",A[A.MERGE=23]="MERGE",A[A["M-SEARCH"]=24]="M-SEARCH",A[A.NOTIFY=25]="NOTIFY",A[A.SUBSCRIBE=26]="SUBSCRIBE",A[A.UNSUBSCRIBE=27]="UNSUBSCRIBE",A[A.PATCH=28]="PATCH",A[A.PURGE=29]="PURGE",A[A.MKCALENDAR=30]="MKCALENDAR",A[A.LINK=31]="LINK",A[A.UNLINK=32]="UNLINK",A[A.SOURCE=33]="SOURCE",A[A.PRI=34]="PRI",A[A.DESCRIBE=35]="DESCRIBE",A[A.ANNOUNCE=36]="ANNOUNCE",A[A.SETUP=37]="SETUP",A[A.PLAY=38]="PLAY",A[A.PAUSE=39]="PAUSE",A[A.TEARDOWN=40]="TEARDOWN",A[A.GET_PARAMETER=41]="GET_PARAMETER",A[A.SET_PARAMETER=42]="SET_PARAMETER",A[A.REDIRECT=43]="REDIRECT",A[A.RECORD=44]="RECORD",A[A.FLUSH=45]="FLUSH"}(o=A.METHODS||(A.METHODS={})),A.METHODS_HTTP=[o.DELETE,o.GET,o.HEAD,o.POST,o.PUT,o.CONNECT,o.OPTIONS,o.TRACE,o.COPY,o.LOCK,o.MKCOL,o.MOVE,o.PROPFIND,o.PROPPATCH,o.SEARCH,o.UNLOCK,o.BIND,o.REBIND,o.UNBIND,o.ACL,o.REPORT,o.MKACTIVITY,o.CHECKOUT,o.MERGE,o["M-SEARCH"],o.NOTIFY,o.SUBSCRIBE,o.UNSUBSCRIBE,o.PATCH,o.PURGE,o.MKCALENDAR,o.LINK,o.UNLINK,o.PRI,o.SOURCE],A.METHODS_ICE=[o.SOURCE],A.METHODS_RTSP=[o.OPTIONS,o.DESCRIBE,o.ANNOUNCE,o.SETUP,o.PLAY,o.PAUSE,o.TEARDOWN,o.GET_PARAMETER,o.SET_PARAMETER,o.REDIRECT,o.RECORD,o.FLUSH,o.GET,o.POST],A.METHOD_MAP=e.enumToMap(o),A.H_METHOD_MAP={},Object.keys(A.METHOD_MAP).forEach((e=>{/^H/.test(e)&&(A.H_METHOD_MAP[e]=A.METHOD_MAP[e])})),(i=A.FINISH||(A.FINISH={}))[i.SAFE=0]="SAFE",i[i.SAFE_WITH_CB=1]="SAFE_WITH_CB",i[i.UNSAFE=2]="UNSAFE",A.ALPHA=[];for(let e="A".charCodeAt(0);e<="Z".charCodeAt(0);e++)A.ALPHA.push(String.fromCharCode(e)),A.ALPHA.push(String.fromCharCode(e+32));A.NUM_MAP={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9},A.HEX_MAP={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},A.NUM=["0","1","2","3","4","5","6","7","8","9"],A.ALPHANUM=A.ALPHA.concat(A.NUM),A.MARK=["-","_",".","!","~","*","'","(",")"],A.USERINFO_CHARS=A.ALPHANUM.concat(A.MARK).concat(["%",";",":","&","=","+","$",","]),A.STRICT_URL_CHAR=["!",'"',"$","%","&","'","(",")","*","+",",","-",".","/",":",";","<","=",">","@","[","\\","]","^","_","`","{","|","}","~"].concat(A.ALPHANUM),A.URL_CHAR=A.STRICT_URL_CHAR.concat(["\t","\f"]);for(let e=128;e<=255;e++)A.URL_CHAR.push(e);A.HEX=A.NUM.concat(["a","b","c","d","e","f","A","B","C","D","E","F"]),A.STRICT_TOKEN=["!","#","$","%","&","'","*","+","-",".","^","_","`","|","~"].concat(A.ALPHANUM),A.TOKEN=A.STRICT_TOKEN.concat([" "]),A.HEADER_CHARS=["\t"];for(let e=32;e<=255;e++)127!==e&&A.HEADER_CHARS.push(e);A.CONNECTION_TOKEN_CHARS=A.HEADER_CHARS.filter((A=>44!==A)),A.MAJOR=A.NUM_MAP,A.MINOR=A.MAJOR,function(A){A[A.GENERAL=0]="GENERAL",A[A.CONNECTION=1]="CONNECTION",A[A.CONTENT_LENGTH=2]="CONTENT_LENGTH",A[A.TRANSFER_ENCODING=3]="TRANSFER_ENCODING",A[A.UPGRADE=4]="UPGRADE",A[A.CONNECTION_KEEP_ALIVE=5]="CONNECTION_KEEP_ALIVE",A[A.CONNECTION_CLOSE=6]="CONNECTION_CLOSE",A[A.CONNECTION_UPGRADE=7]="CONNECTION_UPGRADE",A[A.TRANSFER_ENCODING_CHUNKED=8]="TRANSFER_ENCODING_CHUNKED"}(a=A.HEADER_STATE||(A.HEADER_STATE={})),A.SPECIAL_HEADERS={connection:a.CONNECTION,"content-length":a.CONTENT_LENGTH,"proxy-connection":a.CONNECTION,"transfer-encoding":a.TRANSFER_ENCODING,upgrade:a.UPGRADE}}(Ze)),Ze}function $e(){if(be)return ke;be=1;const A=oA(),{kBodyUsed:e}=sA(),t=c,{InvalidArgumentError:n}=rA(),s=a,r=[300,301,302,303,307,308],o=Symbol("body");class i{constructor(A){this[o]=A,this[e]=!1}async*[Symbol.asyncIterator](){t(!this[e],"disturbed"),this[e]=!0,yield*this[o]}}function g(e,t,n){if(4===e.length)return"host"===A.headerNameToString(e);if(t&&A.headerNameToString(e).startsWith("content-"))return!0;if(n&&(13===e.length||6===e.length||19===e.length)){const t=A.headerNameToString(e);return"authorization"===t||"cookie"===t||"proxy-authorization"===t}return!1}return ke=class{constructor(r,o,a,c){if(null!=o&&(!Number.isInteger(o)||o<0))throw new n("maxRedirections must be a positive number");A.validateHandler(c,a.method,a.upgrade),this.dispatch=r,this.location=null,this.abort=null,this.opts={...a,maxRedirections:0},this.maxRedirections=o,this.handler=c,this.history=[],A.isStream(this.opts.body)?(0===A.bodyLength(this.opts.body)&&this.opts.body.on("data",(function(){t(!1)})),"boolean"!=typeof this.opts.body.readableDidRead&&(this.opts.body[e]=!1,s.prototype.on.call(this.opts.body,"data",(function(){this[e]=!0})))):(this.opts.body&&"function"==typeof this.opts.body.pipeTo||this.opts.body&&"string"!=typeof this.opts.body&&!ArrayBuffer.isView(this.opts.body)&&A.isIterable(this.opts.body))&&(this.opts.body=new i(this.opts.body))}onConnect(A){this.abort=A,this.handler.onConnect(A,{history:this.history})}onUpgrade(A,e,t){this.handler.onUpgrade(A,e,t)}onError(A){this.handler.onError(A)}onHeaders(e,n,s,o){if(this.location=this.history.length>=this.maxRedirections||A.isDisturbed(this.opts.body)?null:function(A,e){if(-1===r.indexOf(A))return null;for(let A=0;A<e.length;A+=2)if("location"===e[A].toString().toLowerCase())return e[A+1]}(e,n),this.opts.origin&&this.history.push(new URL(this.opts.path,this.opts.origin)),!this.location)return this.handler.onHeaders(e,n,s,o);const{origin:i,pathname:a,search:c}=A.parseURL(new URL(this.location,this.opts.origin&&new URL(this.opts.path,this.opts.origin))),E=c?`${a}${c}`:a;this.opts.headers=function(A,e,n){const s=[];if(Array.isArray(A))for(let t=0;t<A.length;t+=2)g(A[t],e,n)||s.push(A[t],A[t+1]);else if(A&&"object"==typeof A)for(const t of Object.keys(A))g(t,e,n)||s.push(t,A[t]);else t(null==A,"headers must be an object or an array");return s}(this.opts.headers,303===e,this.opts.origin!==i),this.opts.path=E,this.opts.origin=i,this.opts.maxRedirections=0,this.opts.query=null,303===e&&"HEAD"!==this.opts.method&&(this.opts.method="GET",this.opts.body=null)}onData(A){if(!this.location)return this.handler.onData(A)}onComplete(A){this.location?(this.location=null,this.abort=null,this.dispatch(this.opts,this)):this.handler.onComplete(A)}onBodySent(A){this.handler.onBodySent&&this.handler.onBodySent(A)}},ke}function At(){if(Ne)return Re;Ne=1;const A=$e();return Re=function({maxRedirections:e}){return t=>function(n,s){const{maxRedirections:r=e}=n;if(!r)return t(n,s);const o=new A(t,r,n,s);return n={...n,maxRedirections:0},t(n,o)}}}function et(){return Fe?Se:(Fe=1,Se="")}function tt(){if(ve)return Me;ve=1;const A=c,e=o,t=s,{pipeline:n}=E,r=oA(),i=iA(),a=function(){if(ZA)return KA;ZA=1;const{InvalidArgumentError:A,NotSupportedError:e}=rA(),t=c,{kHTTP2BuildRequest:n,kHTTP2CopyHeaders:s,kHTTP1BuildRequest:r}=sA(),o=oA(),i=/^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/,a=/[^\t\x20-\x7e\x80-\xff]/,g=/[^\u0021-\u00ff]/,E=Symbol("handler"),Q={};let h;try{const A=require("diagnostics_channel");Q.create=A.channel("undici:request:create"),Q.bodySent=A.channel("undici:request:bodySent"),Q.headers=A.channel("undici:request:headers"),Q.trailers=A.channel("undici:request:trailers"),Q.error=A.channel("undici:request:error")}catch{Q.create={hasSubscribers:!1},Q.bodySent={hasSubscribers:!1},Q.headers={hasSubscribers:!1},Q.trailers={hasSubscribers:!1},Q.error={hasSubscribers:!1}}class l{constructor(e,{path:t,method:n,body:s,headers:r,query:a,idempotent:c,blocking:l,upgrade:C,headersTimeout:I,bodyTimeout:u,reset:d,throwOnError:f,expectContinue:p},y){if("string"!=typeof t)throw new A("path must be a string");if("/"!==t[0]&&!t.startsWith("http://")&&!t.startsWith("https://")&&"CONNECT"!==n)throw new A("path must be an absolute URL or start with a slash");if(null!==g.exec(t))throw new A("invalid request path");if("string"!=typeof n)throw new A("method must be a string");if(null===i.exec(n))throw new A("invalid request method");if(C&&"string"!=typeof C)throw new A("upgrade must be a string");if(null!=I&&(!Number.isFinite(I)||I<0))throw new A("invalid headersTimeout");if(null!=u&&(!Number.isFinite(u)||u<0))throw new A("invalid bodyTimeout");if(null!=d&&"boolean"!=typeof d)throw new A("invalid reset");if(null!=p&&"boolean"!=typeof p)throw new A("invalid expectContinue");if(this.headersTimeout=I,this.bodyTimeout=u,this.throwOnError=!0===f,this.method=n,this.abort=null,null==s)this.body=null;else if(o.isStream(s)){this.body=s;const A=this.body._readableState;A&&A.autoDestroy||(this.endHandler=function(){o.destroy(this)},this.body.on("end",this.endHandler)),this.errorHandler=A=>{this.abort?this.abort(A):this.error=A},this.body.on("error",this.errorHandler)}else if(o.isBuffer(s))this.body=s.byteLength?s:null;else if(ArrayBuffer.isView(s))this.body=s.buffer.byteLength?Buffer.from(s.buffer,s.byteOffset,s.byteLength):null;else if(s instanceof ArrayBuffer)this.body=s.byteLength?Buffer.from(s):null;else if("string"==typeof s)this.body=s.length?Buffer.from(s):null;else{if(!(o.isFormDataLike(s)||o.isIterable(s)||o.isBlobLike(s)))throw new A("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");this.body=s}if(this.completed=!1,this.aborted=!1,this.upgrade=C||null,this.path=a?o.buildURL(t,a):t,this.origin=e,this.idempotent=null==c?"HEAD"===n||"GET"===n:c,this.blocking=null!=l&&l,this.reset=null==d?null:d,this.host=null,this.contentLength=null,this.contentType=null,this.headers="",this.expectContinue=null!=p&&p,Array.isArray(r)){if(r.length%2!=0)throw new A("headers array must be even");for(let A=0;A<r.length;A+=2)B(this,r[A],r[A+1])}else if(r&&"object"==typeof r){const A=Object.keys(r);for(let e=0;e<A.length;e++){const t=A[e];B(this,t,r[t])}}else if(null!=r)throw new A("headers must be an object or an array");if(o.isFormDataLike(this.body)){if(o.nodeMajor<16||16===o.nodeMajor&&o.nodeMinor<8)throw new A("Form-Data bodies are only supported in node v16.8 and newer.");h||(h=fe().extractBody);const[e,t]=h(s);null==this.contentType&&(this.contentType=t,this.headers+=`content-type: ${t}\r\n`),this.body=e.stream,this.contentLength=e.length}else o.isBlobLike(s)&&null==this.contentType&&s.type&&(this.contentType=s.type,this.headers+=`content-type: ${s.type}\r\n`);o.validateHandler(y,n,C),this.servername=o.getServerName(this.host),this[E]=y,Q.create.hasSubscribers&&Q.create.publish({request:this})}onBodySent(A){if(this[E].onBodySent)try{return this[E].onBodySent(A)}catch(A){this.abort(A)}}onRequestSent(){if(Q.bodySent.hasSubscribers&&Q.bodySent.publish({request:this}),this[E].onRequestSent)try{return this[E].onRequestSent()}catch(A){this.abort(A)}}onConnect(A){if(t(!this.aborted),t(!this.completed),!this.error)return this.abort=A,this[E].onConnect(A);A(this.error)}onHeaders(A,e,n,s){t(!this.aborted),t(!this.completed),Q.headers.hasSubscribers&&Q.headers.publish({request:this,response:{statusCode:A,headers:e,statusText:s}});try{return this[E].onHeaders(A,e,n,s)}catch(A){this.abort(A)}}onData(A){t(!this.aborted),t(!this.completed);try{return this[E].onData(A)}catch(A){return this.abort(A),!1}}onUpgrade(A,e,n){return t(!this.aborted),t(!this.completed),this[E].onUpgrade(A,e,n)}onComplete(A){this.onFinally(),t(!this.aborted),this.completed=!0,Q.trailers.hasSubscribers&&Q.trailers.publish({request:this,trailers:A});try{return this[E].onComplete(A)}catch(A){this.onError(A)}}onError(A){if(this.onFinally(),Q.error.hasSubscribers&&Q.error.publish({request:this,error:A}),!this.aborted)return this.aborted=!0,this[E].onError(A)}onFinally(){this.errorHandler&&(this.body.off("error",this.errorHandler),this.errorHandler=null),this.endHandler&&(this.body.off("end",this.endHandler),this.endHandler=null)}addHeader(A,e){return B(this,A,e),this}static[r](A,e,t){return new l(A,e,t)}static[n](e,t,n){const s=t.headers;t={...t,headers:null};const r=new l(e,t,n);if(r.headers={},Array.isArray(s)){if(s.length%2!=0)throw new A("headers array must be even");for(let A=0;A<s.length;A+=2)B(r,s[A],s[A+1],!0)}else if(s&&"object"==typeof s){const A=Object.keys(s);for(let e=0;e<A.length;e++){const t=A[e];B(r,t,s[t],!0)}}else if(null!=s)throw new A("headers must be an object or an array");return r}static[s](A){const e=A.split("\r\n"),t={};for(const A of e){const[e,n]=A.split(": ");null!=n&&0!==n.length&&(t[e]?t[e]+=`,${n}`:t[e]=n)}return t}}function C(e,t,n){if(t&&"object"==typeof t)throw new A(`invalid ${e} header`);if(t=null!=t?`${t}`:"",null!==a.exec(t))throw new A(`invalid ${e} header`);return n?t:`${e}: ${t}\r\n`}function B(t,n,s,r=!1){if(s&&"object"==typeof s&&!Array.isArray(s))throw new A(`invalid ${n} header`);if(void 0!==s)if(null===t.host&&4===n.length&&"host"===n.toLowerCase()){if(null!==a.exec(s))throw new A(`invalid ${n} header`);t.host=s}else if(null===t.contentLength&&14===n.length&&"content-length"===n.toLowerCase()){if(t.contentLength=parseInt(s,10),!Number.isFinite(t.contentLength))throw new A("invalid content-length header")}else if(null===t.contentType&&12===n.length&&"content-type"===n.toLowerCase())t.contentType=s,r?t.headers[n]=C(n,s,r):t.headers+=C(n,s);else{if(17===n.length&&"transfer-encoding"===n.toLowerCase())throw new A("invalid transfer-encoding header");if(10===n.length&&"connection"===n.toLowerCase()){const e="string"==typeof s?s.toLowerCase():null;if("close"!==e&&"keep-alive"!==e)throw new A("invalid connection header");"close"===e&&(t.reset=!0)}else{if(10===n.length&&"keep-alive"===n.toLowerCase())throw new A("invalid keep-alive header");if(7===n.length&&"upgrade"===n.toLowerCase())throw new A("invalid upgrade header");if(6===n.length&&"expect"===n.toLowerCase())throw new e("expect header not supported");if(null===i.exec(n))throw new A("invalid header key");if(Array.isArray(s))for(let A=0;A<s.length;A++)r?t.headers[n]?t.headers[n]+=`,${C(n,s[A],r)}`:t.headers[n]=C(n,s[A],r):t.headers+=C(n,s[A]);else r?t.headers[n]=C(n,s,r):t.headers+=C(n,s)}}}return KA=l}(),g=ye(),{RequestContentLengthMismatchError:Q,ResponseContentLengthMismatchError:h,InvalidArgumentError:l,RequestAbortedError:C,HeadersTimeoutError:B,HeadersOverflowError:I,SocketError:u,InformationalError:d,BodyTimeoutError:f,HTTPParserError:p,ResponseExceededMaxSizeError:y,ClientDestroyedError:m}=rA(),w=me(),{kUrl:D,kReset:k,kServerName:b,kClient:R,kBusy:N,kParser:S,kConnect:F,kBlocking:U,kResuming:L,kRunning:M,kPending:v,kSize:T,kWriting:Y,kQueue:J,kConnected:G,kConnecting:H,kNeedDrain:O,kNoRef:V,kKeepAliveDefaultTimeout:x,kHostHeader:q,kPendingIdx:W,kRunningIdx:P,kError:_,kPipelining:j,kSocket:K,kKeepAliveTimeoutValue:Z,kMaxHeadersSize:X,kKeepAliveMaxTimeout:z,kKeepAliveTimeoutThreshold:$,kHeadersTimeout:AA,kBodyTimeout:eA,kStrictContentLength:tA,kConnector:nA,kMaxRedirections:aA,kMaxRequests:cA,kCounter:gA,kClose:EA,kDestroy:QA,kDispatch:hA,kInterceptors:lA,kLocalAddress:CA,kMaxResponseSize:BA,kHTTPConnVersion:IA,kHost:uA,kHTTP2Session:dA,kHTTP2SessionState:fA,kHTTP2BuildRequest:pA,kHTTP2CopyHeaders:yA,kHTTP1BuildRequest:mA}=sA();let wA;try{wA=require("http2")}catch{wA={constants:{}}}const{constants:{HTTP2_HEADER_AUTHORITY:DA,HTTP2_HEADER_METHOD:kA,HTTP2_HEADER_PATH:bA,HTTP2_HEADER_SCHEME:RA,HTTP2_HEADER_CONTENT_LENGTH:NA,HTTP2_HEADER_EXPECT:SA,HTTP2_HEADER_STATUS:FA}}=wA;let UA=!1;const LA=Buffer[Symbol.species],MA=Symbol("kClosedResolve"),vA={};try{const A=require("diagnostics_channel");vA.sendHeaders=A.channel("undici:client:sendHeaders"),vA.beforeConnect=A.channel("undici:client:beforeConnect"),vA.connectError=A.channel("undici:client:connectError"),vA.connected=A.channel("undici:client:connected")}catch{vA.sendHeaders={hasSubscribers:!1},vA.beforeConnect={hasSubscribers:!1},vA.connectError={hasSubscribers:!1},vA.connected={hasSubscribers:!1}}function TA(e){A("ERR_TLS_CERT_ALTNAME_INVALID"!==e.code),this[K][_]=e,ne(this[R],e)}function YA(A,e,t){const n=new d(`HTTP/2: "frameError" received - type ${A}, code ${e}`);0===t&&(this[K][_]=n,ne(this[R],n))}function JA(){r.destroy(this,new u("other side closed")),r.destroy(this[K],new u("other side closed"))}function GA(e){const t=this[R],n=new d(`HTTP/2: "GOAWAY" frame received with code ${e}`);if(t[K]=null,t[dA]=null,t.destroyed){A(0===this[v]);const e=t[J].splice(t[P]);for(let A=0;A<e.length;A++){Ce(this,e[A],n)}}else if(t[M]>0){const A=t[J][t[P]];t[J][t[P]++]=null,Ce(t,A,n)}t[W]=t[P],A(0===t[M]),t.emit("disconnect",t[D],[t],n),ae(t)}const HA=ze(),OA=At(),VA=Buffer.alloc(0);let xA=null,qA=async function(){const e=process.env.JEST_WORKER_ID?et():void 0;let t;try{t=await WebAssembly.compile(Buffer.from(Le?Ue:(Le=1,Ue=""),"base64"))}catch(A){t=await WebAssembly.compile(Buffer.from(e||et(),"base64"))}return await WebAssembly.instantiate(t,{env:{wasm_on_url:(A,e,t)=>0,wasm_on_status:(e,t,n)=>{A.strictEqual(WA.ptr,e);const s=t-jA+PA.byteOffset;return WA.onStatus(new LA(PA.buffer,s,n))||0},wasm_on_message_begin:e=>(A.strictEqual(WA.ptr,e),WA.onMessageBegin()||0),wasm_on_header_field:(e,t,n)=>{A.strictEqual(WA.ptr,e);const s=t-jA+PA.byteOffset;return WA.onHeaderField(new LA(PA.buffer,s,n))||0},wasm_on_header_value:(e,t,n)=>{A.strictEqual(WA.ptr,e);const s=t-jA+PA.byteOffset;return WA.onHeaderValue(new LA(PA.buffer,s,n))||0},wasm_on_headers_complete:(e,t,n,s)=>(A.strictEqual(WA.ptr,e),WA.onHeadersComplete(t,Boolean(n),Boolean(s))||0),wasm_on_body:(e,t,n)=>{A.strictEqual(WA.ptr,e);const s=t-jA+PA.byteOffset;return WA.onBody(new LA(PA.buffer,s,n))||0},wasm_on_message_complete:e=>(A.strictEqual(WA.ptr,e),WA.onMessageComplete()||0)}})}();qA.catch();let WA=null,PA=null,_A=0,jA=null;const XA=1,zA=3;class $A{constructor(e,t,{exports:n}){A(Number.isFinite(e[X])&&e[X]>0),this.llhttp=n,this.ptr=this.llhttp.llhttp_alloc(HA.TYPE.RESPONSE),this.client=e,this.socket=t,this.timeout=null,this.timeoutValue=null,this.timeoutType=null,this.statusCode=null,this.statusText="",this.upgrade=!1,this.headers=[],this.headersSize=0,this.headersMaxSize=e[X],this.shouldKeepAlive=!1,this.paused=!1,this.resume=this.resume.bind(this),this.bytesRead=0,this.keepAlive="",this.contentLength="",this.connection="",this.maxResponseSize=e[BA]}setTimeout(A,e){this.timeoutType=e,A!==this.timeoutValue?(i.clearTimeout(this.timeout),A?(this.timeout=i.setTimeout(Ae,A,this),this.timeout.unref&&this.timeout.unref()):this.timeout=null,this.timeoutValue=A):this.timeout&&this.timeout.refresh&&this.timeout.refresh()}resume(){!this.socket.destroyed&&this.paused&&(A(null!=this.ptr),A(null==WA),this.llhttp.llhttp_resume(this.ptr),A(2===this.timeoutType),this.timeout&&this.timeout.refresh&&this.timeout.refresh(),this.paused=!1,this.execute(this.socket.read()||VA),this.readMore())}readMore(){for(;!this.paused&&this.ptr;){const A=this.socket.read();if(null===A)break;this.execute(A)}}execute(e){A(null!=this.ptr),A(null==WA),A(!this.paused);const{socket:t,llhttp:n}=this;e.length>_A&&(jA&&n.free(jA),_A=4096*Math.ceil(e.length/4096),jA=n.malloc(_A)),new Uint8Array(n.memory.buffer,jA,_A).set(e);try{let A;try{PA=e,WA=this,A=n.llhttp_execute(this.ptr,jA,e.length)}catch(A){throw A}finally{WA=null,PA=null}const s=n.llhttp_get_error_pos(this.ptr)-jA;if(A===HA.ERROR.PAUSED_UPGRADE)this.onUpgrade(e.slice(s));else if(A===HA.ERROR.PAUSED)this.paused=!0,t.unshift(e.slice(s));else if(A!==HA.ERROR.OK){const t=n.llhttp_get_error_reason(this.ptr);let r="";if(t){const A=new Uint8Array(n.memory.buffer,t).indexOf(0);r="Response does not match the HTTP/1.1 protocol ("+Buffer.from(n.memory.buffer,t,A).toString()+")"}throw new p(r,HA.ERROR[A],e.slice(s))}}catch(A){r.destroy(t,A)}}destroy(){A(null!=this.ptr),A(null==WA),this.llhttp.llhttp_free(this.ptr),this.ptr=null,i.clearTimeout(this.timeout),this.timeout=null,this.timeoutValue=null,this.timeoutType=null,this.paused=!1}onStatus(A){this.statusText=A.toString()}onMessageBegin(){const{socket:A,client:e}=this;if(A.destroyed)return-1;return e[J][e[P]]?void 0:-1}onHeaderField(A){const e=this.headers.length;1&e?this.headers[e-1]=Buffer.concat([this.headers[e-1],A]):this.headers.push(A),this.trackHeader(A.length)}onHeaderValue(A){let e=this.headers.length;1&~e?this.headers[e-1]=Buffer.concat([this.headers[e-1],A]):(this.headers.push(A),e+=1);const t=this.headers[e-2];10===t.length&&"keep-alive"===t.toString().toLowerCase()?this.keepAlive+=A.toString():10===t.length&&"connection"===t.toString().toLowerCase()?this.connection+=A.toString():14===t.length&&"content-length"===t.toString().toLowerCase()&&(this.contentLength+=A.toString()),this.trackHeader(A.length)}trackHeader(A){this.headersSize+=A,this.headersSize>=this.headersMaxSize&&r.destroy(this.socket,new I)}onUpgrade(e){const{upgrade:t,client:n,socket:s,headers:o,statusCode:i}=this;A(t);const a=n[J][n[P]];A(a),A(!s.destroyed),A(s===n[K]),A(!this.paused),A(a.upgrade||"CONNECT"===a.method),this.statusCode=null,this.statusText="",this.shouldKeepAlive=null,A(this.headers.length%2==0),this.headers=[],this.headersSize=0,s.unshift(e),s[S].destroy(),s[S]=null,s[R]=null,s[_]=null,s.removeListener("error",te).removeListener("readable",ee).removeListener("end",se).removeListener("close",re),n[K]=null,n[J][n[P]++]=null,n.emit("disconnect",n[D],[n],new d("upgrade"));try{a.onUpgrade(i,o,s)}catch(A){r.destroy(s,A)}ae(n)}onHeadersComplete(e,t,n){const{client:s,socket:o,headers:i,statusText:a}=this;if(o.destroyed)return-1;const c=s[J][s[P]];if(!c)return-1;if(A(!this.upgrade),A(this.statusCode<200),100===e)return r.destroy(o,new u("bad response",r.getSocketInfo(o))),-1;if(t&&!c.upgrade)return r.destroy(o,new u("bad upgrade",r.getSocketInfo(o))),-1;if(A.strictEqual(this.timeoutType,XA),this.statusCode=e,this.shouldKeepAlive=n||"HEAD"===c.method&&!o[k]&&"keep-alive"===this.connection.toLowerCase(),this.statusCode>=200){const A=null!=c.bodyTimeout?c.bodyTimeout:s[eA];this.setTimeout(A,2)}else this.timeout&&this.timeout.refresh&&this.timeout.refresh();if("CONNECT"===c.method)return A(1===s[M]),this.upgrade=!0,2;if(t)return A(1===s[M]),this.upgrade=!0,2;if(A(this.headers.length%2==0),this.headers=[],this.headersSize=0,this.shouldKeepAlive&&s[j]){const A=this.keepAlive?r.parseKeepAliveTimeout(this.keepAlive):null;if(null!=A){const e=Math.min(A-s[$],s[z]);e<=0?o[k]=!0:s[Z]=e}else s[Z]=s[x]}else o[k]=!0;const g=!1===c.onHeaders(e,i,this.resume,a);return c.aborted?-1:"HEAD"===c.method||e<200?1:(o[U]&&(o[U]=!1,ae(s)),g?HA.ERROR.PAUSED:0)}onBody(e){const{client:t,socket:n,statusCode:s,maxResponseSize:o}=this;if(n.destroyed)return-1;const i=t[J][t[P]];return A(i),A.strictEqual(this.timeoutType,2),this.timeout&&this.timeout.refresh&&this.timeout.refresh(),A(s>=200),o>-1&&this.bytesRead+e.length>o?(r.destroy(n,new y),-1):(this.bytesRead+=e.length,!1===i.onData(e)?HA.ERROR.PAUSED:void 0)}onMessageComplete(){const{client:e,socket:t,statusCode:n,upgrade:s,headers:o,contentLength:i,bytesRead:a,shouldKeepAlive:c}=this;if(t.destroyed&&(!n||c))return-1;if(s)return;const g=e[J][e[P]];return A(g),A(n>=100),this.statusCode=null,this.statusText="",this.bytesRead=0,this.contentLength="",this.keepAlive="",this.connection="",A(this.headers.length%2==0),this.headers=[],this.headersSize=0,n<200?void 0:"HEAD"!==g.method&&i&&a!==parseInt(i,10)?(r.destroy(t,new h),-1):(g.onComplete(o),e[J][e[P]++]=null,t[Y]?(A.strictEqual(e[M],0),r.destroy(t,new d("reset")),HA.ERROR.PAUSED):c?t[k]&&0===e[M]?(r.destroy(t,new d("reset")),HA.ERROR.PAUSED):void(1===e[j]?setImmediate(ae,e):ae(e)):(r.destroy(t,new d("reset")),HA.ERROR.PAUSED))}}function Ae(e){const{socket:t,timeoutType:n,client:s}=e;n===XA?(!t[Y]||t.writableNeedDrain||s[M]>1)&&(A(!e.paused,"cannot be paused while waiting for headers"),r.destroy(t,new B)):2===n?e.paused||r.destroy(t,new f):n===zA&&(A(0===s[M]&&s[Z]),r.destroy(t,new d("socket idle timeout")))}function ee(){const{[S]:A}=this;A&&A.readMore()}function te(e){const{[R]:t,[S]:n}=this;A("ERR_TLS_CERT_ALTNAME_INVALID"!==e.code),"h2"===t[IA]||"ECONNRESET"!==e.code||!n.statusCode||n.shouldKeepAlive?(this[_]=e,ne(this[R],e)):n.onMessageComplete()}function ne(e,t){if(0===e[M]&&"UND_ERR_INFO"!==t.code&&"UND_ERR_SOCKET"!==t.code){A(e[W]===e[P]);const n=e[J].splice(e[P]);for(let A=0;A<n.length;A++){Ce(e,n[A],t)}A(0===e[T])}}function se(){const{[S]:A,[R]:e}=this;"h2"===e[IA]||!A.statusCode||A.shouldKeepAlive?r.destroy(this,new u("other side closed",r.getSocketInfo(this))):A.onMessageComplete()}function re(){const{[R]:e,[S]:t}=this;"h1"===e[IA]&&t&&(this[_]||!t.statusCode||t.shouldKeepAlive||t.onMessageComplete(),this[S].destroy(),this[S]=null);const n=this[_]||new u("closed",r.getSocketInfo(this));if(e[K]=null,e.destroyed){A(0===e[v]);const t=e[J].splice(e[P]);for(let A=0;A<t.length;A++){Ce(e,t[A],n)}}else if(e[M]>0&&"UND_ERR_INFO"!==n.code){const A=e[J][e[P]];e[J][e[P]++]=null,Ce(e,A,n)}e[W]=e[P],A(0===e[M]),e.emit("disconnect",e[D],[e],n),ae(e)}async function oe(t){A(!t[H]),A(!t[K]);let{host:n,hostname:s,protocol:o,port:i}=t[D];if("["===s[0]){const t=s.indexOf("]");A(-1!==t);const n=s.substring(1,t);A(e.isIP(n)),s=n}t[H]=!0,vA.beforeConnect.hasSubscribers&&vA.beforeConnect.publish({connectParams:{host:n,hostname:s,protocol:o,port:i,servername:t[b],localAddress:t[CA]},connector:t[nA]});try{const e=await new Promise(((A,e)=>{t[nA]({host:n,hostname:s,protocol:o,port:i,servername:t[b],localAddress:t[CA]},((t,n)=>{t?e(t):A(n)}))}));if(t.destroyed)return void r.destroy(e.on("error",(()=>{})),new m);t[H]=!1,A(e);if("h2"===e.alpnProtocol){UA||(UA=!0,process.emitWarning("H2 support is experimental, expect them to change at any time.",{code:"UNDICI-H2"}));const A=wA.connect(t[D],{createConnection:()=>e,peerMaxConcurrentStreams:t[fA].maxConcurrentStreams});t[IA]="h2",A[R]=t,A[K]=e,A.on("error",TA),A.on("frameError",YA),A.on("end",JA),A.on("goaway",GA),A.on("close",re),A.unref(),t[dA]=A,e[dA]=A}else xA||(xA=await qA,qA=null),e[V]=!1,e[Y]=!1,e[k]=!1,e[U]=!1,e[S]=new $A(t,e,xA);e[gA]=0,e[cA]=t[cA],e[R]=t,e[_]=null,e.on("error",te).on("readable",ee).on("end",se).on("close",re),t[K]=e,vA.connected.hasSubscribers&&vA.connected.publish({connectParams:{host:n,hostname:s,protocol:o,port:i,servername:t[b],localAddress:t[CA]},connector:t[nA],socket:e}),t.emit("connect",t[D],[t])}catch(e){if(t.destroyed)return;if(t[H]=!1,vA.connectError.hasSubscribers&&vA.connectError.publish({connectParams:{host:n,hostname:s,protocol:o,port:i,servername:t[b],localAddress:t[CA]},connector:t[nA],error:e}),"ERR_TLS_CERT_ALTNAME_INVALID"===e.code)for(A(0===t[M]);t[v]>0&&t[J][t[W]].servername===t[b];){const A=t[J][t[W]++];Ce(t,A,e)}else ne(t,e);t.emit("connectionError",t[D],[t],e)}ae(t)}function ie(A){A[O]=0,A.emit("drain",A[D],[A])}function ae(e,t){2!==e[L]&&(e[L]=2,function(e,t){for(;;){if(e.destroyed)return void A(0===e[v]);if(e[MA]&&!e[T])return e[MA](),void(e[MA]=null);const n=e[K];if(n&&!n.destroyed&&"h2"!==n.alpnProtocol)if(0===e[T]?!n[V]&&n.unref&&(n.unref(),n[V]=!0):n[V]&&n.ref&&(n.ref(),n[V]=!1),0===e[T])n[S].timeoutType!==zA&&n[S].setTimeout(e[Z],zA);else if(e[M]>0&&n[S].statusCode<200&&n[S].timeoutType!==XA){const A=e[J][e[P]],t=null!=A.headersTimeout?A.headersTimeout:e[AA];n[S].setTimeout(t,XA)}if(e[N])e[O]=2;else if(2===e[O]){t?(e[O]=1,process.nextTick(ie,e)):ie(e);continue}if(0===e[v])return;if(e[M]>=(e[j]||1))return;const s=e[J][e[W]];if("https:"===e[D].protocol&&e[b]!==s.servername){if(e[M]>0)return;if(e[b]=s.servername,n&&n.servername!==s.servername)return void r.destroy(n,new d("servername changed"))}if(e[H])return;if(!n&&!e[dA])return void oe(e);if(n.destroyed||n[Y]||n[k]||n[U])return;if(e[M]>0&&!s.idempotent)return;if(e[M]>0&&(s.upgrade||"CONNECT"===s.method))return;if(e[M]>0&&0!==r.bodyLength(s.body)&&(r.isStream(s.body)||r.isAsyncIterable(s.body)))return;!s.aborted&&ge(e,s)?e[W]++:e[J].splice(e[W],1)}}(e,t),e[L]=0,e[P]>256&&(e[J].splice(0,e[P]),e[W]-=e[P],e[P]=0))}function ce(A){return"GET"!==A&&"HEAD"!==A&&"OPTIONS"!==A&&"TRACE"!==A&&"CONNECT"!==A}function ge(e,t){if("h2"===e[IA])return void function(e,t,n){const{body:s,method:o,path:i,host:c,upgrade:g,expectContinue:E,signal:h,headers:l}=n;let B,I;B="string"==typeof l?a[yA](l.trim()):l;if(g)return Ce(e,n,new Error("Upgrade not supported for H2")),!1;try{n.onConnect((A=>{n.aborted||n.completed||Ce(e,n,A||new C)}))}catch(A){Ce(e,n,A)}if(n.aborted)return!1;const u=e[fA];if(B[DA]=c||e[uA],B[kA]=o,"CONNECT"===o)return t.ref(),I=t.request(B,{endStream:!1,signal:h}),I.id&&!I.pending?(n.onUpgrade(null,null,I),++u.openStreams):I.once("ready",(()=>{n.onUpgrade(null,null,I),++u.openStreams})),I.once("close",(()=>{u.openStreams-=1,0===u.openStreams&&t.unref()})),!0;B[bA]=i,B[RA]="https";const f="PUT"===o||"POST"===o||"PATCH"===o;s&&"function"==typeof s.read&&s.read(0);let p=r.bodyLength(s);null==p&&(p=n.contentLength);0!==p&&f||(p=null);if(ce(o)&&p>0&&null!=n.contentLength&&n.contentLength!==p){if(e[tA])return Ce(e,n,new Q),!1;process.emitWarning(new Q)}null!=p&&(A(s,"no body must not have content length"),B[NA]=`${p}`);t.ref();const y="GET"===o||"HEAD"===o;E?(B[SA]="100-continue",I=t.request(B,{endStream:y,signal:h}),I.once("continue",m)):(I=t.request(B,{endStream:y,signal:h}),m());return++u.openStreams,I.once("response",(A=>{const{[FA]:e,...t}=A;!1===n.onHeaders(Number(e),t,I.resume.bind(I),"")&&I.pause()})),I.once("end",(()=>{n.onComplete([])})),I.on("data",(A=>{!1===n.onData(A)&&I.pause()})),I.once("close",(()=>{u.openStreams-=1,0===u.openStreams&&t.unref()})),I.once("error",(function(A){!e[dA]||e[dA].destroyed||this.closed||this.destroyed||(u.streams-=1,r.destroy(I,A))})),I.once("frameError",((A,t)=>{const s=new d(`HTTP/2: "frameError" received - type ${A}, code ${t}`);Ce(e,n,s),!e[dA]||e[dA].destroyed||this.closed||this.destroyed||(u.streams-=1,r.destroy(I,s))})),!0;function m(){s?r.isBuffer(s)?(A(p===s.byteLength,"buffer body must have content length"),I.cork(),I.write(s),I.uncork(),I.end(),n.onBodySent(s),n.onRequestSent()):r.isBlobLike(s)?"function"==typeof s.stream?he({client:e,request:n,contentLength:p,h2stream:I,expectsPayload:f,body:s.stream(),socket:e[K],header:""}):Qe({body:s,client:e,request:n,contentLength:p,expectsPayload:f,h2stream:I,header:"",socket:e[K]}):r.isStream(s)?Ee({body:s,client:e,request:n,contentLength:p,expectsPayload:f,socket:e[K],h2stream:I,header:""}):r.isIterable(s)?he({body:s,client:e,request:n,contentLength:p,expectsPayload:f,header:"",h2stream:I,socket:e[K]}):A(!1):n.onRequestSent()}}(e,e[dA],t);const{body:n,method:s,path:o,host:i,upgrade:c,headers:g,blocking:E,reset:h}=t,l="PUT"===s||"POST"===s||"PATCH"===s;n&&"function"==typeof n.read&&n.read(0);const B=r.bodyLength(n);let I=B;if(null===I&&(I=t.contentLength),0!==I||l||(I=null),ce(s)&&I>0&&null!==t.contentLength&&t.contentLength!==I){if(e[tA])return Ce(e,t,new Q),!1;process.emitWarning(new Q)}const u=e[K];try{t.onConnect((A=>{t.aborted||t.completed||(Ce(e,t,A||new C),r.destroy(u,new d("aborted")))}))}catch(A){Ce(e,t,A)}if(t.aborted)return!1;"HEAD"===s&&(u[k]=!0),(c||"CONNECT"===s)&&(u[k]=!0),null!=h&&(u[k]=h),e[cA]&&u[gA]++>=e[cA]&&(u[k]=!0),E&&(u[U]=!0);let f=`${s} ${o} HTTP/1.1\r\n`;return f+="string"==typeof i?`host: ${i}\r\n`:e[q],c?f+=`connection: upgrade\r\nupgrade: ${c}\r\n`:e[j]&&!u[k]?f+="connection: keep-alive\r\n":f+="connection: close\r\n",g&&(f+=g),vA.sendHeaders.hasSubscribers&&vA.sendHeaders.publish({request:t,headers:f,socket:u}),n&&0!==B?r.isBuffer(n)?(A(I===n.byteLength,"buffer body must have content length"),u.cork(),u.write(`${f}content-length: ${I}\r\n\r\n`,"latin1"),u.write(n),u.uncork(),t.onBodySent(n),t.onRequestSent(),l||(u[k]=!0)):r.isBlobLike(n)?"function"==typeof n.stream?he({body:n.stream(),client:e,request:t,socket:u,contentLength:I,header:f,expectsPayload:l}):Qe({body:n,client:e,request:t,socket:u,contentLength:I,header:f,expectsPayload:l}):r.isStream(n)?Ee({body:n,client:e,request:t,socket:u,contentLength:I,header:f,expectsPayload:l}):r.isIterable(n)?he({body:n,client:e,request:t,socket:u,contentLength:I,header:f,expectsPayload:l}):A(!1):(0===I?u.write(`${f}content-length: 0\r\n\r\n`,"latin1"):(A(null===I,"no body must not have content length"),u.write(`${f}\r\n`,"latin1")),t.onRequestSent()),!0}function Ee({h2stream:e,body:t,client:s,request:o,socket:i,contentLength:a,header:c,expectsPayload:g}){if(A(0!==a||0===s[M],"stream body cannot be pipelined"),"h2"===s[IA]){const u=n(t,e,(A=>{A?(r.destroy(t,A),r.destroy(e,A)):o.onRequestSent()}));function d(A){o.onBodySent(A)}return u.on("data",d),void u.once("end",(()=>{u.removeListener("data",d),r.destroy(u)}))}let E=!1;const Q=new le({socket:i,request:o,contentLength:a,client:s,expectsPayload:g,header:c}),h=function(A){if(!E)try{!Q.write(A)&&this.pause&&this.pause()}catch(A){r.destroy(this,A)}},l=function(){E||t.resume&&t.resume()},B=function(){if(E)return;const A=new C;queueMicrotask((()=>I(A)))},I=function(e){if(!E){if(E=!0,A(i.destroyed||i[Y]&&s[M]<=1),i.off("drain",l).off("error",I),t.removeListener("data",h).removeListener("end",I).removeListener("error",I).removeListener("close",B),!e)try{Q.end()}catch(A){e=A}Q.destroy(e),!e||"UND_ERR_INFO"===e.code&&"reset"===e.message?r.destroy(t):r.destroy(t,e)}};t.on("data",h).on("end",I).on("error",I).on("close",B),t.resume&&t.resume(),i.on("drain",l).on("error",I)}async function Qe({h2stream:e,body:t,client:n,request:s,socket:o,contentLength:i,header:a,expectsPayload:c}){A(i===t.size,"blob body must have content length");const g="h2"===n[IA];try{if(null!=i&&i!==t.size)throw new Q;const A=Buffer.from(await t.arrayBuffer());g?(e.cork(),e.write(A),e.uncork()):(o.cork(),o.write(`${a}content-length: ${i}\r\n\r\n`,"latin1"),o.write(A),o.uncork()),s.onBodySent(A),s.onRequestSent(),c||(o[k]=!0),ae(n)}catch(A){r.destroy(g?e:o,A)}}async function he({h2stream:e,body:t,client:n,request:s,socket:r,contentLength:o,header:i,expectsPayload:a}){A(0!==o||0===n[M],"iterator body cannot be pipelined");let c=null;function g(){if(c){const A=c;c=null,A()}}const E=()=>new Promise(((e,t)=>{A(null===c),r[_]?t(r[_]):c=e}));if("h2"===n[IA]){e.on("close",g).on("drain",g);try{for await(const A of t){if(r[_])throw r[_];const t=e.write(A);s.onBodySent(A),t||await E()}}catch(A){e.destroy(A)}finally{s.onRequestSent(),e.end(),e.off("close",g).off("drain",g)}return}r.on("close",g).on("drain",g);const Q=new le({socket:r,request:s,contentLength:o,client:n,expectsPayload:a,header:i});try{for await(const A of t){if(r[_])throw r[_];Q.write(A)||await E()}Q.end()}catch(A){Q.destroy(A)}finally{r.off("close",g).off("drain",g)}}class le{constructor({socket:A,request:e,contentLength:t,client:n,expectsPayload:s,header:r}){this.socket=A,this.request=e,this.contentLength=t,this.client=n,this.bytesWritten=0,this.expectsPayload=s,this.header=r,A[Y]=!0}write(A){const{socket:e,request:t,contentLength:n,client:s,bytesWritten:r,expectsPayload:o,header:i}=this;if(e[_])throw e[_];if(e.destroyed)return!1;const a=Buffer.byteLength(A);if(!a)return!0;if(null!==n&&r+a>n){if(s[tA])throw new Q;process.emitWarning(new Q)}e.cork(),0===r&&(o||(e[k]=!0),null===n?e.write(`${i}transfer-encoding: chunked\r\n`,"latin1"):e.write(`${i}content-length: ${n}\r\n\r\n`,"latin1")),null===n&&e.write(`\r\n${a.toString(16)}\r\n`,"latin1"),this.bytesWritten+=a;const c=e.write(A);return e.uncork(),t.onBodySent(A),c||e[S].timeout&&e[S].timeoutType===XA&&e[S].timeout.refresh&&e[S].timeout.refresh(),c}end(){const{socket:A,contentLength:e,client:t,bytesWritten:n,expectsPayload:s,header:r,request:o}=this;if(o.onRequestSent(),A[Y]=!1,A[_])throw A[_];if(!A.destroyed){if(0===n?s?A.write(`${r}content-length: 0\r\n\r\n`,"latin1"):A.write(`${r}\r\n`,"latin1"):null===e&&A.write("\r\n0\r\n\r\n","latin1"),null!==e&&n!==e){if(t[tA])throw new Q;process.emitWarning(new Q)}A[S].timeout&&A[S].timeoutType===XA&&A[S].timeout.refresh&&A[S].timeout.refresh(),ae(t)}}destroy(e){const{socket:t,client:n}=this;t[Y]=!1,e&&(A(n[M]<=1,"pipeline should only contain this request"),r.destroy(t,e))}}function Ce(e,t,n){try{t.onError(n),A(t.aborted)}catch(n){e.emit("error",n)}}return Me=class extends g{constructor(A,{interceptors:n,maxHeaderSize:s,headersTimeout:o,socketTimeout:i,requestTimeout:a,connectTimeout:c,bodyTimeout:g,idleTimeout:E,keepAlive:Q,keepAliveTimeout:h,maxKeepAliveTimeout:C,keepAliveMaxTimeout:B,keepAliveTimeoutThreshold:I,socketPath:u,pipelining:d,tls:f,strictContentLength:p,maxCachedSessions:y,maxRedirections:m,connect:k,maxRequestsPerClient:R,localAddress:N,maxResponseSize:S,autoSelectFamily:F,autoSelectFamilyAttemptTimeout:U,allowH2:M,maxConcurrentStreams:v}={}){if(super(),void 0!==Q)throw new l("unsupported keepAlive, use pipelining=0 instead");if(void 0!==i)throw new l("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");if(void 0!==a)throw new l("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");if(void 0!==E)throw new l("unsupported idleTimeout, use keepAliveTimeout instead");if(void 0!==C)throw new l("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");if(null!=s&&!Number.isFinite(s))throw new l("invalid maxHeaderSize");if(null!=u&&"string"!=typeof u)throw new l("invalid socketPath");if(null!=c&&(!Number.isFinite(c)||c<0))throw new l("invalid connectTimeout");if(null!=h&&(!Number.isFinite(h)||h<=0))throw new l("invalid keepAliveTimeout");if(null!=B&&(!Number.isFinite(B)||B<=0))throw new l("invalid keepAliveMaxTimeout");if(null!=I&&!Number.isFinite(I))throw new l("invalid keepAliveTimeoutThreshold");if(null!=o&&(!Number.isInteger(o)||o<0))throw new l("headersTimeout must be a positive integer or zero");if(null!=g&&(!Number.isInteger(g)||g<0))throw new l("bodyTimeout must be a positive integer or zero");if(null!=k&&"function"!=typeof k&&"object"!=typeof k)throw new l("connect must be a function or an object");if(null!=m&&(!Number.isInteger(m)||m<0))throw new l("maxRedirections must be a positive number");if(null!=R&&(!Number.isInteger(R)||R<0))throw new l("maxRequestsPerClient must be a positive number");if(null!=N&&("string"!=typeof N||0===e.isIP(N)))throw new l("localAddress must be valid string IP address");if(null!=S&&(!Number.isInteger(S)||S<-1))throw new l("maxResponseSize must be a positive number");if(null!=U&&(!Number.isInteger(U)||U<-1))throw new l("autoSelectFamilyAttemptTimeout must be a positive number");if(null!=M&&"boolean"!=typeof M)throw new l("allowH2 must be a valid boolean value");if(null!=v&&("number"!=typeof v||v<1))throw new l("maxConcurrentStreams must be a possitive integer, greater than 0");"function"!=typeof k&&(k=w({...f,maxCachedSessions:y,allowH2:M,socketPath:u,timeout:c,...r.nodeHasAutoSelectFamily&&F?{autoSelectFamily:F,autoSelectFamilyAttemptTimeout:U}:void 0,...k})),this[lA]=n&&n.Client&&Array.isArray(n.Client)?n.Client:[OA({maxRedirections:m})],this[D]=r.parseOrigin(A),this[nA]=k,this[K]=null,this[j]=null!=d?d:1,this[X]=s||t.maxHeaderSize,this[x]=null==h?4e3:h,this[z]=null==B?6e5:B,this[$]=null==I?1e3:I,this[Z]=this[x],this[b]=null,this[CA]=null!=N?N:null,this[L]=0,this[O]=0,this[q]=`host: ${this[D].hostname}${this[D].port?`:${this[D].port}`:""}\r\n`,this[eA]=null!=g?g:3e5,this[AA]=null!=o?o:3e5,this[tA]=null==p||p,this[aA]=m,this[cA]=R,this[MA]=null,this[BA]=S>-1?S:-1,this[IA]="h1",this[dA]=null,this[fA]=M?{openStreams:0,maxConcurrentStreams:null!=v?v:100}:null,this[uA]=`${this[D].hostname}${this[D].port?`:${this[D].port}`:""}`,this[J]=[],this[P]=0,this[W]=0}get pipelining(){return this[j]}set pipelining(A){this[j]=A,ae(this,!0)}get[v](){return this[J].length-this[W]}get[M](){return this[W]-this[P]}get[T](){return this[J].length-this[P]}get[G](){return!!this[K]&&!this[H]&&!this[K].destroyed}get[N](){const A=this[K];return A&&(A[k]||A[Y]||A[U])||this[T]>=(this[j]||1)||this[v]>0}[F](A){oe(this),this.once("connect",A)}[hA](A,e){const t=A.origin||this[D].origin,n="h2"===this[IA]?a[pA](t,A,e):a[mA](t,A,e);return this[J].push(n),this[L]||(null==r.bodyLength(n.body)&&r.isIterable(n.body)?(this[L]=1,process.nextTick(ae,this)):ae(this,!0)),this[L]&&2!==this[O]&&this[N]&&(this[O]=2),this[O]<2}async[EA](){return new Promise((A=>{this[T]?this[MA]=A:A(null)}))}async[QA](A){return new Promise((e=>{const t=this[J].splice(this[W]);for(let e=0;e<t.length;e++){Ce(this,t[e],A)}const n=()=>{this[MA]&&(this[MA](),this[MA]=null),e()};null!=this[dA]&&(r.destroy(this[dA],A),this[dA]=null,this[fA]=null),this[K]?r.destroy(this[K].on("close",n),A):queueMicrotask(n),ae(this)}))}},Me}function nt(){if(Oe)return He;Oe=1;const A=ye(),e=function(){if(Ye)return Te;Ye=1;const A=2047;class e{constructor(){this.bottom=0,this.top=0,this.list=new Array(2048),this.next=null}isEmpty(){return this.top===this.bottom}isFull(){return(this.top+1&A)===this.bottom}push(e){this.list[this.top]=e,this.top=this.top+1&A}shift(){const e=this.list[this.bottom];return void 0===e?null:(this.list[this.bottom]=void 0,this.bottom=this.bottom+1&A,e)}}return Te=class{constructor(){this.head=this.tail=new e}isEmpty(){return this.head.isEmpty()}push(A){this.head.isFull()&&(this.head=this.head.next=new e),this.head.push(A)}shift(){const A=this.tail,e=A.shift();return A.isEmpty()&&null!==A.next&&(this.tail=A.next),e}}}(),{kConnected:t,kSize:n,kRunning:s,kPending:r,kQueued:o,kBusy:i,kFree:a,kUrl:c,kClose:g,kDestroy:E,kDispatch:Q}=sA(),h=function(){if(Ge)return Je;Ge=1;const{kFree:A,kConnected:e,kPending:t,kQueued:n,kRunning:s,kSize:r}=sA(),o=Symbol("pool");return Je=class{constructor(A){this[o]=A}get connected(){return this[o][e]}get free(){return this[o][A]}get pending(){return this[o][t]}get queued(){return this[o][n]}get running(){return this[o][s]}get size(){return this[o][r]}},Je}(),l=Symbol("clients"),C=Symbol("needDrain"),B=Symbol("queue"),I=Symbol("closed resolve"),u=Symbol("onDrain"),d=Symbol("onConnect"),f=Symbol("onDisconnect"),p=Symbol("onConnectionError"),y=Symbol("get dispatcher"),m=Symbol("add client"),w=Symbol("remove client"),D=Symbol("stats");return He={PoolBase:class extends A{constructor(){super(),this[B]=new e,this[l]=[],this[o]=0;const A=this;this[u]=function(e,t){const n=A[B];let s=!1;for(;!s;){const e=n.shift();if(!e)break;A[o]--,s=!this.dispatch(e.opts,e.handler)}this[C]=s,!this[C]&&A[C]&&(A[C]=!1,A.emit("drain",e,[A,...t])),A[I]&&n.isEmpty()&&Promise.all(A[l].map((A=>A.close()))).then(A[I])},this[d]=(e,t)=>{A.emit("connect",e,[A,...t])},this[f]=(e,t,n)=>{A.emit("disconnect",e,[A,...t],n)},this[p]=(e,t,n)=>{A.emit("connectionError",e,[A,...t],n)},this[D]=new h(this)}get[i](){return this[C]}get[t](){return this[l].filter((A=>A[t])).length}get[a](){return this[l].filter((A=>A[t]&&!A[C])).length}get[r](){let A=this[o];for(const{[r]:e}of this[l])A+=e;return A}get[s](){let A=0;for(const{[s]:e}of this[l])A+=e;return A}get[n](){let A=this[o];for(const{[n]:e}of this[l])A+=e;return A}get stats(){return this[D]}async[g](){return this[B].isEmpty()?Promise.all(this[l].map((A=>A.close()))):new Promise((A=>{this[I]=A}))}async[E](A){for(;;){const e=this[B].shift();if(!e)break;e.handler.onError(A)}return Promise.all(this[l].map((e=>e.destroy(A))))}[Q](A,e){const t=this[y]();return t?t.dispatch(A,e)||(t[C]=!0,this[C]=!this[y]()):(this[C]=!0,this[B].push({opts:A,handler:e}),this[o]++),!this[C]}[m](A){return A.on("drain",this[u]).on("connect",this[d]).on("disconnect",this[f]).on("connectionError",this[p]),this[l].push(A),this[C]&&process.nextTick((()=>{this[C]&&this[u](A[c],[this,A])})),this}[w](A){A.close((()=>{const e=this[l].indexOf(A);-1!==e&&this[l].splice(e,1)})),this[C]=this[l].some((A=>!A[C]&&!0!==A.closed&&!0!==A.destroyed))}},kClients:l,kNeedDrain:C,kAddClient:m,kRemoveClient:w,kGetDispatcher:y},He}function st(){if(xe)return Ve;xe=1;const{PoolBase:A,kClients:e,kNeedDrain:t,kAddClient:n,kGetDispatcher:s}=nt(),r=tt(),{InvalidArgumentError:o}=rA(),i=oA(),{kUrl:a,kInterceptors:c}=sA(),g=me(),E=Symbol("options"),Q=Symbol("connections"),h=Symbol("factory");function l(A,e){return new r(A,e)}return Ve=class extends A{constructor(A,{connections:t,factory:n=l,connect:s,connectTimeout:r,tls:C,maxCachedSessions:B,socketPath:I,autoSelectFamily:u,autoSelectFamilyAttemptTimeout:d,allowH2:f,...p}={}){if(super(),null!=t&&(!Number.isFinite(t)||t<0))throw new o("invalid connections");if("function"!=typeof n)throw new o("factory must be a function.");if(null!=s&&"function"!=typeof s&&"object"!=typeof s)throw new o("connect must be a function or an object");"function"!=typeof s&&(s=g({...C,maxCachedSessions:B,allowH2:f,socketPath:I,timeout:r,...i.nodeHasAutoSelectFamily&&u?{autoSelectFamily:u,autoSelectFamilyAttemptTimeout:d}:void 0,...s})),this[c]=p.interceptors&&p.interceptors.Pool&&Array.isArray(p.interceptors.Pool)?p.interceptors.Pool:[],this[Q]=t||null,this[a]=i.parseOrigin(A),this[E]={...i.deepClone(p),connect:s,allowH2:f},this[E].interceptors=p.interceptors?{...p.interceptors}:void 0,this[h]=n,this.on("connectionError",((A,t,n)=>{for(const A of t){const t=this[e].indexOf(A);-1!==t&&this[e].splice(t,1)}}))}[s](){let A=this[e].find((A=>!A[t]));return A||((!this[Q]||this[e].length<this[Q])&&(A=this[h](this[a],this[E]),this[n](A)),A)}},Ve}function rt(){if(_e)return Pe;_e=1;const{kConnected:A,kSize:e}=sA();class t{constructor(A){this.value=A}deref(){return 0===this.value[A]&&0===this.value[e]?void 0:this.value}}class n{constructor(A){this.finalizer=A}register(t,n){t.on&&t.on("disconnect",(()=>{0===t[A]&&0===t[e]&&this.finalizer(n)}))}}return Pe=function(){return process.env.NODE_V8_COVERAGE?{WeakRef:t,FinalizationRegistry:n}:{WeakRef:b.WeakRef||t,FinalizationRegistry:b.FinalizationRegistry||n}}}function ot(){if(Ke)return je;Ke=1;const{InvalidArgumentError:A}=rA(),{kClients:e,kRunning:t,kClose:n,kDestroy:s,kDispatch:r,kInterceptors:o}=sA(),i=ye(),a=st(),c=tt(),g=oA(),E=At(),{WeakRef:Q,FinalizationRegistry:h}=rt()(),l=Symbol("onConnect"),C=Symbol("onDisconnect"),B=Symbol("onConnectionError"),I=Symbol("maxRedirections"),u=Symbol("onDrain"),d=Symbol("factory"),f=Symbol("finalizer"),p=Symbol("options");function y(A,e){return e&&1===e.connections?new c(A,e):new a(A,e)}return je=class extends i{constructor({factory:t=y,maxRedirections:n=0,connect:s,...r}={}){if(super(),"function"!=typeof t)throw new A("factory must be a function.");if(null!=s&&"function"!=typeof s&&"object"!=typeof s)throw new A("connect must be a function or an object");if(!Number.isInteger(n)||n<0)throw new A("maxRedirections must be a positive number");s&&"function"!=typeof s&&(s={...s}),this[o]=r.interceptors&&r.interceptors.Agent&&Array.isArray(r.interceptors.Agent)?r.interceptors.Agent:[E({maxRedirections:n})],this[p]={...g.deepClone(r),connect:s},this[p].interceptors=r.interceptors?{...r.interceptors}:void 0,this[I]=n,this[d]=t,this[e]=new Map,this[f]=new h((A=>{const t=this[e].get(A);void 0!==t&&void 0===t.deref()&&this[e].delete(A)}));const i=this;this[u]=(A,e)=>{i.emit("drain",A,[i,...e])},this[l]=(A,e)=>{i.emit("connect",A,[i,...e])},this[C]=(A,e,t)=>{i.emit("disconnect",A,[i,...e],t)},this[B]=(A,e,t)=>{i.emit("connectionError",A,[i,...e],t)}}get[t](){let A=0;for(const n of this[e].values()){const e=n.deref();e&&(A+=e[t])}return A}[r](t,n){let s;if(!t.origin||!("string"==typeof t.origin||t.origin instanceof URL))throw new A("opts.origin must be a non-empty string or URL.");s=String(t.origin);const r=this[e].get(s);let o=r?r.deref():null;return o||(o=this[d](t.origin,this[p]).on("drain",this[u]).on("connect",this[l]).on("disconnect",this[C]).on("connectionError",this[B]),this[e].set(s,new Q(o)),this[f].register(o,s)),o.dispatch(t,n)}async[n](){const A=[];for(const t of this[e].values()){const e=t.deref();e&&A.push(e.close())}await Promise.all(A)}async[s](A){const t=[];for(const n of this[e].values()){const e=n.deref();e&&t.push(e.destroy(A))}await Promise.all(t)}},je}var it,at,ct,gt,Et,Qt,ht,lt,Ct,Bt,It,ut,dt,ft,pt,yt,mt,wt,Dt,kt,bt,Rt,Nt={},St={exports:{}};function Ft(){if(at)return it;at=1;const A=c,{Readable:e}=E,{RequestAbortedError:t,NotSupportedError:n,InvalidArgumentError:s}=rA(),r=oA(),{ReadableStreamFrom:o,toUSVString:i}=oA();let a;const g=Symbol("kConsume"),Q=Symbol("kReading"),h=Symbol("kBody"),l=Symbol("abort"),C=Symbol("kContentType"),B=()=>{};function I(A){return r.isDisturbed(A)||function(A){return A[h]&&!0===A[h].locked||A[g]}(A)}async function u(e,n){if(I(e))throw new TypeError("unusable");return A(!e[g]),new Promise(((A,s)=>{e[g]={type:n,stream:e,resolve:A,reject:s,length:0,body:[]},e.on("error",(function(A){y(this[g],A)})).on("close",(function(){null!==this[g].body&&y(this[g],new t)})),process.nextTick(d,e[g])}))}function d(A){if(null===A.body)return;const{_readableState:e}=A.stream;for(const t of e.buffer)p(A,t);for(e.endEmitted?f(this[g]):A.stream.on("end",(function(){f(this[g])})),A.stream.resume();null!=A.stream.read(););}function f(A){const{type:e,body:t,resolve:n,stream:s,length:r}=A;try{if("text"===e)n(i(Buffer.concat(t)));else if("json"===e)n(JSON.parse(Buffer.concat(t)));else if("arrayBuffer"===e){const A=new Uint8Array(r);let e=0;for(const n of t)A.set(n,e),e+=n.byteLength;n(A.buffer)}else"blob"===e&&(a||(a=require("buffer").Blob),n(new a(t,{type:s[C]})));y(A)}catch(A){s.destroy(A)}}function p(A,e){A.length+=e.length,A.body.push(e)}function y(A,e){null!==A.body&&(e?A.reject(e):A.resolve(),A.type=null,A.stream=null,A.resolve=null,A.reject=null,A.length=0,A.body=null)}return it=class extends e{constructor({resume:A,abort:e,contentType:t="",highWaterMark:n=65536}){super({autoDestroy:!0,read:A,highWaterMark:n}),this._readableState.dataEmitted=!1,this[l]=e,this[g]=null,this[h]=null,this[C]=t,this[Q]=!1}destroy(A){return this.destroyed?this:(A||this._readableState.endEmitted||(A=new t),A&&this[l](),super.destroy(A))}emit(A,...e){return"data"===A?this._readableState.dataEmitted=!0:"error"===A&&(this._readableState.errorEmitted=!0),super.emit(A,...e)}on(A,...e){return"data"!==A&&"readable"!==A||(this[Q]=!0),super.on(A,...e)}addListener(A,...e){return this.on(A,...e)}off(A,...e){const t=super.off(A,...e);return"data"!==A&&"readable"!==A||(this[Q]=this.listenerCount("data")>0||this.listenerCount("readable")>0),t}removeListener(A,...e){return this.off(A,...e)}push(A){return this[g]&&null!==A&&0===this.readableLength?(p(this[g],A),!this[Q]||super.push(A)):super.push(A)}async text(){return u(this,"text")}async json(){return u(this,"json")}async blob(){return u(this,"blob")}async arrayBuffer(){return u(this,"arrayBuffer")}async formData(){throw new n}get bodyUsed(){return r.isDisturbed(this)}get body(){return this[h]||(this[h]=o(this),this[g]&&(this[h].getReader(),A(this[h].locked))),this[h]}dump(A){let e=A&&Number.isFinite(A.limit)?A.limit:262144;const t=A&&A.signal;if(t)try{if("object"!=typeof t||!("aborted"in t))throw new s("signal must be an AbortSignal");r.throwIfAborted(t)}catch(A){return Promise.reject(A)}return this.closed?Promise.resolve(null):new Promise(((A,n)=>{const s=t?r.addAbortListener(t,(()=>{this.destroy()})):B;this.on("close",(function(){s(),t&&t.aborted?n(t.reason||Object.assign(new Error("The operation was aborted"),{name:"AbortError"})):A(null)})).on("error",B).on("data",(function(A){e-=A.length,e<=0&&this.destroy()})).resume()}))}}}function Ut(){if(gt)return ct;gt=1;const A=c,{ResponseStatusCodeError:e}=rA(),{toUSVString:t}=oA();return ct={getResolveErrorBodyCallback:async function({callback:n,body:s,contentType:r,statusCode:o,statusMessage:i,headers:a}){A(s);let c=[],g=0;for await(const A of s)if(c.push(A),g+=A.length,g>131072){c=null;break}if(204!==o&&r&&c){try{if(r.startsWith("application/json")){const A=JSON.parse(t(Buffer.concat(c)));return void process.nextTick(n,new e(`Response status code ${o}${i?`: ${i}`:""}`,o,a,A))}if(r.startsWith("text/")){const A=t(Buffer.concat(c));return void process.nextTick(n,new e(`Response status code ${o}${i?`: ${i}`:""}`,o,a,A))}}catch(A){}process.nextTick(n,new e(`Response status code ${o}${i?`: ${i}`:""}`,o,a))}else process.nextTick(n,new e(`Response status code ${o}${i?`: ${i}`:""}`,o,a))}},ct}function Lt(){if(Qt)return Et;Qt=1;const{addAbortListener:A}=oA(),{RequestAbortedError:e}=rA(),t=Symbol("kListener"),n=Symbol("kSignal");function s(A){A.abort?A.abort():A.onError(new e)}return Et={addSignal:function(e,r){e[n]=null,e[t]=null,r&&(r.aborted?s(e):(e[n]=r,e[t]=()=>{s(e)},A(e[n],e[t])))},removeSignal:function(A){A[n]&&("removeEventListener"in A[n]?A[n].removeEventListener("abort",A[t]):A[n].removeListener("abort",A[t]),A[n]=null,A[t]=null)}}}function Mt(){return yt||(yt=1,Nt.request=function(){if(ht)return St.exports;ht=1;const A=Ft(),{InvalidArgumentError:e,RequestAbortedError:t}=rA(),n=oA(),{getResolveErrorBodyCallback:s}=Ut(),{AsyncResource:r}=u,{addSignal:o,removeSignal:i}=Lt();class a extends r{constructor(A,t){if(!A||"object"!=typeof A)throw new e("invalid opts");const{signal:s,method:r,opaque:i,body:a,onInfo:c,responseHeaders:g,throwOnError:E,highWaterMark:Q}=A;try{if("function"!=typeof t)throw new e("invalid callback");if(Q&&("number"!=typeof Q||Q<0))throw new e("invalid highWaterMark");if(s&&"function"!=typeof s.on&&"function"!=typeof s.addEventListener)throw new e("signal must be an EventEmitter or EventTarget");if("CONNECT"===r)throw new e("invalid method");if(c&&"function"!=typeof c)throw new e("invalid onInfo callback");super("UNDICI_REQUEST")}catch(A){throw n.isStream(a)&&n.destroy(a.on("error",n.nop),A),A}this.responseHeaders=g||null,this.opaque=i||null,this.callback=t,this.res=null,this.abort=null,this.body=a,this.trailers={},this.context=null,this.onInfo=c||null,this.throwOnError=E,this.highWaterMark=Q,n.isStream(a)&&a.on("error",(A=>{this.onError(A)})),o(this,s)}onConnect(A,e){if(!this.callback)throw new t;this.abort=A,this.context=e}onHeaders(e,t,r,o){const{callback:i,opaque:a,abort:c,context:g,responseHeaders:E,highWaterMark:Q}=this,h="raw"===E?n.parseRawHeaders(t):n.parseHeaders(t);if(e<200)return void(this.onInfo&&this.onInfo({statusCode:e,headers:h}));const l=("raw"===E?n.parseHeaders(t):h)["content-type"],C=new A({resume:r,abort:c,contentType:l,highWaterMark:Q});this.callback=null,this.res=C,null!==i&&(this.throwOnError&&e>=400?this.runInAsyncScope(s,null,{callback:i,body:C,contentType:l,statusCode:e,statusMessage:o,headers:h}):this.runInAsyncScope(i,null,null,{statusCode:e,headers:h,trailers:this.trailers,opaque:a,body:C,context:g}))}onData(A){const{res:e}=this;return e.push(A)}onComplete(A){const{res:e}=this;i(this),n.parseHeaders(A,this.trailers),e.push(null)}onError(A){const{res:e,callback:t,body:s,opaque:r}=this;i(this),t&&(this.callback=null,queueMicrotask((()=>{this.runInAsyncScope(t,null,A,{opaque:r})}))),e&&(this.res=null,queueMicrotask((()=>{n.destroy(e,A)}))),s&&(this.body=null,n.destroy(s,A))}}return St.exports=function A(e,t){if(void 0===t)return new Promise(((t,n)=>{A.call(this,e,((A,e)=>A?n(A):t(e)))}));try{this.dispatch(e,new a(e,t))}catch(A){if("function"!=typeof t)throw A;const n=e&&e.opaque;queueMicrotask((()=>t(A,{opaque:n})))}},St.exports.RequestHandler=a,St.exports}(),Nt.stream=function(){if(Ct)return lt;Ct=1;const{finished:A,PassThrough:e}=E,{InvalidArgumentError:t,InvalidReturnValueError:n,RequestAbortedError:s}=rA(),r=oA(),{getResolveErrorBodyCallback:o}=Ut(),{AsyncResource:i}=u,{addSignal:a,removeSignal:c}=Lt();class g extends i{constructor(A,e,n){if(!A||"object"!=typeof A)throw new t("invalid opts");const{signal:s,method:o,opaque:i,body:c,onInfo:g,responseHeaders:E,throwOnError:Q}=A;try{if("function"!=typeof n)throw new t("invalid callback");if("function"!=typeof e)throw new t("invalid factory");if(s&&"function"!=typeof s.on&&"function"!=typeof s.addEventListener)throw new t("signal must be an EventEmitter or EventTarget");if("CONNECT"===o)throw new t("invalid method");if(g&&"function"!=typeof g)throw new t("invalid onInfo callback");super("UNDICI_STREAM")}catch(A){throw r.isStream(c)&&r.destroy(c.on("error",r.nop),A),A}this.responseHeaders=E||null,this.opaque=i||null,this.factory=e,this.callback=n,this.res=null,this.abort=null,this.context=null,this.trailers=null,this.body=c,this.onInfo=g||null,this.throwOnError=Q||!1,r.isStream(c)&&c.on("error",(A=>{this.onError(A)})),a(this,s)}onConnect(A,e){if(!this.callback)throw new s;this.abort=A,this.context=e}onHeaders(t,s,i,a){const{factory:c,opaque:g,context:E,callback:Q,responseHeaders:h}=this,l="raw"===h?r.parseRawHeaders(s):r.parseHeaders(s);if(t<200)return void(this.onInfo&&this.onInfo({statusCode:t,headers:l}));let C;if(this.factory=null,this.throwOnError&&t>=400){const A=("raw"===h?r.parseHeaders(s):l)["content-type"];C=new e,this.callback=null,this.runInAsyncScope(o,null,{callback:Q,body:C,contentType:A,statusCode:t,statusMessage:a,headers:l})}else{if(null===c)return;if(C=this.runInAsyncScope(c,null,{statusCode:t,headers:l,opaque:g,context:E}),!C||"function"!=typeof C.write||"function"!=typeof C.end||"function"!=typeof C.on)throw new n("expected Writable");A(C,{readable:!1},(A=>{const{callback:e,res:t,opaque:n,trailers:s,abort:o}=this;this.res=null,!A&&t.readable||r.destroy(t,A),this.callback=null,this.runInAsyncScope(e,null,A||null,{opaque:n,trailers:s}),A&&o()}))}return C.on("drain",i),this.res=C,!0!==(void 0!==C.writableNeedDrain?C.writableNeedDrain:C._writableState&&C._writableState.needDrain)}onData(A){const{res:e}=this;return!e||e.write(A)}onComplete(A){const{res:e}=this;c(this),e&&(this.trailers=r.parseHeaders(A),e.end())}onError(A){const{res:e,callback:t,opaque:n,body:s}=this;c(this),this.factory=null,e?(this.res=null,r.destroy(e,A)):t&&(this.callback=null,queueMicrotask((()=>{this.runInAsyncScope(t,null,A,{opaque:n})}))),s&&(this.body=null,r.destroy(s,A))}}return lt=function A(e,t,n){if(void 0===n)return new Promise(((n,s)=>{A.call(this,e,t,((A,e)=>A?s(A):n(e)))}));try{this.dispatch(e,new g(e,t,n))}catch(A){if("function"!=typeof n)throw A;const t=e&&e.opaque;queueMicrotask((()=>n(A,{opaque:t})))}}}(),Nt.pipeline=function(){if(It)return Bt;It=1;const{Readable:A,Duplex:e,PassThrough:t}=E,{InvalidArgumentError:n,InvalidReturnValueError:s,RequestAbortedError:r}=rA(),o=oA(),{AsyncResource:i}=u,{addSignal:a,removeSignal:g}=Lt(),Q=c,h=Symbol("resume");class l extends A{constructor(){super({autoDestroy:!0}),this[h]=null}_read(){const{[h]:A}=this;A&&(this[h]=null,A())}_destroy(A,e){this._read(),e(A)}}class C extends A{constructor(A){super({autoDestroy:!0}),this[h]=A}_read(){this[h]()}_destroy(A,e){A||this._readableState.endEmitted||(A=new r),e(A)}}class B extends i{constructor(A,t){if(!A||"object"!=typeof A)throw new n("invalid opts");if("function"!=typeof t)throw new n("invalid handler");const{signal:s,method:i,opaque:c,onInfo:E,responseHeaders:Q}=A;if(s&&"function"!=typeof s.on&&"function"!=typeof s.addEventListener)throw new n("signal must be an EventEmitter or EventTarget");if("CONNECT"===i)throw new n("invalid method");if(E&&"function"!=typeof E)throw new n("invalid onInfo callback");super("UNDICI_PIPELINE"),this.opaque=c||null,this.responseHeaders=Q||null,this.handler=t,this.abort=null,this.context=null,this.onInfo=E||null,this.req=(new l).on("error",o.nop),this.ret=new e({readableObjectMode:A.objectMode,autoDestroy:!0,read:()=>{const{body:A}=this;A&&A.resume&&A.resume()},write:(A,e,t)=>{const{req:n}=this;n.push(A,e)||n._readableState.destroyed?t():n[h]=t},destroy:(A,e)=>{const{body:t,req:n,res:s,ret:i,abort:a}=this;A||i._readableState.endEmitted||(A=new r),a&&A&&a(),o.destroy(t,A),o.destroy(n,A),o.destroy(s,A),g(this),e(A)}}).on("prefinish",(()=>{const{req:A}=this;A.push(null)})),this.res=null,a(this,s)}onConnect(A,e){const{ret:t,res:n}=this;if(Q(!n,"pipeline cannot be retried"),t.destroyed)throw new r;this.abort=A,this.context=e}onHeaders(A,e,t){const{opaque:n,handler:i,context:a}=this;if(A<200){if(this.onInfo){const t="raw"===this.responseHeaders?o.parseRawHeaders(e):o.parseHeaders(e);this.onInfo({statusCode:A,headers:t})}return}let c;this.res=new C(t);try{this.handler=null;const t="raw"===this.responseHeaders?o.parseRawHeaders(e):o.parseHeaders(e);c=this.runInAsyncScope(i,null,{statusCode:A,headers:t,opaque:n,body:this.res,context:a})}catch(A){throw this.res.on("error",o.nop),A}if(!c||"function"!=typeof c.on)throw new s("expected Readable");c.on("data",(A=>{const{ret:e,body:t}=this;!e.push(A)&&t.pause&&t.pause()})).on("error",(A=>{const{ret:e}=this;o.destroy(e,A)})).on("end",(()=>{const{ret:A}=this;A.push(null)})).on("close",(()=>{const{ret:A}=this;A._readableState.ended||o.destroy(A,new r)})),this.body=c}onData(A){const{res:e}=this;return e.push(A)}onComplete(A){const{res:e}=this;e.push(null)}onError(A){const{ret:e}=this;this.handler=null,o.destroy(e,A)}}return Bt=function(A,e){try{const t=new B(A,e);return this.dispatch({...A,body:t.req},t),t.ret}catch(A){return(new t).destroy(A)}}}(),Nt.upgrade=function(){if(dt)return ut;dt=1;const{InvalidArgumentError:A,RequestAbortedError:e,SocketError:t}=rA(),{AsyncResource:n}=u,s=oA(),{addSignal:r,removeSignal:o}=Lt(),i=c;class a extends n{constructor(e,t){if(!e||"object"!=typeof e)throw new A("invalid opts");if("function"!=typeof t)throw new A("invalid callback");const{signal:n,opaque:s,responseHeaders:o}=e;if(n&&"function"!=typeof n.on&&"function"!=typeof n.addEventListener)throw new A("signal must be an EventEmitter or EventTarget");super("UNDICI_UPGRADE"),this.responseHeaders=o||null,this.opaque=s||null,this.callback=t,this.abort=null,this.context=null,r(this,n)}onConnect(A,t){if(!this.callback)throw new e;this.abort=A,this.context=null}onHeaders(){throw new t("bad upgrade",null)}onUpgrade(A,e,t){const{callback:n,opaque:r,context:a}=this;i.strictEqual(A,101),o(this),this.callback=null;const c="raw"===this.responseHeaders?s.parseRawHeaders(e):s.parseHeaders(e);this.runInAsyncScope(n,null,null,{headers:c,socket:t,opaque:r,context:a})}onError(A){const{callback:e,opaque:t}=this;o(this),e&&(this.callback=null,queueMicrotask((()=>{this.runInAsyncScope(e,null,A,{opaque:t})})))}}return ut=function A(e,t){if(void 0===t)return new Promise(((t,n)=>{A.call(this,e,((A,e)=>A?n(A):t(e)))}));try{const A=new a(e,t);this.dispatch({...e,method:e.method||"GET",upgrade:e.protocol||"Websocket"},A)}catch(A){if("function"!=typeof t)throw A;const n=e&&e.opaque;queueMicrotask((()=>t(A,{opaque:n})))}}}(),Nt.connect=function(){if(pt)return ft;pt=1;const{AsyncResource:A}=u,{InvalidArgumentError:e,RequestAbortedError:t,SocketError:n}=rA(),s=oA(),{addSignal:r,removeSignal:o}=Lt();class i extends A{constructor(A,t){if(!A||"object"!=typeof A)throw new e("invalid opts");if("function"!=typeof t)throw new e("invalid callback");const{signal:n,opaque:s,responseHeaders:o}=A;if(n&&"function"!=typeof n.on&&"function"!=typeof n.addEventListener)throw new e("signal must be an EventEmitter or EventTarget");super("UNDICI_CONNECT"),this.opaque=s||null,this.responseHeaders=o||null,this.callback=t,this.abort=null,r(this,n)}onConnect(A,e){if(!this.callback)throw new t;this.abort=A,this.context=e}onHeaders(){throw new n("bad connect",null)}onUpgrade(A,e,t){const{callback:n,opaque:r,context:i}=this;o(this),this.callback=null;let a=e;null!=a&&(a="raw"===this.responseHeaders?s.parseRawHeaders(e):s.parseHeaders(e)),this.runInAsyncScope(n,null,null,{statusCode:A,headers:a,socket:t,opaque:r,context:i})}onError(A){const{callback:e,opaque:t}=this;o(this),e&&(this.callback=null,queueMicrotask((()=>{this.runInAsyncScope(e,null,A,{opaque:t})})))}}return ft=function A(e,t){if(void 0===t)return new Promise(((t,n)=>{A.call(this,e,((A,e)=>A?n(A):t(e)))}));try{const A=new i(e,t);this.dispatch({...e,method:"CONNECT"},A)}catch(A){if("function"!=typeof t)throw A;const n=e&&e.opaque;queueMicrotask((()=>t(A,{opaque:n})))}},ft}()),Nt}function vt(){if(wt)return mt;wt=1;const{UndiciError:A}=rA();class e extends A{constructor(A){super(A),Error.captureStackTrace(this,e),this.name="MockNotMatchedError",this.message=A||"The request does not match any registered mock dispatches",this.code="UND_MOCK_ERR_MOCK_NOT_MATCHED"}}return mt={MockNotMatchedError:e}}function Tt(){return kt?Dt:(kt=1,Dt={kAgent:Symbol("agent"),kOptions:Symbol("options"),kFactory:Symbol("factory"),kDispatches:Symbol("dispatches"),kDispatchKey:Symbol("dispatch key"),kDefaultHeaders:Symbol("default headers"),kDefaultTrailers:Symbol("default trailers"),kContentLength:Symbol("content length"),kMockAgent:Symbol("mock agent"),kMockAgentSet:Symbol("mock agent set"),kMockAgentGet:Symbol("mock agent get"),kMockDispatch:Symbol("mock dispatch"),kClose:Symbol("close"),kOriginalClose:Symbol("original agent close"),kOrigin:Symbol("origin"),kIsMockActive:Symbol("is mock active"),kNetConnect:Symbol("net connect"),kGetNetConnect:Symbol("get net connect"),kConnected:Symbol("connected")})}function Yt(){if(Rt)return bt;Rt=1;const{MockNotMatchedError:A}=vt(),{kDispatches:e,kMockAgent:t,kOriginalDispatch:n,kOrigin:r,kGetNetConnect:o}=Tt(),{buildURL:i,nop:a}=oA(),{STATUS_CODES:c}=s,{types:{isPromise:E}}=g;function Q(A,e){return"string"==typeof A?A===e:A instanceof RegExp?A.test(e):"function"==typeof A&&!0===A(e)}function h(A){return Object.fromEntries(Object.entries(A).map((([A,e])=>[A.toLocaleLowerCase(),e])))}function l(A,e){if(!Array.isArray(A))return"function"==typeof A.get?A.get(e):h(A)[e.toLocaleLowerCase()];for(let t=0;t<A.length;t+=2)if(A[t].toLocaleLowerCase()===e.toLocaleLowerCase())return A[t+1]}function C(A){const e=A.slice(),t=[];for(let A=0;A<e.length;A+=2)t.push([e[A],e[A+1]]);return Object.fromEntries(t)}function B(A,e){if("function"==typeof A.headers)return Array.isArray(e)&&(e=C(e)),A.headers(e?h(e):{});if(void 0===A.headers)return!0;if("object"!=typeof e||"object"!=typeof A.headers)return!1;for(const[t,n]of Object.entries(A.headers)){if(!Q(n,l(e,t)))return!1}return!0}function I(A){if("string"!=typeof A)return A;const e=A.split("?");if(2!==e.length)return A;const t=new URLSearchParams(e.pop());return t.sort(),[...e,t.toString()].join("?")}function u(A){return Buffer.isBuffer(A)?A:"object"==typeof A?JSON.stringify(A):A.toString()}function d(e,t){const n=t.query?i(t.path,t.query):t.path,s="string"==typeof n?I(n):n;let r=e.filter((({consumed:A})=>!A)).filter((({path:A})=>Q(I(A),s)));if(0===r.length)throw new A(`Mock dispatch not matched for path '${s}'`);if(r=r.filter((({method:A})=>Q(A,t.method))),0===r.length)throw new A(`Mock dispatch not matched for method '${t.method}'`);if(r=r.filter((({body:A})=>void 0===A||Q(A,t.body))),0===r.length)throw new A(`Mock dispatch not matched for body '${t.body}'`);if(r=r.filter((A=>B(A,t.headers))),0===r.length)throw new A(`Mock dispatch not matched for headers '${"object"==typeof t.headers?JSON.stringify(t.headers):t.headers}'`);return r[0]}function f(A,e){const t=A.findIndex((A=>!!A.consumed&&function(A,{path:e,method:t,body:n,headers:s}){const r=Q(A.path,e),o=Q(A.method,t),i=void 0===A.body||Q(A.body,n),a=B(A,s);return r&&o&&i&&a}(A,e)));-1!==t&&A.splice(t,1)}function p(A){const{path:e,method:t,body:n,headers:s,query:r}=A;return{path:e,method:t,body:n,headers:s,query:r}}function y(A){return Object.entries(A).reduce(((A,[e,t])=>[...A,Buffer.from(`${e}`),Array.isArray(t)?t.map((A=>Buffer.from(`${A}`))):Buffer.from(`${t}`)]),[])}function m(A){return c[A]||"unknown"}function w(A,t){const n=p(A),s=d(this[e],n);s.timesInvoked++,s.data.callback&&(s.data={...s.data,...s.data.callback(A)});const{data:{statusCode:r,data:o,headers:i,trailers:c,error:g},delay:Q,persist:h}=s,{timesInvoked:l,times:B}=s;if(s.consumed=!h&&l>=B,s.pending=l<B,null!==g)return f(this[e],n),t.onError(g),!0;function I(e,s=o){const g=Array.isArray(A.headers)?C(A.headers):A.headers,Q="function"==typeof s?s({...A,headers:g}):s;if(E(Q))return void Q.then((A=>I(e,A)));const h=u(Q),l=y(i),B=y(c);t.abort=a,t.onHeaders(r,l,w,m(r)),t.onData(Buffer.from(h)),t.onComplete(B),f(e,n)}function w(){}return"number"==typeof Q&&Q>0?setTimeout((()=>{I(this[e])}),Q):I(this[e]),!0}function D(A,e){const t=new URL(e);return!0===A||!(!Array.isArray(A)||!A.some((A=>Q(A,t.host))))}return bt={getResponseData:u,getMockDispatch:d,addMockDispatch:function(A,e,t){const n={timesInvoked:0,times:1,persist:!1,consumed:!1,...e,pending:!0,data:{error:null,..."function"==typeof t?{callback:t}:{...t}}};return A.push(n),n},deleteMockDispatch:f,buildKey:p,generateKeyValues:y,matchValue:Q,getResponse:async function(A){const e=[];for await(const t of A)e.push(t);return Buffer.concat(e).toString("utf8")},getStatusText:m,mockDispatch:w,buildMockDispatch:function(){const e=this[t],s=this[r],i=this[n];return function(t,n){if(e.isMockActive)try{w.call(this,t,n)}catch(r){if(!(r instanceof A))throw r;{const a=e[o]();if(!1===a)throw new A(`${r.message}: subsequent request to origin ${s} was not allowed (net.connect disabled)`);if(!D(a,s))throw new A(`${r.message}: subsequent request to origin ${s} was not allowed (net.connect is not enabled for this origin)`);i.call(this,t,n)}}else i.call(this,t,n)}},checkNetConnect:D,buildMockOptions:function(A){if(A){const{agent:e,...t}=A;return t}},getHeaderByName:l},bt}var Jt,Gt,Ht,Ot,Vt,xt,qt,Wt,Pt,_t,jt,Kt,Zt,Xt,zt,$t,An,en,tn,nn,sn,rn,on,an,cn,gn,En,Qn,hn,ln,Cn,Bn,In,un,dn,fn,pn,yn,mn,wn,Dn,kn,bn,Rn,Nn,Sn,Fn,Un,Ln,Mn,vn,Tn,Yn,Jn,Gn,Hn,On,Vn,xn,qn,Wn,Pn,_n,jn,Kn,Zn,Xn,zn,$n,As,es,ts={};function ns(){if(Jt)return ts;Jt=1;const{getResponseData:A,buildKey:e,addMockDispatch:t}=Yt(),{kDispatches:n,kDispatchKey:s,kDefaultHeaders:r,kDefaultTrailers:o,kContentLength:i,kMockDispatch:a}=Tt(),{InvalidArgumentError:c}=rA(),{buildURL:g}=oA();class E{constructor(A){this[a]=A}delay(A){if("number"!=typeof A||!Number.isInteger(A)||A<=0)throw new c("waitInMs must be a valid integer > 0");return this[a].delay=A,this}persist(){return this[a].persist=!0,this}times(A){if("number"!=typeof A||!Number.isInteger(A)||A<=0)throw new c("repeatTimes must be a valid integer > 0");return this[a].times=A,this}}return ts.MockInterceptor=class{constructor(A,t){if("object"!=typeof A)throw new c("opts must be an object");if(void 0===A.path)throw new c("opts.path must be defined");if(void 0===A.method&&(A.method="GET"),"string"==typeof A.path)if(A.query)A.path=g(A.path,A.query);else{const e=new URL(A.path,"data://");A.path=e.pathname+e.search}"string"==typeof A.method&&(A.method=A.method.toUpperCase()),this[s]=e(A),this[n]=t,this[r]={},this[o]={},this[i]=!1}createMockScopeDispatchData(e,t,n={}){const s=A(t),a=this[i]?{"content-length":s.length}:{};return{statusCode:e,data:t,headers:{...this[r],...a,...n.headers},trailers:{...this[o],...n.trailers}}}validateReplyParameters(A,e,t){if(void 0===A)throw new c("statusCode must be defined");if(void 0===e)throw new c("data must be defined");if("object"!=typeof t)throw new c("responseOptions must be an object")}reply(A){if("function"==typeof A){const e=e=>{const t=A(e);if("object"!=typeof t)throw new c("reply options callback must return an object");const{statusCode:n,data:s="",responseOptions:r={}}=t;return this.validateReplyParameters(n,s,r),{...this.createMockScopeDispatchData(n,s,r)}},r=t(this[n],this[s],e);return new E(r)}const[e,r="",o={}]=[...arguments];this.validateReplyParameters(e,r,o);const i=this.createMockScopeDispatchData(e,r,o),a=t(this[n],this[s],i);return new E(a)}replyWithError(A){if(void 0===A)throw new c("error must be defined");const e=t(this[n],this[s],{error:A});return new E(e)}defaultReplyHeaders(A){if(void 0===A)throw new c("headers must be defined");return this[r]=A,this}defaultReplyTrailers(A){if(void 0===A)throw new c("trailers must be defined");return this[o]=A,this}replyContentLength(){return this[i]=!0,this}},ts.MockScope=E,ts}function ss(){if(Ht)return Gt;Ht=1;const{promisify:A}=g,e=tt(),{buildMockDispatch:t}=Yt(),{kDispatches:n,kMockAgent:s,kClose:r,kOriginalClose:o,kOrigin:i,kOriginalDispatch:a,kConnected:c}=Tt(),{MockInterceptor:E}=ns(),Q=sA(),{InvalidArgumentError:h}=rA();class l extends e{constructor(A,e){if(super(A,e),!e||!e.agent||"function"!=typeof e.agent.dispatch)throw new h("Argument opts.agent must implement Agent");this[s]=e.agent,this[i]=A,this[n]=[],this[c]=1,this[a]=this.dispatch,this[o]=this.close.bind(this),this.dispatch=t.call(this),this.close=this[r]}get[Q.kConnected](){return this[c]}intercept(A){return new E(A,this[n])}async[r](){await A(this[o])(),this[c]=0,this[s][Q.kClients].delete(this[i])}}return Gt=l}function rs(){if(Vt)return Ot;Vt=1;const{promisify:A}=g,e=st(),{buildMockDispatch:t}=Yt(),{kDispatches:n,kMockAgent:s,kClose:r,kOriginalClose:o,kOrigin:i,kOriginalDispatch:a,kConnected:c}=Tt(),{MockInterceptor:E}=ns(),Q=sA(),{InvalidArgumentError:h}=rA();class l extends e{constructor(A,e){if(super(A,e),!e||!e.agent||"function"!=typeof e.agent.dispatch)throw new h("Argument opts.agent must implement Agent");this[s]=e.agent,this[i]=A,this[n]=[],this[c]=1,this[a]=this.dispatch,this[o]=this.close.bind(this),this.dispatch=t.call(this),this.close=this[r]}get[Q.kConnected](){return this[c]}intercept(A){return new E(A,this[n])}async[r](){await A(this[o])(),this[c]=0,this[s][Q.kClients].delete(this[i])}}return Ot=l}function os(){if(jt)return _t;jt=1;const{kClients:A}=sA(),e=ot(),{kAgent:t,kMockAgentSet:n,kMockAgentGet:s,kDispatches:r,kIsMockActive:o,kNetConnect:i,kGetNetConnect:a,kOptions:c,kFactory:g}=Tt(),Q=ss(),h=rs(),{matchValue:l,buildMockOptions:C}=Yt(),{InvalidArgumentError:B,UndiciError:I}=rA(),u=pe(),f=function(){if(qt)return xt;qt=1;const A={pronoun:"it",is:"is",was:"was",this:"this"},e={pronoun:"they",is:"are",was:"were",this:"these"};return xt=class{constructor(A,e){this.singular=A,this.plural=e}pluralize(t){const n=1===t;return{...n?A:e,count:t,noun:n?this.singular:this.plural}}}}(),p=function(){if(Pt)return Wt;Pt=1;const{Transform:A}=E,{Console:e}=d;return Wt=class{constructor({disableColors:t}={}){this.transform=new A({transform(A,e,t){t(null,A)}}),this.logger=new e({stdout:this.transform,inspectOptions:{colors:!t&&!process.env.CI}})}format(A){const e=A.map((({method:A,path:e,data:{statusCode:t},persist:n,times:s,timesInvoked:r,origin:o})=>({Method:A,Origin:o,Path:e,"Status code":t,Persistent:n?"✅":"❌",Invocations:r,Remaining:n?1/0:s-r})));return this.logger.table(e),this.transform.read().toString()}}}();class y{constructor(A){this.value=A}deref(){return this.value}}return _t=class extends u{constructor(n){if(super(n),this[i]=!0,this[o]=!0,n&&n.agent&&"function"!=typeof n.agent.dispatch)throw new B("Argument opts.agent must implement Agent");const s=n&&n.agent?n.agent:new e(n);this[t]=s,this[A]=s[A],this[c]=C(n)}get(A){let e=this[s](A);return e||(e=this[g](A),this[n](A,e)),e}dispatch(A,e){return this.get(A.origin),this[t].dispatch(A,e)}async close(){await this[t].close(),this[A].clear()}deactivate(){this[o]=!1}activate(){this[o]=!0}enableNetConnect(A){if("string"==typeof A||"function"==typeof A||A instanceof RegExp)Array.isArray(this[i])?this[i].push(A):this[i]=[A];else{if(void 0!==A)throw new B("Unsupported matcher. Must be one of String|Function|RegExp.");this[i]=!0}}disableNetConnect(){this[i]=!1}get isMockActive(){return this[o]}[n](e,t){this[A].set(e,new y(t))}[g](A){const e=Object.assign({agent:this},this[c]);return this[c]&&1===this[c].connections?new Q(A,e):new h(A,e)}[s](e){const t=this[A].get(e);if(t)return t.deref();if("string"!=typeof e){const A=this[g]("http://localhost:9999");return this[n](e,A),A}for(const[t,s]of Array.from(this[A])){const A=s.deref();if(A&&"string"!=typeof t&&l(t,e)){const t=this[g](e);return this[n](e,t),t[r]=A[r],t}}}[a](){return this[i]}pendingInterceptors(){const e=this[A];return Array.from(e.entries()).flatMap((([A,e])=>e.deref()[r].map((e=>({...e,origin:A}))))).filter((({pending:A})=>A))}assertNoPendingInterceptors({pendingInterceptorsFormatter:A=new p}={}){const e=this.pendingInterceptors();if(0===e.length)return;const t=new f("interceptor","interceptors").pluralize(e.length);throw new I(`\n${t.count} ${t.noun} ${t.is} pending:\n\n${A.format(e)}\n`.trim())}},_t}function is(){if(Zt)return Kt;Zt=1;const{kProxy:A,kClose:e,kDestroy:t,kInterceptors:n}=sA(),{URL:s}=f,r=ot(),o=st(),i=ye(),{InvalidArgumentError:a,RequestAbortedError:c}=rA(),g=me(),E=Symbol("proxy agent"),Q=Symbol("proxy client"),h=Symbol("proxy headers"),l=Symbol("request tls settings"),C=Symbol("proxy tls settings"),B=Symbol("connect endpoint function");function I(A,e){return new o(A,e)}return Kt=class extends i{constructor(e){if(super(e),this[A]=function(A){if("string"==typeof A&&(A={uri:A}),!A||!A.uri)throw new a("Proxy opts.uri is mandatory");return{uri:A.uri,protocol:A.protocol||"https"}}(e),this[E]=new r(e),this[n]=e.interceptors&&e.interceptors.ProxyAgent&&Array.isArray(e.interceptors.ProxyAgent)?e.interceptors.ProxyAgent:[],"string"==typeof e&&(e={uri:e}),!e||!e.uri)throw new a("Proxy opts.uri is mandatory");const{clientFactory:t=I}=e;if("function"!=typeof t)throw new a("Proxy opts.clientFactory must be a function.");this[l]=e.requestTls,this[C]=e.proxyTls,this[h]=e.headers||{};const o=new s(e.uri),{origin:i,port:u,host:d,username:f,password:p}=o;if(e.auth&&e.token)throw new a("opts.auth cannot be used in combination with opts.token");e.auth?this[h]["proxy-authorization"]=`Basic ${e.auth}`:e.token?this[h]["proxy-authorization"]=e.token:f&&p&&(this[h]["proxy-authorization"]=`Basic ${Buffer.from(`${decodeURIComponent(f)}:${decodeURIComponent(p)}`).toString("base64")}`);const y=g({...e.proxyTls});this[B]=g({...e.requestTls}),this[Q]=t(o,{connect:y}),this[E]=new r({...e,connect:async(A,e)=>{let t=A.host;A.port||(t+=":"+("https:"===A.protocol?443:80));try{const{socket:n,statusCode:s}=await this[Q].connect({origin:i,port:u,path:t,signal:A.signal,headers:{...this[h],host:d}});if(200!==s&&(n.on("error",(()=>{})).destroy(),e(new c(`Proxy response (${s}) !== 200 when HTTP Tunneling`))),"https:"!==A.protocol)return void e(null,n);let r;r=this[l]?this[l].servername:A.servername,this[B]({...A,servername:r,httpSocket:n},e)}catch(A){e(A)}}})}dispatch(A,e){const{host:t}=new s(A.origin),n=function(A){if(Array.isArray(A)){const e={};for(let t=0;t<A.length;t+=2)e[A[t]]=A[t+1];return e}return A}(A.headers);return function(A){const e=A&&Object.keys(A).find((A=>"proxy-authorization"===A.toLowerCase()));if(e)throw new a("Proxy-Authorization should be sent in ProxyAgent constructor")}(n),this[E].dispatch({...A,headers:{...n,host:t}},e)}async[e](){await this[E].close(),await this[Q].close()}async[t](){await this[E].destroy(),await this[Q].destroy()}},Kt}function as(){if(zt)return Xt;zt=1;const A=c,{kRetryHandlerDefaultRetry:e}=sA(),{RequestRetryError:t}=rA(),{isDisturbed:n,parseHeaders:s,parseRangeHeader:r}=oA();class o{constructor(A,t){const{retryOptions:n,...s}=A,{retry:r,maxRetries:i,maxTimeout:a,minTimeout:c,timeoutFactor:g,methods:E,errorCodes:Q,retryAfter:h,statusCodes:l}=n??{};this.dispatch=t.dispatch,this.handler=t.handler,this.opts=s,this.abort=null,this.aborted=!1,this.retryOpts={retry:r??o[e],retryAfter:h??!0,maxTimeout:a??3e4,timeout:c??500,timeoutFactor:g??2,maxRetries:i??5,methods:E??["GET","HEAD","OPTIONS","PUT","DELETE","TRACE"],statusCodes:l??[500,502,503,504,429],errorCodes:Q??["ECONNRESET","ECONNREFUSED","ENOTFOUND","ENETDOWN","ENETUNREACH","EHOSTDOWN","EHOSTUNREACH","EPIPE"]},this.retryCount=0,this.start=0,this.end=null,this.etag=null,this.resume=null,this.handler.onConnect((A=>{this.aborted=!0,this.abort?this.abort(A):this.reason=A}))}onRequestSent(){this.handler.onRequestSent&&this.handler.onRequestSent()}onUpgrade(A,e,t){this.handler.onUpgrade&&this.handler.onUpgrade(A,e,t)}onConnect(A){this.aborted?A(this.reason):this.abort=A}onBodySent(A){if(this.handler.onBodySent)return this.handler.onBodySent(A)}static[e](A,{state:e,opts:t},n){const{statusCode:s,code:r,headers:o}=A,{method:i,retryOptions:a}=t,{maxRetries:c,timeout:g,maxTimeout:E,timeoutFactor:Q,statusCodes:h,errorCodes:l,methods:C}=a;let{counter:B,currentTimeout:I}=e;if(I=null!=I&&I>0?I:g,r&&"UND_ERR_REQ_RETRY"!==r&&"UND_ERR_SOCKET"!==r&&!l.includes(r))return void n(A);if(Array.isArray(C)&&!C.includes(i))return void n(A);if(null!=s&&Array.isArray(h)&&!h.includes(s))return void n(A);if(B>c)return void n(A);let u=null!=o&&o["retry-after"];u&&(u=Number(u),u=isNaN(u)?function(A){const e=Date.now();return new Date(A).getTime()-e}(u):1e3*u);const d=u>0?Math.min(u,E):Math.min(I*Q**B,E);e.currentTimeout=d,setTimeout((()=>n(null)),d)}onHeaders(e,n,o,i){const a=s(n);if(this.retryCount+=1,e>=300)return this.abort(new t("Request failed",e,{headers:a,count:this.retryCount})),!1;if(null!=this.resume){if(this.resume=null,206!==e)return!0;const n=r(a["content-range"]);if(!n)return this.abort(new t("Content-Range mismatch",e,{headers:a,count:this.retryCount})),!1;if(null!=this.etag&&this.etag!==a.etag)return this.abort(new t("ETag mismatch",e,{headers:a,count:this.retryCount})),!1;const{start:s,size:i,end:c=i}=n;return A(this.start===s,"content-range mismatch"),A(null==this.end||this.end===c,"content-range mismatch"),this.resume=o,!0}if(null==this.end){if(206===e){const t=r(a["content-range"]);if(null==t)return this.handler.onHeaders(e,n,o,i);const{start:s,size:c,end:g=c}=t;A(null!=s&&Number.isFinite(s)&&this.start!==s,"content-range mismatch"),A(Number.isFinite(s)),A(null!=g&&Number.isFinite(g)&&this.end!==g,"invalid content-length"),this.start=s,this.end=g}if(null==this.end){const A=a["content-length"];this.end=null!=A?Number(A):null}return A(Number.isFinite(this.start)),A(null==this.end||Number.isFinite(this.end),"invalid content-length"),this.resume=o,this.etag=null!=a.etag?a.etag:null,this.handler.onHeaders(e,n,o,i)}const c=new t("Request failed",e,{headers:a,count:this.retryCount});return this.abort(c),!1}onData(A){return this.start+=A.length,this.handler.onData(A)}onComplete(A){return this.retryCount=0,this.handler.onComplete(A)}onError(A){if(this.aborted||n(this.opts.body))return this.handler.onError(A);this.retryOpts.retry(A,{state:{counter:this.retryCount++,currentTimeout:this.retryAfter},opts:{retryOptions:this.retryOpts,...this.opts}},function(A){if(null!=A||this.aborted||n(this.opts.body))return this.handler.onError(A);0!==this.start&&(this.opts={...this.opts,headers:{...this.opts.headers,range:`bytes=${this.start}-${this.end??""}`}});try{this.dispatch(this.opts,this)}catch(A){this.handler.onError(A)}}.bind(this))}}return Xt=o}function cs(){if(An)return $t;An=1;const A=Symbol.for("undici.globalDispatcher.1"),{InvalidArgumentError:e}=rA(),t=ot();function n(t){if(!t||"function"!=typeof t.dispatch)throw new e("Argument agent must implement Agent");Object.defineProperty(globalThis,A,{value:t,writable:!0,enumerable:!1,configurable:!1})}function s(){return globalThis[A]}return void 0===s()&&n(new t),$t={setGlobalDispatcher:n,getGlobalDispatcher:s}}function gs(){if(sn)return nn;sn=1;const{kHeadersList:A,kConstruct:e}=sA(),{kGuard:t}=Ce(),{kEnumerableProperty:n}=oA(),{makeIterator:s,isValidHeaderName:r,isValidHeaderValue:o}=le(),i=g,{webidl:a}=Be(),E=c,Q=Symbol("headers map"),h=Symbol("headers map sorted");function l(A){return 10===A||13===A||9===A||32===A}function C(A){let e=0,t=A.length;for(;t>e&&l(A.charCodeAt(t-1));)--t;for(;t>e&&l(A.charCodeAt(e));)++e;return 0===e&&t===A.length?A:A.substring(e,t)}function B(A,e){if(Array.isArray(e))for(let t=0;t<e.length;++t){const n=e[t];if(2!==n.length)throw a.errors.exception({header:"Headers constructor",message:`expected name/value pair to be length 2, found ${n.length}.`});I(A,n[0],n[1])}else{if("object"!=typeof e||null===e)throw a.errors.conversionFailed({prefix:"Headers constructor",argument:"Argument 1",types:["sequence<sequence<ByteString>>","record<ByteString, ByteString>"]});{const t=Object.keys(e);for(let n=0;n<t.length;++n)I(A,t[n],e[t[n]])}}}function I(e,n,s){if(s=C(s),!r(n))throw a.errors.invalidArgument({prefix:"Headers.append",value:n,type:"header name"});if(!o(s))throw a.errors.invalidArgument({prefix:"Headers.append",value:s,type:"header value"});if("immutable"===e[t])throw new TypeError("immutable");return e[t],e[A].append(n,s)}class u{cookies=null;constructor(A){A instanceof u?(this[Q]=new Map(A[Q]),this[h]=A[h],this.cookies=null===A.cookies?null:[...A.cookies]):(this[Q]=new Map(A),this[h]=null)}contains(A){return A=A.toLowerCase(),this[Q].has(A)}clear(){this[Q].clear(),this[h]=null,this.cookies=null}append(A,e){this[h]=null;const t=A.toLowerCase(),n=this[Q].get(t);if(n){const A="cookie"===t?"; ":", ";this[Q].set(t,{name:n.name,value:`${n.value}${A}${e}`})}else this[Q].set(t,{name:A,value:e});"set-cookie"===t&&(this.cookies??=[],this.cookies.push(e))}set(A,e){this[h]=null;const t=A.toLowerCase();"set-cookie"===t&&(this.cookies=[e]),this[Q].set(t,{name:A,value:e})}delete(A){this[h]=null,"set-cookie"===(A=A.toLowerCase())&&(this.cookies=null),this[Q].delete(A)}get(A){const e=this[Q].get(A.toLowerCase());return void 0===e?null:e.value}*[Symbol.iterator](){for(const[A,{value:e}]of this[Q])yield[A,e]}get entries(){const A={};if(this[Q].size)for(const{name:e,value:t}of this[Q].values())A[e]=t;return A}}class d{constructor(n=void 0){n!==e&&(this[A]=new u,this[t]="none",void 0!==n&&B(this,n=a.converters.HeadersInit(n)))}append(A,e){return a.brandCheck(this,d),a.argumentLengthCheck(arguments,2,{header:"Headers.append"}),I(this,A=a.converters.ByteString(A),e=a.converters.ByteString(e))}delete(e){if(a.brandCheck(this,d),a.argumentLengthCheck(arguments,1,{header:"Headers.delete"}),e=a.converters.ByteString(e),!r(e))throw a.errors.invalidArgument({prefix:"Headers.delete",value:e,type:"header name"});if("immutable"===this[t])throw new TypeError("immutable");this[t],this[A].contains(e)&&this[A].delete(e)}get(e){if(a.brandCheck(this,d),a.argumentLengthCheck(arguments,1,{header:"Headers.get"}),e=a.converters.ByteString(e),!r(e))throw a.errors.invalidArgument({prefix:"Headers.get",value:e,type:"header name"});return this[A].get(e)}has(e){if(a.brandCheck(this,d),a.argumentLengthCheck(arguments,1,{header:"Headers.has"}),e=a.converters.ByteString(e),!r(e))throw a.errors.invalidArgument({prefix:"Headers.has",value:e,type:"header name"});return this[A].contains(e)}set(e,n){if(a.brandCheck(this,d),a.argumentLengthCheck(arguments,2,{header:"Headers.set"}),e=a.converters.ByteString(e),n=C(n=a.converters.ByteString(n)),!r(e))throw a.errors.invalidArgument({prefix:"Headers.set",value:e,type:"header name"});if(!o(n))throw a.errors.invalidArgument({prefix:"Headers.set",value:n,type:"header value"});if("immutable"===this[t])throw new TypeError("immutable");this[t],this[A].set(e,n)}getSetCookie(){a.brandCheck(this,d);const e=this[A].cookies;return e?[...e]:[]}get[h](){if(this[A][h])return this[A][h];const e=[],t=[...this[A]].sort(((A,e)=>A[0]<e[0]?-1:1)),n=this[A].cookies;for(let A=0;A<t.length;++A){const[s,r]=t[A];if("set-cookie"===s)for(let A=0;A<n.length;++A)e.push([s,n[A]]);else E(null!==r),e.push([s,r])}return this[A][h]=e,e}keys(){if(a.brandCheck(this,d),"immutable"===this[t]){const A=this[h];return s((()=>A),"Headers","key")}return s((()=>[...this[h].values()]),"Headers","key")}values(){if(a.brandCheck(this,d),"immutable"===this[t]){const A=this[h];return s((()=>A),"Headers","value")}return s((()=>[...this[h].values()]),"Headers","value")}entries(){if(a.brandCheck(this,d),"immutable"===this[t]){const A=this[h];return s((()=>A),"Headers","key+value")}return s((()=>[...this[h].values()]),"Headers","key+value")}forEach(A,e=globalThis){if(a.brandCheck(this,d),a.argumentLengthCheck(arguments,1,{header:"Headers.forEach"}),"function"!=typeof A)throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");for(const[t,n]of this)A.apply(e,[n,t,this])}[Symbol.for("nodejs.util.inspect.custom")](){return a.brandCheck(this,d),this[A]}}return d.prototype[Symbol.iterator]=d.prototype.entries,Object.defineProperties(d.prototype,{append:n,delete:n,get:n,has:n,set:n,getSetCookie:n,keys:n,values:n,entries:n,forEach:n,[Symbol.iterator]:{enumerable:!1},[Symbol.toStringTag]:{value:"Headers",configurable:!0},[i.inspect.custom]:{enumerable:!1}}),a.converters.HeadersInit=function(A){if("Object"===a.util.Type(A))return A[Symbol.iterator]?a.converters["sequence<sequence<ByteString>>"](A):a.converters["record<ByteString, ByteString>"](A);throw a.errors.conversionFailed({prefix:"Headers constructor",argument:"Argument 1",types:["sequence<sequence<ByteString>>","record<ByteString, ByteString>"]})},nn={fill:B,Headers:d,HeadersList:u}}function Es(){if(on)return rn;on=1;const{Headers:A,HeadersList:e,fill:t}=gs(),{extractBody:n,cloneBody:s,mixinBody:r}=fe(),o=oA(),{kEnumerableProperty:i}=o,{isValidReasonPhrase:a,isCancelled:E,isAborted:Q,isBlobLike:h,serializeJavascriptValueToJSONString:C,isErrorLike:B,isomorphicEncode:I}=le(),{redirectStatusSet:u,nullBodyStatus:d,DOMException:f}=Qe(),{kState:p,kHeaders:y,kGuard:m,kRealm:w}=Ce(),{webidl:D}=Be(),{FormData:k}=de(),{getGlobalOrigin:b}=he(),{URLSerializer:R}=Ie(),{kHeadersList:N,kConstruct:S}=sA(),F=c,{types:U}=g,L=globalThis.ReadableStream||l.ReadableStream,M=new TextEncoder("utf-8");class v{static error(){const A={settingsObject:{}},e=new v;return e[p]=J(),e[w]=A,e[y][N]=e[p].headersList,e[y][m]="immutable",e[y][w]=A,e}static json(A,e={}){D.argumentLengthCheck(arguments,1,{header:"Response.json"}),null!==e&&(e=D.converters.ResponseInit(e));const t=M.encode(C(A)),s=n(t),r={settingsObject:{}},o=new v;return o[w]=r,o[y][m]="response",o[y][w]=r,O(o,e,{body:s[0],type:"application/json"}),o}static redirect(A,e=302){const t={settingsObject:{}};let n;D.argumentLengthCheck(arguments,1,{header:"Response.redirect"}),A=D.converters.USVString(A),e=D.converters["unsigned short"](e);try{n=new URL(A,b())}catch(e){throw Object.assign(new TypeError("Failed to parse URL from "+A),{cause:e})}if(!u.has(e))throw new RangeError("Invalid status code "+e);const s=new v;s[w]=t,s[y][m]="immutable",s[y][w]=t,s[p].status=e;const r=I(R(n));return s[p].headersList.append("location",r),s}constructor(e=null,t={}){null!==e&&(e=D.converters.BodyInit(e)),t=D.converters.ResponseInit(t),this[w]={settingsObject:{}},this[p]=Y({}),this[y]=new A(S),this[y][m]="response",this[y][N]=this[p].headersList,this[y][w]=this[w];let s=null;if(null!=e){const[A,t]=n(e);s={body:A,type:t}}O(this,t,s)}get type(){return D.brandCheck(this,v),this[p].type}get url(){D.brandCheck(this,v);const A=this[p].urlList,e=A[A.length-1]??null;return null===e?"":R(e,!0)}get redirected(){return D.brandCheck(this,v),this[p].urlList.length>1}get status(){return D.brandCheck(this,v),this[p].status}get ok(){return D.brandCheck(this,v),this[p].status>=200&&this[p].status<=299}get statusText(){return D.brandCheck(this,v),this[p].statusText}get headers(){return D.brandCheck(this,v),this[y]}get body(){return D.brandCheck(this,v),this[p].body?this[p].body.stream:null}get bodyUsed(){return D.brandCheck(this,v),!!this[p].body&&o.isDisturbed(this[p].body.stream)}clone(){if(D.brandCheck(this,v),this.bodyUsed||this.body&&this.body.locked)throw D.errors.exception({header:"Response.clone",message:"Body has already been consumed."});const A=T(this[p]),e=new v;return e[p]=A,e[w]=this[w],e[y][N]=A.headersList,e[y][m]=this[y][m],e[y][w]=this[y][w],e}}function T(A){if(A.internalResponse)return H(T(A.internalResponse),A.type);const e=Y({...A,body:null});return null!=A.body&&(e.body=s(A.body)),e}function Y(A){return{aborted:!1,rangeRequested:!1,timingAllowPassed:!1,requestIncludesCredentials:!1,type:"default",status:200,timingInfo:null,cacheState:"",statusText:"",...A,headersList:A.headersList?new e(A.headersList):new e,urlList:A.urlList?[...A.urlList]:[]}}function J(A){return Y({type:"error",status:0,error:B(A)?A:new Error(A?String(A):A),aborted:A&&"AbortError"===A.name})}function G(A,e){return e={internalResponse:A,...e},new Proxy(A,{get:(A,t)=>t in e?e[t]:A[t],set:(A,t,n)=>(F(!(t in e)),A[t]=n,!0)})}function H(A,e){return"basic"===e?G(A,{type:"basic",headersList:A.headersList}):"cors"===e?G(A,{type:"cors",headersList:A.headersList}):"opaque"===e?G(A,{type:"opaque",urlList:Object.freeze([]),status:0,statusText:"",body:null}):"opaqueredirect"===e?G(A,{type:"opaqueredirect",status:0,statusText:"",headersList:[],body:null}):void F(!1)}function O(A,e,n){if(null!==e.status&&(e.status<200||e.status>599))throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');if("statusText"in e&&null!=e.statusText&&!a(String(e.statusText)))throw new TypeError("Invalid statusText");if("status"in e&&null!=e.status&&(A[p].status=e.status),"statusText"in e&&null!=e.statusText&&(A[p].statusText=e.statusText),"headers"in e&&null!=e.headers&&t(A[y],e.headers),n){if(d.includes(A.status))throw D.errors.exception({header:"Response constructor",message:"Invalid response status code "+A.status});A[p].body=n.body,null==n.type||A[p].headersList.contains("Content-Type")||A[p].headersList.append("content-type",n.type)}}return r(v),Object.defineProperties(v.prototype,{type:i,url:i,status:i,ok:i,redirected:i,statusText:i,headers:i,clone:i,body:i,bodyUsed:i,[Symbol.toStringTag]:{value:"Response",configurable:!0}}),Object.defineProperties(v,{json:i,redirect:i,error:i}),D.converters.ReadableStream=D.interfaceConverter(L),D.converters.FormData=D.interfaceConverter(k),D.converters.URLSearchParams=D.interfaceConverter(URLSearchParams),D.converters.XMLHttpRequestBodyInit=function(A){return"string"==typeof A?D.converters.USVString(A):h(A)?D.converters.Blob(A,{strict:!1}):U.isArrayBuffer(A)||U.isTypedArray(A)||U.isDataView(A)?D.converters.BufferSource(A):o.isFormDataLike(A)?D.converters.FormData(A,{strict:!1}):A instanceof URLSearchParams?D.converters.URLSearchParams(A):D.converters.DOMString(A)},D.converters.BodyInit=function(A){return A instanceof L?D.converters.ReadableStream(A):A?.[Symbol.asyncIterator]?A:D.converters.XMLHttpRequestBodyInit(A)},D.converters.ResponseInit=D.dictionaryConverter([{key:"status",converter:D.converters["unsigned short"],defaultValue:200},{key:"statusText",converter:D.converters.ByteString,defaultValue:""},{key:"headers",converter:D.converters.HeadersInit}]),rn={makeNetworkError:J,makeResponse:Y,makeAppropriateNetworkError:function(A,e=null){return F(E(A)),Q(A)?J(Object.assign(new f("The operation was aborted.","AbortError"),{cause:e})):J(Object.assign(new f("Request was cancelled."),{cause:e}))},filterResponse:H,Response:v,cloneResponse:T}}function Qs(){if(cn)return an;cn=1;const{extractBody:A,mixinBody:e,cloneBody:t}=fe(),{Headers:n,fill:s,HeadersList:r}=gs(),{FinalizationRegistry:o}=rt()(),i=oA(),{isValidHTTPToken:g,sameOrigin:E,normalizeMethod:Q,makePolicyContainer:h,normalizeMethodRecord:C}=le(),{forbiddenMethodsSet:B,corsSafeListedMethodsSet:I,referrerPolicy:u,requestRedirect:d,requestMode:f,requestCredentials:p,requestCache:y,requestDuplex:m}=Qe(),{kEnumerableProperty:w}=i,{kHeaders:D,kSignal:k,kState:b,kGuard:R,kRealm:N}=Ce(),{webidl:S}=Be(),{getGlobalOrigin:F}=he(),{URLSerializer:U}=Ie(),{kHeadersList:L,kConstruct:M}=sA(),v=c,{getMaxListeners:T,setMaxListeners:Y,getEventListeners:J,defaultMaxListeners:G}=a;let H=globalThis.TransformStream;const O=Symbol("abortController"),V=new o((({signal:A,abort:e})=>{A.removeEventListener("abort",e)}));class x{constructor(e,t={}){if(e===M)return;S.argumentLengthCheck(arguments,1,{header:"Request constructor"}),e=S.converters.RequestInfo(e),t=S.converters.RequestInit(t),this[N]={settingsObject:{baseUrl:F(),get origin(){return this.baseUrl?.origin},policyContainer:h()}};let o=null,a=null;const c=this[N].settingsObject.baseUrl;let u=null;if("string"==typeof e){let A;try{A=new URL(e,c)}catch(A){throw new TypeError("Failed to parse URL from "+e,{cause:A})}if(A.username||A.password)throw new TypeError("Request cannot be constructed from a URL that includes credentials: "+e);o=q({urlList:[A]}),a="cors"}else v(e instanceof x),o=e[b],u=e[k];const d=this[N].settingsObject.origin;let f="client";if("EnvironmentSettingsObject"===o.window?.constructor?.name&&E(o.window,d)&&(f=o.window),null!=t.window)throw new TypeError(`'window' option '${f}' must be null`);"window"in t&&(f="no-window"),o=q({method:o.method,headersList:o.headersList,unsafeRequest:o.unsafeRequest,client:this[N].settingsObject,window:f,priority:o.priority,origin:o.origin,referrer:o.referrer,referrerPolicy:o.referrerPolicy,mode:o.mode,credentials:o.credentials,cache:o.cache,redirect:o.redirect,integrity:o.integrity,keepalive:o.keepalive,reloadNavigation:o.reloadNavigation,historyNavigation:o.historyNavigation,urlList:[...o.urlList]});const p=0!==Object.keys(t).length;if(p&&("navigate"===o.mode&&(o.mode="same-origin"),o.reloadNavigation=!1,o.historyNavigation=!1,o.origin="client",o.referrer="client",o.referrerPolicy="",o.url=o.urlList[o.urlList.length-1],o.urlList=[o.url]),void 0!==t.referrer){const A=t.referrer;if(""===A)o.referrer="no-referrer";else{let e;try{e=new URL(A,c)}catch(e){throw new TypeError(`Referrer "${A}" is not a valid URL.`,{cause:e})}"about:"===e.protocol&&"client"===e.hostname||d&&!E(e,this[N].settingsObject.baseUrl)?o.referrer="client":o.referrer=e}}let y;if(void 0!==t.referrerPolicy&&(o.referrerPolicy=t.referrerPolicy),y=void 0!==t.mode?t.mode:a,"navigate"===y)throw S.errors.exception({header:"Request constructor",message:"invalid request mode navigate."});if(null!=y&&(o.mode=y),void 0!==t.credentials&&(o.credentials=t.credentials),void 0!==t.cache&&(o.cache=t.cache),"only-if-cached"===o.cache&&"same-origin"!==o.mode)throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");if(void 0!==t.redirect&&(o.redirect=t.redirect),null!=t.integrity&&(o.integrity=String(t.integrity)),void 0!==t.keepalive&&(o.keepalive=Boolean(t.keepalive)),void 0!==t.method){let A=t.method;if(!g(A))throw new TypeError(`'${A}' is not a valid HTTP method.`);if(B.has(A.toUpperCase()))throw new TypeError(`'${A}' HTTP method is unsupported.`);A=C[A]??Q(A),o.method=A}void 0!==t.signal&&(u=t.signal),this[b]=o;const m=new AbortController;if(this[k]=m.signal,this[k][N]=this[N],null!=u){if(!u||"boolean"!=typeof u.aborted||"function"!=typeof u.addEventListener)throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");if(u.aborted)m.abort(u.reason);else{this[O]=m;const A=new WeakRef(m),e=function(){const e=A.deref();void 0!==e&&e.abort(this.reason)};try{("function"==typeof T&&T(u)===G||J(u,"abort").length>=G)&&Y(100,u)}catch{}i.addAbortListener(u,e),V.register(m,{signal:u,abort:e})}}if(this[D]=new n(M),this[D][L]=o.headersList,this[D][R]="request",this[D][N]=this[N],"no-cors"===y){if(!I.has(o.method))throw new TypeError(`'${o.method} is unsupported in no-cors mode.`);this[D][R]="request-no-cors"}if(p){const A=this[D][L],e=void 0!==t.headers?t.headers:new r(A);if(A.clear(),e instanceof r){for(const[t,n]of e)A.append(t,n);A.cookies=e.cookies}else s(this[D],e)}const w=e instanceof x?e[b].body:null;if(!(null==t.body&&null==w||"GET"!==o.method&&"HEAD"!==o.method))throw new TypeError("Request with GET/HEAD method cannot have body.");let U=null;if(null!=t.body){const[e,n]=A(t.body,o.keepalive);U=e,n&&!this[D][L].contains("content-type")&&this[D].append("content-type",n)}const W=U??w;if(null!=W&&null==W.source){if(null!=U&&null==t.duplex)throw new TypeError("RequestInit: duplex option is required when sending a body.");if("same-origin"!==o.mode&&"cors"!==o.mode)throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');o.useCORSPreflightFlag=!0}let P=W;if(null==U&&null!=w){if(i.isDisturbed(w.stream)||w.stream.locked)throw new TypeError("Cannot construct a Request with a Request object that has already been used.");H||(H=l.TransformStream);const A=new H;w.stream.pipeThrough(A),P={source:w.source,length:w.length,stream:A.readable}}this[b].body=P}get method(){return S.brandCheck(this,x),this[b].method}get url(){return S.brandCheck(this,x),U(this[b].url)}get headers(){return S.brandCheck(this,x),this[D]}get destination(){return S.brandCheck(this,x),this[b].destination}get referrer(){return S.brandCheck(this,x),"no-referrer"===this[b].referrer?"":"client"===this[b].referrer?"about:client":this[b].referrer.toString()}get referrerPolicy(){return S.brandCheck(this,x),this[b].referrerPolicy}get mode(){return S.brandCheck(this,x),this[b].mode}get credentials(){return this[b].credentials}get cache(){return S.brandCheck(this,x),this[b].cache}get redirect(){return S.brandCheck(this,x),this[b].redirect}get integrity(){return S.brandCheck(this,x),this[b].integrity}get keepalive(){return S.brandCheck(this,x),this[b].keepalive}get isReloadNavigation(){return S.brandCheck(this,x),this[b].reloadNavigation}get isHistoryNavigation(){return S.brandCheck(this,x),this[b].historyNavigation}get signal(){return S.brandCheck(this,x),this[k]}get body(){return S.brandCheck(this,x),this[b].body?this[b].body.stream:null}get bodyUsed(){return S.brandCheck(this,x),!!this[b].body&&i.isDisturbed(this[b].body.stream)}get duplex(){return S.brandCheck(this,x),"half"}clone(){if(S.brandCheck(this,x),this.bodyUsed||this.body?.locked)throw new TypeError("unusable");const A=function(A){const e=q({...A,body:null});null!=A.body&&(e.body=t(A.body));return e}(this[b]),e=new x(M);e[b]=A,e[N]=this[N],e[D]=new n(M),e[D][L]=A.headersList,e[D][R]=this[D][R],e[D][N]=this[D][N];const s=new AbortController;return this.signal.aborted?s.abort(this.signal.reason):i.addAbortListener(this.signal,(()=>{s.abort(this.signal.reason)})),e[k]=s.signal,e}}function q(A){const e={method:"GET",localURLsOnly:!1,unsafeRequest:!1,body:null,client:null,reservedClient:null,replacesClientId:"",window:"client",keepalive:!1,serviceWorkers:"all",initiator:"",destination:"",priority:null,origin:"client",policyContainer:"client",referrer:"client",referrerPolicy:"",mode:"no-cors",useCORSPreflightFlag:!1,credentials:"same-origin",useCredentials:!1,cache:"default",redirect:"follow",integrity:"",cryptoGraphicsNonceMetadata:"",parserMetadata:"",reloadNavigation:!1,historyNavigation:!1,userActivation:!1,taintedOrigin:!1,redirectCount:0,responseTainting:"basic",preventNoCacheCacheControlHeaderModification:!1,done:!1,timingAllowFailed:!1,...A,headersList:A.headersList?new r(A.headersList):new r};return e.url=e.urlList[0],e}return e(x),Object.defineProperties(x.prototype,{method:w,url:w,headers:w,redirect:w,clone:w,signal:w,duplex:w,destination:w,body:w,bodyUsed:w,isHistoryNavigation:w,isReloadNavigation:w,keepalive:w,integrity:w,cache:w,credentials:w,attribute:w,referrerPolicy:w,referrer:w,mode:w,[Symbol.toStringTag]:{value:"Request",configurable:!0}}),S.converters.Request=S.interfaceConverter(x),S.converters.RequestInfo=function(A){return"string"==typeof A?S.converters.USVString(A):A instanceof x?S.converters.Request(A):S.converters.USVString(A)},S.converters.AbortSignal=S.interfaceConverter(AbortSignal),S.converters.RequestInit=S.dictionaryConverter([{key:"method",converter:S.converters.ByteString},{key:"headers",converter:S.converters.HeadersInit},{key:"body",converter:S.nullableConverter(S.converters.BodyInit)},{key:"referrer",converter:S.converters.USVString},{key:"referrerPolicy",converter:S.converters.DOMString,allowedValues:u},{key:"mode",converter:S.converters.DOMString,allowedValues:f},{key:"credentials",converter:S.converters.DOMString,allowedValues:p},{key:"cache",converter:S.converters.DOMString,allowedValues:y},{key:"redirect",converter:S.converters.DOMString,allowedValues:d},{key:"integrity",converter:S.converters.DOMString},{key:"keepalive",converter:S.converters.boolean},{key:"signal",converter:S.nullableConverter((A=>S.converters.AbortSignal(A,{strict:!1})))},{key:"window",converter:S.converters.any},{key:"duplex",converter:S.converters.DOMString,allowedValues:m}]),an={Request:x,makeRequest:q}}function hs(){if(En)return gn;En=1;const{Response:A,makeNetworkError:e,makeAppropriateNetworkError:t,filterResponse:n,makeResponse:r}=Es(),{Headers:o}=gs(),{Request:i,makeRequest:g}=Qs(),h=p,{bytesMatch:C,makePolicyContainer:B,clonePolicyContainer:I,requestBadPort:u,TAOCheck:d,appendRequestOriginHeader:f,responseLocationURL:y,requestCurrentURL:m,setRequestReferrerPolicyOnRedirect:w,tryUpgradeRequestToAPotentiallyTrustworthyURL:D,createOpaqueTimingInfo:k,appendFetchMetadata:b,corsCheck:R,crossOriginResourcePolicyCheck:N,determineRequestsReferrer:S,coarsenedSharedCurrentTime:F,createDeferredPromise:U,isBlobLike:L,sameOrigin:M,isCancelled:v,isAborted:T,isErrorLike:Y,fullyReadBody:J,readableStreamClose:G,isomorphicEncode:H,urlIsLocal:O,urlIsHttpHttpsScheme:V,urlHasHttpsScheme:x}=le(),{kState:q,kHeaders:W,kGuard:P,kRealm:_}=Ce(),j=c,{safelyExtractBody:K}=fe(),{redirectStatusSet:Z,nullBodyStatus:X,safeMethodsSet:z,requestBodyHeader:$,subresourceSet:AA,DOMException:eA}=Qe(),{kHeadersList:tA}=sA(),nA=a,{Readable:rA,pipeline:iA}=E,{addAbortListener:aA,isErrored:cA,isReadable:gA,nodeMajor:EA,nodeMinor:QA}=oA(),{dataURLProcessor:hA,serializeAMimeType:lA}=Ie(),{TransformStream:CA}=l,{getGlobalDispatcher:BA}=cs(),{webidl:IA}=Be(),{STATUS_CODES:uA}=s,dA=["GET","HEAD"];let fA,pA=globalThis.ReadableStream;class yA extends nA{constructor(A){super(),this.dispatcher=A,this.connection=null,this.dump=!1,this.state="ongoing",this.setMaxListeners(21)}terminate(A){"ongoing"===this.state&&(this.state="terminated",this.connection?.destroy(A),this.emit("terminated",A))}abort(A){"ongoing"===this.state&&(this.state="aborted",A||(A=new eA("The operation was aborted.","AbortError")),this.serializedAbortReason=A,this.connection?.destroy(A),this.emit("terminated",A))}}function mA(A,e="other"){if("error"===A.type&&A.aborted)return;if(!A.urlList?.length)return;const t=A.urlList[0];let n=A.timingInfo,s=A.cacheState;V(t)&&null!==n&&(A.timingAllowPassed||(n=k({startTime:n.startTime}),s=""),n.endTime=F(),A.timingInfo=n,function(A,e,t,n,s){(EA>18||18===EA&&QA>=2)&&performance.markResourceTiming(A,e.href,t,n,s)}(n,t,e,globalThis,s))}function wA(A,e,t,n){if(n||(n=new eA("The operation was aborted.","AbortError")),A.reject(n),null!=e.body&&gA(e.body?.stream)&&e.body.stream.cancel(n).catch((A=>{if("ERR_INVALID_STATE"!==A.code)throw A})),null==t)return;const s=t[q];null!=s.body&&gA(s.body?.stream)&&s.body.stream.cancel(n).catch((A=>{if("ERR_INVALID_STATE"!==A.code)throw A}))}function DA({request:A,processRequestBodyChunkLength:e,processRequestEndOfBody:t,processResponse:n,processResponseEndOfBody:s,processResponseConsumeBody:r,useParallelQueue:o=!1,dispatcher:i}){let a=null,c=!1;null!=A.client&&(a=A.client.globalObject,c=A.client.crossOriginIsolatedCapability);const g=F(c),E=k({startTime:g}),Q={controller:new yA(i),request:A,timingInfo:E,processRequestBodyChunkLength:e,processRequestEndOfBody:t,processResponse:n,processResponseConsumeBody:r,processResponseEndOfBody:s,taskDestination:a,crossOriginIsolatedCapability:c};if(j(!A.body||A.body.stream),"client"===A.window&&(A.window="Window"===A.client?.globalObject?.constructor?.name?A.client:"no-window"),"client"===A.origin&&(A.origin=A.client?.origin),"client"===A.policyContainer&&(null!=A.client?A.policyContainer=I(A.client.policyContainer):A.policyContainer=B()),!A.headersList.contains("accept")){const e="*/*";A.headersList.append("accept",e)}return A.headersList.contains("accept-language")||A.headersList.append("accept-language","*"),A.priority,AA.has(A.destination),kA(Q).catch((A=>{Q.controller.terminate(A)})),Q.controller}async function kA(A,t=!1){const s=A.request;let r=null;if(s.localURLsOnly&&!O(m(s))&&(r=e("local URLs only")),D(s),"blocked"===u(s)&&(r=e("bad port")),""===s.referrerPolicy&&(s.referrerPolicy=s.policyContainer.referrerPolicy),"no-referrer"!==s.referrer&&(s.referrer=S(s)),null===r&&(r=await(async()=>{const t=m(s);return M(t,s.url)&&"basic"===s.responseTainting||"data:"===t.protocol||"navigate"===s.mode||"websocket"===s.mode?(s.responseTainting="basic",await bA(A)):"same-origin"===s.mode?e('request mode cannot be "same-origin"'):"no-cors"===s.mode?"follow"!==s.redirect?e('redirect mode cannot be "follow" for "no-cors" request'):(s.responseTainting="opaque",await bA(A)):V(m(s))?(s.responseTainting="cors",await SA(A)):e("URL scheme must be a HTTP(S) scheme")})()),t)return r;0===r.status||r.internalResponse||(s.responseTainting,"basic"===s.responseTainting?r=n(r,"basic"):"cors"===s.responseTainting?r=n(r,"cors"):"opaque"===s.responseTainting?r=n(r,"opaque"):j(!1));let o=0===r.status?r:r.internalResponse;if(0===o.urlList.length&&o.urlList.push(...s.urlList),s.timingAllowFailed||(r.timingAllowPassed=!0),"opaque"===r.type&&206===o.status&&o.rangeRequested&&!s.headers.contains("range")&&(r=o=e()),0===r.status||"HEAD"!==s.method&&"CONNECT"!==s.method&&!X.includes(o.status)||(o.body=null,A.controller.dump=!0),s.integrity){const t=t=>NA(A,e(t));if("opaque"===s.responseTainting||null==r.body)return void t(r.error);const n=e=>{C(e,s.integrity)?(r.body=K(e)[0],NA(A,r)):t("integrity mismatch")};await J(r.body,n,t)}else NA(A,r)}function bA(A){if(v(A)&&0===A.request.redirectCount)return Promise.resolve(t(A));const{request:n}=A,{protocol:s}=m(n);switch(s){case"about:":return Promise.resolve(e("about scheme is not supported"));case"blob:":{fA||(fA=Q.resolveObjectURL);const A=m(n);if(0!==A.search.length)return Promise.resolve(e("NetworkError when attempting to fetch resource."));const t=fA(A.toString());if("GET"!==n.method||!L(t))return Promise.resolve(e("invalid method"));const s=K(t),o=s[0],i=H(`${o.length}`),a=s[1]??"",c=r({statusText:"OK",headersList:[["content-length",{name:"Content-Length",value:i}],["content-type",{name:"Content-Type",value:a}]]});return c.body=o,Promise.resolve(c)}case"data:":{const A=m(n),t=hA(A);if("failure"===t)return Promise.resolve(e("failed to fetch the data URL"));const s=lA(t.mimeType);return Promise.resolve(r({statusText:"OK",headersList:[["content-type",{name:"Content-Type",value:s}]],body:K(t.body)[0]}))}case"file:":return Promise.resolve(e("not implemented... yet..."));case"http:":case"https:":return SA(A).catch((A=>e(A)));default:return Promise.resolve(e("unknown scheme"))}}function RA(A,e){A.request.done=!0,null!=A.processResponseDone&&queueMicrotask((()=>A.processResponseDone(e)))}function NA(A,e){"error"===e.type&&(e.urlList=[A.request.urlList[0]],e.timingInfo=k({startTime:A.timingInfo.startTime}));const t=()=>{A.request.done=!0,null!=A.processResponseEndOfBody&&queueMicrotask((()=>A.processResponseEndOfBody(e)))};if(null!=A.processResponse&&queueMicrotask((()=>A.processResponse(e))),null==e.body)t();else{const A=(A,e)=>{e.enqueue(A)},n=new CA({start(){},transform:A,flush:t},{size:()=>1},{size:()=>1});e.body={stream:e.body.stream.pipeThrough(n)}}if(null!=A.processResponseConsumeBody){const t=t=>A.processResponseConsumeBody(e,t),n=t=>A.processResponseConsumeBody(e,t);return null!=e.body?J(e.body,t,n):(queueMicrotask((()=>t(null))),Promise.resolve())}}async function SA(A){const t=A.request;let n=null,s=null;const r=A.timingInfo;if(t.serviceWorkers,null===n){if("follow"===t.redirect&&(t.serviceWorkers="none"),s=n=await FA(A),"cors"===t.responseTainting&&"failure"===R(t,n))return e("cors failure");"failure"===d(t,n)&&(t.timingAllowFailed=!0)}return"opaque"!==t.responseTainting&&"opaque"!==n.type||"blocked"!==N(t.origin,t.client,t.destination,s)?(Z.has(s.status)&&("manual"!==t.redirect&&A.controller.connection.destroy(),"error"===t.redirect?n=e("unexpected redirect"):"manual"===t.redirect?n=s:"follow"===t.redirect?n=await function(A,t){const n=A.request,s=t.internalResponse?t.internalResponse:t;let r;try{if(r=y(s,m(n).hash),null==r)return t}catch(A){return Promise.resolve(e(A))}if(!V(r))return Promise.resolve(e("URL scheme must be a HTTP(S) scheme"));if(20===n.redirectCount)return Promise.resolve(e("redirect count exceeded"));if(n.redirectCount+=1,"cors"===n.mode&&(r.username||r.password)&&!M(n,r))return Promise.resolve(e('cross origin not allowed for request mode "cors"'));if("cors"===n.responseTainting&&(r.username||r.password))return Promise.resolve(e('URL cannot contain credentials for request mode "cors"'));if(303!==s.status&&null!=n.body&&null==n.body.source)return Promise.resolve(e());if([301,302].includes(s.status)&&"POST"===n.method||303===s.status&&!dA.includes(n.method)){n.method="GET",n.body=null;for(const A of $)n.headersList.delete(A)}M(m(n),r)||(n.headersList.delete("authorization"),n.headersList.delete("proxy-authorization",!0),n.headersList.delete("cookie"),n.headersList.delete("host"));null!=n.body&&(j(null!=n.body.source),n.body=K(n.body.source)[0]);const o=A.timingInfo;o.redirectEndTime=o.postRedirectStartTime=F(A.crossOriginIsolatedCapability),0===o.redirectStartTime&&(o.redirectStartTime=o.startTime);return n.urlList.push(r),w(n,s),kA(A,!0)}(A,n):j(!1)),n.timingInfo=r,n):e("blocked")}async function FA(A,n=!1,s=!1){const i=A.request;let a=null,c=null,E=null;"no-window"===i.window&&"error"===i.redirect?(a=A,c=i):(c=g(i),a={...A},a.request=c);const Q="include"===i.credentials||"same-origin"===i.credentials&&"basic"===i.responseTainting,C=c.body?c.body.length:null;let B=null;if(null==c.body&&["POST","PUT"].includes(c.method)&&(B="0"),null!=C&&(B=H(`${C}`)),null!=B&&c.headersList.append("content-length",B),null!=C&&c.keepalive,c.referrer instanceof URL&&c.headersList.append("referer",H(c.referrer.href)),f(c),b(c),c.headersList.contains("user-agent")||c.headersList.append("user-agent","undefined"==typeof esbuildDetection?"undici":"node"),"default"===c.cache&&(c.headersList.contains("if-modified-since")||c.headersList.contains("if-none-match")||c.headersList.contains("if-unmodified-since")||c.headersList.contains("if-match")||c.headersList.contains("if-range"))&&(c.cache="no-store"),"no-cache"!==c.cache||c.preventNoCacheCacheControlHeaderModification||c.headersList.contains("cache-control")||c.headersList.append("cache-control","max-age=0"),"no-store"!==c.cache&&"reload"!==c.cache||(c.headersList.contains("pragma")||c.headersList.append("pragma","no-cache"),c.headersList.contains("cache-control")||c.headersList.append("cache-control","no-cache")),c.headersList.contains("range")&&c.headersList.append("accept-encoding","identity"),c.headersList.contains("accept-encoding")||(x(m(c))?c.headersList.append("accept-encoding","br, gzip, deflate"):c.headersList.append("accept-encoding","gzip, deflate")),c.headersList.delete("host"),c.cache="no-store","no-store"!==c.mode&&c.mode,null==E){if("only-if-cached"===c.mode)return e("only if cached");const A=await async function(A){j(!A.controller.connection||A.controller.connection.destroyed),A.controller.connection={abort:null,destroyed:!1,destroy(A){this.destroyed||(this.destroyed=!0,this.abort?.(A??new eA("The operation was aborted.","AbortError")))}};const n=A.request;let s=null;const i=A.timingInfo;n.cache="no-store",n.mode;let a=null;if(null==n.body&&A.processRequestEndOfBody)queueMicrotask((()=>A.processRequestEndOfBody()));else if(null!=n.body){const e=async function*(e){v(A)||(yield e,A.processRequestBodyChunkLength?.(e.byteLength))},t=()=>{v(A)||A.processRequestEndOfBody&&A.processRequestEndOfBody()},s=e=>{v(A)||("AbortError"===e.name?A.controller.abort():A.controller.terminate(e))};a=async function*(){try{for await(const A of n.body.stream)yield*e(A);t()}catch(A){s(A)}}()}try{const{body:e,status:t,statusText:n,headersList:o,socket:i}=await C({body:a});if(i)s=r({status:t,statusText:n,headersList:o,socket:i});else{const i=e[Symbol.asyncIterator]();A.controller.next=()=>i.next(),s=r({status:t,statusText:n,headersList:o})}}catch(n){return"AbortError"===n.name?(A.controller.connection.destroy(),t(A,n)):e(n)}const c=()=>{A.controller.resume()},g=e=>{A.controller.abort(e)};pA||(pA=l.ReadableStream);const E=new pA({async start(e){A.controller.controller=e},async pull(A){await c()},async cancel(A){await g(A)}},{highWaterMark:0,size:()=>1});function Q(e){T(A)?(s.aborted=!0,gA(E)&&A.controller.controller.error(A.controller.serializedAbortReason)):gA(E)&&A.controller.controller.error(new TypeError("terminated",{cause:Y(e)?e:void 0})),A.controller.connection.destroy()}return s.body={stream:E},A.controller.on("terminated",Q),A.controller.resume=async()=>{for(;;){let e,t;try{const{done:t,value:n}=await A.controller.next();if(T(A))break;e=t?void 0:n}catch(n){A.controller.ended&&!i.encodedBodySize?e=void 0:(e=n,t=!0)}if(void 0===e)return G(A.controller.controller),void RA(A,s);if(i.decodedBodySize+=e?.byteLength??0,t)return void A.controller.terminate(e);if(A.controller.controller.enqueue(new Uint8Array(e)),cA(E))return void A.controller.terminate();if(!A.controller.controller.desiredSize)return}},s;async function C({body:e}){const t=m(n),s=A.controller.dispatcher;return new Promise(((r,a)=>s.dispatch({path:t.pathname+t.search,origin:t.origin,method:n.method,body:A.controller.dispatcher.isMockActive?n.body&&(n.body.source||n.body.stream):e,headers:n.headersList.entries,maxRedirections:0,upgrade:"websocket"===n.mode?"websocket":void 0},{body:null,abort:null,onConnect(e){const{connection:t}=A.controller;t.destroyed?e(new eA("The operation was aborted.","AbortError")):(A.controller.on("terminated",e),this.abort=t.abort=e)},onHeaders(A,e,t,s){if(A<200)return;let i=[],a="";const c=new o;if(Array.isArray(e))for(let A=0;A<e.length;A+=2){const t=e[A+0].toString("latin1"),n=e[A+1].toString("latin1");"content-encoding"===t.toLowerCase()?i=n.toLowerCase().split(",").map((A=>A.trim())):"location"===t.toLowerCase()&&(a=n),c[tA].append(t,n)}else{const A=Object.keys(e);for(const t of A){const A=e[t];"content-encoding"===t.toLowerCase()?i=A.toLowerCase().split(",").map((A=>A.trim())).reverse():"location"===t.toLowerCase()&&(a=A),c[tA].append(t,A)}}this.body=new rA({read:t});const g=[],E="follow"===n.redirect&&a&&Z.has(A);if("HEAD"!==n.method&&"CONNECT"!==n.method&&!X.includes(A)&&!E)for(const A of i)if("x-gzip"===A||"gzip"===A)g.push(h.createGunzip({flush:h.constants.Z_SYNC_FLUSH,finishFlush:h.constants.Z_SYNC_FLUSH}));else if("deflate"===A)g.push(h.createInflate());else{if("br"!==A){g.length=0;break}g.push(h.createBrotliDecompress())}return r({status:A,statusText:s,headersList:c[tA],body:g.length?iA(this.body,...g,(()=>{})):this.body.on("error",(()=>{}))}),!0},onData(e){if(A.controller.dump)return;const t=e;return i.encodedBodySize+=t.byteLength,this.body.push(t)},onComplete(){this.abort&&A.controller.off("terminated",this.abort),A.controller.ended=!0,this.body.push(null)},onError(e){this.abort&&A.controller.off("terminated",this.abort),this.body?.destroy(e),A.controller.terminate(e),a(e)},onUpgrade(A,e,t){if(101!==A)return;const n=new o;for(let A=0;A<e.length;A+=2){const t=e[A+0].toString("latin1"),s=e[A+1].toString("latin1");n[tA].append(t,s)}return r({status:A,statusText:uA[A],headersList:n[tA],socket:t}),!0}})))}}(a,Q,s);!z.has(c.method)&&A.status>=200&&A.status,null==E&&(E=A)}if(E.urlList=[...c.urlList],c.headersList.contains("range")&&(E.rangeRequested=!0),E.requestIncludesCredentials=Q,407===E.status)return"no-window"===i.window?e():v(A)?t(A):e("proxy authentication required");if(421===E.status&&!s&&(null==i.body||null!=i.body.source)){if(v(A))return t(A);A.controller.connection.destroy(),E=await FA(A,n,!0)}return E}return gn={fetch:function(e,t={}){IA.argumentLengthCheck(arguments,1,{header:"globalThis.fetch"});const n=U();let s;try{s=new i(e,t)}catch(A){return n.reject(A),n.promise}const r=s[q];if(s.signal.aborted)return wA(n,r,null,s.signal.reason),n.promise;const o=r.client.globalObject;"ServiceWorkerGlobalScope"===o?.constructor?.name&&(r.serviceWorkers="none");let a=null,c=!1,g=null;return aA(s.signal,(()=>{c=!0,j(null!=g),g.abort(s.signal.reason),wA(n,r,a,s.signal.reason)})),g=DA({request:r,processResponseEndOfBody:A=>mA(A,"fetch"),processResponse:e=>c?Promise.resolve():e.aborted?(wA(n,r,a,g.serializedAbortReason),Promise.resolve()):"error"===e.type?(n.reject(Object.assign(new TypeError("fetch failed"),{cause:e.error})),Promise.resolve()):(a=new A,a[q]=e,a[_]=null,a[W][tA]=e.headersList,a[W][P]="immutable",a[W][_]=null,void n.resolve(a)),dispatcher:t.dispatcher??BA()}),n.promise},Fetch:yA,fetching:DA,finalizeAndReportTiming:mA},gn}function ls(){return hn?Qn:(hn=1,Qn={kState:Symbol("FileReader state"),kResult:Symbol("FileReader result"),kError:Symbol("FileReader error"),kLastProgressEventFired:Symbol("FileReader last progress event fired timestamp"),kEvents:Symbol("FileReader events"),kAborted:Symbol("FileReader aborted")})}function Cs(){if(dn)return un;dn=1;const{kState:A,kError:e,kResult:t,kAborted:n,kLastProgressEventFired:s}=ls(),{ProgressEvent:r}=function(){if(Cn)return ln;Cn=1;const{webidl:A}=Be(),e=Symbol("ProgressEvent state");class t extends Event{constructor(t,n={}){super(t=A.converters.DOMString(t),n=A.converters.ProgressEventInit(n??{})),this[e]={lengthComputable:n.lengthComputable,loaded:n.loaded,total:n.total}}get lengthComputable(){return A.brandCheck(this,t),this[e].lengthComputable}get loaded(){return A.brandCheck(this,t),this[e].loaded}get total(){return A.brandCheck(this,t),this[e].total}}return A.converters.ProgressEventInit=A.dictionaryConverter([{key:"lengthComputable",converter:A.converters.boolean,defaultValue:!1},{key:"loaded",converter:A.converters["unsigned long long"],defaultValue:0},{key:"total",converter:A.converters["unsigned long long"],defaultValue:0},{key:"bubbles",converter:A.converters.boolean,defaultValue:!1},{key:"cancelable",converter:A.converters.boolean,defaultValue:!1},{key:"composed",converter:A.converters.boolean,defaultValue:!1}]),ln={ProgressEvent:t}}(),{getEncoding:o}=In?Bn:(In=1,Bn={getEncoding:function(A){if(!A)return"failure";switch(A.trim().toLowerCase()){case"unicode-1-1-utf-8":case"unicode11utf8":case"unicode20utf8":case"utf-8":case"utf8":case"x-unicode20utf8":return"UTF-8";case"866":case"cp866":case"csibm866":case"ibm866":return"IBM866";case"csisolatin2":case"iso-8859-2":case"iso-ir-101":case"iso8859-2":case"iso88592":case"iso_8859-2":case"iso_8859-2:1987":case"l2":case"latin2":return"ISO-8859-2";case"csisolatin3":case"iso-8859-3":case"iso-ir-109":case"iso8859-3":case"iso88593":case"iso_8859-3":case"iso_8859-3:1988":case"l3":case"latin3":return"ISO-8859-3";case"csisolatin4":case"iso-8859-4":case"iso-ir-110":case"iso8859-4":case"iso88594":case"iso_8859-4":case"iso_8859-4:1988":case"l4":case"latin4":return"ISO-8859-4";case"csisolatincyrillic":case"cyrillic":case"iso-8859-5":case"iso-ir-144":case"iso8859-5":case"iso88595":case"iso_8859-5":case"iso_8859-5:1988":return"ISO-8859-5";case"arabic":case"asmo-708":case"csiso88596e":case"csiso88596i":case"csisolatinarabic":case"ecma-114":case"iso-8859-6":case"iso-8859-6-e":case"iso-8859-6-i":case"iso-ir-127":case"iso8859-6":case"iso88596":case"iso_8859-6":case"iso_8859-6:1987":return"ISO-8859-6";case"csisolatingreek":case"ecma-118":case"elot_928":case"greek":case"greek8":case"iso-8859-7":case"iso-ir-126":case"iso8859-7":case"iso88597":case"iso_8859-7":case"iso_8859-7:1987":case"sun_eu_greek":return"ISO-8859-7";case"csiso88598e":case"csisolatinhebrew":case"hebrew":case"iso-8859-8":case"iso-8859-8-e":case"iso-ir-138":case"iso8859-8":case"iso88598":case"iso_8859-8":case"iso_8859-8:1988":case"visual":return"ISO-8859-8";case"csiso88598i":case"iso-8859-8-i":case"logical":return"ISO-8859-8-I";case"csisolatin6":case"iso-8859-10":case"iso-ir-157":case"iso8859-10":case"iso885910":case"l6":case"latin6":return"ISO-8859-10";case"iso-8859-13":case"iso8859-13":case"iso885913":return"ISO-8859-13";case"iso-8859-14":case"iso8859-14":case"iso885914":return"ISO-8859-14";case"csisolatin9":case"iso-8859-15":case"iso8859-15":case"iso885915":case"iso_8859-15":case"l9":return"ISO-8859-15";case"iso-8859-16":return"ISO-8859-16";case"cskoi8r":case"koi":case"koi8":case"koi8-r":case"koi8_r":return"KOI8-R";case"koi8-ru":case"koi8-u":return"KOI8-U";case"csmacintosh":case"mac":case"macintosh":case"x-mac-roman":return"macintosh";case"iso-8859-11":case"iso8859-11":case"iso885911":case"tis-620":case"windows-874":return"windows-874";case"cp1250":case"windows-1250":case"x-cp1250":return"windows-1250";case"cp1251":case"windows-1251":case"x-cp1251":return"windows-1251";case"ansi_x3.4-1968":case"ascii":case"cp1252":case"cp819":case"csisolatin1":case"ibm819":case"iso-8859-1":case"iso-ir-100":case"iso8859-1":case"iso88591":case"iso_8859-1":case"iso_8859-1:1987":case"l1":case"latin1":case"us-ascii":case"windows-1252":case"x-cp1252":return"windows-1252";case"cp1253":case"windows-1253":case"x-cp1253":return"windows-1253";case"cp1254":case"csisolatin5":case"iso-8859-9":case"iso-ir-148":case"iso8859-9":case"iso88599":case"iso_8859-9":case"iso_8859-9:1989":case"l5":case"latin5":case"windows-1254":case"x-cp1254":return"windows-1254";case"cp1255":case"windows-1255":case"x-cp1255":return"windows-1255";case"cp1256":case"windows-1256":case"x-cp1256":return"windows-1256";case"cp1257":case"windows-1257":case"x-cp1257":return"windows-1257";case"cp1258":case"windows-1258":case"x-cp1258":return"windows-1258";case"x-mac-cyrillic":case"x-mac-ukrainian":return"x-mac-cyrillic";case"chinese":case"csgb2312":case"csiso58gb231280":case"gb2312":case"gb_2312":case"gb_2312-80":case"gbk":case"iso-ir-58":case"x-gbk":return"GBK";case"gb18030":return"gb18030";case"big5":case"big5-hkscs":case"cn-big5":case"csbig5":case"x-x-big5":return"Big5";case"cseucpkdfmtjapanese":case"euc-jp":case"x-euc-jp":return"EUC-JP";case"csiso2022jp":case"iso-2022-jp":return"ISO-2022-JP";case"csshiftjis":case"ms932":case"ms_kanji":case"shift-jis":case"shift_jis":case"sjis":case"windows-31j":case"x-sjis":return"Shift_JIS";case"cseuckr":case"csksc56011987":case"euc-kr":case"iso-ir-149":case"korean":case"ks_c_5601-1987":case"ks_c_5601-1989":case"ksc5601":case"ksc_5601":case"windows-949":return"EUC-KR";case"csiso2022kr":case"hz-gb-2312":case"iso-2022-cn":case"iso-2022-cn-ext":case"iso-2022-kr":case"replacement":return"replacement";case"unicodefffe":case"utf-16be":return"UTF-16BE";case"csunicode":case"iso-10646-ucs-2":case"ucs-2":case"unicode":case"unicodefeff":case"utf-16":case"utf-16le":return"UTF-16LE";case"x-user-defined":return"x-user-defined";default:return"failure"}}}),{DOMException:i}=Qe(),{serializeAMimeType:a,parseMIMEType:c}=Ie(),{types:E}=g,{StringDecoder:h}=y,{btoa:l}=Q;function C(A,e){const t=new r(A,{bubbles:!1,cancelable:!1});e.dispatchEvent(t)}function B(A,e,t,n){switch(e){case"DataURL":{let e="data:";const n=c(t||"application/octet-stream");"failure"!==n&&(e+=a(n)),e+=";base64,";const s=new h("latin1");for(const t of A)e+=l(s.write(t));return e+=l(s.end()),e}case"Text":{let e="failure";if(n&&(e=o(n)),"failure"===e&&t){const A=c(t);"failure"!==A&&(e=o(A.parameters.get("charset")))}return"failure"===e&&(e="UTF-8"),function(A,e){const t=I(A),n=function(A){const[e,t,n]=A;if(239===e&&187===t&&191===n)return"UTF-8";if(254===e&&255===t)return"UTF-16BE";if(255===e&&254===t)return"UTF-16LE";return null}(t);let s=0;null!==n&&(e=n,s="UTF-8"===n?3:2);const r=t.slice(s);return new TextDecoder(e).decode(r)}(A,e)}case"ArrayBuffer":return I(A).buffer;case"BinaryString":{let e="";const t=new h("latin1");for(const n of A)e+=t.write(n);return e+=t.end(),e}}}function I(A){const e=A.reduce(((A,e)=>A+e.byteLength),0);let t=0;return A.reduce(((A,e)=>(A.set(e,t),t+=e.byteLength,A)),new Uint8Array(e))}return un={staticPropertyDescriptors:{enumerable:!0,writable:!1,configurable:!1},readOperation:function(r,o,a,c){if("loading"===r[A])throw new i("Invalid state","InvalidStateError");r[A]="loading",r[t]=null,r[e]=null;const g=o.stream().getReader(),Q=[];let h=g.read(),l=!0;(async()=>{for(;!r[n];)try{const{done:i,value:I}=await h;if(l&&!r[n]&&queueMicrotask((()=>{C("loadstart",r)})),l=!1,!i&&E.isUint8Array(I))Q.push(I),(void 0===r[s]||Date.now()-r[s]>=50)&&!r[n]&&(r[s]=Date.now(),queueMicrotask((()=>{C("progress",r)}))),h=g.read();else if(i){queueMicrotask((()=>{r[A]="done";try{const A=B(Q,a,o.type,c);if(r[n])return;r[t]=A,C("load",r)}catch(A){r[e]=A,C("error",r)}"loading"!==r[A]&&C("loadend",r)}));break}}catch(t){if(r[n])return;queueMicrotask((()=>{r[A]="done",r[e]=t,C("error",r),"loading"!==r[A]&&C("loadend",r)}));break}})()},fireAProgressEvent:C}}function Bs(){return mn?yn:(mn=1,yn={kConstruct:sA().kConstruct})}function Is(){if(bn)return kn;bn=1;const{kConstruct:A}=Bs(),{urlEquals:e,fieldValues:t}=function(){if(Dn)return wn;Dn=1;const A=c,{URLSerializer:e}=Ie(),{isValidHeaderName:t}=le();return wn={urlEquals:function(A,t,n=!1){return e(A,n)===e(t,n)},fieldValues:function(e){A(null!==e);const n=[];for(let A of e.split(","))A=A.trim(),A.length&&t(A)&&n.push(A);return n}}}(),{kEnumerableProperty:n,isDisturbed:s}=oA(),{kHeadersList:r}=sA(),{webidl:o}=Be(),{Response:i,cloneResponse:a}=Es(),{Request:g}=Qs(),{kState:E,kHeaders:Q,kGuard:h,kRealm:l}=Ce(),{fetching:C}=hs(),{urlIsHttpHttpsScheme:B,createDeferredPromise:I,readAllBytes:u}=le(),d=c,{getGlobalDispatcher:f}=cs();class p{#A;constructor(){arguments[0]!==A&&o.illegalConstructor(),this.#A=arguments[1]}async match(A,e={}){o.brandCheck(this,p),o.argumentLengthCheck(arguments,1,{header:"Cache.match"}),A=o.converters.RequestInfo(A),e=o.converters.CacheQueryOptions(e);const t=await this.matchAll(A,e);if(0!==t.length)return t[0]}async matchAll(A=void 0,e={}){o.brandCheck(this,p),void 0!==A&&(A=o.converters.RequestInfo(A)),e=o.converters.CacheQueryOptions(e);let t=null;if(void 0!==A)if(A instanceof g){if(t=A[E],"GET"!==t.method&&!e.ignoreMethod)return[]}else"string"==typeof A&&(t=new g(A)[E]);const n=[];if(void 0===A)for(const A of this.#A)n.push(A[1]);else{const A=this.#e(t,e);for(const e of A)n.push(e[1])}const s=[];for(const A of n){const e=new i(A.body?.source??null),t=e[E].body;e[E]=A,e[E].body=t,e[Q][r]=A.headersList,e[Q][h]="immutable",s.push(e)}return Object.freeze(s)}async add(A){o.brandCheck(this,p),o.argumentLengthCheck(arguments,1,{header:"Cache.add"});const e=[A=o.converters.RequestInfo(A)],t=this.addAll(e);return await t}async addAll(A){o.brandCheck(this,p),o.argumentLengthCheck(arguments,1,{header:"Cache.addAll"}),A=o.converters["sequence<RequestInfo>"](A);const e=[],n=[];for(const e of A){if("string"==typeof e)continue;const A=e[E];if(!B(A.url)||"GET"!==A.method)throw o.errors.exception({header:"Cache.addAll",message:"Expected http/s scheme when method is not GET."})}const s=[];for(const r of A){const A=new g(r)[E];if(!B(A.url))throw o.errors.exception({header:"Cache.addAll",message:"Expected http/s scheme."});A.initiator="fetch",A.destination="subresource",n.push(A);const i=I();s.push(C({request:A,dispatcher:f(),processResponse(A){if("error"===A.type||206===A.status||A.status<200||A.status>299)i.reject(o.errors.exception({header:"Cache.addAll",message:"Received an invalid status code or the request failed."}));else if(A.headersList.contains("vary")){const e=t(A.headersList.get("vary"));for(const A of e)if("*"===A){i.reject(o.errors.exception({header:"Cache.addAll",message:"invalid vary field value"}));for(const A of s)A.abort();return}}},processResponseEndOfBody(A){A.aborted?i.reject(new DOMException("aborted","AbortError")):i.resolve(A)}})),e.push(i.promise)}const r=Promise.all(e),i=await r,a=[];let c=0;for(const A of i){const e={type:"put",request:n[c],response:A};a.push(e),c++}const Q=I();let h=null;try{this.#t(a)}catch(A){h=A}return queueMicrotask((()=>{null===h?Q.resolve(void 0):Q.reject(h)})),Q.promise}async put(A,e){o.brandCheck(this,p),o.argumentLengthCheck(arguments,2,{header:"Cache.put"}),A=o.converters.RequestInfo(A),e=o.converters.Response(e);let n=null;if(n=A instanceof g?A[E]:new g(A)[E],!B(n.url)||"GET"!==n.method)throw o.errors.exception({header:"Cache.put",message:"Expected an http/s scheme when method is not GET"});const r=e[E];if(206===r.status)throw o.errors.exception({header:"Cache.put",message:"Got 206 status"});if(r.headersList.contains("vary")){const A=t(r.headersList.get("vary"));for(const e of A)if("*"===e)throw o.errors.exception({header:"Cache.put",message:"Got * vary field value"})}if(r.body&&(s(r.body.stream)||r.body.stream.locked))throw o.errors.exception({header:"Cache.put",message:"Response body is locked or disturbed"});const i=a(r),c=I();if(null!=r.body){const A=r.body.stream.getReader();u(A).then(c.resolve,c.reject)}else c.resolve(void 0);const Q=[],h={type:"put",request:n,response:i};Q.push(h);const l=await c.promise;null!=i.body&&(i.body.source=l);const C=I();let d=null;try{this.#t(Q)}catch(A){d=A}return queueMicrotask((()=>{null===d?C.resolve():C.reject(d)})),C.promise}async delete(A,e={}){o.brandCheck(this,p),o.argumentLengthCheck(arguments,1,{header:"Cache.delete"}),A=o.converters.RequestInfo(A),e=o.converters.CacheQueryOptions(e);let t=null;if(A instanceof g){if(t=A[E],"GET"!==t.method&&!e.ignoreMethod)return!1}else d("string"==typeof A),t=new g(A)[E];const n=[],s={type:"delete",request:t,options:e};n.push(s);const r=I();let i,a=null;try{i=this.#t(n)}catch(A){a=A}return queueMicrotask((()=>{null===a?r.resolve(!!i?.length):r.reject(a)})),r.promise}async keys(A=void 0,e={}){o.brandCheck(this,p),void 0!==A&&(A=o.converters.RequestInfo(A)),e=o.converters.CacheQueryOptions(e);let t=null;if(void 0!==A)if(A instanceof g){if(t=A[E],"GET"!==t.method&&!e.ignoreMethod)return[]}else"string"==typeof A&&(t=new g(A)[E]);const n=I(),s=[];if(void 0===A)for(const A of this.#A)s.push(A[0]);else{const A=this.#e(t,e);for(const e of A)s.push(e[0])}return queueMicrotask((()=>{const A=[];for(const e of s){const t=new g("https://a");t[E]=e,t[Q][r]=e.headersList,t[Q][h]="immutable",t[l]=e.client,A.push(t)}n.resolve(Object.freeze(A))})),n.promise}#t(A){const e=this.#A,t=[...e],n=[],s=[];try{for(const t of A){if("delete"!==t.type&&"put"!==t.type)throw o.errors.exception({header:"Cache.#batchCacheOperations",message:'operation type does not match "delete" or "put"'});if("delete"===t.type&&null!=t.response)throw o.errors.exception({header:"Cache.#batchCacheOperations",message:"delete operation should not have an associated response"});if(this.#e(t.request,t.options,n).length)throw new DOMException("???","InvalidStateError");let A;if("delete"===t.type){if(A=this.#e(t.request,t.options),0===A.length)return[];for(const t of A){const A=e.indexOf(t);d(-1!==A),e.splice(A,1)}}else if("put"===t.type){if(null==t.response)throw o.errors.exception({header:"Cache.#batchCacheOperations",message:"put operation should have an associated response"});const s=t.request;if(!B(s.url))throw o.errors.exception({header:"Cache.#batchCacheOperations",message:"expected http or https scheme"});if("GET"!==s.method)throw o.errors.exception({header:"Cache.#batchCacheOperations",message:"not get method"});if(null!=t.options)throw o.errors.exception({header:"Cache.#batchCacheOperations",message:"options must not be defined"});A=this.#e(t.request);for(const t of A){const A=e.indexOf(t);d(-1!==A),e.splice(A,1)}e.push([t.request,t.response]),n.push([t.request,t.response])}s.push([t.request,t.response])}return s}catch(A){throw this.#A.length=0,this.#A=t,A}}#e(A,e,t){const n=[],s=t??this.#A;for(const t of s){const[s,r]=t;this.#n(A,s,r,e)&&n.push(t)}return n}#n(A,n,s=null,r){const o=new URL(A.url),i=new URL(n.url);if(r?.ignoreSearch&&(i.search="",o.search=""),!e(o,i,!0))return!1;if(null==s||r?.ignoreVary||!s.headersList.contains("vary"))return!0;const a=t(s.headersList.get("vary"));for(const e of a){if("*"===e)return!1;if(n.headersList.get(e)!==A.headersList.get(e))return!1}return!0}}Object.defineProperties(p.prototype,{[Symbol.toStringTag]:{value:"Cache",configurable:!0},match:n,matchAll:n,add:n,addAll:n,put:n,delete:n,keys:n});const y=[{key:"ignoreSearch",converter:o.converters.boolean,defaultValue:!1},{key:"ignoreMethod",converter:o.converters.boolean,defaultValue:!1},{key:"ignoreVary",converter:o.converters.boolean,defaultValue:!1}];return o.converters.CacheQueryOptions=o.dictionaryConverter(y),o.converters.MultiCacheQueryOptions=o.dictionaryConverter([...y,{key:"cacheName",converter:o.converters.DOMString}]),o.converters.Response=o.interfaceConverter(i),o.converters["sequence<RequestInfo>"]=o.sequenceConverter(o.converters.RequestInfo),kn={Cache:p}}function us(){if(Ln)return Un;function A(A){for(const e of A){const A=e.charCodeAt(0);if(A<=32||A>127||"("===e||")"===e||">"===e||"<"===e||"@"===e||","===e||";"===e||":"===e||"\\"===e||'"'===e||"/"===e||"["===e||"]"===e||"?"===e||"="===e||"{"===e||"}"===e)throw new Error("Invalid cookie name")}}function e(A){for(const e of A){const A=e.charCodeAt(0);if(A<33||34===A||44===A||59===A||92===A||A>126)throw new Error("Invalid header value")}}function t(A){for(const e of A){if(e.charCodeAt(0)<33||";"===e)throw new Error("Invalid cookie path")}}function n(A){"number"==typeof A&&(A=new Date(A));return`${["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][A.getUTCDay()]}, ${A.getUTCDate().toString().padStart(2,"0")} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][A.getUTCMonth()]} ${A.getUTCFullYear()} ${A.getUTCHours().toString().padStart(2,"0")}:${A.getUTCMinutes().toString().padStart(2,"0")}:${A.getUTCSeconds().toString().padStart(2,"0")} GMT`}return Ln=1,Un={isCTLExcludingHtab:function(A){if(0===A.length)return!1;for(const e of A){const A=e.charCodeAt(0);if(A>=0||A<=8||A>=10||A<=31||127===A)return!1}},validateCookieName:A,validateCookiePath:t,validateCookieValue:e,toIMFDate:n,stringify:function(s){if(0===s.name.length)return null;A(s.name),e(s.value);const r=[`${s.name}=${s.value}`];s.name.startsWith("__Secure-")&&(s.secure=!0),s.name.startsWith("__Host-")&&(s.secure=!0,s.domain=null,s.path="/"),s.secure&&r.push("Secure"),s.httpOnly&&r.push("HttpOnly"),"number"==typeof s.maxAge&&(!function(A){if(A<0)throw new Error("Invalid cookie max-age")}(s.maxAge),r.push(`Max-Age=${s.maxAge}`)),s.domain&&(!function(A){if(A.startsWith("-")||A.endsWith(".")||A.endsWith("-"))throw new Error("Invalid cookie domain")}(s.domain),r.push(`Domain=${s.domain}`)),s.path&&(t(s.path),r.push(`Path=${s.path}`)),s.expires&&"Invalid Date"!==s.expires.toString()&&r.push(`Expires=${n(s.expires)}`),s.sameSite&&r.push(`SameSite=${s.sameSite}`);for(const A of s.unparsed){if(!A.includes("="))throw new Error("Invalid unparsed");const[e,...t]=A.split("=");r.push(`${e.trim()}=${t.join("=")}`)}return r.join("; ")}}}function ds(){if(vn)return Mn;vn=1;const{maxNameValuePairSize:A,maxAttributeValueSize:e}=Fn?Sn:(Fn=1,Sn={maxAttributeValueSize:1024,maxNameValuePairSize:4096}),{isCTLExcludingHtab:t}=us(),{collectASequenceOfCodePointsFast:n}=Ie(),s=c;function r(A,t={}){if(0===A.length)return t;s(";"===A[0]);let o="";(A=A.slice(1)).includes(";")?(o=n(";",A,{position:0}),A=A.slice(o.length)):(o=A,A="");let i="",a="";if(o.includes("=")){const A={position:0};i=n("=",o,A),a=o.slice(A.position+1)}else i=o;if(i=i.trim(),a=a.trim(),a.length>e)return r(A,t);const c=i.toLowerCase();if("expires"===c){const A=new Date(a);t.expires=A}else if("max-age"===c){const e=a.charCodeAt(0);if((e<48||e>57)&&"-"!==a[0])return r(A,t);if(!/^\d+$/.test(a))return r(A,t);const n=Number(a);t.maxAge=n}else if("domain"===c){let A=a;"."===A[0]&&(A=A.slice(1)),A=A.toLowerCase(),t.domain=A}else if("path"===c){let A="";A=0===a.length||"/"!==a[0]?"/":a,t.path=A}else if("secure"===c)t.secure=!0;else if("httponly"===c)t.httpOnly=!0;else if("samesite"===c){let A="Default";const e=a.toLowerCase();e.includes("none")&&(A="None"),e.includes("strict")&&(A="Strict"),e.includes("lax")&&(A="Lax"),t.sameSite=A}else t.unparsed??=[],t.unparsed.push(`${i}=${a}`);return r(A,t)}return Mn={parseSetCookie:function(e){if(t(e))return null;let s="",o="",i="",a="";if(e.includes(";")){const A={position:0};s=n(";",e,A),o=e.slice(A.position)}else s=e;if(s.includes("=")){const A={position:0};i=n("=",s,A),a=s.slice(A.position+1)}else a=s;return i=i.trim(),a=a.trim(),i.length+a.length>A?null:{name:i,value:a,...r(o)}},parseUnparsedAttributes:r}}function fs(){if(Gn)return Jn;Gn=1;const A=Buffer.allocUnsafe(0);return Jn={uid:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",staticPropertyDescriptors:{enumerable:!0,writable:!1,configurable:!1},states:{CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3},opcodes:{CONTINUATION:0,TEXT:1,BINARY:2,CLOSE:8,PING:9,PONG:10},maxUnsigned16Bit:65535,parserStates:{INFO:0,PAYLOADLENGTH_16:2,PAYLOADLENGTH_64:3,READ_DATA:4},emptyBuffer:A}}function ps(){return On?Hn:(On=1,Hn={kWebSocketURL:Symbol("url"),kReadyState:Symbol("ready state"),kController:Symbol("controller"),kResponse:Symbol("response"),kBinaryType:Symbol("binary type"),kSentClose:Symbol("sent close"),kReceivedClose:Symbol("received close"),kByteParser:Symbol("byte parser")})}function ys(){if(xn)return Vn;xn=1;const{webidl:A}=Be(),{kEnumerableProperty:e}=oA(),{MessagePort:t}=C;class n extends Event{#s;constructor(e,t={}){A.argumentLengthCheck(arguments,1,{header:"MessageEvent constructor"}),super(e=A.converters.DOMString(e),t=A.converters.MessageEventInit(t)),this.#s=t}get data(){return A.brandCheck(this,n),this.#s.data}get origin(){return A.brandCheck(this,n),this.#s.origin}get lastEventId(){return A.brandCheck(this,n),this.#s.lastEventId}get source(){return A.brandCheck(this,n),this.#s.source}get ports(){return A.brandCheck(this,n),Object.isFrozen(this.#s.ports)||Object.freeze(this.#s.ports),this.#s.ports}initMessageEvent(e,t=!1,s=!1,r=null,o="",i="",a=null,c=[]){return A.brandCheck(this,n),A.argumentLengthCheck(arguments,1,{header:"MessageEvent.initMessageEvent"}),new n(e,{bubbles:t,cancelable:s,data:r,origin:o,lastEventId:i,source:a,ports:c})}}class s extends Event{#s;constructor(e,t={}){A.argumentLengthCheck(arguments,1,{header:"CloseEvent constructor"}),super(e=A.converters.DOMString(e),t=A.converters.CloseEventInit(t)),this.#s=t}get wasClean(){return A.brandCheck(this,s),this.#s.wasClean}get code(){return A.brandCheck(this,s),this.#s.code}get reason(){return A.brandCheck(this,s),this.#s.reason}}class r extends Event{#s;constructor(e,t){A.argumentLengthCheck(arguments,1,{header:"ErrorEvent constructor"}),super(e,t),e=A.converters.DOMString(e),t=A.converters.ErrorEventInit(t??{}),this.#s=t}get message(){return A.brandCheck(this,r),this.#s.message}get filename(){return A.brandCheck(this,r),this.#s.filename}get lineno(){return A.brandCheck(this,r),this.#s.lineno}get colno(){return A.brandCheck(this,r),this.#s.colno}get error(){return A.brandCheck(this,r),this.#s.error}}Object.defineProperties(n.prototype,{[Symbol.toStringTag]:{value:"MessageEvent",configurable:!0},data:e,origin:e,lastEventId:e,source:e,ports:e,initMessageEvent:e}),Object.defineProperties(s.prototype,{[Symbol.toStringTag]:{value:"CloseEvent",configurable:!0},reason:e,code:e,wasClean:e}),Object.defineProperties(r.prototype,{[Symbol.toStringTag]:{value:"ErrorEvent",configurable:!0},message:e,filename:e,lineno:e,colno:e,error:e}),A.converters.MessagePort=A.interfaceConverter(t),A.converters["sequence<MessagePort>"]=A.sequenceConverter(A.converters.MessagePort);const o=[{key:"bubbles",converter:A.converters.boolean,defaultValue:!1},{key:"cancelable",converter:A.converters.boolean,defaultValue:!1},{key:"composed",converter:A.converters.boolean,defaultValue:!1}];return A.converters.MessageEventInit=A.dictionaryConverter([...o,{key:"data",converter:A.converters.any,defaultValue:null},{key:"origin",converter:A.converters.USVString,defaultValue:""},{key:"lastEventId",converter:A.converters.DOMString,defaultValue:""},{key:"source",converter:A.nullableConverter(A.converters.MessagePort),defaultValue:null},{key:"ports",converter:A.converters["sequence<MessagePort>"],get defaultValue(){return[]}}]),A.converters.CloseEventInit=A.dictionaryConverter([...o,{key:"wasClean",converter:A.converters.boolean,defaultValue:!1},{key:"code",converter:A.converters["unsigned short"],defaultValue:0},{key:"reason",converter:A.converters.USVString,defaultValue:""}]),A.converters.ErrorEventInit=A.dictionaryConverter([...o,{key:"message",converter:A.converters.DOMString,defaultValue:""},{key:"filename",converter:A.converters.USVString,defaultValue:""},{key:"lineno",converter:A.converters["unsigned long"],defaultValue:0},{key:"colno",converter:A.converters["unsigned long"],defaultValue:0},{key:"error",converter:A.converters.any}]),Vn={MessageEvent:n,CloseEvent:s,ErrorEvent:r}}function ms(){if(Wn)return qn;Wn=1;const{kReadyState:A,kController:e,kResponse:t,kBinaryType:n,kWebSocketURL:s}=ps(),{states:r,opcodes:o}=fs(),{MessageEvent:i,ErrorEvent:a}=ys();function c(A,e,t=Event,n){const s=new t(A,n);e.dispatchEvent(s)}function g(A,n){const{[e]:s,[t]:r}=A;s.abort(),r?.socket&&!r.socket.destroyed&&r.socket.destroy(),n&&c("error",A,a,{error:new Error(n)})}return qn={isEstablished:function(e){return e[A]===r.OPEN},isClosing:function(e){return e[A]===r.CLOSING},isClosed:function(e){return e[A]===r.CLOSED},fireEvent:c,isValidSubprotocol:function(A){if(0===A.length)return!1;for(const e of A){const A=e.charCodeAt(0);if(A<33||A>126||"("===e||")"===e||"<"===e||">"===e||"@"===e||","===e||";"===e||":"===e||"\\"===e||'"'===e||"/"===e||"["===e||"]"===e||"?"===e||"="===e||"{"===e||"}"===e||32===A||9===A)return!1}return!0},isValidStatusCode:function(A){return A>=1e3&&A<1015?1004!==A&&1005!==A&&1006!==A:A>=3e3&&A<=4999},failWebsocketConnection:g,websocketMessageReceived:function(e,t,a){if(e[A]!==r.OPEN)return;let E;if(t===o.TEXT)try{E=new TextDecoder("utf-8",{fatal:!0}).decode(a)}catch{return void g(e,"Received invalid UTF-8 in text frame.")}else t===o.BINARY&&(E="blob"===e[n]?new Blob([a]):new Uint8Array(a).buffer);c("message",e,i,{origin:e[s].origin,data:E})}}}function ws(){if(Kn)return jn;Kn=1;const{maxUnsigned16Bit:A}=fs();let e;try{e=require("crypto")}catch{}return jn={WebsocketFrameSend:class{constructor(A){this.frameData=A,this.maskKey=e.randomBytes(4)}createFrame(e){const t=this.frameData?.byteLength??0;let n=t,s=6;t>A?(s+=8,n=127):t>125&&(s+=2,n=126);const r=Buffer.allocUnsafe(t+s);r[0]=r[1]=0,r[0]|=128,r[0]=(240&r[0])+e,
/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
r[s-4]=this.maskKey[0],r[s-3]=this.maskKey[1],r[s-2]=this.maskKey[2],r[s-1]=this.maskKey[3],r[1]=n,126===n?r.writeUInt16BE(t,2):127===n&&(r[2]=r[3]=0,r.writeUIntBE(t,4,6)),r[1]|=128;for(let A=0;A<t;A++)r[s+A]=this.frameData[A]^this.maskKey[A%4];return r}}}}function Ds(){if($n)return zn;$n=1;const{webidl:A}=Be(),{DOMException:e}=Qe(),{URLSerializer:t}=Ie(),{getGlobalOrigin:n}=he(),{staticPropertyDescriptors:s,states:r,opcodes:o,emptyBuffer:i}=fs(),{kWebSocketURL:a,kReadyState:c,kController:Q,kBinaryType:h,kResponse:l,kSentClose:C,kByteParser:B}=ps(),{isEstablished:I,isClosing:u,isValidSubprotocol:d,failWebsocketConnection:f,fireEvent:p}=ms(),{establishWebSocketConnection:y}=function(){if(_n)return Pn;_n=1;const A=m,{uid:e,states:t}=fs(),{kReadyState:n,kSentClose:s,kByteParser:r,kReceivedClose:o}=ps(),{fireEvent:i,failWebsocketConnection:a}=ms(),{CloseEvent:c}=ys(),{makeRequest:g}=Qs(),{fetching:E}=hs(),{Headers:Q}=gs(),{getGlobalDispatcher:h}=cs(),{kHeadersList:l}=sA(),C={};let B;C.open=A.channel("undici:websocket:open"),C.close=A.channel("undici:websocket:close"),C.socketError=A.channel("undici:websocket:socket_error");try{B=require("crypto")}catch{}function I(A){this.ws[r].write(A)||this.pause()}function u(){const{ws:A}=this,e=A[s]&&A[o];let a=1005,g="";const E=A[r].closingInfo;E?(a=E.code??1005,g=E.reason):A[s]||(a=1006),A[n]=t.CLOSED,i("close",A,c,{wasClean:e,code:a,reason:g}),C.close.hasSubscribers&&C.close.publish({websocket:A,code:a,reason:g})}function d(A){const{ws:e}=this;e[n]=t.CLOSING,C.socketError.hasSubscribers&&C.socketError.publish(A),this.destroy()}return Pn={establishWebSocketConnection:function(A,t,n,s,r){const o=A;o.protocol="ws:"===A.protocol?"http:":"https:";const i=g({urlList:[o],serviceWorkers:"none",referrer:"no-referrer",mode:"websocket",credentials:"include",cache:"no-store",redirect:"error"});if(r.headers){const A=new Q(r.headers)[l];i.headersList=A}const c=B.randomBytes(16).toString("base64");i.headersList.append("sec-websocket-key",c),i.headersList.append("sec-websocket-version","13");for(const A of t)i.headersList.append("sec-websocket-protocol",A);const f=E({request:i,useParallelQueue:!0,dispatcher:r.dispatcher??h(),processResponse(A){if("error"===A.type||101!==A.status)return void a(n,"Received network error or non-101 status code.");if(0!==t.length&&!A.headersList.get("Sec-WebSocket-Protocol"))return void a(n,"Server did not respond with sent protocols.");if("websocket"!==A.headersList.get("Upgrade")?.toLowerCase())return void a(n,'Server did not set Upgrade header to "websocket".');if("upgrade"!==A.headersList.get("Connection")?.toLowerCase())return void a(n,'Server did not set Connection header to "upgrade".');if(A.headersList.get("Sec-WebSocket-Accept")!==B.createHash("sha1").update(c+e).digest("base64"))return void a(n,"Incorrect hash received in Sec-WebSocket-Accept header.");const r=A.headersList.get("Sec-WebSocket-Extensions");if(null!==r&&""!==r)return void a(n,"Received different permessage-deflate than the one set.");const o=A.headersList.get("Sec-WebSocket-Protocol");null===o||o===i.headersList.get("Sec-WebSocket-Protocol")?(A.socket.on("data",I),A.socket.on("close",u),A.socket.on("error",d),C.open.hasSubscribers&&C.open.publish({address:A.socket.address(),protocol:o,extensions:r}),s(A)):a(n,"Protocol was not set in the opening handshake.")}});return f}},Pn}(),{WebsocketFrameSend:w}=ws(),{ByteParser:D}=function(){if(Xn)return Zn;Xn=1;const{Writable:A}=E,e=m,{parserStates:t,opcodes:n,states:s,emptyBuffer:r}=fs(),{kReadyState:o,kSentClose:i,kResponse:a,kReceivedClose:c}=ps(),{isValidStatusCode:g,failWebsocketConnection:Q,websocketMessageReceived:h}=ms(),{WebsocketFrameSend:l}=ws(),C={};return C.ping=e.channel("undici:websocket:ping"),C.pong=e.channel("undici:websocket:pong"),Zn={ByteParser:class extends A{#r=[];#o=0;#i=t.INFO;#a={};#c=[];constructor(A){super(),this.ws=A}_write(A,e,t){this.#r.push(A),this.#o+=A.length,this.run(t)}run(A){for(;;){if(this.#i===t.INFO){if(this.#o<2)return A();const e=this.consume(2);if(this.#a.fin=!!(128&e[0]),this.#a.opcode=15&e[0],this.#a.originalOpcode??=this.#a.opcode,this.#a.fragmented=!this.#a.fin&&this.#a.opcode!==n.CONTINUATION,this.#a.fragmented&&this.#a.opcode!==n.BINARY&&this.#a.opcode!==n.TEXT)return void Q(this.ws,"Invalid frame type was fragmented.");const r=127&e[1];if(r<=125?(this.#a.payloadLength=r,this.#i=t.READ_DATA):126===r?this.#i=t.PAYLOADLENGTH_16:127===r&&(this.#i=t.PAYLOADLENGTH_64),this.#a.fragmented&&r>125)return void Q(this.ws,"Fragmented frame exceeded 125 bytes.");if((this.#a.opcode===n.PING||this.#a.opcode===n.PONG||this.#a.opcode===n.CLOSE)&&r>125)return void Q(this.ws,"Payload length for control frame exceeded 125 bytes.");if(this.#a.opcode===n.CLOSE){if(1===r)return void Q(this.ws,"Received close frame with a 1-byte body.");const A=this.consume(r);if(this.#a.closeInfo=this.parseCloseBody(!1,A),!this.ws[i]){const A=Buffer.allocUnsafe(2);A.writeUInt16BE(this.#a.closeInfo.code,0);const e=new l(A);this.ws[a].socket.write(e.createFrame(n.CLOSE),(A=>{A||(this.ws[i]=!0)}))}return this.ws[o]=s.CLOSING,this.ws[c]=!0,void this.end()}if(this.#a.opcode===n.PING){const e=this.consume(r);if(!this.ws[c]){const A=new l(e);this.ws[a].socket.write(A.createFrame(n.PONG)),C.ping.hasSubscribers&&C.ping.publish({payload:e})}if(this.#i=t.INFO,this.#o>0)continue;return void A()}if(this.#a.opcode===n.PONG){const e=this.consume(r);if(C.pong.hasSubscribers&&C.pong.publish({payload:e}),this.#o>0)continue;return void A()}}else if(this.#i===t.PAYLOADLENGTH_16){if(this.#o<2)return A();const e=this.consume(2);this.#a.payloadLength=e.readUInt16BE(0),this.#i=t.READ_DATA}else if(this.#i===t.PAYLOADLENGTH_64){if(this.#o<8)return A();const e=this.consume(8),n=e.readUInt32BE(0);if(n>2**31-1)return void Q(this.ws,"Received payload length > 2^31 bytes.");const s=e.readUInt32BE(4);this.#a.payloadLength=(n<<8)+s,this.#i=t.READ_DATA}else if(this.#i===t.READ_DATA){if(this.#o<this.#a.payloadLength)return A();if(this.#o>=this.#a.payloadLength){const A=this.consume(this.#a.payloadLength);if(this.#c.push(A),!this.#a.fragmented||this.#a.fin&&this.#a.opcode===n.CONTINUATION){const A=Buffer.concat(this.#c);h(this.ws,this.#a.originalOpcode,A),this.#a={},this.#c.length=0}this.#i=t.INFO}}if(!(this.#o>0)){A();break}}}consume(A){if(A>this.#o)return null;if(0===A)return r;if(this.#r[0].length===A)return this.#o-=this.#r[0].length,this.#r.shift();const e=Buffer.allocUnsafe(A);let t=0;for(;t!==A;){const n=this.#r[0],{length:s}=n;if(s+t===A){e.set(this.#r.shift(),t);break}if(s+t>A){e.set(n.subarray(0,A-t),t),this.#r[0]=n.subarray(A-t);break}e.set(this.#r.shift(),t),t+=n.length}return this.#o-=A,e}parseCloseBody(A,e){let t;if(e.length>=2&&(t=e.readUInt16BE(0)),A)return g(t)?{code:t}:null;let n=e.subarray(2);if(239===n[0]&&187===n[1]&&191===n[2]&&(n=n.subarray(3)),void 0!==t&&!g(t))return null;try{n=new TextDecoder("utf-8",{fatal:!0}).decode(n)}catch{return null}return{code:t,reason:n}}get closingInfo(){return this.#a.closeInfo}}},Zn}(),{kEnumerableProperty:k,isBlobLike:b}=oA(),{getGlobalDispatcher:R}=cs(),{types:N}=g;let S=!1;class F extends EventTarget{#g={open:null,error:null,close:null,message:null};#E=0;#Q="";#h="";constructor(t,s=[]){super(),A.argumentLengthCheck(arguments,1,{header:"WebSocket constructor"}),S||(S=!0,process.emitWarning("WebSockets are experimental, expect them to change at any time.",{code:"UNDICI-WS"}));const r=A.converters["DOMString or sequence<DOMString> or WebSocketInit"](s);t=A.converters.USVString(t),s=r.protocols;const o=n();let i;try{i=new URL(t,o)}catch(A){throw new e(A,"SyntaxError")}if("http:"===i.protocol?i.protocol="ws:":"https:"===i.protocol&&(i.protocol="wss:"),"ws:"!==i.protocol&&"wss:"!==i.protocol)throw new e(`Expected a ws: or wss: protocol, got ${i.protocol}`,"SyntaxError");if(i.hash||i.href.endsWith("#"))throw new e("Got fragment","SyntaxError");if("string"==typeof s&&(s=[s]),s.length!==new Set(s.map((A=>A.toLowerCase()))).size)throw new e("Invalid Sec-WebSocket-Protocol value","SyntaxError");if(s.length>0&&!s.every((A=>d(A))))throw new e("Invalid Sec-WebSocket-Protocol value","SyntaxError");this[a]=new URL(i.href),this[Q]=y(i,s,this,(A=>this.#l(A)),r),this[c]=F.CONNECTING,this[h]="blob"}close(t=void 0,n=void 0){if(A.brandCheck(this,F),void 0!==t&&(t=A.converters["unsigned short"](t,{clamp:!0})),void 0!==n&&(n=A.converters.USVString(n)),void 0!==t&&1e3!==t&&(t<3e3||t>4999))throw new e("invalid code","InvalidAccessError");let s=0;if(void 0!==n&&(s=Buffer.byteLength(n),s>123))throw new e(`Reason must be less than 123 bytes; received ${s}`,"SyntaxError");if(this[c]===F.CLOSING||this[c]===F.CLOSED);else if(I(this))if(u(this))this[c]=F.CLOSING;else{const A=new w;void 0!==t&&void 0===n?(A.frameData=Buffer.allocUnsafe(2),A.frameData.writeUInt16BE(t,0)):void 0!==t&&void 0!==n?(A.frameData=Buffer.allocUnsafe(2+s),A.frameData.writeUInt16BE(t,0),A.frameData.write(n,2,"utf-8")):A.frameData=i;this[l].socket.write(A.createFrame(o.CLOSE),(A=>{A||(this[C]=!0)})),this[c]=r.CLOSING}else f(this,"Connection was closed before it was established."),this[c]=F.CLOSING}send(t){if(A.brandCheck(this,F),A.argumentLengthCheck(arguments,1,{header:"WebSocket.send"}),t=A.converters.WebSocketSendData(t),this[c]===F.CONNECTING)throw new e("Sent before connected.","InvalidStateError");if(!I(this)||u(this))return;const n=this[l].socket;if("string"==typeof t){const A=Buffer.from(t),e=new w(A).createFrame(o.TEXT);this.#E+=A.byteLength,n.write(e,(()=>{this.#E-=A.byteLength}))}else if(N.isArrayBuffer(t)){const A=Buffer.from(t),e=new w(A).createFrame(o.BINARY);this.#E+=A.byteLength,n.write(e,(()=>{this.#E-=A.byteLength}))}else if(ArrayBuffer.isView(t)){const A=Buffer.from(t,t.byteOffset,t.byteLength),e=new w(A).createFrame(o.BINARY);this.#E+=A.byteLength,n.write(e,(()=>{this.#E-=A.byteLength}))}else if(b(t)){const A=new w;t.arrayBuffer().then((e=>{const t=Buffer.from(e);A.frameData=t;const s=A.createFrame(o.BINARY);this.#E+=t.byteLength,n.write(s,(()=>{this.#E-=t.byteLength}))}))}}get readyState(){return A.brandCheck(this,F),this[c]}get bufferedAmount(){return A.brandCheck(this,F),this.#E}get url(){return A.brandCheck(this,F),t(this[a])}get extensions(){return A.brandCheck(this,F),this.#h}get protocol(){return A.brandCheck(this,F),this.#Q}get onopen(){return A.brandCheck(this,F),this.#g.open}set onopen(e){A.brandCheck(this,F),this.#g.open&&this.removeEventListener("open",this.#g.open),"function"==typeof e?(this.#g.open=e,this.addEventListener("open",e)):this.#g.open=null}get onerror(){return A.brandCheck(this,F),this.#g.error}set onerror(e){A.brandCheck(this,F),this.#g.error&&this.removeEventListener("error",this.#g.error),"function"==typeof e?(this.#g.error=e,this.addEventListener("error",e)):this.#g.error=null}get onclose(){return A.brandCheck(this,F),this.#g.close}set onclose(e){A.brandCheck(this,F),this.#g.close&&this.removeEventListener("close",this.#g.close),"function"==typeof e?(this.#g.close=e,this.addEventListener("close",e)):this.#g.close=null}get onmessage(){return A.brandCheck(this,F),this.#g.message}set onmessage(e){A.brandCheck(this,F),this.#g.message&&this.removeEventListener("message",this.#g.message),"function"==typeof e?(this.#g.message=e,this.addEventListener("message",e)):this.#g.message=null}get binaryType(){return A.brandCheck(this,F),this[h]}set binaryType(e){A.brandCheck(this,F),this[h]="blob"!==e&&"arraybuffer"!==e?"blob":e}#l(A){this[l]=A;const e=new D(this);e.on("drain",(function(){this.ws[l].socket.resume()})),A.socket.ws=this,this[B]=e,this[c]=r.OPEN;const t=A.headersList.get("sec-websocket-extensions");null!==t&&(this.#h=t);const n=A.headersList.get("sec-websocket-protocol");null!==n&&(this.#Q=n),p("open",this)}}return F.CONNECTING=F.prototype.CONNECTING=r.CONNECTING,F.OPEN=F.prototype.OPEN=r.OPEN,F.CLOSING=F.prototype.CLOSING=r.CLOSING,F.CLOSED=F.prototype.CLOSED=r.CLOSED,Object.defineProperties(F.prototype,{CONNECTING:s,OPEN:s,CLOSING:s,CLOSED:s,url:k,readyState:k,bufferedAmount:k,onopen:k,onerror:k,onclose:k,close:k,onmessage:k,binaryType:k,send:k,extensions:k,protocol:k,[Symbol.toStringTag]:{value:"WebSocket",writable:!1,enumerable:!1,configurable:!0}}),Object.defineProperties(F,{CONNECTING:s,OPEN:s,CLOSING:s,CLOSED:s}),A.converters["sequence<DOMString>"]=A.sequenceConverter(A.converters.DOMString),A.converters["DOMString or sequence<DOMString>"]=function(e){return"Object"===A.util.Type(e)&&Symbol.iterator in e?A.converters["sequence<DOMString>"](e):A.converters.DOMString(e)},A.converters.WebSocketInit=A.dictionaryConverter([{key:"protocols",converter:A.converters["DOMString or sequence<DOMString>"],get defaultValue(){return[]}},{key:"dispatcher",converter:A=>A,get defaultValue(){return R()}},{key:"headers",converter:A.nullableConverter(A.converters.HeadersInit)}]),A.converters["DOMString or sequence<DOMString> or WebSocketInit"]=function(e){return"Object"!==A.util.Type(e)||Symbol.iterator in e?{protocols:A.converters["DOMString or sequence<DOMString>"](e)}:A.converters.WebSocketInit(e)},A.converters.WebSocketSendData=function(e){if("Object"===A.util.Type(e)){if(b(e))return A.converters.Blob(e,{strict:!1});if(ArrayBuffer.isView(e)||N.isAnyArrayBuffer(e))return A.converters.BufferSource(e)}return A.converters.USVString(e)},zn={WebSocket:F}}function ks(){if(As)return nA;As=1;const A=tt(),e=pe(),t=rA(),n=st(),s=function(){if(We)return qe;We=1;const{BalancedPoolMissingUpstreamError:A,InvalidArgumentError:e}=rA(),{PoolBase:t,kClients:n,kNeedDrain:s,kAddClient:r,kRemoveClient:o,kGetDispatcher:i}=nt(),a=st(),{kUrl:c,kInterceptors:g}=sA(),{parseOrigin:E}=oA(),Q=Symbol("factory"),h=Symbol("options"),l=Symbol("kGreatestCommonDivisor"),C=Symbol("kCurrentWeight"),B=Symbol("kIndex"),I=Symbol("kWeight"),u=Symbol("kMaxWeightPerServer"),d=Symbol("kErrorPenalty");function f(A,e){return 0===e?A:f(e,A%e)}function p(A,e){return new a(A,e)}return qe=class extends t{constructor(A=[],{factory:t=p,...n}={}){if(super(),this[h]=n,this[B]=-1,this[C]=0,this[u]=this[h].maxWeightPerServer||100,this[d]=this[h].errorPenalty||15,Array.isArray(A)||(A=[A]),"function"!=typeof t)throw new e("factory must be a function.");this[g]=n.interceptors&&n.interceptors.BalancedPool&&Array.isArray(n.interceptors.BalancedPool)?n.interceptors.BalancedPool:[],this[Q]=t;for(const e of A)this.addUpstream(e);this._updateBalancedPoolStats()}addUpstream(A){const e=E(A).origin;if(this[n].find((A=>A[c].origin===e&&!0!==A.closed&&!0!==A.destroyed)))return this;const t=this[Q](e,Object.assign({},this[h]));this[r](t),t.on("connect",(()=>{t[I]=Math.min(this[u],t[I]+this[d])})),t.on("connectionError",(()=>{t[I]=Math.max(1,t[I]-this[d]),this._updateBalancedPoolStats()})),t.on("disconnect",((...A)=>{const e=A[2];e&&"UND_ERR_SOCKET"===e.code&&(t[I]=Math.max(1,t[I]-this[d]),this._updateBalancedPoolStats())}));for(const A of this[n])A[I]=this[u];return this._updateBalancedPoolStats(),this}_updateBalancedPoolStats(){this[l]=this[n].map((A=>A[I])).reduce(f,0)}removeUpstream(A){const e=E(A).origin,t=this[n].find((A=>A[c].origin===e&&!0!==A.closed&&!0!==A.destroyed));return t&&this[o](t),this}get upstreams(){return this[n].filter((A=>!0!==A.closed&&!0!==A.destroyed)).map((A=>A[c].origin))}[i](){if(0===this[n].length)throw new A;if(!this[n].find((A=>!A[s]&&!0!==A.closed&&!0!==A.destroyed)))return;const e=this[n].map((A=>A[s])).reduce(((A,e)=>A&&e),!0);if(e)return;let t=0,r=this[n].findIndex((A=>!A[s]));for(;t++<this[n].length;){this[B]=(this[B]+1)%this[n].length;const A=this[n][this[B]];if(A[I]>this[n][r][I]&&!A[s]&&(r=this[B]),0===this[B]&&(this[C]=this[C]-this[l],this[C]<=0&&(this[C]=this[u])),A[I]>=this[C]&&!A[s])return A}return this[C]=this[n][r][I],this[B]=r,this[n][r]}},qe}(),r=ot(),o=oA(),{InvalidArgumentError:i}=t,a=Mt(),c=me(),g=ss(),E=os(),Q=rs(),h=vt(),l=is(),C=as(),{getGlobalDispatcher:B,setGlobalDispatcher:I}=cs(),u=tn?en:(tn=1,en=class{constructor(A){this.handler=A}onConnect(...A){return this.handler.onConnect(...A)}onError(...A){return this.handler.onError(...A)}onUpgrade(...A){return this.handler.onUpgrade(...A)}onHeaders(...A){return this.handler.onHeaders(...A)}onData(...A){return this.handler.onData(...A)}onComplete(...A){return this.handler.onComplete(...A)}onBodySent(...A){return this.handler.onBodySent(...A)}}),d=$e(),f=At();let p;try{require("crypto"),p=!0}catch{p=!1}function y(A){return(e,t,n)=>{if("function"==typeof t&&(n=t,t=null),!e||"string"!=typeof e&&"object"!=typeof e&&!(e instanceof URL))throw new i("invalid url");if(null!=t&&"object"!=typeof t)throw new i("invalid opts");if(t&&null!=t.path){if("string"!=typeof t.path)throw new i("invalid opts.path");let A=t.path;t.path.startsWith("/")||(A=`/${A}`),e=new URL(o.parseOrigin(e).origin+A)}else t||(t="object"==typeof e?e:{}),e=o.parseURL(e);const{agent:s,dispatcher:r=B()}=t;if(s)throw new i("unsupported opts.agent. Did you mean opts.client?");return A.call(r,{...t,origin:e.origin,path:e.search?`${e.pathname}${e.search}`:e.pathname,method:t.method||(t.body?"PUT":"GET")},n)}}if(Object.assign(e.prototype,a),nA.Dispatcher=e,nA.Client=A,nA.Pool=n,nA.BalancedPool=s,nA.Agent=r,nA.ProxyAgent=l,nA.RetryHandler=C,nA.DecoratorHandler=u,nA.RedirectHandler=d,nA.createRedirectInterceptor=f,nA.buildConnector=c,nA.errors=t,nA.setGlobalDispatcher=I,nA.getGlobalDispatcher=B,o.nodeMajor>16||16===o.nodeMajor&&o.nodeMinor>=8){let A=null;nA.fetch=async function(e){A||(A=hs().fetch);try{return await A(...arguments)}catch(A){throw"object"==typeof A&&Error.captureStackTrace(A,this),A}},nA.Headers=gs().Headers,nA.Response=Es().Response,nA.Request=Qs().Request,nA.FormData=de().FormData,nA.File=ue().File,nA.FileReader=function(){if(pn)return fn;pn=1;const{staticPropertyDescriptors:A,readOperation:e,fireAProgressEvent:t}=Cs(),{kState:n,kError:s,kResult:r,kEvents:o,kAborted:i}=ls(),{webidl:a}=Be(),{kEnumerableProperty:c}=oA();class g extends EventTarget{constructor(){super(),this[n]="empty",this[r]=null,this[s]=null,this[o]={loadend:null,error:null,abort:null,load:null,progress:null,loadstart:null}}readAsArrayBuffer(A){a.brandCheck(this,g),a.argumentLengthCheck(arguments,1,{header:"FileReader.readAsArrayBuffer"}),A=a.converters.Blob(A,{strict:!1}),e(this,A,"ArrayBuffer")}readAsBinaryString(A){a.brandCheck(this,g),a.argumentLengthCheck(arguments,1,{header:"FileReader.readAsBinaryString"}),A=a.converters.Blob(A,{strict:!1}),e(this,A,"BinaryString")}readAsText(A,t=void 0){a.brandCheck(this,g),a.argumentLengthCheck(arguments,1,{header:"FileReader.readAsText"}),A=a.converters.Blob(A,{strict:!1}),void 0!==t&&(t=a.converters.DOMString(t)),e(this,A,"Text",t)}readAsDataURL(A){a.brandCheck(this,g),a.argumentLengthCheck(arguments,1,{header:"FileReader.readAsDataURL"}),A=a.converters.Blob(A,{strict:!1}),e(this,A,"DataURL")}abort(){"empty"!==this[n]&&"done"!==this[n]?("loading"===this[n]&&(this[n]="done",this[r]=null),this[i]=!0,t("abort",this),"loading"!==this[n]&&t("loadend",this)):this[r]=null}get readyState(){switch(a.brandCheck(this,g),this[n]){case"empty":return this.EMPTY;case"loading":return this.LOADING;case"done":return this.DONE}}get result(){return a.brandCheck(this,g),this[r]}get error(){return a.brandCheck(this,g),this[s]}get onloadend(){return a.brandCheck(this,g),this[o].loadend}set onloadend(A){a.brandCheck(this,g),this[o].loadend&&this.removeEventListener("loadend",this[o].loadend),"function"==typeof A?(this[o].loadend=A,this.addEventListener("loadend",A)):this[o].loadend=null}get onerror(){return a.brandCheck(this,g),this[o].error}set onerror(A){a.brandCheck(this,g),this[o].error&&this.removeEventListener("error",this[o].error),"function"==typeof A?(this[o].error=A,this.addEventListener("error",A)):this[o].error=null}get onloadstart(){return a.brandCheck(this,g),this[o].loadstart}set onloadstart(A){a.brandCheck(this,g),this[o].loadstart&&this.removeEventListener("loadstart",this[o].loadstart),"function"==typeof A?(this[o].loadstart=A,this.addEventListener("loadstart",A)):this[o].loadstart=null}get onprogress(){return a.brandCheck(this,g),this[o].progress}set onprogress(A){a.brandCheck(this,g),this[o].progress&&this.removeEventListener("progress",this[o].progress),"function"==typeof A?(this[o].progress=A,this.addEventListener("progress",A)):this[o].progress=null}get onload(){return a.brandCheck(this,g),this[o].load}set onload(A){a.brandCheck(this,g),this[o].load&&this.removeEventListener("load",this[o].load),"function"==typeof A?(this[o].load=A,this.addEventListener("load",A)):this[o].load=null}get onabort(){return a.brandCheck(this,g),this[o].abort}set onabort(A){a.brandCheck(this,g),this[o].abort&&this.removeEventListener("abort",this[o].abort),"function"==typeof A?(this[o].abort=A,this.addEventListener("abort",A)):this[o].abort=null}}return g.EMPTY=g.prototype.EMPTY=0,g.LOADING=g.prototype.LOADING=1,g.DONE=g.prototype.DONE=2,Object.defineProperties(g.prototype,{EMPTY:A,LOADING:A,DONE:A,readAsArrayBuffer:c,readAsBinaryString:c,readAsText:c,readAsDataURL:c,abort:c,readyState:c,result:c,error:c,onloadstart:c,onprogress:c,onload:c,onabort:c,onerror:c,onloadend:c,[Symbol.toStringTag]:{value:"FileReader",writable:!1,enumerable:!1,configurable:!0}}),Object.defineProperties(g,{EMPTY:A,LOADING:A,DONE:A}),fn={FileReader:g}}().FileReader;const{setGlobalOrigin:e,getGlobalOrigin:t}=he();nA.setGlobalOrigin=e,nA.getGlobalOrigin=t;const{CacheStorage:n}=function(){if(Nn)return Rn;Nn=1;const{kConstruct:A}=Bs(),{Cache:e}=Is(),{webidl:t}=Be(),{kEnumerableProperty:n}=oA();class s{#C=new Map;constructor(){arguments[0]!==A&&t.illegalConstructor()}async match(n,r={}){if(t.brandCheck(this,s),t.argumentLengthCheck(arguments,1,{header:"CacheStorage.match"}),n=t.converters.RequestInfo(n),null!=(r=t.converters.MultiCacheQueryOptions(r)).cacheName){if(this.#C.has(r.cacheName)){const t=this.#C.get(r.cacheName),s=new e(A,t);return await s.match(n,r)}}else for(const t of this.#C.values()){const s=new e(A,t),o=await s.match(n,r);if(void 0!==o)return o}}async has(A){return t.brandCheck(this,s),t.argumentLengthCheck(arguments,1,{header:"CacheStorage.has"}),A=t.converters.DOMString(A),this.#C.has(A)}async open(n){if(t.brandCheck(this,s),t.argumentLengthCheck(arguments,1,{header:"CacheStorage.open"}),n=t.converters.DOMString(n),this.#C.has(n)){const t=this.#C.get(n);return new e(A,t)}const r=[];return this.#C.set(n,r),new e(A,r)}async delete(A){return t.brandCheck(this,s),t.argumentLengthCheck(arguments,1,{header:"CacheStorage.delete"}),A=t.converters.DOMString(A),this.#C.delete(A)}async keys(){return t.brandCheck(this,s),[...this.#C.keys()]}}return Object.defineProperties(s.prototype,{[Symbol.toStringTag]:{value:"CacheStorage",configurable:!0},match:n,has:n,open:n,delete:n,keys:n}),Rn={CacheStorage:s}}(),{kConstruct:s}=Bs();nA.caches=new n(s)}if(o.nodeMajor>=16){const{deleteCookie:A,getCookies:e,getSetCookies:t,setCookie:n}=function(){if(Yn)return Tn;Yn=1;const{parseSetCookie:A}=ds(),{stringify:e}=us(),{webidl:t}=Be(),{Headers:n}=gs();function s(A,s){t.argumentLengthCheck(arguments,2,{header:"setCookie"}),t.brandCheck(A,n,{strict:!1}),s=t.converters.Cookie(s),e(s)&&A.append("Set-Cookie",e(s))}return t.converters.DeleteCookieAttributes=t.dictionaryConverter([{converter:t.nullableConverter(t.converters.DOMString),key:"path",defaultValue:null},{converter:t.nullableConverter(t.converters.DOMString),key:"domain",defaultValue:null}]),t.converters.Cookie=t.dictionaryConverter([{converter:t.converters.DOMString,key:"name"},{converter:t.converters.DOMString,key:"value"},{converter:t.nullableConverter((A=>"number"==typeof A?t.converters["unsigned long long"](A):new Date(A))),key:"expires",defaultValue:null},{converter:t.nullableConverter(t.converters["long long"]),key:"maxAge",defaultValue:null},{converter:t.nullableConverter(t.converters.DOMString),key:"domain",defaultValue:null},{converter:t.nullableConverter(t.converters.DOMString),key:"path",defaultValue:null},{converter:t.nullableConverter(t.converters.boolean),key:"secure",defaultValue:null},{converter:t.nullableConverter(t.converters.boolean),key:"httpOnly",defaultValue:null},{converter:t.converters.USVString,key:"sameSite",allowedValues:["Strict","Lax","None"]},{converter:t.sequenceConverter(t.converters.DOMString),key:"unparsed",defaultValue:[]}]),Tn={getCookies:function(A){t.argumentLengthCheck(arguments,1,{header:"getCookies"}),t.brandCheck(A,n,{strict:!1});const e=A.get("cookie"),s={};if(!e)return s;for(const A of e.split(";")){const[e,...t]=A.split("=");s[e.trim()]=t.join("=")}return s},deleteCookie:function(A,e,r){t.argumentLengthCheck(arguments,2,{header:"deleteCookie"}),t.brandCheck(A,n,{strict:!1}),e=t.converters.DOMString(e),r=t.converters.DeleteCookieAttributes(r),s(A,{name:e,value:"",expires:new Date(0),...r})},getSetCookies:function(e){t.argumentLengthCheck(arguments,1,{header:"getSetCookies"}),t.brandCheck(e,n,{strict:!1});const s=e.getSetCookie();return s?s.map((e=>A(e))):[]},setCookie:s},Tn}();nA.deleteCookie=A,nA.getCookies=e,nA.getSetCookies=t,nA.setCookie=n;const{parseMIMEType:s,serializeAMimeType:r}=Ie();nA.parseMIMEType=s,nA.serializeAMimeType=r}if(o.nodeMajor>=18&&p){const{WebSocket:A}=Ds();nA.WebSocket=A}return nA.request=y(a.request),nA.stream=y(a.stream),nA.pipeline=y(a.pipeline),nA.connect=y(a.connect),nA.upgrade=y(a.upgrade),nA.MockClient=g,nA.MockPool=Q,nA.MockAgent=E,nA.mockErrors=h,nA}function bs(){if(es)return H;es=1;var A=H&&H.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(e,t);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(A,n,s)}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),e=H&&H.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),t=H&&H.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var s in t)"default"!==s&&Object.prototype.hasOwnProperty.call(t,s)&&A(n,t,s);return e(n,t),n},n=H&&H.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(H,"__esModule",{value:!0}),H.HttpClient=H.isHttps=H.HttpClientResponse=H.HttpClientError=H.getProxyUrl=H.MediaTypes=H.Headers=H.HttpCodes=void 0;const o=t(s),i=t(r),a=t(function(){if(J)return O;function A(A){if(!A.hostname)return!1;if(function(A){const e=A.toLowerCase();return"localhost"===e||e.startsWith("127.")||e.startsWith("[::1]")||e.startsWith("[0:0:0:0:0:0:0:1]")}(A.hostname))return!0;const e=process.env.no_proxy||process.env.NO_PROXY||"";if(!e)return!1;let t;A.port?t=Number(A.port):"http:"===A.protocol?t=80:"https:"===A.protocol&&(t=443);const n=[A.hostname.toUpperCase()];"number"==typeof t&&n.push(`${n[0]}:${t}`);for(const A of e.split(",").map((A=>A.trim().toUpperCase())).filter((A=>A)))if("*"===A||n.some((e=>e===A||e.endsWith(`.${A}`)||A.startsWith(".")&&e.endsWith(`${A}`))))return!0;return!1}J=1,Object.defineProperty(O,"__esModule",{value:!0}),O.checkBypass=O.getProxyUrl=void 0,O.getProxyUrl=function(t){const n="https:"===t.protocol;if(A(t))return;const s=n?process.env.https_proxy||process.env.HTTPS_PROXY:process.env.http_proxy||process.env.HTTP_PROXY;if(s)try{return new e(s)}catch(A){if(!s.startsWith("http://")&&!s.startsWith("https://"))return new e(`http://${s}`)}},O.checkBypass=A;class e extends URL{constructor(A,e){super(A,e),this._decodedUsername=decodeURIComponent(super.username),this._decodedPassword=decodeURIComponent(super.password)}get username(){return this._decodedUsername}get password(){return this._decodedPassword}}return O}()),c=t(P()),g=ks();var E,Q,h;!function(A){A[A.OK=200]="OK",A[A.MultipleChoices=300]="MultipleChoices",A[A.MovedPermanently=301]="MovedPermanently",A[A.ResourceMoved=302]="ResourceMoved",A[A.SeeOther=303]="SeeOther",A[A.NotModified=304]="NotModified",A[A.UseProxy=305]="UseProxy",A[A.SwitchProxy=306]="SwitchProxy",A[A.TemporaryRedirect=307]="TemporaryRedirect",A[A.PermanentRedirect=308]="PermanentRedirect",A[A.BadRequest=400]="BadRequest",A[A.Unauthorized=401]="Unauthorized",A[A.PaymentRequired=402]="PaymentRequired",A[A.Forbidden=403]="Forbidden",A[A.NotFound=404]="NotFound",A[A.MethodNotAllowed=405]="MethodNotAllowed",A[A.NotAcceptable=406]="NotAcceptable",A[A.ProxyAuthenticationRequired=407]="ProxyAuthenticationRequired",A[A.RequestTimeout=408]="RequestTimeout",A[A.Conflict=409]="Conflict",A[A.Gone=410]="Gone",A[A.TooManyRequests=429]="TooManyRequests",A[A.InternalServerError=500]="InternalServerError",A[A.NotImplemented=501]="NotImplemented",A[A.BadGateway=502]="BadGateway",A[A.ServiceUnavailable=503]="ServiceUnavailable",A[A.GatewayTimeout=504]="GatewayTimeout"}(E||(H.HttpCodes=E={})),function(A){A.Accept="accept",A.ContentType="content-type"}(Q||(H.Headers=Q={})),function(A){A.ApplicationJson="application/json"}(h||(H.MediaTypes=h={})),H.getProxyUrl=function(A){const e=a.getProxyUrl(new URL(A));return e?e.href:""};const l=[E.MovedPermanently,E.ResourceMoved,E.SeeOther,E.TemporaryRedirect,E.PermanentRedirect],C=[E.BadGateway,E.ServiceUnavailable,E.GatewayTimeout],B=["OPTIONS","GET","DELETE","HEAD"];class I extends Error{constructor(A,e){super(A),this.name="HttpClientError",this.statusCode=e,Object.setPrototypeOf(this,I.prototype)}}H.HttpClientError=I;class u{constructor(A){this.message=A}readBody(){return n(this,void 0,void 0,(function*(){return new Promise((A=>n(this,void 0,void 0,(function*(){let e=Buffer.alloc(0);this.message.on("data",(A=>{e=Buffer.concat([e,A])})),this.message.on("end",(()=>{A(e.toString())}))}))))}))}readBodyBuffer(){return n(this,void 0,void 0,(function*(){return new Promise((A=>n(this,void 0,void 0,(function*(){const e=[];this.message.on("data",(A=>{e.push(A)})),this.message.on("end",(()=>{A(Buffer.concat(e))}))}))))}))}}H.HttpClientResponse=u,H.isHttps=function(A){return"https:"===new URL(A).protocol};H.HttpClient=class{constructor(A,e,t){this._ignoreSslError=!1,this._allowRedirects=!0,this._allowRedirectDowngrade=!1,this._maxRedirects=50,this._allowRetries=!1,this._maxRetries=1,this._keepAlive=!1,this._disposed=!1,this.userAgent=A,this.handlers=e||[],this.requestOptions=t,t&&(null!=t.ignoreSslError&&(this._ignoreSslError=t.ignoreSslError),this._socketTimeout=t.socketTimeout,null!=t.allowRedirects&&(this._allowRedirects=t.allowRedirects),null!=t.allowRedirectDowngrade&&(this._allowRedirectDowngrade=t.allowRedirectDowngrade),null!=t.maxRedirects&&(this._maxRedirects=Math.max(t.maxRedirects,0)),null!=t.keepAlive&&(this._keepAlive=t.keepAlive),null!=t.allowRetries&&(this._allowRetries=t.allowRetries),null!=t.maxRetries&&(this._maxRetries=t.maxRetries))}options(A,e){return n(this,void 0,void 0,(function*(){return this.request("OPTIONS",A,null,e||{})}))}get(A,e){return n(this,void 0,void 0,(function*(){return this.request("GET",A,null,e||{})}))}del(A,e){return n(this,void 0,void 0,(function*(){return this.request("DELETE",A,null,e||{})}))}post(A,e,t){return n(this,void 0,void 0,(function*(){return this.request("POST",A,e,t||{})}))}patch(A,e,t){return n(this,void 0,void 0,(function*(){return this.request("PATCH",A,e,t||{})}))}put(A,e,t){return n(this,void 0,void 0,(function*(){return this.request("PUT",A,e,t||{})}))}head(A,e){return n(this,void 0,void 0,(function*(){return this.request("HEAD",A,null,e||{})}))}sendStream(A,e,t,s){return n(this,void 0,void 0,(function*(){return this.request(A,e,t,s)}))}getJson(A,e={}){return n(this,void 0,void 0,(function*(){e[Q.Accept]=this._getExistingOrDefaultHeader(e,Q.Accept,h.ApplicationJson);const t=yield this.get(A,e);return this._processResponse(t,this.requestOptions)}))}postJson(A,e,t={}){return n(this,void 0,void 0,(function*(){const n=JSON.stringify(e,null,2);t[Q.Accept]=this._getExistingOrDefaultHeader(t,Q.Accept,h.ApplicationJson),t[Q.ContentType]=this._getExistingOrDefaultHeader(t,Q.ContentType,h.ApplicationJson);const s=yield this.post(A,n,t);return this._processResponse(s,this.requestOptions)}))}putJson(A,e,t={}){return n(this,void 0,void 0,(function*(){const n=JSON.stringify(e,null,2);t[Q.Accept]=this._getExistingOrDefaultHeader(t,Q.Accept,h.ApplicationJson),t[Q.ContentType]=this._getExistingOrDefaultHeader(t,Q.ContentType,h.ApplicationJson);const s=yield this.put(A,n,t);return this._processResponse(s,this.requestOptions)}))}patchJson(A,e,t={}){return n(this,void 0,void 0,(function*(){const n=JSON.stringify(e,null,2);t[Q.Accept]=this._getExistingOrDefaultHeader(t,Q.Accept,h.ApplicationJson),t[Q.ContentType]=this._getExistingOrDefaultHeader(t,Q.ContentType,h.ApplicationJson);const s=yield this.patch(A,n,t);return this._processResponse(s,this.requestOptions)}))}request(A,e,t,s){return n(this,void 0,void 0,(function*(){if(this._disposed)throw new Error("Client has already been disposed.");const n=new URL(e);let r=this._prepareRequest(A,n,s);const o=this._allowRetries&&B.includes(A)?this._maxRetries+1:1;let i,a=0;do{if(i=yield this.requestRaw(r,t),i&&i.message&&i.message.statusCode===E.Unauthorized){let A;for(const e of this.handlers)if(e.canHandleAuthentication(i)){A=e;break}return A?A.handleAuthentication(this,r,t):i}let e=this._maxRedirects;for(;i.message.statusCode&&l.includes(i.message.statusCode)&&this._allowRedirects&&e>0;){const o=i.message.headers.location;if(!o)break;const a=new URL(o);if("https:"===n.protocol&&n.protocol!==a.protocol&&!this._allowRedirectDowngrade)throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");if(yield i.readBody(),a.hostname!==n.hostname)for(const A in s)"authorization"===A.toLowerCase()&&delete s[A];r=this._prepareRequest(A,a,s),i=yield this.requestRaw(r,t),e--}if(!i.message.statusCode||!C.includes(i.message.statusCode))return i;a+=1,a<o&&(yield i.readBody(),yield this._performExponentialBackoff(a))}while(a<o);return i}))}dispose(){this._agent&&this._agent.destroy(),this._disposed=!0}requestRaw(A,e){return n(this,void 0,void 0,(function*(){return new Promise(((t,n)=>{this.requestRawWithCallback(A,e,(function(A,e){A?n(A):e?t(e):n(new Error("Unknown error"))}))}))}))}requestRawWithCallback(A,e,t){"string"==typeof e&&(A.options.headers||(A.options.headers={}),A.options.headers["Content-Length"]=Buffer.byteLength(e,"utf8"));let n=!1;function s(A,e){n||(n=!0,t(A,e))}const r=A.httpModule.request(A.options,(A=>{s(void 0,new u(A))}));let o;r.on("socket",(A=>{o=A})),r.setTimeout(this._socketTimeout||18e4,(()=>{o&&o.end(),s(new Error(`Request timeout: ${A.options.path}`))})),r.on("error",(function(A){s(A)})),e&&"string"==typeof e&&r.write(e,"utf8"),e&&"string"!=typeof e?(e.on("close",(function(){r.end()})),e.pipe(r)):r.end()}getAgent(A){const e=new URL(A);return this._getAgent(e)}getAgentDispatcher(A){const e=new URL(A),t=a.getProxyUrl(e);if(t&&t.hostname)return this._getProxyAgentDispatcher(e,t)}_prepareRequest(A,e,t){const n={};n.parsedUrl=e;const s="https:"===n.parsedUrl.protocol;n.httpModule=s?i:o;const r=s?443:80;if(n.options={},n.options.host=n.parsedUrl.hostname,n.options.port=n.parsedUrl.port?parseInt(n.parsedUrl.port):r,n.options.path=(n.parsedUrl.pathname||"")+(n.parsedUrl.search||""),n.options.method=A,n.options.headers=this._mergeHeaders(t),null!=this.userAgent&&(n.options.headers["user-agent"]=this.userAgent),n.options.agent=this._getAgent(n.parsedUrl),this.handlers)for(const A of this.handlers)A.prepareRequest(n.options);return n}_mergeHeaders(A){return this.requestOptions&&this.requestOptions.headers?Object.assign({},d(this.requestOptions.headers),d(A||{})):d(A||{})}_getExistingOrDefaultHeader(A,e,t){let n;return this.requestOptions&&this.requestOptions.headers&&(n=d(this.requestOptions.headers)[e]),A[e]||n||t}_getAgent(A){let e;const t=a.getProxyUrl(A),n=t&&t.hostname;if(this._keepAlive&&n&&(e=this._proxyAgent),n||(e=this._agent),e)return e;const s="https:"===A.protocol;let r=100;if(this.requestOptions&&(r=this.requestOptions.maxSockets||o.globalAgent.maxSockets),t&&t.hostname){const A={maxSockets:r,keepAlive:this._keepAlive,proxy:Object.assign(Object.assign({},(t.username||t.password)&&{proxyAuth:`${t.username}:${t.password}`}),{host:t.hostname,port:t.port})};let n;const o="https:"===t.protocol;n=s?o?c.httpsOverHttps:c.httpsOverHttp:o?c.httpOverHttps:c.httpOverHttp,e=n(A),this._proxyAgent=e}if(!e){const A={keepAlive:this._keepAlive,maxSockets:r};e=s?new i.Agent(A):new o.Agent(A),this._agent=e}return s&&this._ignoreSslError&&(e.options=Object.assign(e.options||{},{rejectUnauthorized:!1})),e}_getProxyAgentDispatcher(A,e){let t;if(this._keepAlive&&(t=this._proxyAgentDispatcher),t)return t;const n="https:"===A.protocol;return t=new g.ProxyAgent(Object.assign({uri:e.href,pipelining:this._keepAlive?1:0},(e.username||e.password)&&{token:`Basic ${Buffer.from(`${e.username}:${e.password}`).toString("base64")}`})),this._proxyAgentDispatcher=t,n&&this._ignoreSslError&&(t.options=Object.assign(t.options.requestTls||{},{rejectUnauthorized:!1})),t}_performExponentialBackoff(A){return n(this,void 0,void 0,(function*(){A=Math.min(10,A);const e=5*Math.pow(2,A);return new Promise((A=>setTimeout((()=>A()),e)))}))}_processResponse(A,e){return n(this,void 0,void 0,(function*(){return new Promise(((t,s)=>n(this,void 0,void 0,(function*(){const n=A.message.statusCode||0,r={statusCode:n,result:null,headers:{}};let o,i;n===E.NotFound&&t(r);try{i=yield A.readBody(),i&&i.length>0&&(o=e&&e.deserializeDates?JSON.parse(i,(function(A,e){if("string"==typeof e){const A=new Date(e);if(!isNaN(A.valueOf()))return A}return e})):JSON.parse(i),r.result=o),r.headers=A.message.headers}catch(A){}if(n>299){let A;A=o&&o.message?o.message:i&&i.length>0?i:`Failed request: (${n})`;const e=new I(A,n);e.result=r.result,s(e)}else t(r)}))))}))}};const d=A=>Object.keys(A).reduce(((e,t)=>(e[t.toLowerCase()]=A[t],e)),{});return H}var Rs,Ns,Ss={};function Fs(){if(Rs)return Ss;Rs=1;var A=Ss&&Ss.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(Ss,"__esModule",{value:!0}),Ss.PersonalAccessTokenCredentialHandler=Ss.BearerCredentialHandler=Ss.BasicCredentialHandler=void 0;Ss.BasicCredentialHandler=class{constructor(A,e){this.username=A,this.password=e}prepareRequest(A){if(!A.headers)throw Error("The request has no headers");A.headers.Authorization=`Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`}canHandleAuthentication(){return!1}handleAuthentication(){return A(this,void 0,void 0,(function*(){throw new Error("not implemented")}))}};Ss.BearerCredentialHandler=class{constructor(A){this.token=A}prepareRequest(A){if(!A.headers)throw Error("The request has no headers");A.headers.Authorization=`Bearer ${this.token}`}canHandleAuthentication(){return!1}handleAuthentication(){return A(this,void 0,void 0,(function*(){throw new Error("not implemented")}))}};return Ss.PersonalAccessTokenCredentialHandler=class{constructor(A){this.token=A}prepareRequest(A){if(!A.headers)throw Error("The request has no headers");A.headers.Authorization=`Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`}canHandleAuthentication(){return!1}handleAuthentication(){return A(this,void 0,void 0,(function*(){throw new Error("not implemented")}))}},Ss}function Us(){if(Ns)return G;Ns=1;var A=G&&G.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(G,"__esModule",{value:!0}),G.OidcClient=void 0;const e=bs(),t=Fs(),n=Ar();class s{static createHttpClient(A=!0,n=10){const r={allowRetries:A,maxRetries:n};return new e.HttpClient("actions/oidc-client",[new t.BearerCredentialHandler(s.getRequestToken())],r)}static getRequestToken(){const A=process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;if(!A)throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");return A}static getIDTokenUrl(){const A=process.env.ACTIONS_ID_TOKEN_REQUEST_URL;if(!A)throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");return A}static getCall(e){var t;return A(this,void 0,void 0,(function*(){const A=s.createHttpClient(),n=yield A.getJson(e).catch((A=>{throw new Error(`Failed to get ID Token. \n \n        Error Code : ${A.statusCode}\n \n        Error Message: ${A.message}`)})),r=null===(t=n.result)||void 0===t?void 0:t.value;if(!r)throw new Error("Response json body do not have ID Token field");return r}))}static getIDToken(e){return A(this,void 0,void 0,(function*(){try{let A=s.getIDTokenUrl();if(e){A=`${A}&audience=${encodeURIComponent(e)}`}(0,n.debug)(`ID token url is ${A}`);const t=yield s.getCall(A);return(0,n.setSecret)(t),t}catch(A){throw new Error(`Error message: ${A.message}`)}}))}}return G.OidcClient=s,G}var Ls,Ms={};function vs(){return Ls||(Ls=1,function(t){var n=Ms&&Ms.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.summary=t.markdownSummary=t.SUMMARY_DOCS_URL=t.SUMMARY_ENV_VAR=void 0;const s=e,r=A,{access:o,appendFile:i,writeFile:a}=r.promises;t.SUMMARY_ENV_VAR="GITHUB_STEP_SUMMARY",t.SUMMARY_DOCS_URL="https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";const c=new class{constructor(){this._buffer=""}filePath(){return n(this,void 0,void 0,(function*(){if(this._filePath)return this._filePath;const A=process.env[t.SUMMARY_ENV_VAR];if(!A)throw new Error(`Unable to find environment variable for $${t.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);try{yield o(A,r.constants.R_OK|r.constants.W_OK)}catch(e){throw new Error(`Unable to access summary file: '${A}'. Check if the file has correct read/write permissions.`)}return this._filePath=A,this._filePath}))}wrap(A,e,t={}){const n=Object.entries(t).map((([A,e])=>` ${A}="${e}"`)).join("");return e?`<${A}${n}>${e}</${A}>`:`<${A}${n}>`}write(A){return n(this,void 0,void 0,(function*(){const e=!!(null==A?void 0:A.overwrite),t=yield this.filePath(),n=e?a:i;return yield n(t,this._buffer,{encoding:"utf8"}),this.emptyBuffer()}))}clear(){return n(this,void 0,void 0,(function*(){return this.emptyBuffer().write({overwrite:!0})}))}stringify(){return this._buffer}isEmptyBuffer(){return 0===this._buffer.length}emptyBuffer(){return this._buffer="",this}addRaw(A,e=!1){return this._buffer+=A,e?this.addEOL():this}addEOL(){return this.addRaw(s.EOL)}addCodeBlock(A,e){const t=Object.assign({},e&&{lang:e}),n=this.wrap("pre",this.wrap("code",A),t);return this.addRaw(n).addEOL()}addList(A,e=!1){const t=e?"ol":"ul",n=A.map((A=>this.wrap("li",A))).join(""),s=this.wrap(t,n);return this.addRaw(s).addEOL()}addTable(A){const e=A.map((A=>{const e=A.map((A=>{if("string"==typeof A)return this.wrap("td",A);const{header:e,data:t,colspan:n,rowspan:s}=A,r=e?"th":"td",o=Object.assign(Object.assign({},n&&{colspan:n}),s&&{rowspan:s});return this.wrap(r,t,o)})).join("");return this.wrap("tr",e)})).join(""),t=this.wrap("table",e);return this.addRaw(t).addEOL()}addDetails(A,e){const t=this.wrap("details",this.wrap("summary",A)+e);return this.addRaw(t).addEOL()}addImage(A,e,t){const{width:n,height:s}=t||{},r=Object.assign(Object.assign({},n&&{width:n}),s&&{height:s}),o=this.wrap("img",null,Object.assign({src:A,alt:e},r));return this.addRaw(o).addEOL()}addHeading(A,e){const t=`h${e}`,n=["h1","h2","h3","h4","h5","h6"].includes(t)?t:"h1",s=this.wrap(n,A);return this.addRaw(s).addEOL()}addSeparator(){const A=this.wrap("hr",null);return this.addRaw(A).addEOL()}addBreak(){const A=this.wrap("br",null);return this.addRaw(A).addEOL()}addQuote(A,e){const t=Object.assign({},e&&{cite:e}),n=this.wrap("blockquote",A,t);return this.addRaw(n).addEOL()}addLink(A,e){const t=this.wrap("a",A,{href:e});return this.addRaw(t).addEOL()}};t.markdownSummary=c,t.summary=c}(Ms)),Ms}var Ts,Ys={};var Js,Gs,Hs,Os,Vs,xs,qs={},Ws={},Ps={},_s={},js={};function Ks(){return Js||(Js=1,function(e){var n,s=js&&js.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t),Object.defineProperty(A,n,{enumerable:!0,get:function(){return e[t]}})}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),r=js&&js.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),o=js&&js.__importStar||function(A){if(A&&A.__esModule)return A;var e={};if(null!=A)for(var t in A)"default"!==t&&Object.hasOwnProperty.call(A,t)&&s(e,A,t);return r(e,A),e},i=js&&js.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.getCmdPath=e.tryGetExecutablePath=e.isRooted=e.isDirectory=e.exists=e.READONLY=e.UV_FS_O_EXLOCK=e.IS_WINDOWS=e.unlink=e.symlink=e.stat=e.rmdir=e.rm=e.rename=e.readlink=e.readdir=e.open=e.mkdir=e.lstat=e.copyFile=e.chmod=void 0;const a=o(A),c=o(t);function g(A){return(1&A.mode)>0||(8&A.mode)>0&&A.gid===process.getgid()||(64&A.mode)>0&&A.uid===process.getuid()}n=a.promises,e.chmod=n.chmod,e.copyFile=n.copyFile,e.lstat=n.lstat,e.mkdir=n.mkdir,e.open=n.open,e.readdir=n.readdir,e.readlink=n.readlink,e.rename=n.rename,e.rm=n.rm,e.rmdir=n.rmdir,e.stat=n.stat,e.symlink=n.symlink,e.unlink=n.unlink,e.IS_WINDOWS="win32"===process.platform,e.UV_FS_O_EXLOCK=268435456,e.READONLY=a.constants.O_RDONLY,e.exists=function(A){return i(this,void 0,void 0,(function*(){try{yield e.stat(A)}catch(A){if("ENOENT"===A.code)return!1;throw A}return!0}))},e.isDirectory=function(A,t=!1){return i(this,void 0,void 0,(function*(){return(t?yield e.stat(A):yield e.lstat(A)).isDirectory()}))},e.isRooted=function(A){if(!(A=function(A){if(A=A||"",e.IS_WINDOWS)return(A=A.replace(/\//g,"\\")).replace(/\\\\+/g,"\\");return A.replace(/\/\/+/g,"/")}(A)))throw new Error('isRooted() parameter "p" cannot be empty');return e.IS_WINDOWS?A.startsWith("\\")||/^[A-Z]:/i.test(A):A.startsWith("/")},e.tryGetExecutablePath=function(A,t){return i(this,void 0,void 0,(function*(){let n;try{n=yield e.stat(A)}catch(e){"ENOENT"!==e.code&&console.log(`Unexpected error attempting to determine if executable file exists '${A}': ${e}`)}if(n&&n.isFile())if(e.IS_WINDOWS){const e=c.extname(A).toUpperCase();if(t.some((A=>A.toUpperCase()===e)))return A}else if(g(n))return A;const s=A;for(const r of t){A=s+r,n=void 0;try{n=yield e.stat(A)}catch(e){"ENOENT"!==e.code&&console.log(`Unexpected error attempting to determine if executable file exists '${A}': ${e}`)}if(n&&n.isFile()){if(e.IS_WINDOWS){try{const t=c.dirname(A),n=c.basename(A).toUpperCase();for(const s of yield e.readdir(t))if(n===s.toUpperCase()){A=c.join(t,s);break}}catch(e){console.log(`Unexpected error attempting to determine the actual case of the file '${A}': ${e}`)}return A}if(g(n))return A}}return""}))},e.getCmdPath=function(){var A;return null!==(A=process.env.COMSPEC)&&void 0!==A?A:"cmd.exe"}}(js)),js}function Zs(){if(Gs)return _s;Gs=1;var A=_s&&_s.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t),Object.defineProperty(A,n,{enumerable:!0,get:function(){return e[t]}})}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),e=_s&&_s.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),n=_s&&_s.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var s in t)"default"!==s&&Object.hasOwnProperty.call(t,s)&&A(n,t,s);return e(n,t),n},s=_s&&_s.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(_s,"__esModule",{value:!0}),_s.findInPath=_s.which=_s.mkdirP=_s.rmRF=_s.mv=_s.cp=void 0;const r=c,o=n(t),i=n(Ks());function a(A){return s(this,void 0,void 0,(function*(){if(i.IS_WINDOWS&&/[*"<>|]/.test(A))throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');try{yield i.rm(A,{force:!0,maxRetries:3,recursive:!0,retryDelay:300})}catch(A){throw new Error(`File was unable to be removed ${A}`)}}))}function g(A){return s(this,void 0,void 0,(function*(){r.ok(A,"a path argument must be provided"),yield i.mkdir(A,{recursive:!0})}))}function E(A){return s(this,void 0,void 0,(function*(){if(!A)throw new Error("parameter 'tool' is required");const e=[];if(i.IS_WINDOWS&&process.env.PATHEXT)for(const A of process.env.PATHEXT.split(o.delimiter))A&&e.push(A);if(i.isRooted(A)){const t=yield i.tryGetExecutablePath(A,e);return t?[t]:[]}if(A.includes(o.sep))return[];const t=[];if(process.env.PATH)for(const A of process.env.PATH.split(o.delimiter))A&&t.push(A);const n=[];for(const s of t){const t=yield i.tryGetExecutablePath(o.join(s,A),e);t&&n.push(t)}return n}))}function Q(A,e,t,n){return s(this,void 0,void 0,(function*(){if(t>=255)return;t++,yield g(e);const s=yield i.readdir(A);for(const r of s){const s=`${A}/${r}`,o=`${e}/${r}`;(yield i.lstat(s)).isDirectory()?yield Q(s,o,t,n):yield h(s,o,n)}yield i.chmod(e,(yield i.stat(A)).mode)}))}function h(A,e,t){return s(this,void 0,void 0,(function*(){if((yield i.lstat(A)).isSymbolicLink()){try{yield i.lstat(e),yield i.unlink(e)}catch(A){"EPERM"===A.code&&(yield i.chmod(e,"0666"),yield i.unlink(e))}const t=yield i.readlink(A);yield i.symlink(t,e,i.IS_WINDOWS?"junction":null)}else(yield i.exists(e))&&!t||(yield i.copyFile(A,e))}))}return _s.cp=function(A,e,t={}){return s(this,void 0,void 0,(function*(){const{force:n,recursive:s,copySourceDirectory:r}=function(A){const e=null==A.force||A.force,t=Boolean(A.recursive),n=null==A.copySourceDirectory||Boolean(A.copySourceDirectory);return{force:e,recursive:t,copySourceDirectory:n}}(t),a=(yield i.exists(e))?yield i.stat(e):null;if(a&&a.isFile()&&!n)return;const c=a&&a.isDirectory()&&r?o.join(e,o.basename(A)):e;if(!(yield i.exists(A)))throw new Error(`no such file or directory: ${A}`);if((yield i.stat(A)).isDirectory()){if(!s)throw new Error(`Failed to copy. ${A} is a directory, but tried to copy without recursive flag.`);yield Q(A,c,0,n)}else{if(""===o.relative(A,c))throw new Error(`'${c}' and '${A}' are the same file`);yield h(A,c,n)}}))},_s.mv=function(A,e,t={}){return s(this,void 0,void 0,(function*(){if(yield i.exists(e)){let n=!0;if((yield i.isDirectory(e))&&(e=o.join(e,o.basename(A)),n=yield i.exists(e)),n){if(null!=t.force&&!t.force)throw new Error("Destination already exists");yield a(e)}}yield g(o.dirname(e)),yield i.rename(A,e)}))},_s.rmRF=a,_s.mkdirP=g,_s.which=function A(e,t){return s(this,void 0,void 0,(function*(){if(!e)throw new Error("parameter 'tool' is required");if(t){const t=yield A(e,!1);if(!t)throw i.IS_WINDOWS?new Error(`Unable to locate executable file: ${e}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`):new Error(`Unable to locate executable file: ${e}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);return t}const n=yield E(e);return n&&n.length>0?n[0]:""}))},_s.findInPath=E,_s}function Xs(){if(Hs)return Ps;Hs=1;var A=Ps&&Ps.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t),Object.defineProperty(A,n,{enumerable:!0,get:function(){return e[t]}})}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),n=Ps&&Ps.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),s=Ps&&Ps.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.hasOwnProperty.call(e,s)&&A(t,e,s);return n(t,e),t},r=Ps&&Ps.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(Ps,"__esModule",{value:!0}),Ps.argStringToArray=Ps.ToolRunner=void 0;const o=s(e),i=s(a),c=s(w),g=s(t),E=s(Zs()),Q=s(Ks()),h=D,l="win32"===process.platform;class C extends i.EventEmitter{constructor(A,e,t){if(super(),!A)throw new Error("Parameter 'toolPath' cannot be null or empty.");this.toolPath=A,this.args=e||[],this.options=t||{}}_debug(A){this.options.listeners&&this.options.listeners.debug&&this.options.listeners.debug(A)}_getCommandString(A,e){const t=this._getSpawnFileName(),n=this._getSpawnArgs(A);let s=e?"":"[command]";if(l)if(this._isCmdFile()){s+=t;for(const A of n)s+=` ${A}`}else if(A.windowsVerbatimArguments){s+=`"${t}"`;for(const A of n)s+=` ${A}`}else{s+=this._windowsQuoteCmdArg(t);for(const A of n)s+=` ${this._windowsQuoteCmdArg(A)}`}else{s+=t;for(const A of n)s+=` ${A}`}return s}_processLineBuffer(A,e,t){try{let n=e+A.toString(),s=n.indexOf(o.EOL);for(;s>-1;){t(n.substring(0,s)),n=n.substring(s+o.EOL.length),s=n.indexOf(o.EOL)}return n}catch(A){return this._debug(`error processing line. Failed with error ${A}`),""}}_getSpawnFileName(){return l&&this._isCmdFile()?process.env.COMSPEC||"cmd.exe":this.toolPath}_getSpawnArgs(A){if(l&&this._isCmdFile()){let e=`/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;for(const t of this.args)e+=" ",e+=A.windowsVerbatimArguments?t:this._windowsQuoteCmdArg(t);return e+='"',[e]}return this.args}_endsWith(A,e){return A.endsWith(e)}_isCmdFile(){const A=this.toolPath.toUpperCase();return this._endsWith(A,".CMD")||this._endsWith(A,".BAT")}_windowsQuoteCmdArg(A){if(!this._isCmdFile())return this._uvQuoteCmdArg(A);if(!A)return'""';const e=[" ","\t","&","(",")","[","]","{","}","^","=",";","!","'","+",",","`","~","|","<",">",'"'];let t=!1;for(const n of A)if(e.some((A=>A===n))){t=!0;break}if(!t)return A;let n='"',s=!0;for(let e=A.length;e>0;e--)n+=A[e-1],s&&"\\"===A[e-1]?n+="\\":'"'===A[e-1]?(s=!0,n+='"'):s=!1;return n+='"',n.split("").reverse().join("")}_uvQuoteCmdArg(A){if(!A)return'""';if(!A.includes(" ")&&!A.includes("\t")&&!A.includes('"'))return A;if(!A.includes('"')&&!A.includes("\\"))return`"${A}"`;let e='"',t=!0;for(let n=A.length;n>0;n--)e+=A[n-1],t&&"\\"===A[n-1]?e+="\\":'"'===A[n-1]?(t=!0,e+="\\"):t=!1;return e+='"',e.split("").reverse().join("")}_cloneExecOptions(A){const e={cwd:(A=A||{}).cwd||process.cwd(),env:A.env||process.env,silent:A.silent||!1,windowsVerbatimArguments:A.windowsVerbatimArguments||!1,failOnStdErr:A.failOnStdErr||!1,ignoreReturnCode:A.ignoreReturnCode||!1,delay:A.delay||1e4};return e.outStream=A.outStream||process.stdout,e.errStream=A.errStream||process.stderr,e}_getSpawnOptions(A,e){A=A||{};const t={};return t.cwd=A.cwd,t.env=A.env,t.windowsVerbatimArguments=A.windowsVerbatimArguments||this._isCmdFile(),A.windowsVerbatimArguments&&(t.argv0=`"${e}"`),t}exec(){return r(this,void 0,void 0,(function*(){return!Q.isRooted(this.toolPath)&&(this.toolPath.includes("/")||l&&this.toolPath.includes("\\"))&&(this.toolPath=g.resolve(process.cwd(),this.options.cwd||process.cwd(),this.toolPath)),this.toolPath=yield E.which(this.toolPath,!0),new Promise(((A,e)=>r(this,void 0,void 0,(function*(){this._debug(`exec tool: ${this.toolPath}`),this._debug("arguments:");for(const A of this.args)this._debug(`   ${A}`);const t=this._cloneExecOptions(this.options);!t.silent&&t.outStream&&t.outStream.write(this._getCommandString(t)+o.EOL);const n=new B(t,this.toolPath);if(n.on("debug",(A=>{this._debug(A)})),this.options.cwd&&!(yield Q.exists(this.options.cwd)))return e(new Error(`The cwd: ${this.options.cwd} does not exist!`));const s=this._getSpawnFileName(),r=c.spawn(s,this._getSpawnArgs(t),this._getSpawnOptions(this.options,s));let i="";r.stdout&&r.stdout.on("data",(A=>{this.options.listeners&&this.options.listeners.stdout&&this.options.listeners.stdout(A),!t.silent&&t.outStream&&t.outStream.write(A),i=this._processLineBuffer(A,i,(A=>{this.options.listeners&&this.options.listeners.stdline&&this.options.listeners.stdline(A)}))}));let a="";if(r.stderr&&r.stderr.on("data",(A=>{if(n.processStderr=!0,this.options.listeners&&this.options.listeners.stderr&&this.options.listeners.stderr(A),!t.silent&&t.errStream&&t.outStream){(t.failOnStdErr?t.errStream:t.outStream).write(A)}a=this._processLineBuffer(A,a,(A=>{this.options.listeners&&this.options.listeners.errline&&this.options.listeners.errline(A)}))})),r.on("error",(A=>{n.processError=A.message,n.processExited=!0,n.processClosed=!0,n.CheckComplete()})),r.on("exit",(A=>{n.processExitCode=A,n.processExited=!0,this._debug(`Exit code ${A} received from tool '${this.toolPath}'`),n.CheckComplete()})),r.on("close",(A=>{n.processExitCode=A,n.processExited=!0,n.processClosed=!0,this._debug(`STDIO streams have closed for tool '${this.toolPath}'`),n.CheckComplete()})),n.on("done",((t,n)=>{i.length>0&&this.emit("stdline",i),a.length>0&&this.emit("errline",a),r.removeAllListeners(),t?e(t):A(n)})),this.options.input){if(!r.stdin)throw new Error("child process missing stdin");r.stdin.end(this.options.input)}}))))}))}}Ps.ToolRunner=C,Ps.argStringToArray=function(A){const e=[];let t=!1,n=!1,s="";function r(A){n&&'"'!==A&&(s+="\\"),s+=A,n=!1}for(let o=0;o<A.length;o++){const i=A.charAt(o);'"'!==i?"\\"===i&&n?r(i):"\\"===i&&t?n=!0:" "!==i||t?r(i):s.length>0&&(e.push(s),s=""):n?r(i):t=!t}return s.length>0&&e.push(s.trim()),e};class B extends i.EventEmitter{constructor(A,e){if(super(),this.processClosed=!1,this.processError="",this.processExitCode=0,this.processExited=!1,this.processStderr=!1,this.delay=1e4,this.done=!1,this.timeout=null,!e)throw new Error("toolPath must not be empty");this.options=A,this.toolPath=e,A.delay&&(this.delay=A.delay)}CheckComplete(){this.done||(this.processClosed?this._setResult():this.processExited&&(this.timeout=h.setTimeout(B.HandleTimeout,this.delay,this)))}_debug(A){this.emit("debug",A)}_setResult(){let A;this.processExited&&(this.processError?A=new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`):0===this.processExitCode||this.options.ignoreReturnCode?this.processStderr&&this.options.failOnStdErr&&(A=new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`)):A=new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`)),this.timeout&&(clearTimeout(this.timeout),this.timeout=null),this.done=!0,this.emit("done",A,this.processExitCode)}static HandleTimeout(A){if(!A.done){if(!A.processClosed&&A.processExited){const e=`The STDIO streams did not close within ${A.delay/1e3} seconds of the exit event from process '${A.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;A._debug(e)}A._setResult()}}}return Ps}function zs(){if(Os)return Ws;Os=1;var A=Ws&&Ws.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t),Object.defineProperty(A,n,{enumerable:!0,get:function(){return e[t]}})}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),e=Ws&&Ws.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),t=Ws&&Ws.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var s in t)"default"!==s&&Object.hasOwnProperty.call(t,s)&&A(n,t,s);return e(n,t),n},n=Ws&&Ws.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(Ws,"__esModule",{value:!0}),Ws.getExecOutput=Ws.exec=void 0;const s=y,r=t(Xs());function o(A,e,t){return n(this,void 0,void 0,(function*(){const n=r.argStringToArray(A);if(0===n.length)throw new Error("Parameter 'commandLine' cannot be null or empty.");const s=n[0];e=n.slice(1).concat(e||[]);return new r.ToolRunner(s,e,t).exec()}))}return Ws.exec=o,Ws.getExecOutput=function(A,e,t){var r,i;return n(this,void 0,void 0,(function*(){let n="",a="";const c=new s.StringDecoder("utf8"),g=new s.StringDecoder("utf8"),E=null===(r=null==t?void 0:t.listeners)||void 0===r?void 0:r.stdout,Q=null===(i=null==t?void 0:t.listeners)||void 0===i?void 0:i.stderr,h=Object.assign(Object.assign({},null==t?void 0:t.listeners),{stdout:A=>{n+=c.write(A),E&&E(A)},stderr:A=>{a+=g.write(A),Q&&Q(A)}}),l=yield o(A,e,Object.assign(Object.assign({},t),{listeners:h}));return n+=c.end(),a+=g.end(),{exitCode:l,stdout:n,stderr:a}}))},Ws}function $s(){return Vs||(Vs=1,function(A){var t=qs&&qs.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(e,t);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(A,n,s)}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),n=qs&&qs.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),s=qs&&qs.__importStar||function(A){if(A&&A.__esModule)return A;var e={};if(null!=A)for(var s in A)"default"!==s&&Object.prototype.hasOwnProperty.call(A,s)&&t(e,A,s);return n(e,A),e},r=qs&&qs.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))},o=qs&&qs.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(A,"__esModule",{value:!0}),A.getDetails=A.isLinux=A.isMacOS=A.isWindows=A.arch=A.platform=void 0;const i=o(e),a=s(zs());A.platform=i.default.platform(),A.arch=i.default.arch(),A.isWindows="win32"===A.platform,A.isMacOS="darwin"===A.platform,A.isLinux="linux"===A.platform,A.getDetails=function(){return r(this,void 0,void 0,(function*(){return Object.assign(Object.assign({},yield A.isWindows?r(void 0,void 0,void 0,(function*(){const{stdout:A}=yield a.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"',void 0,{silent:!0}),{stdout:e}=yield a.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"',void 0,{silent:!0});return{name:e.trim(),version:A.trim()}})):A.isMacOS?r(void 0,void 0,void 0,(function*(){var A,e,t,n;const{stdout:s}=yield a.getExecOutput("sw_vers",void 0,{silent:!0}),r=null!==(e=null===(A=s.match(/ProductVersion:\s*(.+)/))||void 0===A?void 0:A[1])&&void 0!==e?e:"";return{name:null!==(n=null===(t=s.match(/ProductName:\s*(.+)/))||void 0===t?void 0:t[1])&&void 0!==n?n:"",version:r}})):r(void 0,void 0,void 0,(function*(){const{stdout:A}=yield a.getExecOutput("lsb_release",["-i","-r","-s"],{silent:!0}),[e,t]=A.trim().split("\n");return{name:e,version:t}}))),{platform:A.platform,arch:A.arch,isWindows:A.isWindows,isMacOS:A.isMacOS,isLinux:A.isLinux})}))}}(qs)),qs}function Ar(){return xs||(xs=1,function(s){var r=F&&F.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(e,t);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(A,n,s)}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),o=F&&F.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),i=F&&F.__importStar||function(A){if(A&&A.__esModule)return A;var e={};if(null!=A)for(var t in A)"default"!==t&&Object.prototype.hasOwnProperty.call(A,t)&&r(e,A,t);return o(e,A),e},a=F&&F.__awaiter||function(A,e,t,n){return new(t||(t=Promise))((function(s,r){function o(A){try{a(n.next(A))}catch(A){r(A)}}function i(A){try{a(n.throw(A))}catch(A){r(A)}}function a(A){var e;A.done?s(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,i)}a((n=n.apply(A,e||[])).next())}))};Object.defineProperty(s,"__esModule",{value:!0}),s.platform=s.toPlatformPath=s.toWin32Path=s.toPosixPath=s.markdownSummary=s.summary=s.getIDToken=s.getState=s.saveState=s.group=s.endGroup=s.startGroup=s.info=s.notice=s.warning=s.error=s.debug=s.isDebug=s.setFailed=s.setCommandEcho=s.setOutput=s.getBooleanInput=s.getMultilineInput=s.getInput=s.addPath=s.setSecret=s.exportVariable=s.ExitCode=void 0;const c=v(),g=function(){if(T)return Y;T=1;var t=Y&&Y.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(e,t);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(A,n,s)}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),s=Y&&Y.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),r=Y&&Y.__importStar||function(A){if(A&&A.__esModule)return A;var e={};if(null!=A)for(var n in A)"default"!==n&&Object.prototype.hasOwnProperty.call(A,n)&&t(e,A,n);return s(e,A),e};Object.defineProperty(Y,"__esModule",{value:!0}),Y.prepareKeyValueMessage=Y.issueFileCommand=void 0;const o=r(n),i=r(A),a=r(e),c=M();return Y.issueFileCommand=function(A,e){const t=process.env[`GITHUB_${A}`];if(!t)throw new Error(`Unable to find environment variable for file command ${A}`);if(!i.existsSync(t))throw new Error(`Missing file at path: ${t}`);i.appendFileSync(t,`${(0,c.toCommandValue)(e)}${a.EOL}`,{encoding:"utf8"})},Y.prepareKeyValueMessage=function(A,e){const t=`ghadelimiter_${o.randomUUID()}`,n=(0,c.toCommandValue)(e);if(A.includes(t))throw new Error(`Unexpected input: name should not contain the delimiter "${t}"`);if(n.includes(t))throw new Error(`Unexpected input: value should not contain the delimiter "${t}"`);return`${A}<<${t}${a.EOL}${n}${a.EOL}${t}`},Y}(),E=M(),Q=i(e),h=i(t),l=Us();var C;function B(A,e){const t=process.env[`INPUT_${A.replace(/ /g,"_").toUpperCase()}`]||"";if(e&&e.required&&!t)throw new Error(`Input required and not supplied: ${A}`);return e&&!1===e.trimWhitespace?t:t.trim()}function I(A,e={}){(0,c.issueCommand)("error",(0,E.toCommandProperties)(e),A instanceof Error?A.toString():A)}function u(A){(0,c.issue)("group",A)}function d(){(0,c.issue)("endgroup")}!function(A){A[A.Success=0]="Success",A[A.Failure=1]="Failure"}(C||(s.ExitCode=C={})),s.exportVariable=function(A,e){const t=(0,E.toCommandValue)(e);if(process.env[A]=t,process.env.GITHUB_ENV||"")return(0,g.issueFileCommand)("ENV",(0,g.prepareKeyValueMessage)(A,e));(0,c.issueCommand)("set-env",{name:A},t)},s.setSecret=function(A){(0,c.issueCommand)("add-mask",{},A)},s.addPath=function(A){process.env.GITHUB_PATH||""?(0,g.issueFileCommand)("PATH",A):(0,c.issueCommand)("add-path",{},A),process.env.PATH=`${A}${h.delimiter}${process.env.PATH}`},s.getInput=B,s.getMultilineInput=function(A,e){const t=B(A,e).split("\n").filter((A=>""!==A));return e&&!1===e.trimWhitespace?t:t.map((A=>A.trim()))},s.getBooleanInput=function(A,e){const t=B(A,e);if(["true","True","TRUE"].includes(t))return!0;if(["false","False","FALSE"].includes(t))return!1;throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${A}\nSupport boolean input list: \`true | True | TRUE | false | False | FALSE\``)},s.setOutput=function(A,e){if(process.env.GITHUB_OUTPUT||"")return(0,g.issueFileCommand)("OUTPUT",(0,g.prepareKeyValueMessage)(A,e));process.stdout.write(Q.EOL),(0,c.issueCommand)("set-output",{name:A},(0,E.toCommandValue)(e))},s.setCommandEcho=function(A){(0,c.issue)("echo",A?"on":"off")},s.setFailed=function(A){process.exitCode=C.Failure,I(A)},s.isDebug=function(){return"1"===process.env.RUNNER_DEBUG},s.debug=function(A){(0,c.issueCommand)("debug",{},A)},s.error=I,s.warning=function(A,e={}){(0,c.issueCommand)("warning",(0,E.toCommandProperties)(e),A instanceof Error?A.toString():A)},s.notice=function(A,e={}){(0,c.issueCommand)("notice",(0,E.toCommandProperties)(e),A instanceof Error?A.toString():A)},s.info=function(A){process.stdout.write(A+Q.EOL)},s.startGroup=u,s.endGroup=d,s.group=function(A,e){return a(this,void 0,void 0,(function*(){let t;u(A);try{t=yield e()}finally{d()}return t}))},s.saveState=function(A,e){if(process.env.GITHUB_STATE||"")return(0,g.issueFileCommand)("STATE",(0,g.prepareKeyValueMessage)(A,e));(0,c.issueCommand)("save-state",{name:A},(0,E.toCommandValue)(e))},s.getState=function(A){return process.env[`STATE_${A}`]||""},s.getIDToken=function(A){return a(this,void 0,void 0,(function*(){return yield l.OidcClient.getIDToken(A)}))};var f=vs();Object.defineProperty(s,"summary",{enumerable:!0,get:function(){return f.summary}});var p=vs();Object.defineProperty(s,"markdownSummary",{enumerable:!0,get:function(){return p.markdownSummary}});var y=function(){if(Ts)return Ys;Ts=1;var A=Ys&&Ys.__createBinding||(Object.create?function(A,e,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(e,t);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(A,n,s)}:function(A,e,t,n){void 0===n&&(n=t),A[n]=e[t]}),e=Ys&&Ys.__setModuleDefault||(Object.create?function(A,e){Object.defineProperty(A,"default",{enumerable:!0,value:e})}:function(A,e){A.default=e}),n=Ys&&Ys.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var s in t)"default"!==s&&Object.prototype.hasOwnProperty.call(t,s)&&A(n,t,s);return e(n,t),n};Object.defineProperty(Ys,"__esModule",{value:!0}),Ys.toPlatformPath=Ys.toWin32Path=Ys.toPosixPath=void 0;const s=n(t);return Ys.toPosixPath=function(A){return A.replace(/[\\]/g,"/")},Ys.toWin32Path=function(A){return A.replace(/[/]/g,"\\")},Ys.toPlatformPath=function(A){return A.replace(/[/\\]/g,s.sep)},Ys}();Object.defineProperty(s,"toPosixPath",{enumerable:!0,get:function(){return y.toPosixPath}}),Object.defineProperty(s,"toWin32Path",{enumerable:!0,get:function(){return y.toWin32Path}}),Object.defineProperty(s,"toPlatformPath",{enumerable:!0,get:function(){return y.toPlatformPath}}),s.platform=i($s())}(F)),F}var er=R(Ar());const tr=(A=0)=>e=>`[${e+A}m`,nr=(A=0)=>e=>`[${38+A};5;${e}m`,sr=(A=0)=>(e,t,n)=>`[${38+A};2;${e};${t};${n}m`,rr={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(rr.modifier);Object.keys(rr.color),Object.keys(rr.bgColor);const or=function(){const A=new Map;for(const[e,t]of Object.entries(rr)){for(const[e,n]of Object.entries(t))rr[e]={open:`[${n[0]}m`,close:`[${n[1]}m`},t[e]=rr[e],A.set(n[0],n[1]);Object.defineProperty(rr,e,{value:t,enumerable:!1})}return Object.defineProperty(rr,"codes",{value:A,enumerable:!1}),rr.color.close="[39m",rr.bgColor.close="[49m",rr.color.ansi=tr(),rr.color.ansi256=nr(),rr.color.ansi16m=sr(),rr.bgColor.ansi=tr(10),rr.bgColor.ansi256=nr(10),rr.bgColor.ansi16m=sr(10),Object.defineProperties(rr,{rgbToAnsi256:{value:(A,e,t)=>A===e&&e===t?A<8?16:A>248?231:Math.round((A-8)/247*24)+232:16+36*Math.round(A/255*5)+6*Math.round(e/255*5)+Math.round(t/255*5),enumerable:!1},hexToRgb:{value(A){const e=/[a-f\d]{6}|[a-f\d]{3}/i.exec(A.toString(16));if(!e)return[0,0,0];let[t]=e;3===t.length&&(t=[...t].map((A=>A+A)).join(""));const n=Number.parseInt(t,16);return[n>>16&255,n>>8&255,255&n]},enumerable:!1},hexToAnsi256:{value:A=>rr.rgbToAnsi256(...rr.hexToRgb(A)),enumerable:!1},ansi256ToAnsi:{value(A){if(A<8)return 30+A;if(A<16)return A-8+90;let e,t,n;if(A>=232)e=(10*(A-232)+8)/255,t=e,n=e;else{const s=(A-=16)%36;e=Math.floor(A/36)/5,t=Math.floor(s/6)/5,n=s%6/5}const s=2*Math.max(e,t,n);if(0===s)return 30;let r=30+(Math.round(n)<<2|Math.round(t)<<1|Math.round(e));return 2===s&&(r+=60),r},enumerable:!1},rgbToAnsi:{value:(A,e,t)=>rr.ansi256ToAnsi(rr.rgbToAnsi256(A,e,t)),enumerable:!1},hexToAnsi:{value:A=>rr.ansi256ToAnsi(rr.hexToAnsi256(A)),enumerable:!1}}),rr}(),ir=(()=>{if(!("navigator"in globalThis))return 0;if(globalThis.navigator.userAgentData){const A=navigator.userAgentData.brands.find((({brand:A})=>"Chromium"===A));if(A&&A.version>93)return 3}return/\b(Chrome|Chromium)\//.test(globalThis.navigator.userAgent)?1:0})(),ar=0!==ir&&{level:ir},cr={stdout:ar,stderr:ar};function gr(A,e,t){let n=A.indexOf(e);if(-1===n)return A;const s=e.length;let r=0,o="";do{o+=A.slice(r,n)+e+t,r=n+s,n=A.indexOf(e,r)}while(-1!==n);return o+=A.slice(r),o}const{stdout:Er,stderr:Qr}=cr,hr=Symbol("GENERATOR"),lr=Symbol("STYLER"),Cr=Symbol("IS_EMPTY"),Br=["ansi","ansi","ansi256","ansi16m"],Ir=Object.create(null),ur=A=>{const e=(...A)=>A.join(" ");return((A,e={})=>{if(e.level&&!(Number.isInteger(e.level)&&e.level>=0&&e.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const t=Er?Er.level:0;A.level=void 0===e.level?t:e.level})(e,A),Object.setPrototypeOf(e,dr.prototype),e};function dr(A){return ur(A)}Object.setPrototypeOf(dr.prototype,Function.prototype);for(const[A,e]of Object.entries(or))Ir[A]={get(){const t=wr(this,mr(e.open,e.close,this[lr]),this[Cr]);return Object.defineProperty(this,A,{value:t}),t}};Ir.visible={get(){const A=wr(this,this[lr],!0);return Object.defineProperty(this,"visible",{value:A}),A}};const fr=(A,e,t,...n)=>"rgb"===A?"ansi16m"===e?or[t].ansi16m(...n):"ansi256"===e?or[t].ansi256(or.rgbToAnsi256(...n)):or[t].ansi(or.rgbToAnsi(...n)):"hex"===A?fr("rgb",e,t,...or.hexToRgb(...n)):or[t][A](...n),pr=["rgb","hex","ansi256"];for(const A of pr){Ir[A]={get(){const{level:e}=this;return function(...t){const n=mr(fr(A,Br[e],"color",...t),or.color.close,this[lr]);return wr(this,n,this[Cr])}}};Ir["bg"+A[0].toUpperCase()+A.slice(1)]={get(){const{level:e}=this;return function(...t){const n=mr(fr(A,Br[e],"bgColor",...t),or.bgColor.close,this[lr]);return wr(this,n,this[Cr])}}}}const yr=Object.defineProperties((()=>{}),{...Ir,level:{enumerable:!0,get(){return this[hr].level},set(A){this[hr].level=A}}}),mr=(A,e,t)=>{let n,s;return void 0===t?(n=A,s=e):(n=t.openAll+A,s=e+t.closeAll),{open:A,close:e,openAll:n,closeAll:s,parent:t}},wr=(A,e,t)=>{const n=(...A)=>Dr(n,1===A.length?""+A[0]:A.join(" "));return Object.setPrototypeOf(n,yr),n[hr]=A,n[lr]=e,n[Cr]=t,n},Dr=(A,e)=>{if(A.level<=0||!e)return A[Cr]?"":e;let t=A[lr];if(void 0===t)return e;const{openAll:n,closeAll:s}=t;if(e.includes(""))for(;void 0!==t;)e=gr(e,t.close,t.open),t=t.parent;const r=e.indexOf("\n");return-1!==r&&(e=function(A,e,t,n){let s=0,r="";do{const o="\r"===A[n-1];r+=A.slice(s,o?n-1:n)+e+(o?"\r\n":"\n")+t,s=n+1,n=A.indexOf("\n",s)}while(-1!==n);return r+=A.slice(s),r}(e,s,n,r)),n+e+s};Object.defineProperties(dr.prototype,Ir);const kr=dr();dr({level:Qr?Qr.level:0});const br=(()=>{if(!("navigator"in globalThis))return 0;if(globalThis.navigator.userAgentData){const A=navigator.userAgentData.brands.find((({brand:A})=>"Chromium"===A));if(A?.version>93)return 3}return/\b(Chrome|Chromium)\//.test(globalThis.navigator.userAgent)?1:0})(),Rr=0!==br&&{level:br,hasBasic:!0,has256:br>=2,has16m:br>=3},Nr={stdout:Rr,stderr:Rr},Sr=Symbol.for("yaml.alias"),Fr=Symbol.for("yaml.document"),Ur=Symbol.for("yaml.map"),Lr=Symbol.for("yaml.pair"),Mr=Symbol.for("yaml.scalar"),vr=Symbol.for("yaml.seq"),Tr=Symbol.for("yaml.node.type"),Yr=A=>!!A&&"object"==typeof A&&A[Tr]===Sr,Jr=A=>!!A&&"object"==typeof A&&A[Tr]===Fr,Gr=A=>!!A&&"object"==typeof A&&A[Tr]===Ur,Hr=A=>!!A&&"object"==typeof A&&A[Tr]===Lr,Or=A=>!!A&&"object"==typeof A&&A[Tr]===Mr,Vr=A=>!!A&&"object"==typeof A&&A[Tr]===vr;function xr(A){if(A&&"object"==typeof A)switch(A[Tr]){case Ur:case vr:return!0}return!1}function qr(A){if(A&&"object"==typeof A)switch(A[Tr]){case Sr:case Ur:case Mr:case vr:return!0}return!1}const Wr=Symbol("break visit"),Pr=Symbol("skip children"),_r=Symbol("remove node");function jr(A,e){const t=zr(e);if(Jr(A)){Kr(null,A.contents,t,Object.freeze([A]))===_r&&(A.contents=null)}else Kr(null,A,t,Object.freeze([]))}function Kr(A,e,t,n){const s=$r(A,e,t,n);if(qr(s)||Hr(s))return Ao(A,n,s),Kr(A,s,t,n);if("symbol"!=typeof s)if(xr(e)){n=Object.freeze(n.concat(e));for(let A=0;A<e.items.length;++A){const s=Kr(A,e.items[A],t,n);if("number"==typeof s)A=s-1;else{if(s===Wr)return Wr;s===_r&&(e.items.splice(A,1),A-=1)}}}else if(Hr(e)){n=Object.freeze(n.concat(e));const A=Kr("key",e.key,t,n);if(A===Wr)return Wr;A===_r&&(e.key=null);const s=Kr("value",e.value,t,n);if(s===Wr)return Wr;s===_r&&(e.value=null)}return s}async function Zr(A,e){const t=zr(e);if(Jr(A)){await Xr(null,A.contents,t,Object.freeze([A]))===_r&&(A.contents=null)}else await Xr(null,A,t,Object.freeze([]))}async function Xr(A,e,t,n){const s=await $r(A,e,t,n);if(qr(s)||Hr(s))return Ao(A,n,s),Xr(A,s,t,n);if("symbol"!=typeof s)if(xr(e)){n=Object.freeze(n.concat(e));for(let A=0;A<e.items.length;++A){const s=await Xr(A,e.items[A],t,n);if("number"==typeof s)A=s-1;else{if(s===Wr)return Wr;s===_r&&(e.items.splice(A,1),A-=1)}}}else if(Hr(e)){n=Object.freeze(n.concat(e));const A=await Xr("key",e.key,t,n);if(A===Wr)return Wr;A===_r&&(e.key=null);const s=await Xr("value",e.value,t,n);if(s===Wr)return Wr;s===_r&&(e.value=null)}return s}function zr(A){return"object"==typeof A&&(A.Collection||A.Node||A.Value)?Object.assign({Alias:A.Node,Map:A.Node,Scalar:A.Node,Seq:A.Node},A.Value&&{Map:A.Value,Scalar:A.Value,Seq:A.Value},A.Collection&&{Map:A.Collection,Seq:A.Collection},A):A}function $r(A,e,t,n){return"function"==typeof t?t(A,e,n):Gr(e)?t.Map?.(A,e,n):Vr(e)?t.Seq?.(A,e,n):Hr(e)?t.Pair?.(A,e,n):Or(e)?t.Scalar?.(A,e,n):Yr(e)?t.Alias?.(A,e,n):void 0}function Ao(A,e,t){const n=e[e.length-1];if(xr(n))n.items[A]=t;else if(Hr(n))"key"===A?n.key=t:n.value=t;else{if(!Jr(n)){const A=Yr(n)?"alias":"scalar";throw new Error(`Cannot replace node with ${A} parent`)}n.contents=t}}jr.BREAK=Wr,jr.SKIP=Pr,jr.REMOVE=_r,Zr.BREAK=Wr,Zr.SKIP=Pr,Zr.REMOVE=_r;const eo={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class to{constructor(A,e){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},to.defaultYaml,A),this.tags=Object.assign({},to.defaultTags,e)}clone(){const A=new to(this.yaml,this.tags);return A.docStart=this.docStart,A}atDocument(){const A=new to(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:to.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},to.defaultTags)}return A}add(A,e){this.atNextDocument&&(this.yaml={explicit:to.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},to.defaultTags),this.atNextDocument=!1);const t=A.trim().split(/[ \t]+/),n=t.shift();switch(n){case"%TAG":{if(2!==t.length&&(e(0,"%TAG directive should contain exactly two parts"),t.length<2))return!1;const[A,n]=t;return this.tags[A]=n,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==t.length)return e(0,"%YAML directive should contain exactly one part"),!1;const[A]=t;if("1.1"===A||"1.2"===A)return this.yaml.version=A,!0;return e(6,`Unsupported YAML version ${A}`,/^\d+\.\d+$/.test(A)),!1}default:return e(0,`Unknown directive ${n}`,!0),!1}}tagName(A,e){if("!"===A)return"!";if("!"!==A[0])return e(`Not a valid tag: ${A}`),null;if("<"===A[1]){const t=A.slice(2,-1);return"!"===t||"!!"===t?(e(`Verbatim tags aren't resolved, so ${A} is invalid.`),null):(">"!==A[A.length-1]&&e("Verbatim tags must end with a >"),t)}const[,t,n]=A.match(/^(.*!)([^!]*)$/s);n||e(`The ${A} tag has no suffix`);const s=this.tags[t];if(s)try{return s+decodeURIComponent(n)}catch(A){return e(String(A)),null}return"!"===t?A:(e(`Could not resolve tag: ${A}`),null)}tagString(A){for(const[e,t]of Object.entries(this.tags))if(A.startsWith(t))return e+A.substring(t.length).replace(/[!,[\]{}]/g,(A=>eo[A]));return"!"===A[0]?A:`!<${A}>`}toString(A){const e=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],t=Object.entries(this.tags);let n;if(A&&t.length>0&&qr(A.contents)){const e={};jr(A.contents,((A,t)=>{qr(t)&&t.tag&&(e[t.tag]=!0)})),n=Object.keys(e)}else n=[];for(const[s,r]of t)"!!"===s&&"tag:yaml.org,2002:"===r||A&&!n.some((A=>A.startsWith(r)))||e.push(`%TAG ${s} ${r}`);return e.join("\n")}}function no(A){if(/[\x00-\x19\s,[\]{}]/.test(A)){const e=JSON.stringify(A);throw new Error(`Anchor must not contain whitespace or control characters: ${e}`)}return!0}function so(A){const e=new Set;return jr(A,{Value(A,t){t.anchor&&e.add(t.anchor)}}),e}function ro(A,e){for(let t=1;;++t){const n=`${A}${t}`;if(!e.has(n))return n}}function oo(A,e,t,n){if(n&&"object"==typeof n)if(Array.isArray(n))for(let e=0,t=n.length;e<t;++e){const t=n[e],s=oo(A,n,String(e),t);void 0===s?delete n[e]:s!==t&&(n[e]=s)}else if(n instanceof Map)for(const e of Array.from(n.keys())){const t=n.get(e),s=oo(A,n,e,t);void 0===s?n.delete(e):s!==t&&n.set(e,s)}else if(n instanceof Set)for(const e of Array.from(n)){const t=oo(A,n,e,e);void 0===t?n.delete(e):t!==e&&(n.delete(e),n.add(t))}else for(const[e,t]of Object.entries(n)){const s=oo(A,n,e,t);void 0===s?delete n[e]:s!==t&&(n[e]=s)}return A.call(e,t,n)}function io(A,e,t){if(Array.isArray(A))return A.map(((A,e)=>io(A,String(e),t)));if(A&&"function"==typeof A.toJSON){if(!t||(!Or(n=A)&&!xr(n)||!n.anchor))return A.toJSON(e,t);const s={aliasCount:0,count:1,res:void 0};t.anchors.set(A,s),t.onCreate=A=>{s.res=A,delete t.onCreate};const r=A.toJSON(e,t);return t.onCreate&&t.onCreate(r),r}var n;return"bigint"!=typeof A||t?.keep?A:Number(A)}to.defaultYaml={explicit:!1,version:"1.2"},to.defaultTags={"!!":"tag:yaml.org,2002:"};class ao{constructor(A){Object.defineProperty(this,Tr,{value:A})}clone(){const A=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(A.range=this.range.slice()),A}toJS(A,{mapAsMap:e,maxAliasCount:t,onAnchor:n,reviver:s}={}){if(!Jr(A))throw new TypeError("A document argument is required");const r={anchors:new Map,doc:A,keep:!0,mapAsMap:!0===e,mapKeyWarned:!1,maxAliasCount:"number"==typeof t?t:100},o=io(this,"",r);if("function"==typeof n)for(const{count:A,res:e}of r.anchors.values())n(e,A);return"function"==typeof s?oo(s,{"":o},"",o):o}}class co extends ao{constructor(A){super(Sr),this.source=A,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(A){let e;return jr(A,{Node:(A,t)=>{if(t===this)return jr.BREAK;t.anchor===this.source&&(e=t)}}),e}toJSON(A,e){if(!e)return{source:this.source};const{anchors:t,doc:n,maxAliasCount:s}=e,r=this.resolve(n);if(!r){const A=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(A)}let o=t.get(r);if(o||(io(r,null,e),o=t.get(r)),!o||void 0===o.res){throw new ReferenceError("This should not happen: Alias anchor was not resolved?")}if(s>=0&&(o.count+=1,0===o.aliasCount&&(o.aliasCount=go(n,r,t)),o.count*o.aliasCount>s)){throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack")}return o.res}toString(A,e,t){const n=`*${this.source}`;if(A){if(no(this.source),A.options.verifyAliasOrder&&!A.anchors.has(this.source)){const A=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(A)}if(A.implicitKey)return`${n} `}return n}}function go(A,e,t){if(Yr(e)){const n=e.resolve(A),s=t&&n&&t.get(n);return s?s.count*s.aliasCount:0}if(xr(e)){let n=0;for(const s of e.items){const e=go(A,s,t);e>n&&(n=e)}return n}if(Hr(e)){const n=go(A,e.key,t),s=go(A,e.value,t);return Math.max(n,s)}return 1}const Eo=A=>!A||"function"!=typeof A&&"object"!=typeof A;class Qo extends ao{constructor(A){super(Mr),this.value=A}toJSON(A,e){return e?.keep?this.value:io(this.value,A,e)}toString(){return String(this.value)}}Qo.BLOCK_FOLDED="BLOCK_FOLDED",Qo.BLOCK_LITERAL="BLOCK_LITERAL",Qo.PLAIN="PLAIN",Qo.QUOTE_DOUBLE="QUOTE_DOUBLE",Qo.QUOTE_SINGLE="QUOTE_SINGLE";function ho(A,e,t){if(Jr(A)&&(A=A.contents),qr(A))return A;if(Hr(A)){const e=t.schema[Ur].createNode?.(t.schema,null,t);return e.items.push(A),e}(A instanceof String||A instanceof Number||A instanceof Boolean||"undefined"!=typeof BigInt&&A instanceof BigInt)&&(A=A.valueOf());const{aliasDuplicateObjects:n,onAnchor:s,onTagObj:r,schema:o,sourceObjects:i}=t;let a;if(n&&A&&"object"==typeof A){if(a=i.get(A),a)return a.anchor||(a.anchor=s(A)),new co(a.anchor);a={anchor:null,node:null},i.set(A,a)}e?.startsWith("!!")&&(e="tag:yaml.org,2002:"+e.slice(2));let c=function(A,e,t){if(e){const A=t.filter((A=>A.tag===e)),n=A.find((A=>!A.format))??A[0];if(!n)throw new Error(`Tag ${e} not found`);return n}return t.find((e=>e.identify?.(A)&&!e.format))}(A,e,o.tags);if(!c){if(A&&"function"==typeof A.toJSON&&(A=A.toJSON()),!A||"object"!=typeof A){const e=new Qo(A);return a&&(a.node=e),e}c=A instanceof Map?o[Ur]:Symbol.iterator in Object(A)?o[vr]:o[Ur]}r&&(r(c),delete t.onTagObj);const g=c?.createNode?c.createNode(t.schema,A,t):"function"==typeof c?.nodeClass?.from?c.nodeClass.from(t.schema,A,t):new Qo(A);return e?g.tag=e:c.default||(g.tag=c.tag),a&&(a.node=g),g}function lo(A,e,t){let n=t;for(let A=e.length-1;A>=0;--A){const t=e[A];if("number"==typeof t&&Number.isInteger(t)&&t>=0){const A=[];A[t]=n,n=A}else n=new Map([[t,n]])}return ho(n,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:A,sourceObjects:new Map})}const Co=A=>null==A||"object"==typeof A&&!!A[Symbol.iterator]().next().done;class Bo extends ao{constructor(A,e){super(A),Object.defineProperty(this,"schema",{value:e,configurable:!0,enumerable:!1,writable:!0})}clone(A){const e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return A&&(e.schema=A),e.items=e.items.map((e=>qr(e)||Hr(e)?e.clone(A):e)),this.range&&(e.range=this.range.slice()),e}addIn(A,e){if(Co(A))this.add(e);else{const[t,...n]=A,s=this.get(t,!0);if(xr(s))s.addIn(n,e);else{if(void 0!==s||!this.schema)throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`);this.set(t,lo(this.schema,n,e))}}}deleteIn(A){const[e,...t]=A;if(0===t.length)return this.delete(e);const n=this.get(e,!0);if(xr(n))return n.deleteIn(t);throw new Error(`Expected YAML collection at ${e}. Remaining path: ${t}`)}getIn(A,e){const[t,...n]=A,s=this.get(t,!0);return 0===n.length?!e&&Or(s)?s.value:s:xr(s)?s.getIn(n,e):void 0}hasAllNullValues(A){return this.items.every((e=>{if(!Hr(e))return!1;const t=e.value;return null==t||A&&Or(t)&&null==t.value&&!t.commentBefore&&!t.comment&&!t.tag}))}hasIn(A){const[e,...t]=A;if(0===t.length)return this.has(e);const n=this.get(e,!0);return!!xr(n)&&n.hasIn(t)}setIn(A,e){const[t,...n]=A;if(0===n.length)this.set(t,e);else{const A=this.get(t,!0);if(xr(A))A.setIn(n,e);else{if(void 0!==A||!this.schema)throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`);this.set(t,lo(this.schema,n,e))}}}}const Io=A=>A.replace(/^(?!$)(?: $)?/gm,"#");function uo(A,e){return/^\n+$/.test(A)?A.substring(1):e?A.replace(/^(?! *$)/gm,e):A}const fo=(A,e,t)=>A.endsWith("\n")?uo(t,e):t.includes("\n")?"\n"+uo(t,e):(A.endsWith(" ")?"":" ")+t,po="flow",yo="block",mo="quoted";function wo(A,e,t="flow",{indentAtStart:n,lineWidth:s=80,minContentWidth:r=20,onFold:o,onOverflow:i}={}){if(!s||s<0)return A;s<r&&(r=0);const a=Math.max(1+r,1+s-e.length);if(A.length<=a)return A;const c=[],g={};let E,Q,h=s-e.length;"number"==typeof n&&(n>s-Math.max(2,r)?c.push(0):h=s-n);let l=!1,C=-1,B=-1,I=-1;t===yo&&(C=Do(A,C,e.length),-1!==C&&(h=C+a));for(let n;n=A[C+=1];){if(t===mo&&"\\"===n){switch(B=C,A[C+1]){case"x":C+=3;break;case"u":C+=5;break;case"U":C+=9;break;default:C+=1}I=C}if("\n"===n)t===yo&&(C=Do(A,C,e.length)),h=C+e.length+a,E=void 0;else{if(" "===n&&Q&&" "!==Q&&"\n"!==Q&&"\t"!==Q){const e=A[C+1];e&&" "!==e&&"\n"!==e&&"\t"!==e&&(E=C)}if(C>=h)if(E)c.push(E),h=E+a,E=void 0;else if(t===mo){for(;" "===Q||"\t"===Q;)Q=n,n=A[C+=1],l=!0;const e=C>I+1?C-2:B-1;if(g[e])return A;c.push(e),g[e]=!0,h=e+a,E=void 0}else l=!0}Q=n}if(l&&i&&i(),0===c.length)return A;o&&o();let u=A.slice(0,c[0]);for(let n=0;n<c.length;++n){const s=c[n],r=c[n+1]||A.length;0===s?u=`\n${e}${A.slice(0,r)}`:(t===mo&&g[s]&&(u+=`${A[s]}\\`),u+=`\n${e}${A.slice(s+1,r)}`)}return u}function Do(A,e,t){let n=e,s=e+1,r=A[s];for(;" "===r||"\t"===r;)if(e<s+t)r=A[++e];else{do{r=A[++e]}while(r&&"\n"!==r);n=e,s=e+1,r=A[s]}return n}const ko=(A,e)=>({indentAtStart:e?A.indent.length:A.indentAtStart,lineWidth:A.options.lineWidth,minContentWidth:A.options.minContentWidth}),bo=A=>/^(%|---|\.\.\.)/m.test(A);function Ro(A,e){const t=JSON.stringify(A);if(e.options.doubleQuotedAsJSON)return t;const{implicitKey:n}=e,s=e.options.doubleQuotedMinMultiLineLength,r=e.indent||(bo(A)?"  ":"");let o="",i=0;for(let A=0,e=t[A];e;e=t[++A])if(" "===e&&"\\"===t[A+1]&&"n"===t[A+2]&&(o+=t.slice(i,A)+"\\ ",A+=1,i=A,e="\\"),"\\"===e)switch(t[A+1]){case"u":{o+=t.slice(i,A);const e=t.substr(A+2,4);switch(e){case"0000":o+="\\0";break;case"0007":o+="\\a";break;case"000b":o+="\\v";break;case"001b":o+="\\e";break;case"0085":o+="\\N";break;case"00a0":o+="\\_";break;case"2028":o+="\\L";break;case"2029":o+="\\P";break;default:"00"===e.substr(0,2)?o+="\\x"+e.substr(2):o+=t.substr(A,6)}A+=5,i=A+1}break;case"n":if(n||'"'===t[A+2]||t.length<s)A+=1;else{for(o+=t.slice(i,A)+"\n\n";"\\"===t[A+2]&&"n"===t[A+3]&&'"'!==t[A+4];)o+="\n",A+=2;o+=r," "===t[A+2]&&(o+="\\"),A+=1,i=A+1}break;default:A+=1}return o=i?o+t.slice(i):t,n?o:wo(o,r,mo,ko(e,!1))}function No(A,e){if(!1===e.options.singleQuote||e.implicitKey&&A.includes("\n")||/[ \t]\n|\n[ \t]/.test(A))return Ro(A,e);const t=e.indent||(bo(A)?"  ":""),n="'"+A.replace(/'/g,"''").replace(/\n+/g,`$&\n${t}`)+"'";return e.implicitKey?n:wo(n,t,po,ko(e,!1))}function So(A,e){const{singleQuote:t}=e.options;let n;if(!1===t)n=Ro;else{const e=A.includes('"'),s=A.includes("'");n=e&&!s?No:s&&!e?Ro:t?No:Ro}return n(A,e)}let Fo;try{Fo=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{Fo=/\n+(?!\n|$)/g}function Uo({comment:A,type:e,value:t},n,s,r){const{blockQuote:o,commentString:i,lineWidth:a}=n.options;if(!o||/\n[\t ]+$/.test(t)||/^\s*$/.test(t))return So(t,n);const c=n.indent||(n.forceBlockIndent||bo(t)?"  ":""),g="literal"===o||"folded"!==o&&e!==Qo.BLOCK_FOLDED&&(e===Qo.BLOCK_LITERAL||!function(A,e,t){if(!e||e<0)return!1;const n=e-t,s=A.length;if(s<=n)return!1;for(let e=0,t=0;e<s;++e)if("\n"===A[e]){if(e-t>n)return!0;if(t=e+1,s-t<=n)return!1}return!0}(t,a,c.length));if(!t)return g?"|\n":">\n";let E,Q;for(Q=t.length;Q>0;--Q){const A=t[Q-1];if("\n"!==A&&"\t"!==A&&" "!==A)break}let h=t.substring(Q);const l=h.indexOf("\n");-1===l?E="-":t===h||l!==h.length-1?(E="+",r&&r()):E="",h&&(t=t.slice(0,-h.length),"\n"===h[h.length-1]&&(h=h.slice(0,-1)),h=h.replace(Fo,`$&${c}`));let C,B=!1,I=-1;for(C=0;C<t.length;++C){const A=t[C];if(" "===A)B=!0;else{if("\n"!==A)break;I=C}}let u=t.substring(0,I<C?I+1:C);u&&(t=t.substring(u.length),u=u.replace(/\n+/g,`$&${c}`));let d=(B?c?"2":"1":"")+E;if(A&&(d+=" "+i(A.replace(/ ?[\r\n]+/g," ")),s&&s()),!g){const A=t.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${c}`);let s=!1;const r=ko(n,!0);"folded"!==o&&e!==Qo.BLOCK_FOLDED&&(r.onOverflow=()=>{s=!0});const i=wo(`${u}${A}${h}`,c,yo,r);if(!s)return`>${d}\n${c}${i}`}return`|${d}\n${c}${u}${t=t.replace(/\n+/g,`$&${c}`)}${h}`}function Lo(A,e,t,n){const{implicitKey:s,inFlow:r}=e,o="string"==typeof A.value?A:Object.assign({},A,{value:String(A.value)});let{type:i}=A;i!==Qo.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(o.value)&&(i=Qo.QUOTE_DOUBLE);const a=A=>{switch(A){case Qo.BLOCK_FOLDED:case Qo.BLOCK_LITERAL:return s||r?So(o.value,e):Uo(o,e,t,n);case Qo.QUOTE_DOUBLE:return Ro(o.value,e);case Qo.QUOTE_SINGLE:return No(o.value,e);case Qo.PLAIN:return function(A,e,t,n){const{type:s,value:r}=A,{actualString:o,implicitKey:i,indent:a,indentStep:c,inFlow:g}=e;if(i&&r.includes("\n")||g&&/[[\]{},]/.test(r))return So(r,e);if(!r||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(r))return i||g||!r.includes("\n")?So(r,e):Uo(A,e,t,n);if(!i&&!g&&s!==Qo.PLAIN&&r.includes("\n"))return Uo(A,e,t,n);if(bo(r)){if(""===a)return e.forceBlockIndent=!0,Uo(A,e,t,n);if(i&&a===c)return So(r,e)}const E=r.replace(/\n+/g,`$&\n${a}`);if(o){const A=A=>A.default&&"tag:yaml.org,2002:str"!==A.tag&&A.test?.test(E),{compat:t,tags:n}=e.doc.schema;if(n.some(A)||t?.some(A))return So(r,e)}return i?E:wo(E,a,po,ko(e,!1))}(o,e,t,n);default:return null}};let c=a(i);if(null===c){const{defaultKeyType:A,defaultStringType:t}=e.options,n=s&&A||t;if(c=a(n),null===c)throw new Error(`Unsupported default string type ${n}`)}return c}function Mo(A,e){const t=Object.assign({blockQuote:!0,commentString:Io,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},A.schema.toStringOptions,e);let n;switch(t.collectionStyle){case"block":n=!1;break;case"flow":n=!0;break;default:n=null}return{anchors:new Set,doc:A,flowCollectionPadding:t.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof t.indent?" ".repeat(t.indent):"  ",inFlow:n,options:t}}function vo(A,e,t,n){if(Hr(A))return A.toString(e,t,n);if(Yr(A)){if(e.doc.directives)return A.toString(e);if(e.resolvedAliases?.has(A))throw new TypeError("Cannot stringify circular structure without alias nodes");e.resolvedAliases?e.resolvedAliases.add(A):e.resolvedAliases=new Set([A]),A=A.resolve(e.doc)}let s;const r=qr(A)?A:e.doc.createNode(A,{onTagObj:A=>s=A});s||(s=function(A,e){if(e.tag){const t=A.filter((A=>A.tag===e.tag));if(t.length>0)return t.find((A=>A.format===e.format))??t[0]}let t,n;if(Or(e)){n=e.value;let s=A.filter((A=>A.identify?.(n)));if(s.length>1){const A=s.filter((A=>A.test));A.length>0&&(s=A)}t=s.find((A=>A.format===e.format))??s.find((A=>!A.format))}else n=e,t=A.find((A=>A.nodeClass&&n instanceof A.nodeClass));if(!t)throw new Error(`Tag not resolved for ${n?.constructor?.name??typeof n} value`);return t}(e.doc.schema.tags,r));const o=function(A,e,{anchors:t,doc:n}){if(!n.directives)return"";const s=[],r=(Or(A)||xr(A))&&A.anchor;r&&no(r)&&(t.add(r),s.push(`&${r}`));const o=A.tag?A.tag:e.default?null:e.tag;return o&&s.push(n.directives.tagString(o)),s.join(" ")}(r,s,e);o.length>0&&(e.indentAtStart=(e.indentAtStart??0)+o.length+1);const i="function"==typeof s.stringify?s.stringify(r,e,t,n):Or(r)?Lo(r,e,t,n):r.toString(e,t,n);return o?Or(r)||"{"===i[0]||"["===i[0]?`${o} ${i}`:`${o}\n${e.indent}${i}`:i}function To(A,e){"debug"!==A&&"warn"!==A||console.warn(e)}const Yo="<<",Jo={identify:A=>A===Yo||"symbol"==typeof A&&A.description===Yo,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new Qo(Symbol(Yo)),{addToJSMap:Go}),stringify:()=>Yo};function Go(A,e,t){if(t=A&&Yr(t)?t.resolve(A.doc):t,Vr(t))for(const n of t.items)Ho(A,e,n);else if(Array.isArray(t))for(const n of t)Ho(A,e,n);else Ho(A,e,t)}function Ho(A,e,t){const n=A&&Yr(t)?t.resolve(A.doc):t;if(!Gr(n))throw new Error("Merge sources must be maps or map aliases");const s=n.toJSON(null,A,Map);for(const[A,t]of s)e instanceof Map?e.has(A)||e.set(A,t):e instanceof Set?e.add(A):Object.prototype.hasOwnProperty.call(e,A)||Object.defineProperty(e,A,{value:t,writable:!0,enumerable:!0,configurable:!0});return e}function Oo(A,e,{key:t,value:n}){if(qr(t)&&t.addToJSMap)t.addToJSMap(A,e,n);else if(((A,e)=>(Jo.identify(e)||Or(e)&&(!e.type||e.type===Qo.PLAIN)&&Jo.identify(e.value))&&A?.doc.schema.tags.some((A=>A.tag===Jo.tag&&A.default)))(A,t))Go(A,e,n);else{const s=io(t,"",A);if(e instanceof Map)e.set(s,io(n,s,A));else if(e instanceof Set)e.add(s);else{const r=function(A,e,t){if(null===e)return"";if("object"!=typeof e)return String(e);if(qr(A)&&t?.doc){const e=Mo(t.doc,{});e.anchors=new Set;for(const A of t.anchors.keys())e.anchors.add(A.anchor);e.inFlow=!0,e.inStringifyKey=!0;const n=A.toString(e);if(!t.mapKeyWarned){let A=JSON.stringify(n);A.length>40&&(A=A.substring(0,36)+'..."'),To(t.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${A}. Set mapAsMap: true to use object keys.`),t.mapKeyWarned=!0}return n}return JSON.stringify(e)}(t,s,A),o=io(n,r,A);r in e?Object.defineProperty(e,r,{value:o,writable:!0,enumerable:!0,configurable:!0}):e[r]=o}}return e}function Vo(A,e,t){const n=ho(A,void 0,t),s=ho(e,void 0,t);return new xo(n,s)}class xo{constructor(A,e=null){Object.defineProperty(this,Tr,{value:Lr}),this.key=A,this.value=e}clone(A){let{key:e,value:t}=this;return qr(e)&&(e=e.clone(A)),qr(t)&&(t=t.clone(A)),new xo(e,t)}toJSON(A,e){return Oo(e,e?.mapAsMap?new Map:{},this)}toString(A,e,t){return A?.doc?function({key:A,value:e},t,n,s){const{allNullValues:r,doc:o,indent:i,indentStep:a,options:{commentString:c,indentSeq:g,simpleKeys:E}}=t;let Q=qr(A)&&A.comment||null;if(E){if(Q)throw new Error("With simple keys, key nodes cannot have comments");if(xr(A)||!qr(A)&&"object"==typeof A)throw new Error("With simple keys, collection cannot be used as a key value")}let h=!E&&(!A||Q&&null==e&&!t.inFlow||xr(A)||(Or(A)?A.type===Qo.BLOCK_FOLDED||A.type===Qo.BLOCK_LITERAL:"object"==typeof A));t=Object.assign({},t,{allNullValues:!1,implicitKey:!h&&(E||!r),indent:i+a});let l,C,B,I=!1,u=!1,d=vo(A,t,(()=>I=!0),(()=>u=!0));if(!h&&!t.inFlow&&d.length>1024){if(E)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");h=!0}if(t.inFlow){if(r||null==e)return I&&n&&n(),""===d?"?":h?`? ${d}`:d}else if(r&&!E||null==e&&h)return d=`? ${d}`,Q&&!I?d+=fo(d,t.indent,c(Q)):u&&s&&s(),d;I&&(Q=null),h?(Q&&(d+=fo(d,t.indent,c(Q))),d=`? ${d}\n${i}:`):(d=`${d}:`,Q&&(d+=fo(d,t.indent,c(Q)))),qr(e)?(l=!!e.spaceBefore,C=e.commentBefore,B=e.comment):(l=!1,C=null,B=null,e&&"object"==typeof e&&(e=o.createNode(e))),t.implicitKey=!1,h||Q||!Or(e)||(t.indentAtStart=d.length+1),u=!1,g||!(a.length>=2)||t.inFlow||h||!Vr(e)||e.flow||e.tag||e.anchor||(t.indent=t.indent.substring(2));let f=!1;const p=vo(e,t,(()=>f=!0),(()=>u=!0));let y=" ";if(Q||l||C)y=l?"\n":"",C&&(y+=`\n${uo(c(C),t.indent)}`),""!==p||t.inFlow?y+=`\n${t.indent}`:"\n"===y&&(y="\n\n");else if(!h&&xr(e)){const A=p[0],n=p.indexOf("\n"),s=-1!==n,r=t.inFlow??e.flow??0===e.items.length;if(s||!r){let e=!1;if(s&&("&"===A||"!"===A)){let t=p.indexOf(" ");"&"===A&&-1!==t&&t<n&&"!"===p[t+1]&&(t=p.indexOf(" ",t+1)),(-1===t||n<t)&&(e=!0)}e||(y=`\n${t.indent}`)}}else""!==p&&"\n"!==p[0]||(y="");return d+=y+p,t.inFlow?f&&n&&n():B&&!f?d+=fo(d,t.indent,c(B)):u&&s&&s(),d}(this,A,e,t):JSON.stringify(this)}}function qo(A,e,t){return(e.inFlow??A.flow?Po:Wo)(A,e,t)}function Wo({comment:A,items:e},t,{blockItemPrefix:n,flowChars:s,itemIndent:r,onChompKeep:o,onComment:i}){const{indent:a,options:{commentString:c}}=t,g=Object.assign({},t,{indent:r,type:null});let E=!1;const Q=[];for(let A=0;A<e.length;++A){const s=e[A];let o=null;if(qr(s))!E&&s.spaceBefore&&Q.push(""),_o(t,Q,s.commentBefore,E),s.comment&&(o=s.comment);else if(Hr(s)){const A=qr(s.key)?s.key:null;A&&(!E&&A.spaceBefore&&Q.push(""),_o(t,Q,A.commentBefore,E))}E=!1;let i=vo(s,g,(()=>o=null),(()=>E=!0));o&&(i+=fo(i,r,c(o))),E&&o&&(E=!1),Q.push(n+i)}let h;if(0===Q.length)h=s.start+s.end;else{h=Q[0];for(let A=1;A<Q.length;++A){const e=Q[A];h+=e?`\n${a}${e}`:"\n"}}return A?(h+="\n"+uo(c(A),a),i&&i()):E&&o&&o(),h}function Po({items:A},e,{flowChars:t,itemIndent:n}){const{indent:s,indentStep:r,flowCollectionPadding:o,options:{commentString:i}}=e;n+=r;const a=Object.assign({},e,{indent:n,inFlow:!0,type:null});let c=!1,g=0;const E=[];for(let t=0;t<A.length;++t){const s=A[t];let r=null;if(qr(s))s.spaceBefore&&E.push(""),_o(e,E,s.commentBefore,!1),s.comment&&(r=s.comment);else if(Hr(s)){const A=qr(s.key)?s.key:null;A&&(A.spaceBefore&&E.push(""),_o(e,E,A.commentBefore,!1),A.comment&&(c=!0));const t=qr(s.value)?s.value:null;t?(t.comment&&(r=t.comment),t.commentBefore&&(c=!0)):null==s.value&&A?.comment&&(r=A.comment)}r&&(c=!0);let o=vo(s,a,(()=>r=null));t<A.length-1&&(o+=","),r&&(o+=fo(o,n,i(r))),!c&&(E.length>g||o.includes("\n"))&&(c=!0),E.push(o),g=E.length}const{start:Q,end:h}=t;if(0===E.length)return Q+h;if(!c){const A=E.reduce(((A,e)=>A+e.length+2),2);c=e.options.lineWidth>0&&A>e.options.lineWidth}if(c){let A=Q;for(const e of E)A+=e?`\n${r}${s}${e}`:"\n";return`${A}\n${s}${h}`}return`${Q}${o}${E.join(" ")}${o}${h}`}function _o({indent:A,options:{commentString:e}},t,n,s){if(n&&s&&(n=n.replace(/^\n+/,"")),n){const s=uo(e(n),A);t.push(s.trimStart())}}function jo(A,e){const t=Or(e)?e.value:e;for(const n of A)if(Hr(n)){if(n.key===e||n.key===t)return n;if(Or(n.key)&&n.key.value===t)return n}}class Ko extends Bo{static get tagName(){return"tag:yaml.org,2002:map"}constructor(A){super(Ur,A),this.items=[]}static from(A,e,t){const{keepUndefined:n,replacer:s}=t,r=new this(A),o=(A,o)=>{if("function"==typeof s)o=s.call(e,A,o);else if(Array.isArray(s)&&!s.includes(A))return;(void 0!==o||n)&&r.items.push(Vo(A,o,t))};if(e instanceof Map)for(const[A,t]of e)o(A,t);else if(e&&"object"==typeof e)for(const A of Object.keys(e))o(A,e[A]);return"function"==typeof A.sortMapEntries&&r.items.sort(A.sortMapEntries),r}add(A,e){let t;t=Hr(A)?A:A&&"object"==typeof A&&"key"in A?new xo(A.key,A.value):new xo(A,A?.value);const n=jo(this.items,t.key),s=this.schema?.sortMapEntries;if(n){if(!e)throw new Error(`Key ${t.key} already set`);Or(n.value)&&Eo(t.value)?n.value.value=t.value:n.value=t.value}else if(s){const A=this.items.findIndex((A=>s(t,A)<0));-1===A?this.items.push(t):this.items.splice(A,0,t)}else this.items.push(t)}delete(A){const e=jo(this.items,A);if(!e)return!1;return this.items.splice(this.items.indexOf(e),1).length>0}get(A,e){const t=jo(this.items,A),n=t?.value;return(!e&&Or(n)?n.value:n)??void 0}has(A){return!!jo(this.items,A)}set(A,e){this.add(new xo(A,e),!0)}toJSON(A,e,t){const n=t?new t:e?.mapAsMap?new Map:{};e?.onCreate&&e.onCreate(n);for(const A of this.items)Oo(e,n,A);return n}toString(A,e,t){if(!A)return JSON.stringify(this);for(const A of this.items)if(!Hr(A))throw new Error(`Map items must all be pairs; found ${JSON.stringify(A)} instead`);return!A.allNullValues&&this.hasAllNullValues(!1)&&(A=Object.assign({},A,{allNullValues:!0})),qo(this,A,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:A.indent||"",onChompKeep:t,onComment:e})}}const Zo={collection:"map",default:!0,nodeClass:Ko,tag:"tag:yaml.org,2002:map",resolve:(A,e)=>(Gr(A)||e("Expected a mapping for this tag"),A),createNode:(A,e,t)=>Ko.from(A,e,t)};class Xo extends Bo{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(A){super(vr,A),this.items=[]}add(A){this.items.push(A)}delete(A){const e=zo(A);if("number"!=typeof e)return!1;return this.items.splice(e,1).length>0}get(A,e){const t=zo(A);if("number"!=typeof t)return;const n=this.items[t];return!e&&Or(n)?n.value:n}has(A){const e=zo(A);return"number"==typeof e&&e<this.items.length}set(A,e){const t=zo(A);if("number"!=typeof t)throw new Error(`Expected a valid index, not ${A}.`);const n=this.items[t];Or(n)&&Eo(e)?n.value=e:this.items[t]=e}toJSON(A,e){const t=[];e?.onCreate&&e.onCreate(t);let n=0;for(const A of this.items)t.push(io(A,String(n++),e));return t}toString(A,e,t){return A?qo(this,A,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(A.indent||"")+"  ",onChompKeep:t,onComment:e}):JSON.stringify(this)}static from(A,e,t){const{replacer:n}=t,s=new this(A);if(e&&Symbol.iterator in Object(e)){let A=0;for(let r of e){if("function"==typeof n){const t=e instanceof Set?r:String(A++);r=n.call(e,t,r)}s.items.push(ho(r,void 0,t))}}return s}}function zo(A){let e=Or(A)?A.value:A;return e&&"string"==typeof e&&(e=Number(e)),"number"==typeof e&&Number.isInteger(e)&&e>=0?e:null}const $o={collection:"seq",default:!0,nodeClass:Xo,tag:"tag:yaml.org,2002:seq",resolve:(A,e)=>(Vr(A)||e("Expected a sequence for this tag"),A),createNode:(A,e,t)=>Xo.from(A,e,t)},Ai={identify:A=>"string"==typeof A,default:!0,tag:"tag:yaml.org,2002:str",resolve:A=>A,stringify:(A,e,t,n)=>Lo(A,e=Object.assign({actualString:!0},e),t,n)},ei={identify:A=>null==A,createNode:()=>new Qo(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new Qo(null),stringify:({source:A},e)=>"string"==typeof A&&ei.test.test(A)?A:e.options.nullStr},ti={identify:A=>"boolean"==typeof A,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:A=>new Qo("t"===A[0]||"T"===A[0]),stringify({source:A,value:e},t){if(A&&ti.test.test(A)){if(e===("t"===A[0]||"T"===A[0]))return A}return e?t.options.trueStr:t.options.falseStr}};function ni({format:A,minFractionDigits:e,tag:t,value:n}){if("bigint"==typeof n)return String(n);const s="number"==typeof n?n:Number(n);if(!isFinite(s))return isNaN(s)?".nan":s<0?"-.inf":".inf";let r=JSON.stringify(n);if(!A&&e&&(!t||"tag:yaml.org,2002:float"===t)&&/^\d/.test(r)){let A=r.indexOf(".");A<0&&(A=r.length,r+=".");let t=e-(r.length-A-1);for(;t-- >0;)r+="0"}return r}const si={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:A=>"nan"===A.slice(-3).toLowerCase()?NaN:"-"===A[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:ni},ri={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:A=>parseFloat(A),stringify(A){const e=Number(A.value);return isFinite(e)?e.toExponential():ni(A)}},oi={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(A){const e=new Qo(parseFloat(A)),t=A.indexOf(".");return-1!==t&&"0"===A[A.length-1]&&(e.minFractionDigits=A.length-t-1),e},stringify:ni},ii=A=>"bigint"==typeof A||Number.isInteger(A),ai=(A,e,t,{intAsBigInt:n})=>n?BigInt(A):parseInt(A.substring(e),t);function ci(A,e,t){const{value:n}=A;return ii(n)&&n>=0?t+n.toString(e):ni(A)}const gi={identify:A=>ii(A)&&A>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(A,e,t)=>ai(A,2,8,t),stringify:A=>ci(A,8,"0o")},Ei={identify:ii,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(A,e,t)=>ai(A,0,10,t),stringify:ni},Qi={identify:A=>ii(A)&&A>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(A,e,t)=>ai(A,2,16,t),stringify:A=>ci(A,16,"0x")},hi=[Zo,$o,Ai,ei,ti,gi,Ei,Qi,si,ri,oi];function li(A){return"bigint"==typeof A||Number.isInteger(A)}const Ci=({value:A})=>JSON.stringify(A),Bi=[Zo,$o].concat([{identify:A=>"string"==typeof A,default:!0,tag:"tag:yaml.org,2002:str",resolve:A=>A,stringify:Ci},{identify:A=>null==A,createNode:()=>new Qo(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:Ci},{identify:A=>"boolean"==typeof A,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:A=>"true"===A,stringify:Ci},{identify:li,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(A,e,{intAsBigInt:t})=>t?BigInt(A):parseInt(A,10),stringify:({value:A})=>li(A)?A.toString():JSON.stringify(A)},{identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:A=>parseFloat(A),stringify:Ci}],{default:!0,tag:"",test:/^/,resolve:(A,e)=>(e(`Unresolved plain scalar ${JSON.stringify(A)}`),A)}),Ii={identify:A=>A instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(A,e){if("function"==typeof atob){const e=atob(A.replace(/[\n\r]/g,"")),t=new Uint8Array(e.length);for(let A=0;A<e.length;++A)t[A]=e.charCodeAt(A);return t}return e("This environment does not support reading binary tags; either Buffer or atob is required"),A},stringify({comment:A,type:e,value:t},n,s,r){if(!t)return"";const o=t;let i;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let A="";for(let e=0;e<o.length;++e)A+=String.fromCharCode(o[e]);i=btoa(A)}if(e||(e=Qo.BLOCK_LITERAL),e!==Qo.QUOTE_DOUBLE){const A=Math.max(n.options.lineWidth-n.indent.length,n.options.minContentWidth),t=Math.ceil(i.length/A),s=new Array(t);for(let e=0,n=0;e<t;++e,n+=A)s[e]=i.substr(n,A);i=s.join(e===Qo.BLOCK_LITERAL?"\n":" ")}return Lo({comment:A,type:e,value:i},n,s,r)}};function ui(A,e){if(Vr(A))for(let t=0;t<A.items.length;++t){let n=A.items[t];if(!Hr(n)){if(Gr(n)){n.items.length>1&&e("Each pair must have its own sequence indicator");const A=n.items[0]||new xo(new Qo(null));if(n.commentBefore&&(A.key.commentBefore=A.key.commentBefore?`${n.commentBefore}\n${A.key.commentBefore}`:n.commentBefore),n.comment){const e=A.value??A.key;e.comment=e.comment?`${n.comment}\n${e.comment}`:n.comment}n=A}A.items[t]=Hr(n)?n:new xo(n)}}else e("Expected a sequence for this tag");return A}function di(A,e,t){const{replacer:n}=t,s=new Xo(A);s.tag="tag:yaml.org,2002:pairs";let r=0;if(e&&Symbol.iterator in Object(e))for(let A of e){let o,i;if("function"==typeof n&&(A=n.call(e,String(r++),A)),Array.isArray(A)){if(2!==A.length)throw new TypeError(`Expected [key, value] tuple: ${A}`);o=A[0],i=A[1]}else if(A&&A instanceof Object){const e=Object.keys(A);if(1!==e.length)throw new TypeError(`Expected tuple with one key, not ${e.length} keys`);o=e[0],i=A[o]}else o=A;s.items.push(Vo(o,i,t))}return s}const fi={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:ui,createNode:di};class pi extends Xo{constructor(){super(),this.add=Ko.prototype.add.bind(this),this.delete=Ko.prototype.delete.bind(this),this.get=Ko.prototype.get.bind(this),this.has=Ko.prototype.has.bind(this),this.set=Ko.prototype.set.bind(this),this.tag=pi.tag}toJSON(A,e){if(!e)return super.toJSON(A);const t=new Map;e?.onCreate&&e.onCreate(t);for(const A of this.items){let n,s;if(Hr(A)?(n=io(A.key,"",e),s=io(A.value,n,e)):n=io(A,"",e),t.has(n))throw new Error("Ordered maps must not include duplicate keys");t.set(n,s)}return t}static from(A,e,t){const n=di(A,e,t),s=new this;return s.items=n.items,s}}pi.tag="tag:yaml.org,2002:omap";const yi={collection:"seq",identify:A=>A instanceof Map,nodeClass:pi,default:!1,tag:"tag:yaml.org,2002:omap",resolve(A,e){const t=ui(A,e),n=[];for(const{key:A}of t.items)Or(A)&&(n.includes(A.value)?e(`Ordered maps must not include duplicate keys: ${A.value}`):n.push(A.value));return Object.assign(new pi,t)},createNode:(A,e,t)=>pi.from(A,e,t)};function mi({value:A,source:e},t){return e&&(A?wi:Di).test.test(e)?e:A?t.options.trueStr:t.options.falseStr}const wi={identify:A=>!0===A,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new Qo(!0),stringify:mi},Di={identify:A=>!1===A,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new Qo(!1),stringify:mi},ki={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:A=>"nan"===A.slice(-3).toLowerCase()?NaN:"-"===A[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:ni},bi={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:A=>parseFloat(A.replace(/_/g,"")),stringify(A){const e=Number(A.value);return isFinite(e)?e.toExponential():ni(A)}},Ri={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(A){const e=new Qo(parseFloat(A.replace(/_/g,""))),t=A.indexOf(".");if(-1!==t){const n=A.substring(t+1).replace(/_/g,"");"0"===n[n.length-1]&&(e.minFractionDigits=n.length)}return e},stringify:ni},Ni=A=>"bigint"==typeof A||Number.isInteger(A);function Si(A,e,t,{intAsBigInt:n}){const s=A[0];if("-"!==s&&"+"!==s||(e+=1),A=A.substring(e).replace(/_/g,""),n){switch(t){case 2:A=`0b${A}`;break;case 8:A=`0o${A}`;break;case 16:A=`0x${A}`}const e=BigInt(A);return"-"===s?BigInt(-1)*e:e}const r=parseInt(A,t);return"-"===s?-1*r:r}function Fi(A,e,t){const{value:n}=A;if(Ni(n)){const A=n.toString(e);return n<0?"-"+t+A.substr(1):t+A}return ni(A)}const Ui={identify:Ni,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(A,e,t)=>Si(A,2,2,t),stringify:A=>Fi(A,2,"0b")},Li={identify:Ni,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(A,e,t)=>Si(A,1,8,t),stringify:A=>Fi(A,8,"0")},Mi={identify:Ni,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(A,e,t)=>Si(A,0,10,t),stringify:ni},vi={identify:Ni,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(A,e,t)=>Si(A,2,16,t),stringify:A=>Fi(A,16,"0x")};class Ti extends Ko{constructor(A){super(A),this.tag=Ti.tag}add(A){let e;e=Hr(A)?A:A&&"object"==typeof A&&"key"in A&&"value"in A&&null===A.value?new xo(A.key,null):new xo(A,null);jo(this.items,e.key)||this.items.push(e)}get(A,e){const t=jo(this.items,A);return!e&&Hr(t)?Or(t.key)?t.key.value:t.key:t}set(A,e){if("boolean"!=typeof e)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof e);const t=jo(this.items,A);t&&!e?this.items.splice(this.items.indexOf(t),1):!t&&e&&this.items.push(new xo(A))}toJSON(A,e){return super.toJSON(A,e,Set)}toString(A,e,t){if(!A)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},A,{allNullValues:!0}),e,t);throw new Error("Set items must all have null values")}static from(A,e,t){const{replacer:n}=t,s=new this(A);if(e&&Symbol.iterator in Object(e))for(let A of e)"function"==typeof n&&(A=n.call(e,A,A)),s.items.push(Vo(A,null,t));return s}}Ti.tag="tag:yaml.org,2002:set";const Yi={collection:"map",identify:A=>A instanceof Set,nodeClass:Ti,default:!1,tag:"tag:yaml.org,2002:set",createNode:(A,e,t)=>Ti.from(A,e,t),resolve(A,e){if(Gr(A)){if(A.hasAllNullValues(!0))return Object.assign(new Ti,A);e("Set items must all have null values")}else e("Expected a mapping for this tag");return A}};function Ji(A,e){const t=A[0],n="-"===t||"+"===t?A.substring(1):A,s=A=>e?BigInt(A):Number(A),r=n.replace(/_/g,"").split(":").reduce(((A,e)=>A*s(60)+s(e)),s(0));return"-"===t?s(-1)*r:r}function Gi(A){let{value:e}=A,t=A=>A;if("bigint"==typeof e)t=A=>BigInt(A);else if(isNaN(e)||!isFinite(e))return ni(A);let n="";e<0&&(n="-",e*=t(-1));const s=t(60),r=[e%s];return e<60?r.unshift(0):(e=(e-r[0])/s,r.unshift(e%s),e>=60&&(e=(e-r[0])/s,r.unshift(e))),n+r.map((A=>String(A).padStart(2,"0"))).join(":").replace(/000000\d*$/,"")}const Hi={identify:A=>"bigint"==typeof A||Number.isInteger(A),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(A,e,{intAsBigInt:t})=>Ji(A,t),stringify:Gi},Oi={identify:A=>"number"==typeof A,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:A=>Ji(A,!1),stringify:Gi},Vi={identify:A=>A instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(A){const e=A.match(Vi.test);if(!e)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");const[,t,n,s,r,o,i]=e.map(Number),a=e[7]?Number((e[7]+"00").substr(1,3)):0;let c=Date.UTC(t,n-1,s,r||0,o||0,i||0,a);const g=e[8];if(g&&"Z"!==g){let A=Ji(g,!1);Math.abs(A)<30&&(A*=60),c-=6e4*A}return new Date(c)},stringify:({value:A})=>A?.toISOString().replace(/(T00:00:00)?\.000Z$/,"")??""},xi=[Zo,$o,Ai,ei,wi,Di,Ui,Li,Mi,vi,ki,bi,Ri,Ii,Jo,yi,fi,Yi,Hi,Oi,Vi],qi=new Map([["core",hi],["failsafe",[Zo,$o,Ai]],["json",Bi],["yaml11",xi],["yaml-1.1",xi]]),Wi={binary:Ii,bool:ti,float:oi,floatExp:ri,floatNaN:si,floatTime:Oi,int:Ei,intHex:Qi,intOct:gi,intTime:Hi,map:Zo,merge:Jo,null:ei,omap:yi,pairs:fi,seq:$o,set:Yi,timestamp:Vi},Pi={"tag:yaml.org,2002:binary":Ii,"tag:yaml.org,2002:merge":Jo,"tag:yaml.org,2002:omap":yi,"tag:yaml.org,2002:pairs":fi,"tag:yaml.org,2002:set":Yi,"tag:yaml.org,2002:timestamp":Vi};function _i(A,e,t){const n=qi.get(e);if(n&&!A)return t&&!n.includes(Jo)?n.concat(Jo):n.slice();let s=n;if(!s){if(!Array.isArray(A)){const A=Array.from(qi.keys()).filter((A=>"yaml11"!==A)).map((A=>JSON.stringify(A))).join(", ");throw new Error(`Unknown schema "${e}"; use one of ${A} or define customTags array`)}s=[]}if(Array.isArray(A))for(const e of A)s=s.concat(e);else"function"==typeof A&&(s=A(s.slice()));return t&&(s=s.concat(Jo)),s.reduce(((A,e)=>{const t="string"==typeof e?Wi[e]:e;if(!t){const A=JSON.stringify(e),t=Object.keys(Wi).map((A=>JSON.stringify(A))).join(", ");throw new Error(`Unknown custom tag ${A}; use one of ${t}`)}return A.includes(t)||A.push(t),A}),[])}const ji=(A,e)=>A.key<e.key?-1:A.key>e.key?1:0;class Ki{constructor({compat:A,customTags:e,merge:t,resolveKnownTags:n,schema:s,sortMapEntries:r,toStringDefaults:o}){this.compat=Array.isArray(A)?_i(A,"compat"):A?_i(null,A):null,this.name="string"==typeof s&&s||"core",this.knownTags=n?Pi:{},this.tags=_i(e,this.name,t),this.toStringOptions=o??null,Object.defineProperty(this,Ur,{value:Zo}),Object.defineProperty(this,Mr,{value:Ai}),Object.defineProperty(this,vr,{value:$o}),this.sortMapEntries="function"==typeof r?r:!0===r?ji:null}clone(){const A=Object.create(Ki.prototype,Object.getOwnPropertyDescriptors(this));return A.tags=this.tags.slice(),A}}class Zi{constructor(A,e,t){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,Tr,{value:Fr});let n=null;"function"==typeof e||Array.isArray(e)?n=e:void 0===t&&e&&(t=e,e=void 0);const s=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},t);this.options=s;let{version:r}=s;t?._directives?(this.directives=t._directives.atDocument(),this.directives.yaml.explicit&&(r=this.directives.yaml.version)):this.directives=new to({version:r}),this.setSchema(r,t),this.contents=void 0===A?null:this.createNode(A,n,t)}clone(){const A=Object.create(Zi.prototype,{[Tr]:{value:Fr}});return A.commentBefore=this.commentBefore,A.comment=this.comment,A.errors=this.errors.slice(),A.warnings=this.warnings.slice(),A.options=Object.assign({},this.options),this.directives&&(A.directives=this.directives.clone()),A.schema=this.schema.clone(),A.contents=qr(this.contents)?this.contents.clone(A.schema):this.contents,this.range&&(A.range=this.range.slice()),A}add(A){Xi(this.contents)&&this.contents.add(A)}addIn(A,e){Xi(this.contents)&&this.contents.addIn(A,e)}createAlias(A,e){if(!A.anchor){const t=so(this);A.anchor=!e||t.has(e)?ro(e||"a",t):e}return new co(A.anchor)}createNode(A,e,t){let n;if("function"==typeof e)A=e.call({"":A},"",A),n=e;else if(Array.isArray(e)){const A=A=>"number"==typeof A||A instanceof String||A instanceof Number,t=e.filter(A).map(String);t.length>0&&(e=e.concat(t)),n=e}else void 0===t&&e&&(t=e,e=void 0);const{aliasDuplicateObjects:s,anchorPrefix:r,flow:o,keepUndefined:i,onTagObj:a,tag:c}=t??{},{onAnchor:g,setAnchors:E,sourceObjects:Q}=function(A,e){const t=[],n=new Map;let s=null;return{onAnchor:n=>{t.push(n),s||(s=so(A));const r=ro(e,s);return s.add(r),r},setAnchors:()=>{for(const A of t){const e=n.get(A);if("object"!=typeof e||!e.anchor||!Or(e.node)&&!xr(e.node)){const e=new Error("Failed to resolve repeated object (this should not happen)");throw e.source=A,e}e.node.anchor=e.anchor}},sourceObjects:n}}(this,r||"a"),h=ho(A,c,{aliasDuplicateObjects:s??!0,keepUndefined:i??!1,onAnchor:g,onTagObj:a,replacer:n,schema:this.schema,sourceObjects:Q});return o&&xr(h)&&(h.flow=!0),E(),h}createPair(A,e,t={}){const n=this.createNode(A,null,t),s=this.createNode(e,null,t);return new xo(n,s)}delete(A){return!!Xi(this.contents)&&this.contents.delete(A)}deleteIn(A){return Co(A)?null!=this.contents&&(this.contents=null,!0):!!Xi(this.contents)&&this.contents.deleteIn(A)}get(A,e){return xr(this.contents)?this.contents.get(A,e):void 0}getIn(A,e){return Co(A)?!e&&Or(this.contents)?this.contents.value:this.contents:xr(this.contents)?this.contents.getIn(A,e):void 0}has(A){return!!xr(this.contents)&&this.contents.has(A)}hasIn(A){return Co(A)?void 0!==this.contents:!!xr(this.contents)&&this.contents.hasIn(A)}set(A,e){null==this.contents?this.contents=lo(this.schema,[A],e):Xi(this.contents)&&this.contents.set(A,e)}setIn(A,e){Co(A)?this.contents=e:null==this.contents?this.contents=lo(this.schema,Array.from(A),e):Xi(this.contents)&&this.contents.setIn(A,e)}setSchema(A,e={}){let t;switch("number"==typeof A&&(A=String(A)),A){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new to({version:"1.1"}),t={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=A:this.directives=new to({version:A}),t={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,t=null;break;default:{const e=JSON.stringify(A);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${e}`)}}if(e.schema instanceof Object)this.schema=e.schema;else{if(!t)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new Ki(Object.assign(t,e))}}toJS({json:A,jsonArg:e,mapAsMap:t,maxAliasCount:n,onAnchor:s,reviver:r}={}){const o={anchors:new Map,doc:this,keep:!A,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof n?n:100},i=io(this.contents,e??"",o);if("function"==typeof s)for(const{count:A,res:e}of o.anchors.values())s(e,A);return"function"==typeof r?oo(r,{"":i},"",i):i}toJSON(A,e){return this.toJS({json:!0,jsonArg:A,mapAsMap:!1,onAnchor:e})}toString(A={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in A&&(!Number.isInteger(A.indent)||Number(A.indent)<=0)){const e=JSON.stringify(A.indent);throw new Error(`"indent" option must be a positive integer, not ${e}`)}return function(A,e){const t=[];let n=!0===e.directives;if(!1!==e.directives&&A.directives){const e=A.directives.toString(A);e?(t.push(e),n=!0):A.directives.docStart&&(n=!0)}n&&t.push("---");const s=Mo(A,e),{commentString:r}=s.options;if(A.commentBefore){1!==t.length&&t.unshift("");const e=r(A.commentBefore);t.unshift(uo(e,""))}let o=!1,i=null;if(A.contents){if(qr(A.contents)){if(A.contents.spaceBefore&&n&&t.push(""),A.contents.commentBefore){const e=r(A.contents.commentBefore);t.push(uo(e,""))}s.forceBlockIndent=!!A.comment,i=A.contents.comment}const e=i?void 0:()=>o=!0;let a=vo(A.contents,s,(()=>i=null),e);i&&(a+=fo(a,"",r(i))),"|"!==a[0]&&">"!==a[0]||"---"!==t[t.length-1]?t.push(a):t[t.length-1]=`--- ${a}`}else t.push(vo(A.contents,s));if(A.directives?.docEnd)if(A.comment){const e=r(A.comment);e.includes("\n")?(t.push("..."),t.push(uo(e,""))):t.push(`... ${e}`)}else t.push("...");else{let e=A.comment;e&&o&&(e=e.replace(/^\n+/,"")),e&&(o&&!i||""===t[t.length-1]||t.push(""),t.push(uo(r(e),"")))}return t.join("\n")+"\n"}(this,A)}}function Xi(A){if(xr(A))return!0;throw new Error("Expected a YAML collection as document contents")}class zi extends Error{constructor(A,e,t,n){super(),this.name=A,this.code=t,this.message=n,this.pos=e}}class $i extends zi{constructor(A,e,t){super("YAMLParseError",A,e,t)}}class Aa extends zi{constructor(A,e,t){super("YAMLWarning",A,e,t)}}const ea=(A,e)=>t=>{if(-1===t.pos[0])return;t.linePos=t.pos.map((A=>e.linePos(A)));const{line:n,col:s}=t.linePos[0];t.message+=` at line ${n}, column ${s}`;let r=s-1,o=A.substring(e.lineStarts[n-1],e.lineStarts[n]).replace(/[\n\r]+$/,"");if(r>=60&&o.length>80){const A=Math.min(r-39,o.length-79);o="…"+o.substring(A),r-=A-1}if(o.length>80&&(o=o.substring(0,79)+"…"),n>1&&/^ *$/.test(o.substring(0,r))){let t=A.substring(e.lineStarts[n-2],e.lineStarts[n-1]);t.length>80&&(t=t.substring(0,79)+"…\n"),o=t+o}if(/[^ ]/.test(o)){let A=1;const e=t.linePos[1];e&&e.line===n&&e.col>s&&(A=Math.max(1,Math.min(e.col-s,80-r)));const i=" ".repeat(r)+"^".repeat(A);t.message+=`:\n\n${o}\n${i}\n`}};function ta(A,{flow:e,indicator:t,next:n,offset:s,onError:r,parentIndent:o,startOnNewline:i}){let a=!1,c=i,g=i,E="",Q="",h=!1,l=!1,C=null,B=null,I=null,u=null,d=null,f=null,p=null;for(const s of A)switch(l&&("space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&r(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),l=!1),C&&(c&&"comment"!==s.type&&"newline"!==s.type&&r(C,"TAB_AS_INDENT","Tabs are not allowed as indentation"),C=null),s.type){case"space":e||"doc-start"===t&&"flow-collection"===n?.type||!s.source.includes("\t")||(C=s),g=!0;break;case"comment":{g||r(s,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const A=s.source.substring(1)||" ";E?E+=Q+A:E=A,Q="",c=!1;break}case"newline":c?E?E+=s.source:f&&"seq-item-ind"===t||(a=!0):Q+=s.source,c=!0,h=!0,(B||I)&&(u=s),g=!0;break;case"anchor":B&&r(s,"MULTIPLE_ANCHORS","A node can have at most one anchor"),s.source.endsWith(":")&&r(s.offset+s.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),B=s,null===p&&(p=s.offset),c=!1,g=!1,l=!0;break;case"tag":I&&r(s,"MULTIPLE_TAGS","A node can have at most one tag"),I=s,null===p&&(p=s.offset),c=!1,g=!1,l=!0;break;case t:(B||I)&&r(s,"BAD_PROP_ORDER",`Anchors and tags must be after the ${s.source} indicator`),f&&r(s,"UNEXPECTED_TOKEN",`Unexpected ${s.source} in ${e??"collection"}`),f=s,c="seq-item-ind"===t||"explicit-key-ind"===t,g=!1;break;case"comma":if(e){d&&r(s,"UNEXPECTED_TOKEN",`Unexpected , in ${e}`),d=s,c=!1,g=!1;break}default:r(s,"UNEXPECTED_TOKEN",`Unexpected ${s.type} token`),c=!1,g=!1}const y=A[A.length-1],m=y?y.offset+y.source.length:s;return l&&n&&"space"!==n.type&&"newline"!==n.type&&"comma"!==n.type&&("scalar"!==n.type||""!==n.source)&&r(n.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),C&&(c&&C.indent<=o||"block-map"===n?.type||"block-seq"===n?.type)&&r(C,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:d,found:f,spaceBefore:a,comment:E,hasNewline:h,anchor:B,tag:I,newlineAfterProp:u,end:m,start:p??m}}function na(A){if(!A)return null;switch(A.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(A.source.includes("\n"))return!0;if(A.end)for(const e of A.end)if("newline"===e.type)return!0;return!1;case"flow-collection":for(const e of A.items){for(const A of e.start)if("newline"===A.type)return!0;if(e.sep)for(const A of e.sep)if("newline"===A.type)return!0;if(na(e.key)||na(e.value))return!0}return!1;default:return!0}}function sa(A,e,t){if("flow-collection"===e?.type){const n=e.end[0];if(n.indent===A&&("]"===n.source||"}"===n.source)&&na(e)){t(n,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}}}function ra(A,e,t){const{uniqueKeys:n}=A.options;if(!1===n)return!1;const s="function"==typeof n?n:(A,e)=>A===e||Or(A)&&Or(e)&&A.value===e.value;return e.some((A=>s(A.key,t)))}const oa="All mapping items must start at the same column";function ia(A,e,t,n){let s="";if(A){let r=!1,o="";for(const i of A){const{source:A,type:a}=i;switch(a){case"space":r=!0;break;case"comment":{t&&!r&&n(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const e=A.substring(1)||" ";s?s+=o+e:s=e,o="";break}case"newline":s&&(o+=A),r=!0;break;default:n(i,"UNEXPECTED_TOKEN",`Unexpected ${a} at node end`)}e+=A.length}}return{comment:s,offset:e}}const aa="Block collections are not allowed within flow collections",ca=A=>A&&("block-map"===A.type||"block-seq"===A.type);function ga(A,e,t,n,s,r){const o="block-map"===t.type?function({composeNode:A,composeEmptyNode:e},t,n,s,r){const o=new(r?.nodeClass??Ko)(t.schema);t.atRoot&&(t.atRoot=!1);let i=n.offset,a=null;for(const r of n.items){const{start:c,key:g,sep:E,value:Q}=r,h=ta(c,{indicator:"explicit-key-ind",next:g??E?.[0],offset:i,onError:s,parentIndent:n.indent,startOnNewline:!0}),l=!h.found;if(l){if(g&&("block-seq"===g.type?s(i,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in g&&g.indent!==n.indent&&s(i,"BAD_INDENT",oa)),!h.anchor&&!h.tag&&!E){a=h.end,h.comment&&(o.comment?o.comment+="\n"+h.comment:o.comment=h.comment);continue}(h.newlineAfterProp||na(g))&&s(g??c[c.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else h.found?.indent!==n.indent&&s(i,"BAD_INDENT",oa);t.atKey=!0;const C=h.end,B=g?A(t,g,h,s):e(t,C,c,null,h,s);t.schema.compat&&sa(n.indent,g,s),t.atKey=!1,ra(t,o.items,B)&&s(C,"DUPLICATE_KEY","Map keys must be unique");const I=ta(E??[],{indicator:"map-value-ind",next:Q,offset:B.range[2],onError:s,parentIndent:n.indent,startOnNewline:!g||"block-scalar"===g.type});if(i=I.end,I.found){l&&("block-map"!==Q?.type||I.hasNewline||s(i,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),t.options.strict&&h.start<I.found.offset-1024&&s(B.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));const a=Q?A(t,Q,I,s):e(t,i,E,null,I,s);t.schema.compat&&sa(n.indent,Q,s),i=a.range[2];const c=new xo(B,a);t.options.keepSourceTokens&&(c.srcToken=r),o.items.push(c)}else{l&&s(B.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),I.comment&&(B.comment?B.comment+="\n"+I.comment:B.comment=I.comment);const A=new xo(B);t.options.keepSourceTokens&&(A.srcToken=r),o.items.push(A)}}return a&&a<i&&s(a,"IMPOSSIBLE","Map comment with trailing content"),o.range=[n.offset,i,a??i],o}(A,e,t,n,r):"block-seq"===t.type?function({composeNode:A,composeEmptyNode:e},t,n,s,r){const o=new(r?.nodeClass??Xo)(t.schema);t.atRoot&&(t.atRoot=!1),t.atKey&&(t.atKey=!1);let i=n.offset,a=null;for(const{start:r,value:c}of n.items){const g=ta(r,{indicator:"seq-item-ind",next:c,offset:i,onError:s,parentIndent:n.indent,startOnNewline:!0});if(!g.found){if(!(g.anchor||g.tag||c)){a=g.end,g.comment&&(o.comment=g.comment);continue}c&&"block-seq"===c.type?s(g.end,"BAD_INDENT","All sequence items must start at the same column"):s(i,"MISSING_CHAR","Sequence item without - indicator")}const E=c?A(t,c,g,s):e(t,g.end,r,null,g,s);t.schema.compat&&sa(n.indent,c,s),i=E.range[2],o.items.push(E)}return o.range=[n.offset,i,a??i],o}(A,e,t,n,r):function({composeNode:A,composeEmptyNode:e},t,n,s,r){const o="{"===n.start.source,i=o?"flow map":"flow sequence",a=new(r?.nodeClass??(o?Ko:Xo))(t.schema);a.flow=!0;const c=t.atRoot;c&&(t.atRoot=!1),t.atKey&&(t.atKey=!1);let g=n.offset+n.start.source.length;for(let r=0;r<n.items.length;++r){const c=n.items[r],{start:E,key:Q,sep:h,value:l}=c,C=ta(E,{flow:i,indicator:"explicit-key-ind",next:Q??h?.[0],offset:g,onError:s,parentIndent:n.indent,startOnNewline:!1});if(!C.found){if(!(C.anchor||C.tag||h||l)){0===r&&C.comma?s(C.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${i}`):r<n.items.length-1&&s(C.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${i}`),C.comment&&(a.comment?a.comment+="\n"+C.comment:a.comment=C.comment),g=C.end;continue}!o&&t.options.strict&&na(Q)&&s(Q,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===r)C.comma&&s(C.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${i}`);else if(C.comma||s(C.start,"MISSING_CHAR",`Missing , between ${i} items`),C.comment){let A="";A:for(const e of E)switch(e.type){case"comma":case"space":break;case"comment":A=e.source.substring(1);break A;default:break A}if(A){let e=a.items[a.items.length-1];Hr(e)&&(e=e.value??e.key),e.comment?e.comment+="\n"+A:e.comment=A,C.comment=C.comment.substring(A.length+1)}}if(o||h||C.found){t.atKey=!0;const r=C.end,B=Q?A(t,Q,C,s):e(t,r,E,null,C,s);ca(Q)&&s(B.range,"BLOCK_IN_FLOW",aa),t.atKey=!1;const I=ta(h??[],{flow:i,indicator:"map-value-ind",next:l,offset:B.range[2],onError:s,parentIndent:n.indent,startOnNewline:!1});if(I.found){if(!o&&!C.found&&t.options.strict){if(h)for(const A of h){if(A===I.found)break;if("newline"===A.type){s(A,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}C.start<I.found.offset-1024&&s(I.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else l&&("source"in l&&l.source&&":"===l.source[0]?s(l,"MISSING_CHAR",`Missing space after : in ${i}`):s(I.start,"MISSING_CHAR",`Missing , or : between ${i} items`));const u=l?A(t,l,I,s):I.found?e(t,I.end,h,null,I,s):null;u?ca(l)&&s(u.range,"BLOCK_IN_FLOW",aa):I.comment&&(B.comment?B.comment+="\n"+I.comment:B.comment=I.comment);const d=new xo(B,u);if(t.options.keepSourceTokens&&(d.srcToken=c),o){const A=a;ra(t,A.items,B)&&s(r,"DUPLICATE_KEY","Map keys must be unique"),A.items.push(d)}else{const A=new Ko(t.schema);A.flow=!0,A.items.push(d);const e=(u??B).range;A.range=[B.range[0],e[1],e[2]],a.items.push(A)}g=u?u.range[2]:I.end}else{const n=l?A(t,l,C,s):e(t,C.end,h,null,C,s);a.items.push(n),g=n.range[2],ca(l)&&s(n.range,"BLOCK_IN_FLOW",aa)}}const E=o?"}":"]",[Q,...h]=n.end;let l=g;if(Q&&Q.source===E)l=Q.offset+Q.source.length;else{const A=i[0].toUpperCase()+i.substring(1);s(g,c?"MISSING_CHAR":"BAD_INDENT",c?`${A} must end with a ${E}`:`${A} in block collection must be sufficiently indented and end with a ${E}`),Q&&1!==Q.source.length&&h.unshift(Q)}if(h.length>0){const A=ia(h,l,t.options.strict,s);A.comment&&(a.comment?a.comment+="\n"+A.comment:a.comment=A.comment),a.range=[n.offset,l,A.offset]}else a.range=[n.offset,l,l];return a}(A,e,t,n,r),i=o.constructor;return"!"===s||s===i.tagName?(o.tag=i.tagName,o):(s&&(o.tag=s),o)}function Ea(A,e,t){const n=e.offset,s=function({offset:A,props:e},t,n){if("block-scalar-header"!==e[0].type)return n(e[0],"IMPOSSIBLE","Block scalar header not found"),null;const{source:s}=e[0],r=s[0];let o=0,i="",a=-1;for(let e=1;e<s.length;++e){const t=s[e];if(i||"-"!==t&&"+"!==t){const n=Number(t);!o&&n?o=n:-1===a&&(a=A+e)}else i=t}-1!==a&&n(a,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${s}`);let c=!1,g="",E=s.length;for(let A=1;A<e.length;++A){const s=e[A];switch(s.type){case"space":c=!0;case"newline":E+=s.source.length;break;case"comment":if(t&&!c){n(s,"MISSING_CHAR","Comments must be separated from other tokens by white space characters")}E+=s.source.length,g=s.source.substring(1);break;case"error":n(s,"UNEXPECTED_TOKEN",s.message),E+=s.source.length;break;default:{n(s,"UNEXPECTED_TOKEN",`Unexpected token in block scalar header: ${s.type}`);const A=s.source;A&&"string"==typeof A&&(E+=A.length)}}}return{mode:r,indent:o,chomp:i,comment:g,length:E}}(e,A.options.strict,t);if(!s)return{value:"",type:null,comment:"",range:[n,n,n]};const r=">"===s.mode?Qo.BLOCK_FOLDED:Qo.BLOCK_LITERAL,o=e.source?function(A){const e=A.split(/\n( *)/),t=e[0],n=t.match(/^( *)/),s=[n?.[1]?[n[1],t.slice(n[1].length)]:["",t]];for(let A=1;A<e.length;A+=2)s.push([e[A],e[A+1]]);return s}(e.source):[];let i=o.length;for(let A=o.length-1;A>=0;--A){const e=o[A][1];if(""!==e&&"\r"!==e)break;i=A}if(0===i){const A="+"===s.chomp&&o.length>0?"\n".repeat(Math.max(1,o.length-1)):"";let t=n+s.length;return e.source&&(t+=e.source.length),{value:A,type:r,comment:s.comment,range:[n,t,t]}}let a=e.indent+s.indent,c=e.offset+s.length,g=0;for(let e=0;e<i;++e){const[n,r]=o[e];if(""!==r&&"\r"!==r){if(n.length<a){const A="Block scalars with more-indented leading empty lines must use an explicit indentation indicator";t(c+n.length,"MISSING_CHAR",A)}if(0===s.indent&&(a=n.length),g=e,0===a&&!A.atRoot){t(c,"BAD_INDENT","Block scalar values in collections must be indented")}break}0===s.indent&&n.length>a&&(a=n.length),c+=n.length+r.length+1}for(let A=o.length-1;A>=i;--A)o[A][0].length>a&&(i=A+1);let E="",Q="",h=!1;for(let A=0;A<g;++A)E+=o[A][0].slice(a)+"\n";for(let A=g;A<i;++A){let[e,n]=o[A];c+=e.length+n.length+1;const i="\r"===n[n.length-1];if(i&&(n=n.slice(0,-1)),n&&e.length<a){const A=`Block scalar lines must not be less indented than their ${s.indent?"explicit indentation indicator":"first line"}`;t(c-n.length-(i?2:1),"BAD_INDENT",A),e=""}r===Qo.BLOCK_LITERAL?(E+=Q+e.slice(a)+n,Q="\n"):e.length>a||"\t"===n[0]?(" "===Q?Q="\n":h||"\n"!==Q||(Q="\n\n"),E+=Q+e.slice(a)+n,Q="\n",h=!0):""===n?"\n"===Q?E+="\n":Q="\n":(E+=Q+n,Q=" ",h=!1)}switch(s.chomp){case"-":break;case"+":for(let A=i;A<o.length;++A)E+="\n"+o[A][0].slice(a);"\n"!==E[E.length-1]&&(E+="\n");break;default:E+="\n"}const l=n+s.length+e.source.length;return{value:E,type:r,comment:s.comment,range:[n,l,l]}}function Qa(A,e,t){const{offset:n,type:s,source:r,end:o}=A;let i,a;const c=(A,e,s)=>t(n+A,e,s);switch(s){case"scalar":i=Qo.PLAIN,a=function(A,e){let t="";switch(A[0]){case"\t":t="a tab character";break;case",":t="flow indicator character ,";break;case"%":t="directive indicator character %";break;case"|":case">":t=`block scalar indicator ${A[0]}`;break;case"@":case"`":t=`reserved character ${A[0]}`}t&&e(0,"BAD_SCALAR_START",`Plain value cannot start with ${t}`);return ha(A)}(r,c);break;case"single-quoted-scalar":i=Qo.QUOTE_SINGLE,a=function(A,e){"'"===A[A.length-1]&&1!==A.length||e(A.length,"MISSING_CHAR","Missing closing 'quote");return ha(A.slice(1,-1)).replace(/''/g,"'")}(r,c);break;case"double-quoted-scalar":i=Qo.QUOTE_DOUBLE,a=function(A,e){let t="";for(let n=1;n<A.length-1;++n){const s=A[n];if("\r"!==s||"\n"!==A[n+1])if("\n"===s){const{fold:e,offset:s}=la(A,n);t+=e,n=s}else if("\\"===s){let s=A[++n];const r=Ca[s];if(r)t+=r;else if("\n"===s)for(s=A[n+1];" "===s||"\t"===s;)s=A[1+ ++n];else if("\r"===s&&"\n"===A[n+1])for(s=A[1+ ++n];" "===s||"\t"===s;)s=A[1+ ++n];else if("x"===s||"u"===s||"U"===s){const r={x:2,u:4,U:8}[s];t+=Ba(A,n+1,r,e),n+=r}else{const s=A.substr(n-1,2);e(n-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${s}`),t+=s}}else if(" "===s||"\t"===s){const e=n;let r=A[n+1];for(;" "===r||"\t"===r;)r=A[1+ ++n];"\n"===r||"\r"===r&&"\n"===A[n+2]||(t+=n>e?A.slice(e,n+1):s)}else t+=s}'"'===A[A.length-1]&&1!==A.length||e(A.length,"MISSING_CHAR",'Missing closing "quote');return t}(r,c);break;default:return t(A,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${s}`),{value:"",type:null,comment:"",range:[n,n+r.length,n+r.length]}}const g=n+r.length,E=ia(o,g,e,t);return{value:a,type:i,comment:E.comment,range:[n,g,E.offset]}}function ha(A){let e,t;try{e=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),t=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{e=/(.*?)[ \t]*\r?\n/sy,t=/[ \t]*(.*?)[ \t]*\r?\n/sy}let n=e.exec(A);if(!n)return A;let s=n[1],r=" ",o=e.lastIndex;for(t.lastIndex=o;n=t.exec(A);)""===n[1]?"\n"===r?s+=r:r="\n":(s+=r+n[1],r=" "),o=t.lastIndex;const i=/[ \t]*(.*)/sy;return i.lastIndex=o,n=i.exec(A),s+r+(n?.[1]??"")}function la(A,e){let t="",n=A[e+1];for(;!(" "!==n&&"\t"!==n&&"\n"!==n&&"\r"!==n||"\r"===n&&"\n"!==A[e+2]);)"\n"===n&&(t+="\n"),n=A[(e+=1)+1];return t||(t=" "),{fold:t,offset:e}}const Ca={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"",_:" ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function Ba(A,e,t,n){const s=A.substr(e,t),r=s.length===t&&/^[0-9a-fA-F]+$/.test(s)?parseInt(s,16):NaN;if(isNaN(r)){const s=A.substr(e-2,t+2);return n(e-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${s}`),s}return String.fromCodePoint(r)}function Ia(A,e,t,n){const{value:s,type:r,comment:o,range:i}="block-scalar"===e.type?Ea(A,e,n):Qa(e,A.options.strict,n),a=t?A.directives.tagName(t.source,(A=>n(t,"TAG_RESOLVE_FAILED",A))):null;let c,g;c=A.options.stringKeys&&A.atKey?A.schema[Mr]:a?function(A,e,t,n,s){if("!"===t)return A[Mr];const r=[];for(const e of A.tags)if(!e.collection&&e.tag===t){if(!e.default||!e.test)return e;r.push(e)}for(const A of r)if(A.test?.test(e))return A;const o=A.knownTags[t];if(o&&!o.collection)return A.tags.push(Object.assign({},o,{default:!1,test:void 0})),o;return s(n,"TAG_RESOLVE_FAILED",`Unresolved tag: ${t}`,"tag:yaml.org,2002:str"!==t),A[Mr]}(A.schema,s,a,t,n):"scalar"===e.type?function({atKey:A,directives:e,schema:t},n,s,r){const o=t.tags.find((e=>(!0===e.default||A&&"key"===e.default)&&e.test?.test(n)))||t[Mr];if(t.compat){const A=t.compat.find((A=>A.default&&A.test?.test(n)))??t[Mr];if(o.tag!==A.tag){r(s,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${e.tagString(o.tag)} or ${e.tagString(A.tag)}`,!0)}}return o}(A,s,e,n):A.schema[Mr];try{const r=c.resolve(s,(A=>n(t??e,"TAG_RESOLVE_FAILED",A)),A.options);g=Or(r)?r:new Qo(r)}catch(A){const r=A instanceof Error?A.message:String(A);n(t??e,"TAG_RESOLVE_FAILED",r),g=new Qo(s)}return g.range=i,g.source=s,r&&(g.type=r),a&&(g.tag=a),c.format&&(g.format=c.format),o&&(g.comment=o),g}function ua(A,e,t){if(e){null===t&&(t=e.length);for(let n=t-1;n>=0;--n){let t=e[n];switch(t.type){case"space":case"comment":case"newline":A-=t.source.length;continue}for(t=e[++n];"space"===t?.type;)A+=t.source.length,t=e[++n];break}}return A}const da={composeNode:fa,composeEmptyNode:pa};function fa(A,e,t,n){const s=A.atKey,{spaceBefore:r,comment:o,anchor:i,tag:a}=t;let c,g=!0;switch(e.type){case"alias":c=function({options:A},{offset:e,source:t,end:n},s){const r=new co(t.substring(1));""===r.source&&s(e,"BAD_ALIAS","Alias cannot be an empty string");r.source.endsWith(":")&&s(e+t.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0);const o=e+t.length,i=ia(n,o,A.strict,s);r.range=[e,o,i.offset],i.comment&&(r.comment=i.comment);return r}(A,e,n),(i||a)&&n(e,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":c=Ia(A,e,a,n),i&&(c.anchor=i.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":c=function(A,e,t,n,s){const r=n.tag,o=r?e.directives.tagName(r.source,(A=>s(r,"TAG_RESOLVE_FAILED",A))):null;if("block-seq"===t.type){const{anchor:A,newlineAfterProp:e}=n,t=A&&r?A.offset>r.offset?A:r:A??r;t&&(!e||e.offset<t.offset)&&s(t,"MISSING_CHAR","Missing newline after block sequence props")}const i="block-map"===t.type?"map":"block-seq"===t.type?"seq":"{"===t.start.source?"map":"seq";if(!r||!o||"!"===o||o===Ko.tagName&&"map"===i||o===Xo.tagName&&"seq"===i)return ga(A,e,t,s,o);let a=e.schema.tags.find((A=>A.tag===o&&A.collection===i));if(!a){const n=e.schema.knownTags[o];if(!n||n.collection!==i)return n?s(r,"BAD_COLLECTION_TYPE",`${n.tag} used for ${i} collection, but expects ${n.collection??"scalar"}`,!0):s(r,"TAG_RESOLVE_FAILED",`Unresolved tag: ${o}`,!0),ga(A,e,t,s,o);e.schema.tags.push(Object.assign({},n,{default:!1})),a=n}const c=ga(A,e,t,s,o,a),g=a.resolve?.(c,(A=>s(r,"TAG_RESOLVE_FAILED",A)),e.options)??c,E=qr(g)?g:new Qo(g);return E.range=c.range,E.tag=o,a?.format&&(E.format=a.format),E}(da,A,e,t,n),i&&(c.anchor=i.source.substring(1));break;default:n(e,"UNEXPECTED_TOKEN","error"===e.type?e.message:`Unsupported token (type: ${e.type})`),c=pa(A,e.offset,void 0,null,t,n),g=!1}if(i&&""===c.anchor&&n(i,"BAD_ALIAS","Anchor cannot be an empty string"),s&&A.options.stringKeys&&(!Or(c)||"string"!=typeof c.value||c.tag&&"tag:yaml.org,2002:str"!==c.tag)){n(a??e,"NON_STRING_KEY","With stringKeys, all keys must be strings")}return r&&(c.spaceBefore=!0),o&&("scalar"===e.type&&""===e.source?c.comment=o:c.commentBefore=o),A.options.keepSourceTokens&&g&&(c.srcToken=e),c}function pa(A,e,t,n,{spaceBefore:s,comment:r,anchor:o,tag:i,end:a},c){const g=Ia(A,{type:"scalar",offset:ua(e,t,n),indent:-1,source:""},i,c);return o&&(g.anchor=o.source.substring(1),""===g.anchor&&c(o,"BAD_ALIAS","Anchor cannot be an empty string")),s&&(g.spaceBefore=!0),r&&(g.comment=r,g.range[2]=a),g}function ya(A){if("number"==typeof A)return[A,A+1];if(Array.isArray(A))return 2===A.length?A:[A[0],A[1]];const{offset:e,source:t}=A;return[e,e+("string"==typeof t?t.length:1)]}function ma(A){let e="",t=!1,n=!1;for(let s=0;s<A.length;++s){const r=A[s];switch(r[0]){case"#":e+=(""===e?"":n?"\n\n":"\n")+(r.substring(1)||" "),t=!0,n=!1;break;case"%":"#"!==A[s+1]?.[0]&&(s+=1),t=!1;break;default:t||(n=!0),t=!1}}return{comment:e,afterEmptyLine:n}}class wa{constructor(A={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(A,e,t,n)=>{const s=ya(A);n?this.warnings.push(new Aa(s,e,t)):this.errors.push(new $i(s,e,t))},this.directives=new to({version:A.version||"1.2"}),this.options=A}decorate(A,e){const{comment:t,afterEmptyLine:n}=ma(this.prelude);if(t){const s=A.contents;if(e)A.comment=A.comment?`${A.comment}\n${t}`:t;else if(n||A.directives.docStart||!s)A.commentBefore=t;else if(xr(s)&&!s.flow&&s.items.length>0){let A=s.items[0];Hr(A)&&(A=A.key);const e=A.commentBefore;A.commentBefore=e?`${t}\n${e}`:t}else{const A=s.commentBefore;s.commentBefore=A?`${t}\n${A}`:t}}e?(Array.prototype.push.apply(A.errors,this.errors),Array.prototype.push.apply(A.warnings,this.warnings)):(A.errors=this.errors,A.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:ma(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(A,e=!1,t=-1){for(const e of A)yield*this.next(e);yield*this.end(e,t)}*next(A){switch(A.type){case"directive":this.directives.add(A.source,((e,t,n)=>{const s=ya(A);s[0]+=e,this.onError(s,"BAD_DIRECTIVE",t,n)})),this.prelude.push(A.source),this.atDirectives=!0;break;case"document":{const e=function(A,e,{offset:t,start:n,value:s,end:r},o){const i=Object.assign({_directives:e},A),a=new Zi(void 0,i),c={atKey:!1,atRoot:!0,directives:a.directives,options:a.options,schema:a.schema},g=ta(n,{indicator:"doc-start",next:s??r?.[0],offset:t,onError:o,parentIndent:0,startOnNewline:!0});g.found&&(a.directives.docStart=!0,!s||"block-map"!==s.type&&"block-seq"!==s.type||g.hasNewline||o(g.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),a.contents=s?fa(c,s,g,o):pa(c,g.end,n,null,g,o);const E=a.contents.range[2],Q=ia(r,E,!1,o);return Q.comment&&(a.comment=Q.comment),a.range=[t,E,Q.offset],a}(this.options,this.directives,A,this.onError);this.atDirectives&&!e.directives.docStart&&this.onError(A,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(e,!1),this.doc&&(yield this.doc),this.doc=e,this.atDirectives=!1;break}case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(A.source);break;case"error":{const e=A.source?`${A.message}: ${JSON.stringify(A.source)}`:A.message,t=new $i(ya(A),"UNEXPECTED_TOKEN",e);this.atDirectives||!this.doc?this.errors.push(t):this.doc.errors.push(t);break}case"doc-end":{if(!this.doc){const e="Unexpected doc-end without preceding document";this.errors.push(new $i(ya(A),"UNEXPECTED_TOKEN",e));break}this.doc.directives.docEnd=!0;const e=ia(A.end,A.offset+A.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,!0),e.comment){const A=this.doc.comment;this.doc.comment=A?`${A}\n${e.comment}`:e.comment}this.doc.range[2]=e.offset;break}default:this.errors.push(new $i(ya(A),"UNEXPECTED_TOKEN",`Unsupported token ${A.type}`))}}*end(A=!1,e=-1){if(this.doc)this.decorate(this.doc,!0),yield this.doc,this.doc=null;else if(A){const A=Object.assign({_directives:this.directives},this.options),t=new Zi(void 0,A);this.atDirectives&&this.onError(e,"MISSING_CHAR","Missing directives-end indicator line"),t.range=[0,e,e],this.decorate(t,!1),yield t}}}function Da(A,e){if(e)for(const t of e)switch(t.type){case"space":case"comment":A.push(t);break;case"newline":return A.push(t),!0}return!1}function ka(A,e,t){switch(A.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":A.type=t,A.source=e;break;case"block-scalar":{const n=A.props.slice(1);let s=e.length;"block-scalar-header"===A.props[0].type&&(s-=A.props[0].source.length);for(const A of n)A.offset+=s;delete A.props,Object.assign(A,{type:t,source:e,end:n});break}case"block-map":case"block-seq":{const n={type:"newline",offset:A.offset+e.length,indent:A.indent,source:"\n"};delete A.items,Object.assign(A,{type:t,source:e,end:[n]});break}default:{const n="indent"in A?A.indent:-1,s="end"in A&&Array.isArray(A.end)?A.end.filter((A=>"space"===A.type||"comment"===A.type||"newline"===A.type)):[];for(const e of Object.keys(A))"type"!==e&&"offset"!==e&&delete A[e];Object.assign(A,{type:t,indent:n,source:e,end:s})}}}function ba(A){switch(A.type){case"block-scalar":{let e="";for(const t of A.props)e+=ba(t);return e+A.source}case"block-map":case"block-seq":{let e="";for(const t of A.items)e+=Ra(t);return e}case"flow-collection":{let e=A.start.source;for(const t of A.items)e+=Ra(t);for(const t of A.end)e+=t.source;return e}case"document":{let e=Ra(A);if(A.end)for(const t of A.end)e+=t.source;return e}default:{let e=A.source;if("end"in A&&A.end)for(const t of A.end)e+=t.source;return e}}}function Ra({start:A,key:e,sep:t,value:n}){let s="";for(const e of A)s+=e.source;if(e&&(s+=ba(e)),t)for(const A of t)s+=A.source;return n&&(s+=ba(n)),s}const Na=Symbol("break visit"),Sa=Symbol("skip children"),Fa=Symbol("remove item");function Ua(A,e){"type"in A&&"document"===A.type&&(A={start:A.start,value:A.value}),La(Object.freeze([]),A,e)}function La(A,e,t){let n=t(e,A);if("symbol"==typeof n)return n;for(const s of["key","value"]){const r=e[s];if(r&&"items"in r){for(let e=0;e<r.items.length;++e){const n=La(Object.freeze(A.concat([[s,e]])),r.items[e],t);if("number"==typeof n)e=n-1;else{if(n===Na)return Na;n===Fa&&(r.items.splice(e,1),e-=1)}}"function"==typeof n&&"key"===s&&(n=n(e,A))}}return"function"==typeof n?n(e,A):n}Ua.BREAK=Na,Ua.SKIP=Sa,Ua.REMOVE=Fa,Ua.itemAtPath=(A,e)=>{let t=A;for(const[A,n]of e){const e=t?.[A];if(!e||!("items"in e))return;t=e.items[n]}return t},Ua.parentCollection=(A,e)=>{const t=Ua.itemAtPath(A,e.slice(0,-1)),n=e[e.length-1][0],s=t?.[n];if(s&&"items"in s)return s;throw new Error("Parent collection not found")};const Ma="\ufeff",va="",Ta="",Ya="";function Ja(A){switch(A){case Ma:return"byte-order-mark";case va:return"doc-mode";case Ta:return"flow-error-end";case Ya:return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(A[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}var Ga=Object.freeze({__proto__:null,BOM:Ma,DOCUMENT:va,FLOW_END:Ta,SCALAR:Ya,createScalarToken:function(A,e){const{implicitKey:t=!1,indent:n,inFlow:s=!1,offset:r=-1,type:o="PLAIN"}=e,i=Lo({type:o,value:A},{implicitKey:t,indent:n>0?" ".repeat(n):"",inFlow:s,options:{blockQuote:!0,lineWidth:-1}}),a=e.end??[{type:"newline",offset:-1,indent:n,source:"\n"}];switch(i[0]){case"|":case">":{const A=i.indexOf("\n"),e=i.substring(0,A),t=i.substring(A+1)+"\n",s=[{type:"block-scalar-header",offset:r,indent:n,source:e}];return Da(s,a)||s.push({type:"newline",offset:-1,indent:n,source:"\n"}),{type:"block-scalar",offset:r,indent:n,props:s,source:t}}case'"':return{type:"double-quoted-scalar",offset:r,indent:n,source:i,end:a};case"'":return{type:"single-quoted-scalar",offset:r,indent:n,source:i,end:a};default:return{type:"scalar",offset:r,indent:n,source:i,end:a}}},isCollection:A=>!!A&&"items"in A,isScalar:A=>!!A&&("scalar"===A.type||"single-quoted-scalar"===A.type||"double-quoted-scalar"===A.type||"block-scalar"===A.type),prettyToken:function(A){switch(A){case Ma:return"<BOM>";case va:return"<DOC>";case Ta:return"<FLOW_END>";case Ya:return"<SCALAR>";default:return JSON.stringify(A)}},resolveAsScalar:function(A,e=!0,t){if(A){const n=(A,e,n)=>{const s="number"==typeof A?A:Array.isArray(A)?A[0]:A.offset;if(!t)throw new $i([s,s+1],e,n);t(s,e,n)};switch(A.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return Qa(A,e,n);case"block-scalar":return Ea({options:{strict:e}},A,n)}}return null},setScalarValue:function(A,e,t={}){let{afterKey:n=!1,implicitKey:s=!1,inFlow:r=!1,type:o}=t,i="indent"in A?A.indent:null;if(n&&"number"==typeof i&&(i+=2),!o)switch(A.type){case"single-quoted-scalar":o="QUOTE_SINGLE";break;case"double-quoted-scalar":o="QUOTE_DOUBLE";break;case"block-scalar":{const e=A.props[0];if("block-scalar-header"!==e.type)throw new Error("Invalid block scalar header");o=">"===e.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:o="PLAIN"}const a=Lo({type:o,value:e},{implicitKey:s||null===i,indent:null!==i&&i>0?" ".repeat(i):"",inFlow:r,options:{blockQuote:!0,lineWidth:-1}});switch(a[0]){case"|":case">":!function(A,e){const t=e.indexOf("\n"),n=e.substring(0,t),s=e.substring(t+1)+"\n";if("block-scalar"===A.type){const e=A.props[0];if("block-scalar-header"!==e.type)throw new Error("Invalid block scalar header");e.source=n,A.source=s}else{const{offset:e}=A,t="indent"in A?A.indent:-1,r=[{type:"block-scalar-header",offset:e,indent:t,source:n}];Da(r,"end"in A?A.end:void 0)||r.push({type:"newline",offset:-1,indent:t,source:"\n"});for(const e of Object.keys(A))"type"!==e&&"offset"!==e&&delete A[e];Object.assign(A,{type:"block-scalar",indent:t,props:r,source:s})}}(A,a);break;case'"':ka(A,a,"double-quoted-scalar");break;case"'":ka(A,a,"single-quoted-scalar");break;default:ka(A,a,"scalar")}},stringify:A=>"type"in A?ba(A):Ra(A),tokenType:Ja,visit:Ua});function Ha(A){switch(A){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}const Oa=new Set("0123456789ABCDEFabcdef"),Va=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),xa=new Set(",[]{}"),qa=new Set(" ,[]{}\n\r\t"),Wa=A=>!A||qa.has(A);class Pa{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(A,e=!1){if(A){if("string"!=typeof A)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+A:A,this.lineEndPos=null}this.atEnd=!e;let t=this.next??"stream";for(;t&&(e||this.hasChars(1));)t=yield*this.parseNext(t)}atLineEnd(){let A=this.pos,e=this.buffer[A];for(;" "===e||"\t"===e;)e=this.buffer[++A];return!e||"#"===e||"\n"===e||"\r"===e&&"\n"===this.buffer[A+1]}charAt(A){return this.buffer[this.pos+A]}continueScalar(A){let e=this.buffer[A];if(this.indentNext>0){let t=0;for(;" "===e;)e=this.buffer[++t+A];if("\r"===e){const e=this.buffer[t+A+1];if("\n"===e||!e&&!this.atEnd)return A+t+1}return"\n"===e||t>=this.indentNext||!e&&!this.atEnd?A+t:-1}if("-"===e||"."===e){const e=this.buffer.substr(A,3);if(("---"===e||"..."===e)&&Ha(this.buffer[A+3]))return-1}return A}getLine(){let A=this.lineEndPos;return("number"!=typeof A||-1!==A&&A<this.pos)&&(A=this.buffer.indexOf("\n",this.pos),this.lineEndPos=A),-1===A?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[A-1]&&(A-=1),this.buffer.substring(this.pos,A))}hasChars(A){return this.pos+A<=this.buffer.length}setNext(A){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=A,null}peek(A){return this.buffer.substr(this.pos,A)}*parseNext(A){switch(A){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let A=this.getLine();if(null===A)return this.setNext("stream");if(A[0]===Ma&&(yield*this.pushCount(1),A=A.substring(1)),"%"===A[0]){let e=A.length,t=A.indexOf("#");for(;-1!==t;){const n=A[t-1];if(" "===n||"\t"===n){e=t-1;break}t=A.indexOf("#",t+1)}for(;;){const t=A[e-1];if(" "!==t&&"\t"!==t)break;e-=1}const n=(yield*this.pushCount(e))+(yield*this.pushSpaces(!0));return yield*this.pushCount(A.length-n),this.pushNewline(),"stream"}if(this.atLineEnd()){const e=yield*this.pushSpaces(!0);return yield*this.pushCount(A.length-e),yield*this.pushNewline(),"stream"}return yield va,yield*this.parseLineStart()}*parseLineStart(){const A=this.charAt(0);if(!A&&!this.atEnd)return this.setNext("line-start");if("-"===A||"."===A){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");const A=this.peek(3);if(("---"===A||"..."===A)&&Ha(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===A?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!Ha(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){const[A,e]=this.peek(2);if(!e&&!this.atEnd)return this.setNext("block-start");if(("-"===A||"?"===A||":"===A)&&Ha(e)){const A=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0));return this.indentNext=this.indentValue+1,this.indentValue+=A,yield*this.parseBlockStart()}return"doc"}*parseDocument(){yield*this.pushSpaces(!0);const A=this.getLine();if(null===A)return this.setNext("doc");let e=yield*this.pushIndicators();switch(A[e]){case"#":yield*this.pushCount(A.length-e);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(Wa),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return e+=(yield*this.parseBlockScalarHeader()),e+=(yield*this.pushSpaces(!0)),yield*this.pushCount(A.length-e),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let A,e,t=-1;do{A=yield*this.pushNewline(),A>0?(e=yield*this.pushSpaces(!1),this.indentValue=t=e):e=0,e+=(yield*this.pushSpaces(!0))}while(A+e>0);const n=this.getLine();if(null===n)return this.setNext("flow");if(-1!==t&&t<this.indentNext&&"#"!==n[0]||0===t&&(n.startsWith("---")||n.startsWith("..."))&&Ha(n[3])){if(!(t===this.indentNext-1&&1===this.flowLevel&&("]"===n[0]||"}"===n[0])))return this.flowLevel=0,yield Ta,yield*this.parseLineStart()}let s=0;for(;","===n[s];)s+=(yield*this.pushCount(1)),s+=(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(s+=(yield*this.pushIndicators()),n[s]){case void 0:return"flow";case"#":return yield*this.pushCount(n.length-s),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,this.flowLevel-=1,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(Wa),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":{const A=this.charAt(1);if(this.flowKey||Ha(A)||","===A)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow"}default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){const A=this.charAt(0);let e=this.buffer.indexOf(A,this.pos+1);if("'"===A)for(;-1!==e&&"'"===this.buffer[e+1];)e=this.buffer.indexOf("'",e+2);else for(;-1!==e;){let A=0;for(;"\\"===this.buffer[e-1-A];)A+=1;if(A%2==0)break;e=this.buffer.indexOf('"',e+1)}const t=this.buffer.substring(0,e);let n=t.indexOf("\n",this.pos);if(-1!==n){for(;-1!==n;){const A=this.continueScalar(n+1);if(-1===A)break;n=t.indexOf("\n",A)}-1!==n&&(e=n-("\r"===t[n-1]?2:1))}if(-1===e){if(!this.atEnd)return this.setNext("quoted-scalar");e=this.buffer.length}return yield*this.pushToIndex(e+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let A=this.pos;for(;;){const e=this.buffer[++A];if("+"===e)this.blockScalarKeep=!0;else if(e>"0"&&e<="9")this.blockScalarIndent=Number(e)-1;else if("-"!==e)break}return yield*this.pushUntil((A=>Ha(A)||"#"===A))}*parseBlockScalar(){let A,e=this.pos-1,t=0;A:for(let n=this.pos;A=this.buffer[n];++n)switch(A){case" ":t+=1;break;case"\n":e=n,t=0;break;case"\r":{const A=this.buffer[n+1];if(!A&&!this.atEnd)return this.setNext("block-scalar");if("\n"===A)break}default:break A}if(!A&&!this.atEnd)return this.setNext("block-scalar");if(t>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=t:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{const A=this.continueScalar(e+1);if(-1===A)break;e=this.buffer.indexOf("\n",A)}while(-1!==e);if(-1===e){if(!this.atEnd)return this.setNext("block-scalar");e=this.buffer.length}}let n=e+1;for(A=this.buffer[n];" "===A;)A=this.buffer[++n];if("\t"===A){for(;"\t"===A||" "===A||"\r"===A||"\n"===A;)A=this.buffer[++n];e=n-1}else if(!this.blockScalarKeep)for(;;){let A=e-1,n=this.buffer[A];"\r"===n&&(n=this.buffer[--A]);const s=A;for(;" "===n;)n=this.buffer[--A];if(!("\n"===n&&A>=this.pos&&A+1+t>s))break;e=A}return yield Ya,yield*this.pushToIndex(e+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){const A=this.flowLevel>0;let e,t=this.pos-1,n=this.pos-1;for(;e=this.buffer[++n];)if(":"===e){const e=this.buffer[n+1];if(Ha(e)||A&&xa.has(e))break;t=n}else if(Ha(e)){let s=this.buffer[n+1];if("\r"===e&&("\n"===s?(n+=1,e="\n",s=this.buffer[n+1]):t=n),"#"===s||A&&xa.has(s))break;if("\n"===e){const A=this.continueScalar(n+1);if(-1===A)break;n=Math.max(n,A-2)}}else{if(A&&xa.has(e))break;t=n}return e||this.atEnd?(yield Ya,yield*this.pushToIndex(t+1,!0),A?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(A){return A>0?(yield this.buffer.substr(this.pos,A),this.pos+=A,A):0}*pushToIndex(A,e){const t=this.buffer.slice(this.pos,A);return t?(yield t,this.pos+=t.length,t.length):(e&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(Wa))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":{const A=this.flowLevel>0,e=this.charAt(1);if(Ha(e)||A&&xa.has(e))return A?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}}return 0}*pushTag(){if("<"===this.charAt(1)){let A=this.pos+2,e=this.buffer[A];for(;!Ha(e)&&">"!==e;)e=this.buffer[++A];return yield*this.pushToIndex(">"===e?A+1:A,!1)}{let A=this.pos+1,e=this.buffer[A];for(;e;)if(Va.has(e))e=this.buffer[++A];else{if("%"!==e||!Oa.has(this.buffer[A+1])||!Oa.has(this.buffer[A+2]))break;e=this.buffer[A+=3]}return yield*this.pushToIndex(A,!1)}}*pushNewline(){const A=this.buffer[this.pos];return"\n"===A?yield*this.pushCount(1):"\r"===A&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(A){let e,t=this.pos-1;do{e=this.buffer[++t]}while(" "===e||A&&"\t"===e);const n=t-this.pos;return n>0&&(yield this.buffer.substr(this.pos,n),this.pos=t),n}*pushUntil(A){let e=this.pos,t=this.buffer[e];for(;!A(t);)t=this.buffer[++e];return yield*this.pushToIndex(e,!1)}}class _a{constructor(){this.lineStarts=[],this.addNewLine=A=>this.lineStarts.push(A),this.linePos=A=>{let e=0,t=this.lineStarts.length;for(;e<t;){const n=e+t>>1;this.lineStarts[n]<A?e=n+1:t=n}if(this.lineStarts[e]===A)return{line:e+1,col:1};if(0===e)return{line:0,col:A};return{line:e,col:A-this.lineStarts[e-1]+1}}}}function ja(A,e){for(let t=0;t<A.length;++t)if(A[t].type===e)return!0;return!1}function Ka(A){for(let e=0;e<A.length;++e)switch(A[e].type){case"space":case"comment":case"newline":break;default:return e}return-1}function Za(A){switch(A?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return!0;default:return!1}}function Xa(A){switch(A.type){case"document":return A.start;case"block-map":{const e=A.items[A.items.length-1];return e.sep??e.start}case"block-seq":return A.items[A.items.length-1].start;default:return[]}}function za(A){if(0===A.length)return[];let e=A.length;A:for(;--e>=0;)switch(A[e].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break A}for(;"space"===A[++e]?.type;);return A.splice(e,A.length)}function $a(A){if("flow-seq-start"===A.start.type)for(const e of A.items)!e.sep||e.value||ja(e.start,"explicit-key-ind")||ja(e.sep,"map-value-ind")||(e.key&&(e.value=e.key),delete e.key,Za(e.value)?e.value.end?Array.prototype.push.apply(e.value.end,e.sep):e.value.end=e.sep:Array.prototype.push.apply(e.start,e.sep),delete e.sep)}class Ac{constructor(A){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new Pa,this.onNewLine=A}*parse(A,e=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(const t of this.lexer.lex(A,e))yield*this.next(t);e||(yield*this.end())}*next(A){if(this.source=A,this.atScalar)return this.atScalar=!1,yield*this.step(),void(this.offset+=A.length);const e=Ja(A);if(e)if("scalar"===e)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=e,yield*this.step(),e){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+A.length);break;case"space":this.atNewLine&&" "===A[0]&&(this.indent+=A.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=A.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=A.length}else{const e=`Not a YAML token: ${A}`;yield*this.pop({type:"error",offset:this.offset,message:e,source:A}),this.offset+=A.length}}*end(){for(;this.stack.length>0;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){const A=this.peek(1);if("doc-end"!==this.type||A&&"doc-end"===A.type){if(!A)return yield*this.stream();switch(A.type){case"document":return yield*this.document(A);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(A);case"block-scalar":return yield*this.blockScalar(A);case"block-map":return yield*this.blockMap(A);case"block-seq":return yield*this.blockSequence(A);case"flow-collection":return yield*this.flowCollection(A);case"doc-end":return yield*this.documentEnd(A)}yield*this.pop()}else{for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(A){return this.stack[this.stack.length-A]}*pop(A){const e=A??this.stack.pop();if(e)if(0===this.stack.length)yield e;else{const A=this.peek(1);switch("block-scalar"===e.type?e.indent="indent"in A?A.indent:0:"flow-collection"===e.type&&"document"===A.type&&(e.indent=0),"flow-collection"===e.type&&$a(e),A.type){case"document":A.value=e;break;case"block-scalar":A.props.push(e);break;case"block-map":{const t=A.items[A.items.length-1];if(t.value)return A.items.push({start:[],key:e,sep:[]}),void(this.onKeyLine=!0);if(!t.sep)return Object.assign(t,{key:e,sep:[]}),void(this.onKeyLine=!t.explicitKey);t.value=e;break}case"block-seq":{const t=A.items[A.items.length-1];t.value?A.items.push({start:[],value:e}):t.value=e;break}case"flow-collection":{const t=A.items[A.items.length-1];return void(!t||t.value?A.items.push({start:[],key:e,sep:[]}):t.sep?t.value=e:Object.assign(t,{key:e,sep:[]}))}default:yield*this.pop(),yield*this.pop(e)}if(!("document"!==A.type&&"block-map"!==A.type&&"block-seq"!==A.type||"block-map"!==e.type&&"block-seq"!==e.type)){const t=e.items[e.items.length-1];t&&!t.sep&&!t.value&&t.start.length>0&&-1===Ka(t.start)&&(0===e.indent||t.start.every((A=>"comment"!==A.type||A.indent<e.indent)))&&("document"===A.type?A.end=t.start:A.items.push({start:t.start}),e.items.splice(-1,1))}}else{const A="Tried to pop an empty stack";yield{type:"error",offset:this.offset,source:"",message:A}}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":{const A={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&A.start.push(this.sourceToken),void this.stack.push(A)}}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(A){if(A.value)return yield*this.lineEnd(A);switch(this.type){case"doc-start":return void(-1!==Ka(A.start)?(yield*this.pop(),yield*this.step()):A.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void A.start.push(this.sourceToken)}const e=this.startBlockValue(A);e?this.stack.push(e):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(A){if("map-value-ind"===this.type){const e=za(Xa(this.peek(2)));let t;A.end?(t=A.end,t.push(this.sourceToken),delete A.end):t=[this.sourceToken];const n={type:"block-map",offset:A.offset,indent:A.indent,items:[{start:e,key:A,sep:t}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=n}else yield*this.lineEnd(A)}*blockScalar(A){switch(this.type){case"space":case"comment":case"newline":return void A.props.push(this.sourceToken);case"scalar":if(A.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let A=this.source.indexOf("\n")+1;for(;0!==A;)this.onNewLine(this.offset+A),A=this.source.indexOf("\n",A)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(A){const e=A.items[A.items.length-1];switch(this.type){case"newline":if(this.onKeyLine=!1,e.value){const t="end"in e.value?e.value.end:void 0,n=Array.isArray(t)?t[t.length-1]:void 0;"comment"===n?.type?t?.push(this.sourceToken):A.items.push({start:[this.sourceToken]})}else e.sep?e.sep.push(this.sourceToken):e.start.push(this.sourceToken);return;case"space":case"comment":if(e.value)A.items.push({start:[this.sourceToken]});else if(e.sep)e.sep.push(this.sourceToken);else{if(this.atIndentedComment(e.start,A.indent)){const t=A.items[A.items.length-2],n=t?.value?.end;if(Array.isArray(n))return Array.prototype.push.apply(n,e.start),n.push(this.sourceToken),void A.items.pop()}e.start.push(this.sourceToken)}return}if(this.indent>=A.indent){const t=!this.onKeyLine&&this.indent===A.indent,n=t&&(e.sep||e.explicitKey)&&"seq-item-ind"!==this.type;let s=[];if(n&&e.sep&&!e.value){const t=[];for(let n=0;n<e.sep.length;++n){const s=e.sep[n];switch(s.type){case"newline":t.push(n);break;case"space":break;case"comment":s.indent>A.indent&&(t.length=0);break;default:t.length=0}}t.length>=2&&(s=e.sep.splice(t[1]))}switch(this.type){case"anchor":case"tag":return void(n||e.value?(s.push(this.sourceToken),A.items.push({start:s}),this.onKeyLine=!0):e.sep?e.sep.push(this.sourceToken):e.start.push(this.sourceToken));case"explicit-key-ind":return e.sep||e.explicitKey?n||e.value?(s.push(this.sourceToken),A.items.push({start:s,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(e.start.push(this.sourceToken),e.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":if(e.explicitKey)if(e.sep)if(e.value)A.items.push({start:[],key:null,sep:[this.sourceToken]});else if(ja(e.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:s,key:null,sep:[this.sourceToken]}]});else if(Za(e.key)&&!ja(e.sep,"newline")){const A=za(e.start),t=e.key,n=e.sep;n.push(this.sourceToken),delete e.key,delete e.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:A,key:t,sep:n}]})}else s.length>0?e.sep=e.sep.concat(s,this.sourceToken):e.sep.push(this.sourceToken);else if(ja(e.start,"newline"))Object.assign(e,{key:null,sep:[this.sourceToken]});else{const A=za(e.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:A,key:null,sep:[this.sourceToken]}]})}else e.sep?e.value||n?A.items.push({start:s,key:null,sep:[this.sourceToken]}):ja(e.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):e.sep.push(this.sourceToken):Object.assign(e,{key:null,sep:[this.sourceToken]});return void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const t=this.flowScalar(this.type);return void(n||e.value?(A.items.push({start:s,key:t,sep:[]}),this.onKeyLine=!0):e.sep?this.stack.push(t):(Object.assign(e,{key:t,sep:[]}),this.onKeyLine=!0))}default:{const n=this.startBlockValue(A);if(n){if("block-seq"===n.type){if(!e.explicitKey&&e.sep&&!ja(e.sep,"newline"))return void(yield*this.pop({type:"error",offset:this.offset,message:"Unexpected block-seq-ind on same line with key",source:this.source}))}else t&&A.items.push({start:s});return void this.stack.push(n)}}}}yield*this.pop(),yield*this.step()}*blockSequence(A){const e=A.items[A.items.length-1];switch(this.type){case"newline":if(e.value){const t="end"in e.value?e.value.end:void 0,n=Array.isArray(t)?t[t.length-1]:void 0;"comment"===n?.type?t?.push(this.sourceToken):A.items.push({start:[this.sourceToken]})}else e.start.push(this.sourceToken);return;case"space":case"comment":if(e.value)A.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(e.start,A.indent)){const t=A.items[A.items.length-2],n=t?.value?.end;if(Array.isArray(n))return Array.prototype.push.apply(n,e.start),n.push(this.sourceToken),void A.items.pop()}e.start.push(this.sourceToken)}return;case"anchor":case"tag":if(e.value||this.indent<=A.indent)break;return void e.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==A.indent)break;return void(e.value||ja(e.start,"seq-item-ind")?A.items.push({start:[this.sourceToken]}):e.start.push(this.sourceToken))}if(this.indent>A.indent){const e=this.startBlockValue(A);if(e)return void this.stack.push(e)}yield*this.pop(),yield*this.step()}*flowCollection(A){const e=A.items[A.items.length-1];if("flow-error-end"===this.type){let A;do{yield*this.pop(),A=this.peek(1)}while(A&&"flow-collection"===A.type)}else if(0===A.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!e||e.sep?A.items.push({start:[this.sourceToken]}):e.start.push(this.sourceToken));case"map-value-ind":return void(!e||e.value?A.items.push({start:[],key:null,sep:[this.sourceToken]}):e.sep?e.sep.push(this.sourceToken):Object.assign(e,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!e||e.value?A.items.push({start:[this.sourceToken]}):e.sep?e.sep.push(this.sourceToken):e.start.push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const t=this.flowScalar(this.type);return void(!e||e.value?A.items.push({start:[],key:t,sep:[]}):e.sep?this.stack.push(t):Object.assign(e,{key:t,sep:[]}))}case"flow-map-end":case"flow-seq-end":return void A.end.push(this.sourceToken)}const t=this.startBlockValue(A);t?this.stack.push(t):(yield*this.pop(),yield*this.step())}else{const e=this.peek(2);if("block-map"===e.type&&("map-value-ind"===this.type&&e.indent===A.indent||"newline"===this.type&&!e.items[e.items.length-1].sep))yield*this.pop(),yield*this.step();else if("map-value-ind"===this.type&&"flow-collection"!==e.type){const t=za(Xa(e));$a(A);const n=A.end.splice(1,A.end.length);n.push(this.sourceToken);const s={type:"block-map",offset:A.offset,indent:A.indent,items:[{start:t,key:A,sep:n}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=s}else yield*this.lineEnd(A)}}flowScalar(A){if(this.onNewLine){let A=this.source.indexOf("\n")+1;for(;0!==A;)this.onNewLine(this.offset+A),A=this.source.indexOf("\n",A)+1}return{type:A,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(A){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":{this.onKeyLine=!0;const e=za(Xa(A));return e.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,explicitKey:!0}]}}case"map-value-ind":{this.onKeyLine=!0;const e=za(Xa(A));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(A,e){return"comment"===this.type&&(!(this.indent<=e)&&A.every((A=>"newline"===A.type||"space"===A.type)))}*documentEnd(A){"doc-mode"!==this.type&&(A.end?A.end.push(this.sourceToken):A.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop()))}*lineEnd(A){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:A.end?A.end.push(this.sourceToken):A.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function ec(A){const e=!1!==A.prettyErrors;return{lineCounter:A.lineCounter||e&&new _a||null,prettyErrors:e}}function tc(A,e={}){const{lineCounter:t,prettyErrors:n}=ec(e),s=new Ac(t?.addNewLine),r=new wa(e);let o=null;for(const e of r.compose(s.parse(A),!0,A.length))if(o){if("silent"!==o.options.logLevel){o.errors.push(new $i(e.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else o=e;return n&&t&&(o.errors.forEach(ea(A,t)),o.warnings.forEach(ea(A,t))),o}var nc=Object.freeze({__proto__:null,Alias:co,CST:Ga,Composer:wa,Document:Zi,Lexer:Pa,LineCounter:_a,Pair:xo,Parser:Ac,Scalar:Qo,Schema:Ki,YAMLError:zi,YAMLMap:Ko,YAMLParseError:$i,YAMLSeq:Xo,YAMLWarning:Aa,isAlias:Yr,isCollection:xr,isDocument:Jr,isMap:Gr,isNode:qr,isPair:Hr,isScalar:Or,isSeq:Vr,parse:function(A,e,t){let n;"function"==typeof e?n=e:void 0===t&&e&&"object"==typeof e&&(t=e);const s=tc(A,t);if(!s)return null;if(s.warnings.forEach((A=>To(s.options.logLevel,A))),s.errors.length>0){if("silent"!==s.options.logLevel)throw s.errors[0];s.errors=[]}return s.toJS(Object.assign({reviver:n},t))},parseAllDocuments:function(A,e={}){const{lineCounter:t,prettyErrors:n}=ec(e),s=new Ac(t?.addNewLine),r=new wa(e),o=Array.from(r.compose(s.parse(A)));if(n&&t)for(const e of o)e.errors.forEach(ea(A,t)),e.warnings.forEach(ea(A,t));return o.length>0?o:Object.assign([],{empty:!0},r.streamInfo())},parseDocument:tc,stringify:function(A,e,t){let n=null;if("function"==typeof e||Array.isArray(e)?n=e:void 0===t&&e&&(t=e),"string"==typeof t&&(t=t.length),"number"==typeof t){const A=Math.round(t);t=A<1?void 0:A>8?{indent:8}:{indent:A}}if(void 0===A){const{keepUndefined:A}=t??e??{};if(!A)return}return Jr(A)&&!n?A.toString(t):new Zi(A,n,t).toString(t)},visit:jr,visitAsync:Zr});process.env.FORCE_COLOR="2",console.info(`Supports color: ${JSON.stringify(Nr)}`);function sc(A){return String(A).padStart(2,"0")}async function rc(A,e){console.info(kr.green(`$ ${A} ${e}`));const t=w.spawnSync(A,e,{encoding:"utf8",stdio:"pipe"});return console.info(kr.yellow(`Exit code: ${t.status}`)),console.info("stdout: ---------------------"),console.info(kr.cyan(t.stdout.trim())),console.info("stderr: ---------------------"),console.info(kr.magenta(t.stderr.trim())),console.info("-----------------------------"),console.info(kr.yellow(`Exit code: ${t.status}`)),console.info(" "),0!==t.status&&(await k.setTimeout(1e3),process.exit(t.status)),t.stdout}const oc=er.getInput("issue-number",{required:!0});A.rmSync(t.join(e.homedir(),".config","gh"),{force:!0,recursive:!0}),async function(A){await rc("python",["-m","pip","install","aider-install"]),await rc("aider-install",[]),await rc("uv",["tool","run","--from","aider-chat","pip","install","boto3"]);const e=await rc("gh",["issue","view",A.toString(),"--json","author,title,body,labels,comments"]),t=JSON.parse(e),n={author:t.author.login,title:t.title,description:t.body,comments:t.comments.map((A=>({author:A.author.login,body:A.body})))},s=`\nModify the code to solve the following GitHub issue:\n\`\`\`\`yml\n${nc.stringify(n).trim()}\n\`\`\`\`\n`.trim(),r=new Date,o=`llm-pr-${A}-${r.getFullYear()}_${sc(r.getMonth()+1)}${sc(r.getDate())}_${sc(r.getHours())}${sc(r.getMinutes())}${sc(r.getSeconds())}`;await rc("git",["switch","-C",o]);const i=["--yes-always","--no-gitignore","--no-show-model-warnings","--no-stream"];i.push(..."--architect --model bedrock/converse/us.deepseek.r1-v1:0 --editor-model bedrock/anthropic.claude-3-5-sonnet-20241022-v2:0".split(/\s+/)),i.push("--message",s),console.info(kr.green(`$ aider ${i}`)),process.env.FORCE_COLOR="";const a=await rc("aider",i),c=a.split(/─+/).at(-1)?.trim()??"";process.env.FORCE_COLOR="2",await rc("git",["push","origin",o]);const g=function(){const A=w.spawnSync("git",["remote","get-url","origin"],{encoding:"utf8",stdio:"pipe"}),e=A.stdout.trim().match(/github\.com[\/:]([\w-]+\/[\w-]+)(\.git)?$/);return e?e[1]:""}();rc("gh",["pr","create","--title",w.spawnSync("git",["log","main..HEAD","--reverse","--pretty=%s","-1"],{encoding:"utf8",stdio:"pipe"}).stdout.trim(),"--body",`Closes #${A}\n\n\`\`\`\`\n${c}\n\`\`\`\``,"--repo",g]),console.info(`\nIssue #${A} processed successfully.`),console.info("AWS_REGION_NAME:",process.env.AWS_REGION_NAME)}(Number(oc));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
