"use strict";var e=require("node:child_process"),t=require("node:assert"),n=require("node:path"),s=require("node:fs"),i=require("node:util"),r=require("node:url"),o="undefined"!=typeof document?document.currentScript:null;function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,s=Array(t);n<t;n++)s[n]=e[n];return s}const c=(e=0)=>t=>`[${t+e}m`,l=(e=0)=>t=>`[${38+e};5;${t}m`,h=(e=0)=>(t,n,s)=>`[${38+e};2;${t};${n};${s}m`,u={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(u.modifier);Object.keys(u.color),Object.keys(u.bgColor);const f=function(){const e=new Map;for(const[t,n]of Object.entries(u)){for(const[t,s]of Object.entries(n))u[t]={open:`[${s[0]}m`,close:`[${s[1]}m`},n[t]=u[t],e.set(s[0],s[1]);Object.defineProperty(u,t,{value:n,enumerable:!1})}return Object.defineProperty(u,"codes",{value:e,enumerable:!1}),u.color.close="[39m",u.bgColor.close="[49m",u.color.ansi=c(),u.color.ansi256=l(),u.color.ansi16m=h(),u.bgColor.ansi=c(10),u.bgColor.ansi256=l(10),u.bgColor.ansi16m=h(10),Object.defineProperties(u,{rgbToAnsi256:{value:(e,t,n)=>e===t&&t===n?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(n/255*5),enumerable:!1},hexToRgb:{value(e){const t=/[a-f\d]{6}|[a-f\d]{3}/i.exec(e.toString(16));if(!t)return[0,0,0];let[n]=t;3===n.length&&(n=[...n].map((e=>e+e)).join(""));const s=Number.parseInt(n,16);return[s>>16&255,s>>8&255,255&s]},enumerable:!1},hexToAnsi256:{value:e=>u.rgbToAnsi256(...u.hexToRgb(e)),enumerable:!1},ansi256ToAnsi:{value(e){if(e<8)return 30+e;if(e<16)return e-8+90;let t,n,s;if(e>=232)t=(10*(e-232)+8)/255,n=t,s=t;else{const i=(e-=16)%36;t=Math.floor(e/36)/5,n=Math.floor(i/6)/5,s=i%6/5}const i=2*Math.max(t,n,s);if(0===i)return 30;let r=30+(Math.round(s)<<2|Math.round(n)<<1|Math.round(t));return 2===i&&(r+=60),r},enumerable:!1},rgbToAnsi:{value:(e,t,n)=>u.ansi256ToAnsi(u.rgbToAnsi256(e,t,n)),enumerable:!1},hexToAnsi:{value:e=>u.ansi256ToAnsi(u.hexToAnsi256(e)),enumerable:!1}}),u}(),d=(()=>{if(!("navigator"in globalThis))return 0;if(globalThis.navigator.userAgentData){const e=navigator.userAgentData.brands.find((({brand:e})=>"Chromium"===e));if(e&&e.version>93)return 3}return/\b(Chrome|Chromium)\//.test(globalThis.navigator.userAgent)?1:0})(),p=0!==d&&{level:d},g={stdout:p,stderr:p};function m(e,t,n){let s=e.indexOf(t);if(-1===s)return e;const i=t.length;let r=0,o="";do{o+=e.slice(r,s)+t+n,r=s+i,s=e.indexOf(t,r)}while(-1!==s);return o+=e.slice(r),o}const{stdout:y,stderr:b}=g,v=Symbol("GENERATOR"),w=Symbol("STYLER"),k=Symbol("IS_EMPTY"),O=["ansi","ansi","ansi256","ansi16m"],E=Object.create(null),S=e=>{const t=(...e)=>e.join(" ");return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=y?y.level:0;e.level=void 0===t.level?n:t.level})(t,e),Object.setPrototypeOf(t,A.prototype),t};function A(e){return S(e)}Object.setPrototypeOf(A.prototype,Function.prototype);for(const[e,t]of Object.entries(f))E[e]={get(){const n=_(this,j(t.open,t.close,this[w]),this[k]);return Object.defineProperty(this,e,{value:n}),n}};E.visible={get(){const e=_(this,this[w],!0);return Object.defineProperty(this,"visible",{value:e}),e}};const N=(e,t,n,...s)=>"rgb"===e?"ansi16m"===t?f[n].ansi16m(...s):"ansi256"===t?f[n].ansi256(f.rgbToAnsi256(...s)):f[n].ansi(f.rgbToAnsi(...s)):"hex"===e?N("rgb",t,n,...f.hexToRgb(...s)):f[n][e](...s),C=["rgb","hex","ansi256"];for(const e of C){E[e]={get(){const{level:t}=this;return function(...n){const s=j(N(e,O[t],"color",...n),f.color.close,this[w]);return _(this,s,this[k])}}};E["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...n){const s=j(N(e,O[t],"bgColor",...n),f.bgColor.close,this[w]);return _(this,s,this[k])}}}}const x=Object.defineProperties((()=>{}),{...E,level:{enumerable:!0,get(){return this[v].level},set(e){this[v].level=e}}}),j=(e,t,n)=>{let s,i;return void 0===n?(s=e,i=t):(s=n.openAll+e,i=t+n.closeAll),{open:e,close:t,openAll:s,closeAll:i,parent:n}},_=(e,t,n)=>{const s=(...e)=>I(s,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(s,x),s[v]=e,s[w]=t,s[k]=n,s},I=(e,t)=>{if(e.level<=0||!t)return e[k]?"":t;let n=e[w];if(void 0===n)return t;const{openAll:s,closeAll:i}=n;if(t.includes(""))for(;void 0!==n;)t=m(t,n.close,n.open),n=n.parent;const r=t.indexOf("\n");return-1!==r&&(t=function(e,t,n,s){let i=0,r="";do{const o="\r"===e[s-1];r+=e.slice(i,o?s-1:s)+t+(o?"\r\n":"\n")+n,i=s+1,s=e.indexOf("\n",i)}while(-1!==s);return r+=e.slice(i),r}(t,i,s,r)),s+t+i};Object.defineProperties(A.prototype,E);const $=A();A({level:b?b.level:0});const M=Symbol.for("yaml.alias"),T=Symbol.for("yaml.document"),L=Symbol.for("yaml.map"),P=Symbol.for("yaml.pair"),D=Symbol.for("yaml.scalar"),B=Symbol.for("yaml.seq"),q=Symbol.for("yaml.node.type"),K=e=>!!e&&"object"==typeof e&&e[q]===M,U=e=>!!e&&"object"==typeof e&&e[q]===T,F=e=>!!e&&"object"==typeof e&&e[q]===L,R=e=>!!e&&"object"==typeof e&&e[q]===P,W=e=>!!e&&"object"==typeof e&&e[q]===D,H=e=>!!e&&"object"==typeof e&&e[q]===B;function V(e){if(e&&"object"==typeof e)switch(e[q]){case L:case B:return!0}return!1}function z(e){if(e&&"object"==typeof e)switch(e[q]){case M:case L:case D:case B:return!0}return!1}const G=Symbol("break visit"),Y=Symbol("skip children"),J=Symbol("remove node");function Q(e,t){const n=te(t);if(U(e)){X(null,e.contents,n,Object.freeze([e]))===J&&(e.contents=null)}else X(null,e,n,Object.freeze([]))}function X(e,t,n,s){const i=ne(e,t,n,s);if(z(i)||R(i))return se(e,s,i),X(e,i,n,s);if("symbol"!=typeof i)if(V(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=X(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===G)return G;i===J&&(t.items.splice(e,1),e-=1)}}}else if(R(t)){s=Object.freeze(s.concat(t));const e=X("key",t.key,n,s);if(e===G)return G;e===J&&(t.key=null);const i=X("value",t.value,n,s);if(i===G)return G;i===J&&(t.value=null)}return i}async function Z(e,t){const n=te(t);if(U(e)){await ee(null,e.contents,n,Object.freeze([e]))===J&&(e.contents=null)}else await ee(null,e,n,Object.freeze([]))}async function ee(e,t,n,s){const i=await ne(e,t,n,s);if(z(i)||R(i))return se(e,s,i),ee(e,i,n,s);if("symbol"!=typeof i)if(V(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=await ee(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===G)return G;i===J&&(t.items.splice(e,1),e-=1)}}}else if(R(t)){s=Object.freeze(s.concat(t));const e=await ee("key",t.key,n,s);if(e===G)return G;e===J&&(t.key=null);const i=await ee("value",t.value,n,s);if(i===G)return G;i===J&&(t.value=null)}return i}function te(e){return"object"==typeof e&&(e.Collection||e.Node||e.Value)?Object.assign({Alias:e.Node,Map:e.Node,Scalar:e.Node,Seq:e.Node},e.Value&&{Map:e.Value,Scalar:e.Value,Seq:e.Value},e.Collection&&{Map:e.Collection,Seq:e.Collection},e):e}function ne(e,t,n,s){return"function"==typeof n?n(e,t,s):F(t)?n.Map?.(e,t,s):H(t)?n.Seq?.(e,t,s):R(t)?n.Pair?.(e,t,s):W(t)?n.Scalar?.(e,t,s):K(t)?n.Alias?.(e,t,s):void 0}function se(e,t,n){const s=t[t.length-1];if(V(s))s.items[e]=n;else if(R(s))"key"===e?s.key=n:s.value=n;else{if(!U(s)){const e=K(s)?"alias":"scalar";throw new Error(`Cannot replace node with ${e} parent`)}s.contents=n}}Q.BREAK=G,Q.SKIP=Y,Q.REMOVE=J,Z.BREAK=G,Z.SKIP=Y,Z.REMOVE=J;const ie={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class re{constructor(e,t){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},re.defaultYaml,e),this.tags=Object.assign({},re.defaultTags,t)}clone(){const e=new re(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){const e=new re(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:re.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},re.defaultTags)}return e}add(e,t){this.atNextDocument&&(this.yaml={explicit:re.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},re.defaultTags),this.atNextDocument=!1);const n=e.trim().split(/[ \t]+/),s=n.shift();switch(s){case"%TAG":{if(2!==n.length&&(t(0,"%TAG directive should contain exactly two parts"),n.length<2))return!1;const[e,s]=n;return this.tags[e]=s,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==n.length)return t(0,"%YAML directive should contain exactly one part"),!1;const[e]=n;if("1.1"===e||"1.2"===e)return this.yaml.version=e,!0;return t(6,`Unsupported YAML version ${e}`,/^\d+\.\d+$/.test(e)),!1}default:return t(0,`Unknown directive ${s}`,!0),!1}}tagName(e,t){if("!"===e)return"!";if("!"!==e[0])return t(`Not a valid tag: ${e}`),null;if("<"===e[1]){const n=e.slice(2,-1);return"!"===n||"!!"===n?(t(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(">"!==e[e.length-1]&&t("Verbatim tags must end with a >"),n)}const[,n,s]=e.match(/^(.*!)([^!]*)$/s);s||t(`The ${e} tag has no suffix`);const i=this.tags[n];if(i)try{return i+decodeURIComponent(s)}catch(e){return t(String(e)),null}return"!"===n?e:(t(`Could not resolve tag: ${e}`),null)}tagString(e){for(const[t,n]of Object.entries(this.tags))if(e.startsWith(n))return t+e.substring(n.length).replace(/[!,[\]{}]/g,(e=>ie[e]));return"!"===e[0]?e:`!<${e}>`}toString(e){const t=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],n=Object.entries(this.tags);let s;if(e&&n.length>0&&z(e.contents)){const t={};Q(e.contents,((e,n)=>{z(n)&&n.tag&&(t[n.tag]=!0)})),s=Object.keys(t)}else s=[];for(const[i,r]of n)"!!"===i&&"tag:yaml.org,2002:"===r||e&&!s.some((e=>e.startsWith(r)))||t.push(`%TAG ${i} ${r}`);return t.join("\n")}}function oe(e){if(/[\x00-\x19\s,[\]{}]/.test(e)){const t=JSON.stringify(e);throw new Error(`Anchor must not contain whitespace or control characters: ${t}`)}return!0}function ae(e){const t=new Set;return Q(e,{Value(e,n){n.anchor&&t.add(n.anchor)}}),t}function ce(e,t){for(let n=1;;++n){const s=`${e}${n}`;if(!t.has(s))return s}}function le(e,t,n,s){if(s&&"object"==typeof s)if(Array.isArray(s))for(let t=0,n=s.length;t<n;++t){const n=s[t],i=le(e,s,String(t),n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}else if(s instanceof Map)for(const t of Array.from(s.keys())){const n=s.get(t),i=le(e,s,t,n);void 0===i?s.delete(t):i!==n&&s.set(t,i)}else if(s instanceof Set)for(const t of Array.from(s)){const n=le(e,s,t,t);void 0===n?s.delete(t):n!==t&&(s.delete(t),s.add(n))}else for(const[t,n]of Object.entries(s)){const i=le(e,s,t,n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}return e.call(t,n,s)}function he(e,t,n){if(Array.isArray(e))return e.map(((e,t)=>he(e,String(t),n)));if(e&&"function"==typeof e.toJSON){if(!n||(!W(s=e)&&!V(s)||!s.anchor))return e.toJSON(t,n);const i={aliasCount:0,count:1,res:void 0};n.anchors.set(e,i),n.onCreate=e=>{i.res=e,delete n.onCreate};const r=e.toJSON(t,n);return n.onCreate&&n.onCreate(r),r}var s;return"bigint"!=typeof e||n?.keep?e:Number(e)}re.defaultYaml={explicit:!1,version:"1.2"},re.defaultTags={"!!":"tag:yaml.org,2002:"};class ue{constructor(e){Object.defineProperty(this,q,{value:e})}clone(){const e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(e,{mapAsMap:t,maxAliasCount:n,onAnchor:s,reviver:i}={}){if(!U(e))throw new TypeError("A document argument is required");const r={anchors:new Map,doc:e,keep:!0,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof n?n:100},o=he(this,"",r);if("function"==typeof s)for(const{count:e,res:t}of r.anchors.values())s(t,e);return"function"==typeof i?le(i,{"":o},"",o):o}}class fe extends ue{constructor(e){super(M),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(e){let t;return Q(e,{Node:(e,n)=>{if(n===this)return Q.BREAK;n.anchor===this.source&&(t=n)}}),t}toJSON(e,t){if(!t)return{source:this.source};const{anchors:n,doc:s,maxAliasCount:i}=t,r=this.resolve(s);if(!r){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(e)}let o=n.get(r);if(o||(he(r,null,t),o=n.get(r)),!o||void 0===o.res){throw new ReferenceError("This should not happen: Alias anchor was not resolved?")}if(i>=0&&(o.count+=1,0===o.aliasCount&&(o.aliasCount=de(s,r,n)),o.count*o.aliasCount>i)){throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack")}return o.res}toString(e,t,n){const s=`*${this.source}`;if(e){if(oe(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source)){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(e)}if(e.implicitKey)return`${s} `}return s}}function de(e,t,n){if(K(t)){const s=t.resolve(e),i=n&&s&&n.get(s);return i?i.count*i.aliasCount:0}if(V(t)){let s=0;for(const i of t.items){const t=de(e,i,n);t>s&&(s=t)}return s}if(R(t)){const s=de(e,t.key,n),i=de(e,t.value,n);return Math.max(s,i)}return 1}const pe=e=>!e||"function"!=typeof e&&"object"!=typeof e;class ge extends ue{constructor(e){super(D),this.value=e}toJSON(e,t){return t?.keep?this.value:he(this.value,e,t)}toString(){return String(this.value)}}ge.BLOCK_FOLDED="BLOCK_FOLDED",ge.BLOCK_LITERAL="BLOCK_LITERAL",ge.PLAIN="PLAIN",ge.QUOTE_DOUBLE="QUOTE_DOUBLE",ge.QUOTE_SINGLE="QUOTE_SINGLE";function me(e,t,n){if(U(e)&&(e=e.contents),z(e))return e;if(R(e)){const t=n.schema[L].createNode?.(n.schema,null,n);return t.items.push(e),t}(e instanceof String||e instanceof Number||e instanceof Boolean||"undefined"!=typeof BigInt&&e instanceof BigInt)&&(e=e.valueOf());const{aliasDuplicateObjects:s,onAnchor:i,onTagObj:r,schema:o,sourceObjects:a}=n;let c;if(s&&e&&"object"==typeof e){if(c=a.get(e),c)return c.anchor||(c.anchor=i(e)),new fe(c.anchor);c={anchor:null,node:null},a.set(e,c)}t?.startsWith("!!")&&(t="tag:yaml.org,2002:"+t.slice(2));let l=function(e,t,n){if(t){const e=n.filter((e=>e.tag===t)),s=e.find((e=>!e.format))??e[0];if(!s)throw new Error(`Tag ${t} not found`);return s}return n.find((t=>t.identify?.(e)&&!t.format))}(e,t,o.tags);if(!l){if(e&&"function"==typeof e.toJSON&&(e=e.toJSON()),!e||"object"!=typeof e){const t=new ge(e);return c&&(c.node=t),t}l=e instanceof Map?o[L]:Symbol.iterator in Object(e)?o[B]:o[L]}r&&(r(l),delete n.onTagObj);const h=l?.createNode?l.createNode(n.schema,e,n):"function"==typeof l?.nodeClass?.from?l.nodeClass.from(n.schema,e,n):new ge(e);return t?h.tag=t:l.default||(h.tag=l.tag),c&&(c.node=h),h}function ye(e,t,n){let s=n;for(let e=t.length-1;e>=0;--e){const n=t[e];if("number"==typeof n&&Number.isInteger(n)&&n>=0){const e=[];e[n]=s,s=e}else s=new Map([[n,s]])}return me(s,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}const be=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class ve extends ue{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(e){const t=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(t.schema=e),t.items=t.items.map((t=>z(t)||R(t)?t.clone(e):t)),this.range&&(t.range=this.range.slice()),t}addIn(e,t){if(be(e))this.add(t);else{const[n,...s]=e,i=this.get(n,!0);if(V(i))i.addIn(s,t);else{if(void 0!==i||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,ye(this.schema,s,t))}}}deleteIn(e){const[t,...n]=e;if(0===n.length)return this.delete(t);const s=this.get(t,!0);if(V(s))return s.deleteIn(n);throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`)}getIn(e,t){const[n,...s]=e,i=this.get(n,!0);return 0===s.length?!t&&W(i)?i.value:i:V(i)?i.getIn(s,t):void 0}hasAllNullValues(e){return this.items.every((t=>{if(!R(t))return!1;const n=t.value;return null==n||e&&W(n)&&null==n.value&&!n.commentBefore&&!n.comment&&!n.tag}))}hasIn(e){const[t,...n]=e;if(0===n.length)return this.has(t);const s=this.get(t,!0);return!!V(s)&&s.hasIn(n)}setIn(e,t){const[n,...s]=e;if(0===s.length)this.set(n,t);else{const e=this.get(n,!0);if(V(e))e.setIn(s,t);else{if(void 0!==e||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,ye(this.schema,s,t))}}}}const we=e=>e.replace(/^(?!$)(?: $)?/gm,"#");function ke(e,t){return/^\n+$/.test(e)?e.substring(1):t?e.replace(/^(?! *$)/gm,t):e}const Oe=(e,t,n)=>e.endsWith("\n")?ke(n,t):n.includes("\n")?"\n"+ke(n,t):(e.endsWith(" ")?"":" ")+n,Ee="flow",Se="block",Ae="quoted";function Ne(e,t,n="flow",{indentAtStart:s,lineWidth:i=80,minContentWidth:r=20,onFold:o,onOverflow:a}={}){if(!i||i<0)return e;i<r&&(r=0);const c=Math.max(1+r,1+i-t.length);if(e.length<=c)return e;const l=[],h={};let u,f,d=i-t.length;"number"==typeof s&&(s>i-Math.max(2,r)?l.push(0):d=i-s);let p=!1,g=-1,m=-1,y=-1;n===Se&&(g=Ce(e,g,t.length),-1!==g&&(d=g+c));for(let s;s=e[g+=1];){if(n===Ae&&"\\"===s){switch(m=g,e[g+1]){case"x":g+=3;break;case"u":g+=5;break;case"U":g+=9;break;default:g+=1}y=g}if("\n"===s)n===Se&&(g=Ce(e,g,t.length)),d=g+t.length+c,u=void 0;else{if(" "===s&&f&&" "!==f&&"\n"!==f&&"\t"!==f){const t=e[g+1];t&&" "!==t&&"\n"!==t&&"\t"!==t&&(u=g)}if(g>=d)if(u)l.push(u),d=u+c,u=void 0;else if(n===Ae){for(;" "===f||"\t"===f;)f=s,s=e[g+=1],p=!0;const t=g>y+1?g-2:m-1;if(h[t])return e;l.push(t),h[t]=!0,d=t+c,u=void 0}else p=!0}f=s}if(p&&a&&a(),0===l.length)return e;o&&o();let b=e.slice(0,l[0]);for(let s=0;s<l.length;++s){const i=l[s],r=l[s+1]||e.length;0===i?b=`\n${t}${e.slice(0,r)}`:(n===Ae&&h[i]&&(b+=`${e[i]}\\`),b+=`\n${t}${e.slice(i+1,r)}`)}return b}function Ce(e,t,n){let s=t,i=t+1,r=e[i];for(;" "===r||"\t"===r;)if(t<i+n)r=e[++t];else{do{r=e[++t]}while(r&&"\n"!==r);s=t,i=t+1,r=e[i]}return s}const xe=(e,t)=>({indentAtStart:t?e.indent.length:e.indentAtStart,lineWidth:e.options.lineWidth,minContentWidth:e.options.minContentWidth}),je=e=>/^(%|---|\.\.\.)/m.test(e);function _e(e,t){const n=JSON.stringify(e);if(t.options.doubleQuotedAsJSON)return n;const{implicitKey:s}=t,i=t.options.doubleQuotedMinMultiLineLength,r=t.indent||(je(e)?"  ":"");let o="",a=0;for(let e=0,t=n[e];t;t=n[++e])if(" "===t&&"\\"===n[e+1]&&"n"===n[e+2]&&(o+=n.slice(a,e)+"\\ ",e+=1,a=e,t="\\"),"\\"===t)switch(n[e+1]){case"u":{o+=n.slice(a,e);const t=n.substr(e+2,4);switch(t){case"0000":o+="\\0";break;case"0007":o+="\\a";break;case"000b":o+="\\v";break;case"001b":o+="\\e";break;case"0085":o+="\\N";break;case"00a0":o+="\\_";break;case"2028":o+="\\L";break;case"2029":o+="\\P";break;default:"00"===t.substr(0,2)?o+="\\x"+t.substr(2):o+=n.substr(e,6)}e+=5,a=e+1}break;case"n":if(s||'"'===n[e+2]||n.length<i)e+=1;else{for(o+=n.slice(a,e)+"\n\n";"\\"===n[e+2]&&"n"===n[e+3]&&'"'!==n[e+4];)o+="\n",e+=2;o+=r," "===n[e+2]&&(o+="\\"),e+=1,a=e+1}break;default:e+=1}return o=a?o+n.slice(a):n,s?o:Ne(o,r,Ae,xe(t,!1))}function Ie(e,t){if(!1===t.options.singleQuote||t.implicitKey&&e.includes("\n")||/[ \t]\n|\n[ \t]/.test(e))return _e(e,t);const n=t.indent||(je(e)?"  ":""),s="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&\n${n}`)+"'";return t.implicitKey?s:Ne(s,n,Ee,xe(t,!1))}function $e(e,t){const{singleQuote:n}=t.options;let s;if(!1===n)s=_e;else{const t=e.includes('"'),i=e.includes("'");s=t&&!i?Ie:i&&!t?_e:n?Ie:_e}return s(e,t)}let Me;try{Me=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{Me=/\n+(?!\n|$)/g}function Te({comment:e,type:t,value:n},s,i,r){const{blockQuote:o,commentString:a,lineWidth:c}=s.options;if(!o||/\n[\t ]+$/.test(n)||/^\s*$/.test(n))return $e(n,s);const l=s.indent||(s.forceBlockIndent||je(n)?"  ":""),h="literal"===o||"folded"!==o&&t!==ge.BLOCK_FOLDED&&(t===ge.BLOCK_LITERAL||!function(e,t,n){if(!t||t<0)return!1;const s=t-n,i=e.length;if(i<=s)return!1;for(let t=0,n=0;t<i;++t)if("\n"===e[t]){if(t-n>s)return!0;if(n=t+1,i-n<=s)return!1}return!0}(n,c,l.length));if(!n)return h?"|\n":">\n";let u,f;for(f=n.length;f>0;--f){const e=n[f-1];if("\n"!==e&&"\t"!==e&&" "!==e)break}let d=n.substring(f);const p=d.indexOf("\n");-1===p?u="-":n===d||p!==d.length-1?(u="+",r&&r()):u="",d&&(n=n.slice(0,-d.length),"\n"===d[d.length-1]&&(d=d.slice(0,-1)),d=d.replace(Me,`$&${l}`));let g,m=!1,y=-1;for(g=0;g<n.length;++g){const e=n[g];if(" "===e)m=!0;else{if("\n"!==e)break;y=g}}let b=n.substring(0,y<g?y+1:g);b&&(n=n.substring(b.length),b=b.replace(/\n+/g,`$&${l}`));let v=(m?l?"2":"1":"")+u;if(e&&(v+=" "+a(e.replace(/ ?[\r\n]+/g," ")),i&&i()),!h){const e=n.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${l}`);let i=!1;const r=xe(s,!0);"folded"!==o&&t!==ge.BLOCK_FOLDED&&(r.onOverflow=()=>{i=!0});const a=Ne(`${b}${e}${d}`,l,Se,r);if(!i)return`>${v}\n${l}${a}`}return`|${v}\n${l}${b}${n=n.replace(/\n+/g,`$&${l}`)}${d}`}function Le(e,t,n,s){const{implicitKey:i,inFlow:r}=t,o="string"==typeof e.value?e:Object.assign({},e,{value:String(e.value)});let{type:a}=e;a!==ge.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(o.value)&&(a=ge.QUOTE_DOUBLE);const c=e=>{switch(e){case ge.BLOCK_FOLDED:case ge.BLOCK_LITERAL:return i||r?$e(o.value,t):Te(o,t,n,s);case ge.QUOTE_DOUBLE:return _e(o.value,t);case ge.QUOTE_SINGLE:return Ie(o.value,t);case ge.PLAIN:return function(e,t,n,s){const{type:i,value:r}=e,{actualString:o,implicitKey:a,indent:c,indentStep:l,inFlow:h}=t;if(a&&r.includes("\n")||h&&/[[\]{},]/.test(r))return $e(r,t);if(!r||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(r))return a||h||!r.includes("\n")?$e(r,t):Te(e,t,n,s);if(!a&&!h&&i!==ge.PLAIN&&r.includes("\n"))return Te(e,t,n,s);if(je(r)){if(""===c)return t.forceBlockIndent=!0,Te(e,t,n,s);if(a&&c===l)return $e(r,t)}const u=r.replace(/\n+/g,`$&\n${c}`);if(o){const e=e=>e.default&&"tag:yaml.org,2002:str"!==e.tag&&e.test?.test(u),{compat:n,tags:s}=t.doc.schema;if(s.some(e)||n?.some(e))return $e(r,t)}return a?u:Ne(u,c,Ee,xe(t,!1))}(o,t,n,s);default:return null}};let l=c(a);if(null===l){const{defaultKeyType:e,defaultStringType:n}=t.options,s=i&&e||n;if(l=c(s),null===l)throw new Error(`Unsupported default string type ${s}`)}return l}function Pe(e,t){const n=Object.assign({blockQuote:!0,commentString:we,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},e.schema.toStringOptions,t);let s;switch(n.collectionStyle){case"block":s=!1;break;case"flow":s=!0;break;default:s=null}return{anchors:new Set,doc:e,flowCollectionPadding:n.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof n.indent?" ".repeat(n.indent):"  ",inFlow:s,options:n}}function De(e,t,n,s){if(R(e))return e.toString(t,n,s);if(K(e)){if(t.doc.directives)return e.toString(t);if(t.resolvedAliases?.has(e))throw new TypeError("Cannot stringify circular structure without alias nodes");t.resolvedAliases?t.resolvedAliases.add(e):t.resolvedAliases=new Set([e]),e=e.resolve(t.doc)}let i;const r=z(e)?e:t.doc.createNode(e,{onTagObj:e=>i=e});i||(i=function(e,t){if(t.tag){const n=e.filter((e=>e.tag===t.tag));if(n.length>0)return n.find((e=>e.format===t.format))??n[0]}let n,s;if(W(t)){s=t.value;let i=e.filter((e=>e.identify?.(s)));if(i.length>1){const e=i.filter((e=>e.test));e.length>0&&(i=e)}n=i.find((e=>e.format===t.format))??i.find((e=>!e.format))}else s=t,n=e.find((e=>e.nodeClass&&s instanceof e.nodeClass));if(!n)throw new Error(`Tag not resolved for ${s?.constructor?.name??typeof s} value`);return n}(t.doc.schema.tags,r));const o=function(e,t,{anchors:n,doc:s}){if(!s.directives)return"";const i=[],r=(W(e)||V(e))&&e.anchor;r&&oe(r)&&(n.add(r),i.push(`&${r}`));const o=e.tag?e.tag:t.default?null:t.tag;return o&&i.push(s.directives.tagString(o)),i.join(" ")}(r,i,t);o.length>0&&(t.indentAtStart=(t.indentAtStart??0)+o.length+1);const a="function"==typeof i.stringify?i.stringify(r,t,n,s):W(r)?Le(r,t,n,s):r.toString(t,n,s);return o?W(r)||"{"===a[0]||"["===a[0]?`${o} ${a}`:`${o}\n${t.indent}${a}`:a}function Be(e,t){"debug"!==e&&"warn"!==e||console.warn(t)}const qe="<<",Ke={identify:e=>e===qe||"symbol"==typeof e&&e.description===qe,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new ge(Symbol(qe)),{addToJSMap:Ue}),stringify:()=>qe};function Ue(e,t,n){if(n=e&&K(n)?n.resolve(e.doc):n,H(n))for(const s of n.items)Fe(e,t,s);else if(Array.isArray(n))for(const s of n)Fe(e,t,s);else Fe(e,t,n)}function Fe(e,t,n){const s=e&&K(n)?n.resolve(e.doc):n;if(!F(s))throw new Error("Merge sources must be maps or map aliases");const i=s.toJSON(null,e,Map);for(const[e,n]of i)t instanceof Map?t.has(e)||t.set(e,n):t instanceof Set?t.add(e):Object.prototype.hasOwnProperty.call(t,e)||Object.defineProperty(t,e,{value:n,writable:!0,enumerable:!0,configurable:!0});return t}function Re(e,t,{key:n,value:s}){if(z(n)&&n.addToJSMap)n.addToJSMap(e,t,s);else if(((e,t)=>(Ke.identify(t)||W(t)&&(!t.type||t.type===ge.PLAIN)&&Ke.identify(t.value))&&e?.doc.schema.tags.some((e=>e.tag===Ke.tag&&e.default)))(e,n))Ue(e,t,s);else{const i=he(n,"",e);if(t instanceof Map)t.set(i,he(s,i,e));else if(t instanceof Set)t.add(i);else{const r=function(e,t,n){if(null===t)return"";if("object"!=typeof t)return String(t);if(z(e)&&n?.doc){const t=Pe(n.doc,{});t.anchors=new Set;for(const e of n.anchors.keys())t.anchors.add(e.anchor);t.inFlow=!0,t.inStringifyKey=!0;const s=e.toString(t);if(!n.mapKeyWarned){let e=JSON.stringify(s);e.length>40&&(e=e.substring(0,36)+'..."'),Be(n.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),n.mapKeyWarned=!0}return s}return JSON.stringify(t)}(n,i,e),o=he(s,r,e);r in t?Object.defineProperty(t,r,{value:o,writable:!0,enumerable:!0,configurable:!0}):t[r]=o}}return t}function We(e,t,n){const s=me(e,void 0,n),i=me(t,void 0,n);return new He(s,i)}class He{constructor(e,t=null){Object.defineProperty(this,q,{value:P}),this.key=e,this.value=t}clone(e){let{key:t,value:n}=this;return z(t)&&(t=t.clone(e)),z(n)&&(n=n.clone(e)),new He(t,n)}toJSON(e,t){return Re(t,t?.mapAsMap?new Map:{},this)}toString(e,t,n){return e?.doc?function({key:e,value:t},n,s,i){const{allNullValues:r,doc:o,indent:a,indentStep:c,options:{commentString:l,indentSeq:h,simpleKeys:u}}=n;let f=z(e)&&e.comment||null;if(u){if(f)throw new Error("With simple keys, key nodes cannot have comments");if(V(e)||!z(e)&&"object"==typeof e)throw new Error("With simple keys, collection cannot be used as a key value")}let d=!u&&(!e||f&&null==t&&!n.inFlow||V(e)||(W(e)?e.type===ge.BLOCK_FOLDED||e.type===ge.BLOCK_LITERAL:"object"==typeof e));n=Object.assign({},n,{allNullValues:!1,implicitKey:!d&&(u||!r),indent:a+c});let p,g,m,y=!1,b=!1,v=De(e,n,(()=>y=!0),(()=>b=!0));if(!d&&!n.inFlow&&v.length>1024){if(u)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");d=!0}if(n.inFlow){if(r||null==t)return y&&s&&s(),""===v?"?":d?`? ${v}`:v}else if(r&&!u||null==t&&d)return v=`? ${v}`,f&&!y?v+=Oe(v,n.indent,l(f)):b&&i&&i(),v;y&&(f=null),d?(f&&(v+=Oe(v,n.indent,l(f))),v=`? ${v}\n${a}:`):(v=`${v}:`,f&&(v+=Oe(v,n.indent,l(f)))),z(t)?(p=!!t.spaceBefore,g=t.commentBefore,m=t.comment):(p=!1,g=null,m=null,t&&"object"==typeof t&&(t=o.createNode(t))),n.implicitKey=!1,d||f||!W(t)||(n.indentAtStart=v.length+1),b=!1,h||!(c.length>=2)||n.inFlow||d||!H(t)||t.flow||t.tag||t.anchor||(n.indent=n.indent.substring(2));let w=!1;const k=De(t,n,(()=>w=!0),(()=>b=!0));let O=" ";if(f||p||g)O=p?"\n":"",g&&(O+=`\n${ke(l(g),n.indent)}`),""!==k||n.inFlow?O+=`\n${n.indent}`:"\n"===O&&(O="\n\n");else if(!d&&V(t)){const e=k[0],s=k.indexOf("\n"),i=-1!==s,r=n.inFlow??t.flow??0===t.items.length;if(i||!r){let t=!1;if(i&&("&"===e||"!"===e)){let n=k.indexOf(" ");"&"===e&&-1!==n&&n<s&&"!"===k[n+1]&&(n=k.indexOf(" ",n+1)),(-1===n||s<n)&&(t=!0)}t||(O=`\n${n.indent}`)}}else""!==k&&"\n"!==k[0]||(O="");return v+=O+k,n.inFlow?w&&s&&s():m&&!w?v+=Oe(v,n.indent,l(m)):b&&i&&i(),v}(this,e,t,n):JSON.stringify(this)}}function Ve(e,t,n){return(t.inFlow??e.flow?Ge:ze)(e,t,n)}function ze({comment:e,items:t},n,{blockItemPrefix:s,flowChars:i,itemIndent:r,onChompKeep:o,onComment:a}){const{indent:c,options:{commentString:l}}=n,h=Object.assign({},n,{indent:r,type:null});let u=!1;const f=[];for(let e=0;e<t.length;++e){const i=t[e];let o=null;if(z(i))!u&&i.spaceBefore&&f.push(""),Ye(n,f,i.commentBefore,u),i.comment&&(o=i.comment);else if(R(i)){const e=z(i.key)?i.key:null;e&&(!u&&e.spaceBefore&&f.push(""),Ye(n,f,e.commentBefore,u))}u=!1;let a=De(i,h,(()=>o=null),(()=>u=!0));o&&(a+=Oe(a,r,l(o))),u&&o&&(u=!1),f.push(s+a)}let d;if(0===f.length)d=i.start+i.end;else{d=f[0];for(let e=1;e<f.length;++e){const t=f[e];d+=t?`\n${c}${t}`:"\n"}}return e?(d+="\n"+ke(l(e),c),a&&a()):u&&o&&o(),d}function Ge({items:e},t,{flowChars:n,itemIndent:s}){const{indent:i,indentStep:r,flowCollectionPadding:o,options:{commentString:a}}=t;s+=r;const c=Object.assign({},t,{indent:s,inFlow:!0,type:null});let l=!1,h=0;const u=[];for(let n=0;n<e.length;++n){const i=e[n];let r=null;if(z(i))i.spaceBefore&&u.push(""),Ye(t,u,i.commentBefore,!1),i.comment&&(r=i.comment);else if(R(i)){const e=z(i.key)?i.key:null;e&&(e.spaceBefore&&u.push(""),Ye(t,u,e.commentBefore,!1),e.comment&&(l=!0));const n=z(i.value)?i.value:null;n?(n.comment&&(r=n.comment),n.commentBefore&&(l=!0)):null==i.value&&e?.comment&&(r=e.comment)}r&&(l=!0);let o=De(i,c,(()=>r=null));n<e.length-1&&(o+=","),r&&(o+=Oe(o,s,a(r))),!l&&(u.length>h||o.includes("\n"))&&(l=!0),u.push(o),h=u.length}const{start:f,end:d}=n;if(0===u.length)return f+d;if(!l){const e=u.reduce(((e,t)=>e+t.length+2),2);l=t.options.lineWidth>0&&e>t.options.lineWidth}if(l){let e=f;for(const t of u)e+=t?`\n${r}${i}${t}`:"\n";return`${e}\n${i}${d}`}return`${f}${o}${u.join(" ")}${o}${d}`}function Ye({indent:e,options:{commentString:t}},n,s,i){if(s&&i&&(s=s.replace(/^\n+/,"")),s){const i=ke(t(s),e);n.push(i.trimStart())}}function Je(e,t){const n=W(t)?t.value:t;for(const s of e)if(R(s)){if(s.key===t||s.key===n)return s;if(W(s.key)&&s.key.value===n)return s}}class Qe extends ve{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(L,e),this.items=[]}static from(e,t,n){const{keepUndefined:s,replacer:i}=n,r=new this(e),o=(e,o)=>{if("function"==typeof i)o=i.call(t,e,o);else if(Array.isArray(i)&&!i.includes(e))return;(void 0!==o||s)&&r.items.push(We(e,o,n))};if(t instanceof Map)for(const[e,n]of t)o(e,n);else if(t&&"object"==typeof t)for(const e of Object.keys(t))o(e,t[e]);return"function"==typeof e.sortMapEntries&&r.items.sort(e.sortMapEntries),r}add(e,t){let n;n=R(e)?e:e&&"object"==typeof e&&"key"in e?new He(e.key,e.value):new He(e,e?.value);const s=Je(this.items,n.key),i=this.schema?.sortMapEntries;if(s){if(!t)throw new Error(`Key ${n.key} already set`);W(s.value)&&pe(n.value)?s.value.value=n.value:s.value=n.value}else if(i){const e=this.items.findIndex((e=>i(n,e)<0));-1===e?this.items.push(n):this.items.splice(e,0,n)}else this.items.push(n)}delete(e){const t=Je(this.items,e);if(!t)return!1;return this.items.splice(this.items.indexOf(t),1).length>0}get(e,t){const n=Je(this.items,e),s=n?.value;return(!t&&W(s)?s.value:s)??void 0}has(e){return!!Je(this.items,e)}set(e,t){this.add(new He(e,t),!0)}toJSON(e,t,n){const s=n?new n:t?.mapAsMap?new Map:{};t?.onCreate&&t.onCreate(s);for(const e of this.items)Re(t,s,e);return s}toString(e,t,n){if(!e)return JSON.stringify(this);for(const e of this.items)if(!R(e))throw new Error(`Map items must all be pairs; found ${JSON.stringify(e)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),Ve(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:n,onComment:t})}}const Xe={collection:"map",default:!0,nodeClass:Qe,tag:"tag:yaml.org,2002:map",resolve:(e,t)=>(F(e)||t("Expected a mapping for this tag"),e),createNode:(e,t,n)=>Qe.from(e,t,n)};class Ze extends ve{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(B,e),this.items=[]}add(e){this.items.push(e)}delete(e){const t=et(e);if("number"!=typeof t)return!1;return this.items.splice(t,1).length>0}get(e,t){const n=et(e);if("number"!=typeof n)return;const s=this.items[n];return!t&&W(s)?s.value:s}has(e){const t=et(e);return"number"==typeof t&&t<this.items.length}set(e,t){const n=et(e);if("number"!=typeof n)throw new Error(`Expected a valid index, not ${e}.`);const s=this.items[n];W(s)&&pe(t)?s.value=t:this.items[n]=t}toJSON(e,t){const n=[];t?.onCreate&&t.onCreate(n);let s=0;for(const e of this.items)n.push(he(e,String(s++),t));return n}toString(e,t,n){return e?Ve(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:n,onComment:t}):JSON.stringify(this)}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(let r of t){if("function"==typeof s){const n=t instanceof Set?r:String(e++);r=s.call(t,n,r)}i.items.push(me(r,void 0,n))}}return i}}function et(e){let t=W(e)?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),"number"==typeof t&&Number.isInteger(t)&&t>=0?t:null}const tt={collection:"seq",default:!0,nodeClass:Ze,tag:"tag:yaml.org,2002:seq",resolve:(e,t)=>(H(e)||t("Expected a sequence for this tag"),e),createNode:(e,t,n)=>Ze.from(e,t,n)},nt={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:(e,t,n,s)=>Le(e,t=Object.assign({actualString:!0},t),n,s)},st={identify:e=>null==e,createNode:()=>new ge(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new ge(null),stringify:({source:e},t)=>"string"==typeof e&&st.test.test(e)?e:t.options.nullStr},it={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>new ge("t"===e[0]||"T"===e[0]),stringify({source:e,value:t},n){if(e&&it.test.test(e)){if(t===("t"===e[0]||"T"===e[0]))return e}return t?n.options.trueStr:n.options.falseStr}};function rt({format:e,minFractionDigits:t,tag:n,value:s}){if("bigint"==typeof s)return String(s);const i="number"==typeof s?s:Number(s);if(!isFinite(i))return isNaN(i)?".nan":i<0?"-.inf":".inf";let r=JSON.stringify(s);if(!e&&t&&(!n||"tag:yaml.org,2002:float"===n)&&/^\d/.test(r)){let e=r.indexOf(".");e<0&&(e=r.length,r+=".");let n=t-(r.length-e-1);for(;n-- >0;)r+="0"}return r}const ot={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:rt},at={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():rt(e)}},ct={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(e){const t=new ge(parseFloat(e)),n=e.indexOf(".");return-1!==n&&"0"===e[e.length-1]&&(t.minFractionDigits=e.length-n-1),t},stringify:rt},lt=e=>"bigint"==typeof e||Number.isInteger(e),ht=(e,t,n,{intAsBigInt:s})=>s?BigInt(e):parseInt(e.substring(t),n);function ut(e,t,n){const{value:s}=e;return lt(s)&&s>=0?n+s.toString(t):rt(e)}const ft={identify:e=>lt(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(e,t,n)=>ht(e,2,8,n),stringify:e=>ut(e,8,"0o")},dt={identify:lt,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(e,t,n)=>ht(e,0,10,n),stringify:rt},pt={identify:e=>lt(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(e,t,n)=>ht(e,2,16,n),stringify:e=>ut(e,16,"0x")},gt=[Xe,tt,nt,st,it,ft,dt,pt,ot,at,ct];function mt(e){return"bigint"==typeof e||Number.isInteger(e)}const yt=({value:e})=>JSON.stringify(e),bt=[Xe,tt].concat([{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:yt},{identify:e=>null==e,createNode:()=>new ge(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:yt},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:e=>"true"===e,stringify:yt},{identify:mt,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(e,t,{intAsBigInt:n})=>n?BigInt(e):parseInt(e,10),stringify:({value:e})=>mt(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:yt}],{default:!0,tag:"",test:/^/,resolve:(e,t)=>(t(`Unresolved plain scalar ${JSON.stringify(e)}`),e)}),vt={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(e,t){if("function"==typeof atob){const t=atob(e.replace(/[\n\r]/g,"")),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n[e]=t.charCodeAt(e);return n}return t("This environment does not support reading binary tags; either Buffer or atob is required"),e},stringify({comment:e,type:t,value:n},s,i,r){if(!n)return"";const o=n;let a;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let e="";for(let t=0;t<o.length;++t)e+=String.fromCharCode(o[t]);a=btoa(e)}if(t||(t=ge.BLOCK_LITERAL),t!==ge.QUOTE_DOUBLE){const e=Math.max(s.options.lineWidth-s.indent.length,s.options.minContentWidth),n=Math.ceil(a.length/e),i=new Array(n);for(let t=0,s=0;t<n;++t,s+=e)i[t]=a.substr(s,e);a=i.join(t===ge.BLOCK_LITERAL?"\n":" ")}return Le({comment:e,type:t,value:a},s,i,r)}};function wt(e,t){if(H(e))for(let n=0;n<e.items.length;++n){let s=e.items[n];if(!R(s)){if(F(s)){s.items.length>1&&t("Each pair must have its own sequence indicator");const e=s.items[0]||new He(new ge(null));if(s.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${s.commentBefore}\n${e.key.commentBefore}`:s.commentBefore),s.comment){const t=e.value??e.key;t.comment=t.comment?`${s.comment}\n${t.comment}`:s.comment}s=e}e.items[n]=R(s)?s:new He(s)}}else t("Expected a sequence for this tag");return e}function kt(e,t,n){const{replacer:s}=n,i=new Ze(e);i.tag="tag:yaml.org,2002:pairs";let r=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let o,a;if("function"==typeof s&&(e=s.call(t,String(r++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);o=e[0],a=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);o=t[0],a=e[o]}else o=e;i.items.push(We(o,a,n))}return i}const Ot={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:wt,createNode:kt};class Et extends Ze{constructor(){super(),this.add=Qe.prototype.add.bind(this),this.delete=Qe.prototype.delete.bind(this),this.get=Qe.prototype.get.bind(this),this.has=Qe.prototype.has.bind(this),this.set=Qe.prototype.set.bind(this),this.tag=Et.tag}toJSON(e,t){if(!t)return super.toJSON(e);const n=new Map;t?.onCreate&&t.onCreate(n);for(const e of this.items){let s,i;if(R(e)?(s=he(e.key,"",t),i=he(e.value,s,t)):s=he(e,"",t),n.has(s))throw new Error("Ordered maps must not include duplicate keys");n.set(s,i)}return n}static from(e,t,n){const s=kt(e,t,n),i=new this;return i.items=s.items,i}}Et.tag="tag:yaml.org,2002:omap";const St={collection:"seq",identify:e=>e instanceof Map,nodeClass:Et,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){const n=wt(e,t),s=[];for(const{key:e}of n.items)W(e)&&(s.includes(e.value)?t(`Ordered maps must not include duplicate keys: ${e.value}`):s.push(e.value));return Object.assign(new Et,n)},createNode:(e,t,n)=>Et.from(e,t,n)};function At({value:e,source:t},n){return t&&(e?Nt:Ct).test.test(t)?t:e?n.options.trueStr:n.options.falseStr}const Nt={identify:e=>!0===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new ge(!0),stringify:At},Ct={identify:e=>!1===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new ge(!1),stringify:At},xt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:rt},jt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():rt(e)}},_t={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(e){const t=new ge(parseFloat(e.replace(/_/g,""))),n=e.indexOf(".");if(-1!==n){const s=e.substring(n+1).replace(/_/g,"");"0"===s[s.length-1]&&(t.minFractionDigits=s.length)}return t},stringify:rt},It=e=>"bigint"==typeof e||Number.isInteger(e);function $t(e,t,n,{intAsBigInt:s}){const i=e[0];if("-"!==i&&"+"!==i||(t+=1),e=e.substring(t).replace(/_/g,""),s){switch(n){case 2:e=`0b${e}`;break;case 8:e=`0o${e}`;break;case 16:e=`0x${e}`}const t=BigInt(e);return"-"===i?BigInt(-1)*t:t}const r=parseInt(e,n);return"-"===i?-1*r:r}function Mt(e,t,n){const{value:s}=e;if(It(s)){const e=s.toString(t);return s<0?"-"+n+e.substr(1):n+e}return rt(e)}const Tt={identify:It,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(e,t,n)=>$t(e,2,2,n),stringify:e=>Mt(e,2,"0b")},Lt={identify:It,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(e,t,n)=>$t(e,1,8,n),stringify:e=>Mt(e,8,"0")},Pt={identify:It,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(e,t,n)=>$t(e,0,10,n),stringify:rt},Dt={identify:It,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(e,t,n)=>$t(e,2,16,n),stringify:e=>Mt(e,16,"0x")};class Bt extends Qe{constructor(e){super(e),this.tag=Bt.tag}add(e){let t;t=R(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new He(e.key,null):new He(e,null);Je(this.items,t.key)||this.items.push(t)}get(e,t){const n=Je(this.items,e);return!t&&R(n)?W(n.key)?n.key.value:n.key:n}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);const n=Je(this.items,e);n&&!t?this.items.splice(this.items.indexOf(n),1):!n&&t&&this.items.push(new He(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,n){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,n);throw new Error("Set items must all have null values")}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t))for(let e of t)"function"==typeof s&&(e=s.call(t,e,e)),i.items.push(We(e,null,n));return i}}Bt.tag="tag:yaml.org,2002:set";const qt={collection:"map",identify:e=>e instanceof Set,nodeClass:Bt,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,n)=>Bt.from(e,t,n),resolve(e,t){if(F(e)){if(e.hasAllNullValues(!0))return Object.assign(new Bt,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};function Kt(e,t){const n=e[0],s="-"===n||"+"===n?e.substring(1):e,i=e=>t?BigInt(e):Number(e),r=s.replace(/_/g,"").split(":").reduce(((e,t)=>e*i(60)+i(t)),i(0));return"-"===n?i(-1)*r:r}function Ut(e){let{value:t}=e,n=e=>e;if("bigint"==typeof t)n=e=>BigInt(e);else if(isNaN(t)||!isFinite(t))return rt(e);let s="";t<0&&(s="-",t*=n(-1));const i=n(60),r=[t%i];return t<60?r.unshift(0):(t=(t-r[0])/i,r.unshift(t%i),t>=60&&(t=(t-r[0])/i,r.unshift(t))),s+r.map((e=>String(e).padStart(2,"0"))).join(":").replace(/000000\d*$/,"")}const Ft={identify:e=>"bigint"==typeof e||Number.isInteger(e),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(e,t,{intAsBigInt:n})=>Kt(e,n),stringify:Ut},Rt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:e=>Kt(e,!1),stringify:Ut},Wt={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(e){const t=e.match(Wt.test);if(!t)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");const[,n,s,i,r,o,a]=t.map(Number),c=t[7]?Number((t[7]+"00").substr(1,3)):0;let l=Date.UTC(n,s-1,i,r||0,o||0,a||0,c);const h=t[8];if(h&&"Z"!==h){let e=Kt(h,!1);Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e?.toISOString().replace(/(T00:00:00)?\.000Z$/,"")??""},Ht=[Xe,tt,nt,st,Nt,Ct,Tt,Lt,Pt,Dt,xt,jt,_t,vt,Ke,St,Ot,qt,Ft,Rt,Wt],Vt=new Map([["core",gt],["failsafe",[Xe,tt,nt]],["json",bt],["yaml11",Ht],["yaml-1.1",Ht]]),zt={binary:vt,bool:it,float:ct,floatExp:at,floatNaN:ot,floatTime:Rt,int:dt,intHex:pt,intOct:ft,intTime:Ft,map:Xe,merge:Ke,null:st,omap:St,pairs:Ot,seq:tt,set:qt,timestamp:Wt},Gt={"tag:yaml.org,2002:binary":vt,"tag:yaml.org,2002:merge":Ke,"tag:yaml.org,2002:omap":St,"tag:yaml.org,2002:pairs":Ot,"tag:yaml.org,2002:set":qt,"tag:yaml.org,2002:timestamp":Wt};function Yt(e,t,n){const s=Vt.get(t);if(s&&!e)return n&&!s.includes(Ke)?s.concat(Ke):s.slice();let i=s;if(!i){if(!Array.isArray(e)){const e=Array.from(Vt.keys()).filter((e=>"yaml11"!==e)).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown schema "${t}"; use one of ${e} or define customTags array`)}i=[]}if(Array.isArray(e))for(const t of e)i=i.concat(t);else"function"==typeof e&&(i=e(i.slice()));return n&&(i=i.concat(Ke)),i.reduce(((e,t)=>{const n="string"==typeof t?zt[t]:t;if(!n){const e=JSON.stringify(t),n=Object.keys(zt).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown custom tag ${e}; use one of ${n}`)}return e.includes(n)||e.push(n),e}),[])}const Jt=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class Qt{constructor({compat:e,customTags:t,merge:n,resolveKnownTags:s,schema:i,sortMapEntries:r,toStringDefaults:o}){this.compat=Array.isArray(e)?Yt(e,"compat"):e?Yt(null,e):null,this.name="string"==typeof i&&i||"core",this.knownTags=s?Gt:{},this.tags=Yt(t,this.name,n),this.toStringOptions=o??null,Object.defineProperty(this,L,{value:Xe}),Object.defineProperty(this,D,{value:nt}),Object.defineProperty(this,B,{value:tt}),this.sortMapEntries="function"==typeof r?r:!0===r?Jt:null}clone(){const e=Object.create(Qt.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}}class Xt{constructor(e,t,n){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,q,{value:T});let s=null;"function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t,t=void 0);const i=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},n);this.options=i;let{version:r}=i;n?._directives?(this.directives=n._directives.atDocument(),this.directives.yaml.explicit&&(r=this.directives.yaml.version)):this.directives=new re({version:r}),this.setSchema(r,n),this.contents=void 0===e?null:this.createNode(e,s,n)}clone(){const e=Object.create(Xt.prototype,{[q]:{value:T}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=z(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){Zt(this.contents)&&this.contents.add(e)}addIn(e,t){Zt(this.contents)&&this.contents.addIn(e,t)}createAlias(e,t){if(!e.anchor){const n=ae(this);e.anchor=!t||n.has(t)?ce(t||"a",n):t}return new fe(e.anchor)}createNode(e,t,n){let s;if("function"==typeof t)e=t.call({"":e},"",e),s=t;else if(Array.isArray(t)){const e=e=>"number"==typeof e||e instanceof String||e instanceof Number,n=t.filter(e).map(String);n.length>0&&(t=t.concat(n)),s=t}else void 0===n&&t&&(n=t,t=void 0);const{aliasDuplicateObjects:i,anchorPrefix:r,flow:o,keepUndefined:a,onTagObj:c,tag:l}=n??{},{onAnchor:h,setAnchors:u,sourceObjects:f}=function(e,t){const n=[],s=new Map;let i=null;return{onAnchor:s=>{n.push(s),i||(i=ae(e));const r=ce(t,i);return i.add(r),r},setAnchors:()=>{for(const e of n){const t=s.get(e);if("object"!=typeof t||!t.anchor||!W(t.node)&&!V(t.node)){const t=new Error("Failed to resolve repeated object (this should not happen)");throw t.source=e,t}t.node.anchor=t.anchor}},sourceObjects:s}}(this,r||"a"),d=me(e,l,{aliasDuplicateObjects:i??!0,keepUndefined:a??!1,onAnchor:h,onTagObj:c,replacer:s,schema:this.schema,sourceObjects:f});return o&&V(d)&&(d.flow=!0),u(),d}createPair(e,t,n={}){const s=this.createNode(e,null,n),i=this.createNode(t,null,n);return new He(s,i)}delete(e){return!!Zt(this.contents)&&this.contents.delete(e)}deleteIn(e){return be(e)?null!=this.contents&&(this.contents=null,!0):!!Zt(this.contents)&&this.contents.deleteIn(e)}get(e,t){return V(this.contents)?this.contents.get(e,t):void 0}getIn(e,t){return be(e)?!t&&W(this.contents)?this.contents.value:this.contents:V(this.contents)?this.contents.getIn(e,t):void 0}has(e){return!!V(this.contents)&&this.contents.has(e)}hasIn(e){return be(e)?void 0!==this.contents:!!V(this.contents)&&this.contents.hasIn(e)}set(e,t){null==this.contents?this.contents=ye(this.schema,[e],t):Zt(this.contents)&&this.contents.set(e,t)}setIn(e,t){be(e)?this.contents=t:null==this.contents?this.contents=ye(this.schema,Array.from(e),t):Zt(this.contents)&&this.contents.setIn(e,t)}setSchema(e,t={}){let n;switch("number"==typeof e&&(e=String(e)),e){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new re({version:"1.1"}),n={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=e:this.directives=new re({version:e}),n={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,n=null;break;default:{const t=JSON.stringify(e);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${t}`)}}if(t.schema instanceof Object)this.schema=t.schema;else{if(!n)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new Qt(Object.assign(n,t))}}toJS({json:e,jsonArg:t,mapAsMap:n,maxAliasCount:s,onAnchor:i,reviver:r}={}){const o={anchors:new Map,doc:this,keep:!e,mapAsMap:!0===n,mapKeyWarned:!1,maxAliasCount:"number"==typeof s?s:100},a=he(this.contents,t??"",o);if("function"==typeof i)for(const{count:e,res:t}of o.anchors.values())i(t,e);return"function"==typeof r?le(r,{"":a},"",a):a}toJSON(e,t){return this.toJS({json:!0,jsonArg:e,mapAsMap:!1,onAnchor:t})}toString(e={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in e&&(!Number.isInteger(e.indent)||Number(e.indent)<=0)){const t=JSON.stringify(e.indent);throw new Error(`"indent" option must be a positive integer, not ${t}`)}return function(e,t){const n=[];let s=!0===t.directives;if(!1!==t.directives&&e.directives){const t=e.directives.toString(e);t?(n.push(t),s=!0):e.directives.docStart&&(s=!0)}s&&n.push("---");const i=Pe(e,t),{commentString:r}=i.options;if(e.commentBefore){1!==n.length&&n.unshift("");const t=r(e.commentBefore);n.unshift(ke(t,""))}let o=!1,a=null;if(e.contents){if(z(e.contents)){if(e.contents.spaceBefore&&s&&n.push(""),e.contents.commentBefore){const t=r(e.contents.commentBefore);n.push(ke(t,""))}i.forceBlockIndent=!!e.comment,a=e.contents.comment}const t=a?void 0:()=>o=!0;let c=De(e.contents,i,(()=>a=null),t);a&&(c+=Oe(c,"",r(a))),"|"!==c[0]&&">"!==c[0]||"---"!==n[n.length-1]?n.push(c):n[n.length-1]=`--- ${c}`}else n.push(De(e.contents,i));if(e.directives?.docEnd)if(e.comment){const t=r(e.comment);t.includes("\n")?(n.push("..."),n.push(ke(t,""))):n.push(`... ${t}`)}else n.push("...");else{let t=e.comment;t&&o&&(t=t.replace(/^\n+/,"")),t&&(o&&!a||""===n[n.length-1]||n.push(""),n.push(ke(r(t),"")))}return n.join("\n")+"\n"}(this,e)}}function Zt(e){if(V(e))return!0;throw new Error("Expected a YAML collection as document contents")}class en extends Error{constructor(e,t,n,s){super(),this.name=e,this.code=n,this.message=s,this.pos=t}}class tn extends en{constructor(e,t,n){super("YAMLParseError",e,t,n)}}class nn extends en{constructor(e,t,n){super("YAMLWarning",e,t,n)}}const sn=(e,t)=>n=>{if(-1===n.pos[0])return;n.linePos=n.pos.map((e=>t.linePos(e)));const{line:s,col:i}=n.linePos[0];n.message+=` at line ${s}, column ${i}`;let r=i-1,o=e.substring(t.lineStarts[s-1],t.lineStarts[s]).replace(/[\n\r]+$/,"");if(r>=60&&o.length>80){const e=Math.min(r-39,o.length-79);o="…"+o.substring(e),r-=e-1}if(o.length>80&&(o=o.substring(0,79)+"…"),s>1&&/^ *$/.test(o.substring(0,r))){let n=e.substring(t.lineStarts[s-2],t.lineStarts[s-1]);n.length>80&&(n=n.substring(0,79)+"…\n"),o=n+o}if(/[^ ]/.test(o)){let e=1;const t=n.linePos[1];t&&t.line===s&&t.col>i&&(e=Math.max(1,Math.min(t.col-i,80-r)));const a=" ".repeat(r)+"^".repeat(e);n.message+=`:\n\n${o}\n${a}\n`}};function rn(e,{flow:t,indicator:n,next:s,offset:i,onError:r,parentIndent:o,startOnNewline:a}){let c=!1,l=a,h=a,u="",f="",d=!1,p=!1,g=null,m=null,y=null,b=null,v=null,w=null,k=null;for(const i of e)switch(p&&("space"!==i.type&&"newline"!==i.type&&"comma"!==i.type&&r(i.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),p=!1),g&&(l&&"comment"!==i.type&&"newline"!==i.type&&r(g,"TAB_AS_INDENT","Tabs are not allowed as indentation"),g=null),i.type){case"space":t||"doc-start"===n&&"flow-collection"===s?.type||!i.source.includes("\t")||(g=i),h=!0;break;case"comment":{h||r(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const e=i.source.substring(1)||" ";u?u+=f+e:u=e,f="",l=!1;break}case"newline":l?u?u+=i.source:w&&"seq-item-ind"===n||(c=!0):f+=i.source,l=!0,d=!0,(m||y)&&(b=i),h=!0;break;case"anchor":m&&r(i,"MULTIPLE_ANCHORS","A node can have at most one anchor"),i.source.endsWith(":")&&r(i.offset+i.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),m=i,null===k&&(k=i.offset),l=!1,h=!1,p=!0;break;case"tag":y&&r(i,"MULTIPLE_TAGS","A node can have at most one tag"),y=i,null===k&&(k=i.offset),l=!1,h=!1,p=!0;break;case n:(m||y)&&r(i,"BAD_PROP_ORDER",`Anchors and tags must be after the ${i.source} indicator`),w&&r(i,"UNEXPECTED_TOKEN",`Unexpected ${i.source} in ${t??"collection"}`),w=i,l="seq-item-ind"===n||"explicit-key-ind"===n,h=!1;break;case"comma":if(t){v&&r(i,"UNEXPECTED_TOKEN",`Unexpected , in ${t}`),v=i,l=!1,h=!1;break}default:r(i,"UNEXPECTED_TOKEN",`Unexpected ${i.type} token`),l=!1,h=!1}const O=e[e.length-1],E=O?O.offset+O.source.length:i;return p&&s&&"space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&("scalar"!==s.type||""!==s.source)&&r(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),g&&(l&&g.indent<=o||"block-map"===s?.type||"block-seq"===s?.type)&&r(g,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:v,found:w,spaceBefore:c,comment:u,hasNewline:d,anchor:m,tag:y,newlineAfterProp:b,end:E,start:k??E}}function on(e){if(!e)return null;switch(e.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(e.source.includes("\n"))return!0;if(e.end)for(const t of e.end)if("newline"===t.type)return!0;return!1;case"flow-collection":for(const t of e.items){for(const e of t.start)if("newline"===e.type)return!0;if(t.sep)for(const e of t.sep)if("newline"===e.type)return!0;if(on(t.key)||on(t.value))return!0}return!1;default:return!0}}function an(e,t,n){if("flow-collection"===t?.type){const s=t.end[0];if(s.indent===e&&("]"===s.source||"}"===s.source)&&on(t)){n(s,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}}}function cn(e,t,n){const{uniqueKeys:s}=e.options;if(!1===s)return!1;const i="function"==typeof s?s:(e,t)=>e===t||W(e)&&W(t)&&e.value===t.value;return t.some((e=>i(e.key,n)))}const ln="All mapping items must start at the same column";function hn(e,t,n,s){let i="";if(e){let r=!1,o="";for(const a of e){const{source:e,type:c}=a;switch(c){case"space":r=!0;break;case"comment":{n&&!r&&s(a,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const t=e.substring(1)||" ";i?i+=o+t:i=t,o="";break}case"newline":i&&(o+=e),r=!0;break;default:s(a,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`)}t+=e.length}}return{comment:i,offset:t}}const un="Block collections are not allowed within flow collections",fn=e=>e&&("block-map"===e.type||"block-seq"===e.type);function dn(e,t,n,s,i,r){const o="block-map"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,r){const o=new(r?.nodeClass??Qe)(n.schema);n.atRoot&&(n.atRoot=!1);let a=s.offset,c=null;for(const r of s.items){const{start:l,key:h,sep:u,value:f}=r,d=rn(l,{indicator:"explicit-key-ind",next:h??u?.[0],offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0}),p=!d.found;if(p){if(h&&("block-seq"===h.type?i(a,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in h&&h.indent!==s.indent&&i(a,"BAD_INDENT",ln)),!d.anchor&&!d.tag&&!u){c=d.end,d.comment&&(o.comment?o.comment+="\n"+d.comment:o.comment=d.comment);continue}(d.newlineAfterProp||on(h))&&i(h??l[l.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else d.found?.indent!==s.indent&&i(a,"BAD_INDENT",ln);n.atKey=!0;const g=d.end,m=h?e(n,h,d,i):t(n,g,l,null,d,i);n.schema.compat&&an(s.indent,h,i),n.atKey=!1,cn(n,o.items,m)&&i(g,"DUPLICATE_KEY","Map keys must be unique");const y=rn(u??[],{indicator:"map-value-ind",next:f,offset:m.range[2],onError:i,parentIndent:s.indent,startOnNewline:!h||"block-scalar"===h.type});if(a=y.end,y.found){p&&("block-map"!==f?.type||y.hasNewline||i(a,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),n.options.strict&&d.start<y.found.offset-1024&&i(m.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));const c=f?e(n,f,y,i):t(n,a,u,null,y,i);n.schema.compat&&an(s.indent,f,i),a=c.range[2];const l=new He(m,c);n.options.keepSourceTokens&&(l.srcToken=r),o.items.push(l)}else{p&&i(m.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),y.comment&&(m.comment?m.comment+="\n"+y.comment:m.comment=y.comment);const e=new He(m);n.options.keepSourceTokens&&(e.srcToken=r),o.items.push(e)}}return c&&c<a&&i(c,"IMPOSSIBLE","Map comment with trailing content"),o.range=[s.offset,a,c??a],o}(e,t,n,s,r):"block-seq"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,r){const o=new(r?.nodeClass??Ze)(n.schema);n.atRoot&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let a=s.offset,c=null;for(const{start:r,value:l}of s.items){const h=rn(r,{indicator:"seq-item-ind",next:l,offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0});if(!h.found){if(!(h.anchor||h.tag||l)){c=h.end,h.comment&&(o.comment=h.comment);continue}l&&"block-seq"===l.type?i(h.end,"BAD_INDENT","All sequence items must start at the same column"):i(a,"MISSING_CHAR","Sequence item without - indicator")}const u=l?e(n,l,h,i):t(n,h.end,r,null,h,i);n.schema.compat&&an(s.indent,l,i),a=u.range[2],o.items.push(u)}return o.range=[s.offset,a,c??a],o}(e,t,n,s,r):function({composeNode:e,composeEmptyNode:t},n,s,i,r){const o="{"===s.start.source,a=o?"flow map":"flow sequence",c=new(r?.nodeClass??(o?Qe:Ze))(n.schema);c.flow=!0;const l=n.atRoot;l&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let h=s.offset+s.start.source.length;for(let r=0;r<s.items.length;++r){const l=s.items[r],{start:u,key:f,sep:d,value:p}=l,g=rn(u,{flow:a,indicator:"explicit-key-ind",next:f??d?.[0],offset:h,onError:i,parentIndent:s.indent,startOnNewline:!1});if(!g.found){if(!(g.anchor||g.tag||d||p)){0===r&&g.comma?i(g.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`):r<s.items.length-1&&i(g.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${a}`),g.comment&&(c.comment?c.comment+="\n"+g.comment:c.comment=g.comment),h=g.end;continue}!o&&n.options.strict&&on(f)&&i(f,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===r)g.comma&&i(g.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`);else if(g.comma||i(g.start,"MISSING_CHAR",`Missing , between ${a} items`),g.comment){let e="";e:for(const t of u)switch(t.type){case"comma":case"space":break;case"comment":e=t.source.substring(1);break e;default:break e}if(e){let t=c.items[c.items.length-1];R(t)&&(t=t.value??t.key),t.comment?t.comment+="\n"+e:t.comment=e,g.comment=g.comment.substring(e.length+1)}}if(o||d||g.found){n.atKey=!0;const r=g.end,m=f?e(n,f,g,i):t(n,r,u,null,g,i);fn(f)&&i(m.range,"BLOCK_IN_FLOW",un),n.atKey=!1;const y=rn(d??[],{flow:a,indicator:"map-value-ind",next:p,offset:m.range[2],onError:i,parentIndent:s.indent,startOnNewline:!1});if(y.found){if(!o&&!g.found&&n.options.strict){if(d)for(const e of d){if(e===y.found)break;if("newline"===e.type){i(e,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}g.start<y.found.offset-1024&&i(y.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else p&&("source"in p&&p.source&&":"===p.source[0]?i(p,"MISSING_CHAR",`Missing space after : in ${a}`):i(y.start,"MISSING_CHAR",`Missing , or : between ${a} items`));const b=p?e(n,p,y,i):y.found?t(n,y.end,d,null,y,i):null;b?fn(p)&&i(b.range,"BLOCK_IN_FLOW",un):y.comment&&(m.comment?m.comment+="\n"+y.comment:m.comment=y.comment);const v=new He(m,b);if(n.options.keepSourceTokens&&(v.srcToken=l),o){const e=c;cn(n,e.items,m)&&i(r,"DUPLICATE_KEY","Map keys must be unique"),e.items.push(v)}else{const e=new Qe(n.schema);e.flow=!0,e.items.push(v);const t=(b??m).range;e.range=[m.range[0],t[1],t[2]],c.items.push(e)}h=b?b.range[2]:y.end}else{const s=p?e(n,p,g,i):t(n,g.end,d,null,g,i);c.items.push(s),h=s.range[2],fn(p)&&i(s.range,"BLOCK_IN_FLOW",un)}}const u=o?"}":"]",[f,...d]=s.end;let p=h;if(f&&f.source===u)p=f.offset+f.source.length;else{const e=a[0].toUpperCase()+a.substring(1);i(h,l?"MISSING_CHAR":"BAD_INDENT",l?`${e} must end with a ${u}`:`${e} in block collection must be sufficiently indented and end with a ${u}`),f&&1!==f.source.length&&d.unshift(f)}if(d.length>0){const e=hn(d,p,n.options.strict,i);e.comment&&(c.comment?c.comment+="\n"+e.comment:c.comment=e.comment),c.range=[s.offset,p,e.offset]}else c.range=[s.offset,p,p];return c}(e,t,n,s,r),a=o.constructor;return"!"===i||i===a.tagName?(o.tag=a.tagName,o):(i&&(o.tag=i),o)}function pn(e,t,n){const s=t.offset,i=function({offset:e,props:t},n,s){if("block-scalar-header"!==t[0].type)return s(t[0],"IMPOSSIBLE","Block scalar header not found"),null;const{source:i}=t[0],r=i[0];let o=0,a="",c=-1;for(let t=1;t<i.length;++t){const n=i[t];if(a||"-"!==n&&"+"!==n){const s=Number(n);!o&&s?o=s:-1===c&&(c=e+t)}else a=n}-1!==c&&s(c,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${i}`);let l=!1,h="",u=i.length;for(let e=1;e<t.length;++e){const i=t[e];switch(i.type){case"space":l=!0;case"newline":u+=i.source.length;break;case"comment":if(n&&!l){s(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters")}u+=i.source.length,h=i.source.substring(1);break;case"error":s(i,"UNEXPECTED_TOKEN",i.message),u+=i.source.length;break;default:{s(i,"UNEXPECTED_TOKEN",`Unexpected token in block scalar header: ${i.type}`);const e=i.source;e&&"string"==typeof e&&(u+=e.length)}}}return{mode:r,indent:o,chomp:a,comment:h,length:u}}(t,e.options.strict,n);if(!i)return{value:"",type:null,comment:"",range:[s,s,s]};const r=">"===i.mode?ge.BLOCK_FOLDED:ge.BLOCK_LITERAL,o=t.source?function(e){const t=e.split(/\n( *)/),n=t[0],s=n.match(/^( *)/),i=[s?.[1]?[s[1],n.slice(s[1].length)]:["",n]];for(let e=1;e<t.length;e+=2)i.push([t[e],t[e+1]]);return i}(t.source):[];let a=o.length;for(let e=o.length-1;e>=0;--e){const t=o[e][1];if(""!==t&&"\r"!==t)break;a=e}if(0===a){const e="+"===i.chomp&&o.length>0?"\n".repeat(Math.max(1,o.length-1)):"";let n=s+i.length;return t.source&&(n+=t.source.length),{value:e,type:r,comment:i.comment,range:[s,n,n]}}let c=t.indent+i.indent,l=t.offset+i.length,h=0;for(let t=0;t<a;++t){const[s,r]=o[t];if(""!==r&&"\r"!==r){if(s.length<c){const e="Block scalars with more-indented leading empty lines must use an explicit indentation indicator";n(l+s.length,"MISSING_CHAR",e)}if(0===i.indent&&(c=s.length),h=t,0===c&&!e.atRoot){n(l,"BAD_INDENT","Block scalar values in collections must be indented")}break}0===i.indent&&s.length>c&&(c=s.length),l+=s.length+r.length+1}for(let e=o.length-1;e>=a;--e)o[e][0].length>c&&(a=e+1);let u="",f="",d=!1;for(let e=0;e<h;++e)u+=o[e][0].slice(c)+"\n";for(let e=h;e<a;++e){let[t,s]=o[e];l+=t.length+s.length+1;const a="\r"===s[s.length-1];if(a&&(s=s.slice(0,-1)),s&&t.length<c){const e=`Block scalar lines must not be less indented than their ${i.indent?"explicit indentation indicator":"first line"}`;n(l-s.length-(a?2:1),"BAD_INDENT",e),t=""}r===ge.BLOCK_LITERAL?(u+=f+t.slice(c)+s,f="\n"):t.length>c||"\t"===s[0]?(" "===f?f="\n":d||"\n"!==f||(f="\n\n"),u+=f+t.slice(c)+s,f="\n",d=!0):""===s?"\n"===f?u+="\n":f="\n":(u+=f+s,f=" ",d=!1)}switch(i.chomp){case"-":break;case"+":for(let e=a;e<o.length;++e)u+="\n"+o[e][0].slice(c);"\n"!==u[u.length-1]&&(u+="\n");break;default:u+="\n"}const p=s+i.length+t.source.length;return{value:u,type:r,comment:i.comment,range:[s,p,p]}}function gn(e,t,n){const{offset:s,type:i,source:r,end:o}=e;let a,c;const l=(e,t,i)=>n(s+e,t,i);switch(i){case"scalar":a=ge.PLAIN,c=function(e,t){let n="";switch(e[0]){case"\t":n="a tab character";break;case",":n="flow indicator character ,";break;case"%":n="directive indicator character %";break;case"|":case">":n=`block scalar indicator ${e[0]}`;break;case"@":case"`":n=`reserved character ${e[0]}`}n&&t(0,"BAD_SCALAR_START",`Plain value cannot start with ${n}`);return mn(e)}(r,l);break;case"single-quoted-scalar":a=ge.QUOTE_SINGLE,c=function(e,t){"'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote");return mn(e.slice(1,-1)).replace(/''/g,"'")}(r,l);break;case"double-quoted-scalar":a=ge.QUOTE_DOUBLE,c=function(e,t){let n="";for(let s=1;s<e.length-1;++s){const i=e[s];if("\r"!==i||"\n"!==e[s+1])if("\n"===i){const{fold:t,offset:i}=yn(e,s);n+=t,s=i}else if("\\"===i){let i=e[++s];const r=bn[i];if(r)n+=r;else if("\n"===i)for(i=e[s+1];" "===i||"\t"===i;)i=e[1+ ++s];else if("\r"===i&&"\n"===e[s+1])for(i=e[1+ ++s];" "===i||"\t"===i;)i=e[1+ ++s];else if("x"===i||"u"===i||"U"===i){const r={x:2,u:4,U:8}[i];n+=vn(e,s+1,r,t),s+=r}else{const i=e.substr(s-1,2);t(s-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),n+=i}}else if(" "===i||"\t"===i){const t=s;let r=e[s+1];for(;" "===r||"\t"===r;)r=e[1+ ++s];"\n"===r||"\r"===r&&"\n"===e[s+2]||(n+=s>t?e.slice(t,s+1):i)}else n+=i}'"'===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR",'Missing closing "quote');return n}(r,l);break;default:return n(e,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${i}`),{value:"",type:null,comment:"",range:[s,s+r.length,s+r.length]}}const h=s+r.length,u=hn(o,h,t,n);return{value:c,type:a,comment:u.comment,range:[s,h,u.offset]}}function mn(e){let t,n;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),n=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,n=/[ \t]*(.*?)[ \t]*\r?\n/sy}let s=t.exec(e);if(!s)return e;let i=s[1],r=" ",o=t.lastIndex;for(n.lastIndex=o;s=n.exec(e);)""===s[1]?"\n"===r?i+=r:r="\n":(i+=r+s[1],r=" "),o=n.lastIndex;const a=/[ \t]*(.*)/sy;return a.lastIndex=o,s=a.exec(e),i+r+(s?.[1]??"")}function yn(e,t){let n="",s=e[t+1];for(;!(" "!==s&&"\t"!==s&&"\n"!==s&&"\r"!==s||"\r"===s&&"\n"!==e[t+2]);)"\n"===s&&(n+="\n"),s=e[(t+=1)+1];return n||(n=" "),{fold:n,offset:t}}const bn={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"",_:" ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function vn(e,t,n,s){const i=e.substr(t,n),r=i.length===n&&/^[0-9a-fA-F]+$/.test(i)?parseInt(i,16):NaN;if(isNaN(r)){const i=e.substr(t-2,n+2);return s(t-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),i}return String.fromCodePoint(r)}function wn(e,t,n,s){const{value:i,type:r,comment:o,range:a}="block-scalar"===t.type?pn(e,t,s):gn(t,e.options.strict,s),c=n?e.directives.tagName(n.source,(e=>s(n,"TAG_RESOLVE_FAILED",e))):null;let l,h;l=e.options.stringKeys&&e.atKey?e.schema[D]:c?function(e,t,n,s,i){if("!"===n)return e[D];const r=[];for(const t of e.tags)if(!t.collection&&t.tag===n){if(!t.default||!t.test)return t;r.push(t)}for(const e of r)if(e.test?.test(t))return e;const o=e.knownTags[n];if(o&&!o.collection)return e.tags.push(Object.assign({},o,{default:!1,test:void 0})),o;return i(s,"TAG_RESOLVE_FAILED",`Unresolved tag: ${n}`,"tag:yaml.org,2002:str"!==n),e[D]}(e.schema,i,c,n,s):"scalar"===t.type?function({atKey:e,directives:t,schema:n},s,i,r){const o=n.tags.find((t=>(!0===t.default||e&&"key"===t.default)&&t.test?.test(s)))||n[D];if(n.compat){const e=n.compat.find((e=>e.default&&e.test?.test(s)))??n[D];if(o.tag!==e.tag){r(i,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${t.tagString(o.tag)} or ${t.tagString(e.tag)}`,!0)}}return o}(e,i,t,s):e.schema[D];try{const r=l.resolve(i,(e=>s(n??t,"TAG_RESOLVE_FAILED",e)),e.options);h=W(r)?r:new ge(r)}catch(e){const r=e instanceof Error?e.message:String(e);s(n??t,"TAG_RESOLVE_FAILED",r),h=new ge(i)}return h.range=a,h.source=i,r&&(h.type=r),c&&(h.tag=c),l.format&&(h.format=l.format),o&&(h.comment=o),h}function kn(e,t,n){if(t){null===n&&(n=t.length);for(let s=n-1;s>=0;--s){let n=t[s];switch(n.type){case"space":case"comment":case"newline":e-=n.source.length;continue}for(n=t[++s];"space"===n?.type;)e+=n.source.length,n=t[++s];break}}return e}const On={composeNode:En,composeEmptyNode:Sn};function En(e,t,n,s){const i=e.atKey,{spaceBefore:r,comment:o,anchor:a,tag:c}=n;let l,h=!0;switch(t.type){case"alias":l=function({options:e},{offset:t,source:n,end:s},i){const r=new fe(n.substring(1));""===r.source&&i(t,"BAD_ALIAS","Alias cannot be an empty string");r.source.endsWith(":")&&i(t+n.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0);const o=t+n.length,a=hn(s,o,e.strict,i);r.range=[t,o,a.offset],a.comment&&(r.comment=a.comment);return r}(e,t,s),(a||c)&&s(t,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":l=wn(e,t,c,s),a&&(l.anchor=a.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":l=function(e,t,n,s,i){const r=s.tag,o=r?t.directives.tagName(r.source,(e=>i(r,"TAG_RESOLVE_FAILED",e))):null;if("block-seq"===n.type){const{anchor:e,newlineAfterProp:t}=s,n=e&&r?e.offset>r.offset?e:r:e??r;n&&(!t||t.offset<n.offset)&&i(n,"MISSING_CHAR","Missing newline after block sequence props")}const a="block-map"===n.type?"map":"block-seq"===n.type?"seq":"{"===n.start.source?"map":"seq";if(!r||!o||"!"===o||o===Qe.tagName&&"map"===a||o===Ze.tagName&&"seq"===a)return dn(e,t,n,i,o);let c=t.schema.tags.find((e=>e.tag===o&&e.collection===a));if(!c){const s=t.schema.knownTags[o];if(!s||s.collection!==a)return s?i(r,"BAD_COLLECTION_TYPE",`${s.tag} used for ${a} collection, but expects ${s.collection??"scalar"}`,!0):i(r,"TAG_RESOLVE_FAILED",`Unresolved tag: ${o}`,!0),dn(e,t,n,i,o);t.schema.tags.push(Object.assign({},s,{default:!1})),c=s}const l=dn(e,t,n,i,o,c),h=c.resolve?.(l,(e=>i(r,"TAG_RESOLVE_FAILED",e)),t.options)??l,u=z(h)?h:new ge(h);return u.range=l.range,u.tag=o,c?.format&&(u.format=c.format),u}(On,e,t,n,s),a&&(l.anchor=a.source.substring(1));break;default:s(t,"UNEXPECTED_TOKEN","error"===t.type?t.message:`Unsupported token (type: ${t.type})`),l=Sn(e,t.offset,void 0,null,n,s),h=!1}if(a&&""===l.anchor&&s(a,"BAD_ALIAS","Anchor cannot be an empty string"),i&&e.options.stringKeys&&(!W(l)||"string"!=typeof l.value||l.tag&&"tag:yaml.org,2002:str"!==l.tag)){s(c??t,"NON_STRING_KEY","With stringKeys, all keys must be strings")}return r&&(l.spaceBefore=!0),o&&("scalar"===t.type&&""===t.source?l.comment=o:l.commentBefore=o),e.options.keepSourceTokens&&h&&(l.srcToken=t),l}function Sn(e,t,n,s,{spaceBefore:i,comment:r,anchor:o,tag:a,end:c},l){const h=wn(e,{type:"scalar",offset:kn(t,n,s),indent:-1,source:""},a,l);return o&&(h.anchor=o.source.substring(1),""===h.anchor&&l(o,"BAD_ALIAS","Anchor cannot be an empty string")),i&&(h.spaceBefore=!0),r&&(h.comment=r,h.range[2]=c),h}function An(e){if("number"==typeof e)return[e,e+1];if(Array.isArray(e))return 2===e.length?e:[e[0],e[1]];const{offset:t,source:n}=e;return[t,t+("string"==typeof n?n.length:1)]}function Nn(e){let t="",n=!1,s=!1;for(let i=0;i<e.length;++i){const r=e[i];switch(r[0]){case"#":t+=(""===t?"":s?"\n\n":"\n")+(r.substring(1)||" "),n=!0,s=!1;break;case"%":"#"!==e[i+1]?.[0]&&(i+=1),n=!1;break;default:n||(s=!0),n=!1}}return{comment:t,afterEmptyLine:s}}class Cn{constructor(e={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(e,t,n,s)=>{const i=An(e);s?this.warnings.push(new nn(i,t,n)):this.errors.push(new tn(i,t,n))},this.directives=new re({version:e.version||"1.2"}),this.options=e}decorate(e,t){const{comment:n,afterEmptyLine:s}=Nn(this.prelude);if(n){const i=e.contents;if(t)e.comment=e.comment?`${e.comment}\n${n}`:n;else if(s||e.directives.docStart||!i)e.commentBefore=n;else if(V(i)&&!i.flow&&i.items.length>0){let e=i.items[0];R(e)&&(e=e.key);const t=e.commentBefore;e.commentBefore=t?`${n}\n${t}`:n}else{const e=i.commentBefore;i.commentBefore=e?`${n}\n${e}`:n}}t?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:Nn(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,t=!1,n=-1){for(const t of e)yield*this.next(t);yield*this.end(t,n)}*next(e){switch(e.type){case"directive":this.directives.add(e.source,((t,n,s)=>{const i=An(e);i[0]+=t,this.onError(i,"BAD_DIRECTIVE",n,s)})),this.prelude.push(e.source),this.atDirectives=!0;break;case"document":{const t=function(e,t,{offset:n,start:s,value:i,end:r},o){const a=Object.assign({_directives:t},e),c=new Xt(void 0,a),l={atKey:!1,atRoot:!0,directives:c.directives,options:c.options,schema:c.schema},h=rn(s,{indicator:"doc-start",next:i??r?.[0],offset:n,onError:o,parentIndent:0,startOnNewline:!0});h.found&&(c.directives.docStart=!0,!i||"block-map"!==i.type&&"block-seq"!==i.type||h.hasNewline||o(h.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),c.contents=i?En(l,i,h,o):Sn(l,h.end,s,null,h,o);const u=c.contents.range[2],f=hn(r,u,!1,o);return f.comment&&(c.comment=f.comment),c.range=[n,u,f.offset],c}(this.options,this.directives,e,this.onError);this.atDirectives&&!t.directives.docStart&&this.onError(e,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(t,!1),this.doc&&(yield this.doc),this.doc=t,this.atDirectives=!1;break}case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(e.source);break;case"error":{const t=e.source?`${e.message}: ${JSON.stringify(e.source)}`:e.message,n=new tn(An(e),"UNEXPECTED_TOKEN",t);this.atDirectives||!this.doc?this.errors.push(n):this.doc.errors.push(n);break}case"doc-end":{if(!this.doc){const t="Unexpected doc-end without preceding document";this.errors.push(new tn(An(e),"UNEXPECTED_TOKEN",t));break}this.doc.directives.docEnd=!0;const t=hn(e.end,e.offset+e.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,!0),t.comment){const e=this.doc.comment;this.doc.comment=e?`${e}\n${t.comment}`:t.comment}this.doc.range[2]=t.offset;break}default:this.errors.push(new tn(An(e),"UNEXPECTED_TOKEN",`Unsupported token ${e.type}`))}}*end(e=!1,t=-1){if(this.doc)this.decorate(this.doc,!0),yield this.doc,this.doc=null;else if(e){const e=Object.assign({_directives:this.directives},this.options),n=new Xt(void 0,e);this.atDirectives&&this.onError(t,"MISSING_CHAR","Missing directives-end indicator line"),n.range=[0,t,t],this.decorate(n,!1),yield n}}}function xn(e,t){if(t)for(const n of t)switch(n.type){case"space":case"comment":e.push(n);break;case"newline":return e.push(n),!0}return!1}function jn(e,t,n){switch(e.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":e.type=n,e.source=t;break;case"block-scalar":{const s=e.props.slice(1);let i=t.length;"block-scalar-header"===e.props[0].type&&(i-=e.props[0].source.length);for(const e of s)e.offset+=i;delete e.props,Object.assign(e,{type:n,source:t,end:s});break}case"block-map":case"block-seq":{const s={type:"newline",offset:e.offset+t.length,indent:e.indent,source:"\n"};delete e.items,Object.assign(e,{type:n,source:t,end:[s]});break}default:{const s="indent"in e?e.indent:-1,i="end"in e&&Array.isArray(e.end)?e.end.filter((e=>"space"===e.type||"comment"===e.type||"newline"===e.type)):[];for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:n,indent:s,source:t,end:i})}}}function _n(e){switch(e.type){case"block-scalar":{let t="";for(const n of e.props)t+=_n(n);return t+e.source}case"block-map":case"block-seq":{let t="";for(const n of e.items)t+=In(n);return t}case"flow-collection":{let t=e.start.source;for(const n of e.items)t+=In(n);for(const n of e.end)t+=n.source;return t}case"document":{let t=In(e);if(e.end)for(const n of e.end)t+=n.source;return t}default:{let t=e.source;if("end"in e&&e.end)for(const n of e.end)t+=n.source;return t}}}function In({start:e,key:t,sep:n,value:s}){let i="";for(const t of e)i+=t.source;if(t&&(i+=_n(t)),n)for(const e of n)i+=e.source;return s&&(i+=_n(s)),i}const $n=Symbol("break visit"),Mn=Symbol("skip children"),Tn=Symbol("remove item");function Ln(e,t){"type"in e&&"document"===e.type&&(e={start:e.start,value:e.value}),Pn(Object.freeze([]),e,t)}function Pn(e,t,n){let s=n(t,e);if("symbol"==typeof s)return s;for(const i of["key","value"]){const r=t[i];if(r&&"items"in r){for(let t=0;t<r.items.length;++t){const s=Pn(Object.freeze(e.concat([[i,t]])),r.items[t],n);if("number"==typeof s)t=s-1;else{if(s===$n)return $n;s===Tn&&(r.items.splice(t,1),t-=1)}}"function"==typeof s&&"key"===i&&(s=s(t,e))}}return"function"==typeof s?s(t,e):s}Ln.BREAK=$n,Ln.SKIP=Mn,Ln.REMOVE=Tn,Ln.itemAtPath=(e,t)=>{let n=e;for(const[e,s]of t){const t=n?.[e];if(!t||!("items"in t))return;n=t.items[s]}return n},Ln.parentCollection=(e,t)=>{const n=Ln.itemAtPath(e,t.slice(0,-1)),s=t[t.length-1][0],i=n?.[s];if(i&&"items"in i)return i;throw new Error("Parent collection not found")};const Dn="\ufeff",Bn="",qn="",Kn="";function Un(e){switch(e){case Dn:return"byte-order-mark";case Bn:return"doc-mode";case qn:return"flow-error-end";case Kn:return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(e[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}var Fn=Object.freeze({__proto__:null,BOM:Dn,DOCUMENT:Bn,FLOW_END:qn,SCALAR:Kn,createScalarToken:function(e,t){const{implicitKey:n=!1,indent:s,inFlow:i=!1,offset:r=-1,type:o="PLAIN"}=t,a=Le({type:o,value:e},{implicitKey:n,indent:s>0?" ".repeat(s):"",inFlow:i,options:{blockQuote:!0,lineWidth:-1}}),c=t.end??[{type:"newline",offset:-1,indent:s,source:"\n"}];switch(a[0]){case"|":case">":{const e=a.indexOf("\n"),t=a.substring(0,e),n=a.substring(e+1)+"\n",i=[{type:"block-scalar-header",offset:r,indent:s,source:t}];return xn(i,c)||i.push({type:"newline",offset:-1,indent:s,source:"\n"}),{type:"block-scalar",offset:r,indent:s,props:i,source:n}}case'"':return{type:"double-quoted-scalar",offset:r,indent:s,source:a,end:c};case"'":return{type:"single-quoted-scalar",offset:r,indent:s,source:a,end:c};default:return{type:"scalar",offset:r,indent:s,source:a,end:c}}},isCollection:e=>!!e&&"items"in e,isScalar:e=>!!e&&("scalar"===e.type||"single-quoted-scalar"===e.type||"double-quoted-scalar"===e.type||"block-scalar"===e.type),prettyToken:function(e){switch(e){case Dn:return"<BOM>";case Bn:return"<DOC>";case qn:return"<FLOW_END>";case Kn:return"<SCALAR>";default:return JSON.stringify(e)}},resolveAsScalar:function(e,t=!0,n){if(e){const s=(e,t,s)=>{const i="number"==typeof e?e:Array.isArray(e)?e[0]:e.offset;if(!n)throw new tn([i,i+1],t,s);n(i,t,s)};switch(e.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return gn(e,t,s);case"block-scalar":return pn({options:{strict:t}},e,s)}}return null},setScalarValue:function(e,t,n={}){let{afterKey:s=!1,implicitKey:i=!1,inFlow:r=!1,type:o}=n,a="indent"in e?e.indent:null;if(s&&"number"==typeof a&&(a+=2),!o)switch(e.type){case"single-quoted-scalar":o="QUOTE_SINGLE";break;case"double-quoted-scalar":o="QUOTE_DOUBLE";break;case"block-scalar":{const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");o=">"===t.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:o="PLAIN"}const c=Le({type:o,value:t},{implicitKey:i||null===a,indent:null!==a&&a>0?" ".repeat(a):"",inFlow:r,options:{blockQuote:!0,lineWidth:-1}});switch(c[0]){case"|":case">":!function(e,t){const n=t.indexOf("\n"),s=t.substring(0,n),i=t.substring(n+1)+"\n";if("block-scalar"===e.type){const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");t.source=s,e.source=i}else{const{offset:t}=e,n="indent"in e?e.indent:-1,r=[{type:"block-scalar-header",offset:t,indent:n,source:s}];xn(r,"end"in e?e.end:void 0)||r.push({type:"newline",offset:-1,indent:n,source:"\n"});for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:"block-scalar",indent:n,props:r,source:i})}}(e,c);break;case'"':jn(e,c,"double-quoted-scalar");break;case"'":jn(e,c,"single-quoted-scalar");break;default:jn(e,c,"scalar")}},stringify:e=>"type"in e?_n(e):In(e),tokenType:Un,visit:Ln});function Rn(e){switch(e){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}const Wn=new Set("0123456789ABCDEFabcdef"),Hn=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),Vn=new Set(",[]{}"),zn=new Set(" ,[]{}\n\r\t"),Gn=e=>!e||zn.has(e);class Yn{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(e,t=!1){if(e){if("string"!=typeof e)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null}this.atEnd=!t;let n=this.next??"stream";for(;n&&(t||this.hasChars(1));)n=yield*this.parseNext(n)}atLineEnd(){let e=this.pos,t=this.buffer[e];for(;" "===t||"\t"===t;)t=this.buffer[++e];return!t||"#"===t||"\n"===t||"\r"===t&&"\n"===this.buffer[e+1]}charAt(e){return this.buffer[this.pos+e]}continueScalar(e){let t=this.buffer[e];if(this.indentNext>0){let n=0;for(;" "===t;)t=this.buffer[++n+e];if("\r"===t){const t=this.buffer[n+e+1];if("\n"===t||!t&&!this.atEnd)return e+n+1}return"\n"===t||n>=this.indentNext||!t&&!this.atEnd?e+n:-1}if("-"===t||"."===t){const t=this.buffer.substr(e,3);if(("---"===t||"..."===t)&&Rn(this.buffer[e+3]))return-1}return e}getLine(){let e=this.lineEndPos;return("number"!=typeof e||-1!==e&&e<this.pos)&&(e=this.buffer.indexOf("\n",this.pos),this.lineEndPos=e),-1===e?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[e-1]&&(e-=1),this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let e=this.getLine();if(null===e)return this.setNext("stream");if(e[0]===Dn&&(yield*this.pushCount(1),e=e.substring(1)),"%"===e[0]){let t=e.length,n=e.indexOf("#");for(;-1!==n;){const s=e[n-1];if(" "===s||"\t"===s){t=n-1;break}n=e.indexOf("#",n+1)}for(;;){const n=e[t-1];if(" "!==n&&"\t"!==n)break;t-=1}const s=(yield*this.pushCount(t))+(yield*this.pushSpaces(!0));return yield*this.pushCount(e.length-s),this.pushNewline(),"stream"}if(this.atLineEnd()){const t=yield*this.pushSpaces(!0);return yield*this.pushCount(e.length-t),yield*this.pushNewline(),"stream"}return yield Bn,yield*this.parseLineStart()}*parseLineStart(){const e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if("-"===e||"."===e){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");const e=this.peek(3);if(("---"===e||"..."===e)&&Rn(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===e?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!Rn(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){const[e,t]=this.peek(2);if(!t&&!this.atEnd)return this.setNext("block-start");if(("-"===e||"?"===e||":"===e)&&Rn(t)){const e=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0));return this.indentNext=this.indentValue+1,this.indentValue+=e,yield*this.parseBlockStart()}return"doc"}*parseDocument(){yield*this.pushSpaces(!0);const e=this.getLine();if(null===e)return this.setNext("doc");let t=yield*this.pushIndicators();switch(e[t]){case"#":yield*this.pushCount(e.length-t);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(Gn),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return t+=(yield*this.parseBlockScalarHeader()),t+=(yield*this.pushSpaces(!0)),yield*this.pushCount(e.length-t),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,t,n=-1;do{e=yield*this.pushNewline(),e>0?(t=yield*this.pushSpaces(!1),this.indentValue=n=t):t=0,t+=(yield*this.pushSpaces(!0))}while(e+t>0);const s=this.getLine();if(null===s)return this.setNext("flow");if(-1!==n&&n<this.indentNext&&"#"!==s[0]||0===n&&(s.startsWith("---")||s.startsWith("..."))&&Rn(s[3])){if(!(n===this.indentNext-1&&1===this.flowLevel&&("]"===s[0]||"}"===s[0])))return this.flowLevel=0,yield qn,yield*this.parseLineStart()}let i=0;for(;","===s[i];)i+=(yield*this.pushCount(1)),i+=(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(i+=(yield*this.pushIndicators()),s[i]){case void 0:return"flow";case"#":return yield*this.pushCount(s.length-i),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,this.flowLevel-=1,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(Gn),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":{const e=this.charAt(1);if(this.flowKey||Rn(e)||","===e)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow"}default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){const e=this.charAt(0);let t=this.buffer.indexOf(e,this.pos+1);if("'"===e)for(;-1!==t&&"'"===this.buffer[t+1];)t=this.buffer.indexOf("'",t+2);else for(;-1!==t;){let e=0;for(;"\\"===this.buffer[t-1-e];)e+=1;if(e%2==0)break;t=this.buffer.indexOf('"',t+1)}const n=this.buffer.substring(0,t);let s=n.indexOf("\n",this.pos);if(-1!==s){for(;-1!==s;){const e=this.continueScalar(s+1);if(-1===e)break;s=n.indexOf("\n",e)}-1!==s&&(t=s-("\r"===n[s-1]?2:1))}if(-1===t){if(!this.atEnd)return this.setNext("quoted-scalar");t=this.buffer.length}return yield*this.pushToIndex(t+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let e=this.pos;for(;;){const t=this.buffer[++e];if("+"===t)this.blockScalarKeep=!0;else if(t>"0"&&t<="9")this.blockScalarIndent=Number(t)-1;else if("-"!==t)break}return yield*this.pushUntil((e=>Rn(e)||"#"===e))}*parseBlockScalar(){let e,t=this.pos-1,n=0;e:for(let s=this.pos;e=this.buffer[s];++s)switch(e){case" ":n+=1;break;case"\n":t=s,n=0;break;case"\r":{const e=this.buffer[s+1];if(!e&&!this.atEnd)return this.setNext("block-scalar");if("\n"===e)break}default:break e}if(!e&&!this.atEnd)return this.setNext("block-scalar");if(n>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=n:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{const e=this.continueScalar(t+1);if(-1===e)break;t=this.buffer.indexOf("\n",e)}while(-1!==t);if(-1===t){if(!this.atEnd)return this.setNext("block-scalar");t=this.buffer.length}}let s=t+1;for(e=this.buffer[s];" "===e;)e=this.buffer[++s];if("\t"===e){for(;"\t"===e||" "===e||"\r"===e||"\n"===e;)e=this.buffer[++s];t=s-1}else if(!this.blockScalarKeep)for(;;){let e=t-1,s=this.buffer[e];"\r"===s&&(s=this.buffer[--e]);const i=e;for(;" "===s;)s=this.buffer[--e];if(!("\n"===s&&e>=this.pos&&e+1+n>i))break;t=e}return yield Kn,yield*this.pushToIndex(t+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){const e=this.flowLevel>0;let t,n=this.pos-1,s=this.pos-1;for(;t=this.buffer[++s];)if(":"===t){const t=this.buffer[s+1];if(Rn(t)||e&&Vn.has(t))break;n=s}else if(Rn(t)){let i=this.buffer[s+1];if("\r"===t&&("\n"===i?(s+=1,t="\n",i=this.buffer[s+1]):n=s),"#"===i||e&&Vn.has(i))break;if("\n"===t){const e=this.continueScalar(s+1);if(-1===e)break;s=Math.max(s,e-2)}}else{if(e&&Vn.has(t))break;n=s}return t||this.atEnd?(yield Kn,yield*this.pushToIndex(n+1,!0),e?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(e){return e>0?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,t){const n=this.buffer.slice(this.pos,e);return n?(yield n,this.pos+=n.length,n.length):(t&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(Gn))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":{const e=this.flowLevel>0,t=this.charAt(1);if(Rn(t)||e&&Vn.has(t))return e?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}}return 0}*pushTag(){if("<"===this.charAt(1)){let e=this.pos+2,t=this.buffer[e];for(;!Rn(t)&&">"!==t;)t=this.buffer[++e];return yield*this.pushToIndex(">"===t?e+1:e,!1)}{let e=this.pos+1,t=this.buffer[e];for(;t;)if(Hn.has(t))t=this.buffer[++e];else{if("%"!==t||!Wn.has(this.buffer[e+1])||!Wn.has(this.buffer[e+2]))break;t=this.buffer[e+=3]}return yield*this.pushToIndex(e,!1)}}*pushNewline(){const e=this.buffer[this.pos];return"\n"===e?yield*this.pushCount(1):"\r"===e&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(e){let t,n=this.pos-1;do{t=this.buffer[++n]}while(" "===t||e&&"\t"===t);const s=n-this.pos;return s>0&&(yield this.buffer.substr(this.pos,s),this.pos=n),s}*pushUntil(e){let t=this.pos,n=this.buffer[t];for(;!e(n);)n=this.buffer[++t];return yield*this.pushToIndex(t,!1)}}class Jn{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let t=0,n=this.lineStarts.length;for(;t<n;){const s=t+n>>1;this.lineStarts[s]<e?t=s+1:n=s}if(this.lineStarts[t]===e)return{line:t+1,col:1};if(0===t)return{line:0,col:e};return{line:t,col:e-this.lineStarts[t-1]+1}}}}function Qn(e,t){for(let n=0;n<e.length;++n)if(e[n].type===t)return!0;return!1}function Xn(e){for(let t=0;t<e.length;++t)switch(e[t].type){case"space":case"comment":case"newline":break;default:return t}return-1}function Zn(e){switch(e?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return!0;default:return!1}}function es(e){switch(e.type){case"document":return e.start;case"block-map":{const t=e.items[e.items.length-1];return t.sep??t.start}case"block-seq":return e.items[e.items.length-1].start;default:return[]}}function ts(e){if(0===e.length)return[];let t=e.length;e:for(;--t>=0;)switch(e[t].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break e}for(;"space"===e[++t]?.type;);return e.splice(t,e.length)}function ns(e){if("flow-seq-start"===e.start.type)for(const t of e.items)!t.sep||t.value||Qn(t.start,"explicit-key-ind")||Qn(t.sep,"map-value-ind")||(t.key&&(t.value=t.key),delete t.key,Zn(t.value)?t.value.end?Array.prototype.push.apply(t.value.end,t.sep):t.value.end=t.sep:Array.prototype.push.apply(t.start,t.sep),delete t.sep)}class ss{constructor(e){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new Yn,this.onNewLine=e}*parse(e,t=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(const n of this.lexer.lex(e,t))yield*this.next(n);t||(yield*this.end())}*next(e){if(this.source=e,this.atScalar)return this.atScalar=!1,yield*this.step(),void(this.offset+=e.length);const t=Un(e);if(t)if("scalar"===t)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=t,yield*this.step(),t){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case"space":this.atNewLine&&" "===e[0]&&(this.indent+=e.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=e.length}else{const t=`Not a YAML token: ${e}`;yield*this.pop({type:"error",offset:this.offset,message:t,source:e}),this.offset+=e.length}}*end(){for(;this.stack.length>0;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){const e=this.peek(1);if("doc-end"!==this.type||e&&"doc-end"===e.type){if(!e)return yield*this.stream();switch(e.type){case"document":return yield*this.document(e);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(e);case"block-scalar":return yield*this.blockScalar(e);case"block-map":return yield*this.blockMap(e);case"block-seq":return yield*this.blockSequence(e);case"flow-collection":return yield*this.flowCollection(e);case"doc-end":return yield*this.documentEnd(e)}yield*this.pop()}else{for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(e){return this.stack[this.stack.length-e]}*pop(e){const t=e??this.stack.pop();if(t)if(0===this.stack.length)yield t;else{const e=this.peek(1);switch("block-scalar"===t.type?t.indent="indent"in e?e.indent:0:"flow-collection"===t.type&&"document"===e.type&&(t.indent=0),"flow-collection"===t.type&&ns(t),e.type){case"document":e.value=t;break;case"block-scalar":e.props.push(t);break;case"block-map":{const n=e.items[e.items.length-1];if(n.value)return e.items.push({start:[],key:t,sep:[]}),void(this.onKeyLine=!0);if(!n.sep)return Object.assign(n,{key:t,sep:[]}),void(this.onKeyLine=!n.explicitKey);n.value=t;break}case"block-seq":{const n=e.items[e.items.length-1];n.value?e.items.push({start:[],value:t}):n.value=t;break}case"flow-collection":{const n=e.items[e.items.length-1];return void(!n||n.value?e.items.push({start:[],key:t,sep:[]}):n.sep?n.value=t:Object.assign(n,{key:t,sep:[]}))}default:yield*this.pop(),yield*this.pop(t)}if(!("document"!==e.type&&"block-map"!==e.type&&"block-seq"!==e.type||"block-map"!==t.type&&"block-seq"!==t.type)){const n=t.items[t.items.length-1];n&&!n.sep&&!n.value&&n.start.length>0&&-1===Xn(n.start)&&(0===t.indent||n.start.every((e=>"comment"!==e.type||e.indent<t.indent)))&&("document"===e.type?e.end=n.start:e.items.push({start:n.start}),t.items.splice(-1,1))}}else{const e="Tried to pop an empty stack";yield{type:"error",offset:this.offset,source:"",message:e}}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":{const e={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&e.start.push(this.sourceToken),void this.stack.push(e)}}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case"doc-start":return void(-1!==Xn(e.start)?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void e.start.push(this.sourceToken)}const t=this.startBlockValue(e);t?this.stack.push(t):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(e){if("map-value-ind"===this.type){const t=ts(es(this.peek(2)));let n;e.end?(n=e.end,n.push(this.sourceToken),delete e.end):n=[this.sourceToken];const s={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:t,key:e,sep:n}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=s}else yield*this.lineEnd(e)}*blockScalar(e){switch(this.type){case"space":case"comment":case"newline":return void e.props.push(this.sourceToken);case"scalar":if(e.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(this.onKeyLine=!1,t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else if(t.sep)t.sep.push(this.sourceToken);else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return}if(this.indent>=e.indent){const n=!this.onKeyLine&&this.indent===e.indent,s=n&&(t.sep||t.explicitKey)&&"seq-item-ind"!==this.type;let i=[];if(s&&t.sep&&!t.value){const n=[];for(let s=0;s<t.sep.length;++s){const i=t.sep[s];switch(i.type){case"newline":n.push(s);break;case"space":break;case"comment":i.indent>e.indent&&(n.length=0);break;default:n.length=0}}n.length>=2&&(i=t.sep.splice(n[1]))}switch(this.type){case"anchor":case"tag":return void(s||t.value?(i.push(this.sourceToken),e.items.push({start:i}),this.onKeyLine=!0):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"explicit-key-ind":return t.sep||t.explicitKey?s||t.value?(i.push(this.sourceToken),e.items.push({start:i,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(t.start.push(this.sourceToken),t.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":if(t.explicitKey)if(t.sep)if(t.value)e.items.push({start:[],key:null,sep:[this.sourceToken]});else if(Qn(t.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:i,key:null,sep:[this.sourceToken]}]});else if(Zn(t.key)&&!Qn(t.sep,"newline")){const e=ts(t.start),n=t.key,s=t.sep;s.push(this.sourceToken),delete t.key,delete t.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:n,sep:s}]})}else i.length>0?t.sep=t.sep.concat(i,this.sourceToken):t.sep.push(this.sourceToken);else if(Qn(t.start,"newline"))Object.assign(t,{key:null,sep:[this.sourceToken]});else{const e=ts(t.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]})}else t.sep?t.value||s?e.items.push({start:i,key:null,sep:[this.sourceToken]}):Qn(t.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]});return void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(s||t.value?(e.items.push({start:i,key:n,sep:[]}),this.onKeyLine=!0):t.sep?this.stack.push(n):(Object.assign(t,{key:n,sep:[]}),this.onKeyLine=!0))}default:{const s=this.startBlockValue(e);if(s){if("block-seq"===s.type){if(!t.explicitKey&&t.sep&&!Qn(t.sep,"newline"))return void(yield*this.pop({type:"error",offset:this.offset,message:"Unexpected block-seq-ind on same line with key",source:this.source}))}else n&&e.items.push({start:i});return void this.stack.push(s)}}}}yield*this.pop(),yield*this.step()}*blockSequence(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return;case"anchor":case"tag":if(t.value||this.indent<=e.indent)break;return void t.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==e.indent)break;return void(t.value||Qn(t.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken))}if(this.indent>e.indent){const t=this.startBlockValue(e);if(t)return void this.stack.push(t)}yield*this.pop(),yield*this.step()}*flowCollection(e){const t=e.items[e.items.length-1];if("flow-error-end"===this.type){let e;do{yield*this.pop(),e=this.peek(1)}while(e&&"flow-collection"===e.type)}else if(0===e.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!t||t.sep?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken));case"map-value-ind":return void(!t||t.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!t||t.value?e.items.push({start:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(!t||t.value?e.items.push({start:[],key:n,sep:[]}):t.sep?this.stack.push(n):Object.assign(t,{key:n,sep:[]}))}case"flow-map-end":case"flow-seq-end":return void e.end.push(this.sourceToken)}const n=this.startBlockValue(e);n?this.stack.push(n):(yield*this.pop(),yield*this.step())}else{const t=this.peek(2);if("block-map"===t.type&&("map-value-ind"===this.type&&t.indent===e.indent||"newline"===this.type&&!t.items[t.items.length-1].sep))yield*this.pop(),yield*this.step();else if("map-value-ind"===this.type&&"flow-collection"!==t.type){const n=ts(es(t));ns(e);const s=e.end.splice(1,e.end.length);s.push(this.sourceToken);const i={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:n,key:e,sep:s}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=i}else yield*this.lineEnd(e)}}flowScalar(e){if(this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}return{type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":{this.onKeyLine=!0;const t=ts(es(e));return t.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,explicitKey:!0}]}}case"map-value-ind":{this.onKeyLine=!0;const t=ts(es(e));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(e,t){return"comment"===this.type&&(!(this.indent<=t)&&e.every((e=>"newline"===e.type||"space"===e.type)))}*documentEnd(e){"doc-mode"!==this.type&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop()))}*lineEnd(e){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function is(e){const t=!1!==e.prettyErrors;return{lineCounter:e.lineCounter||t&&new Jn||null,prettyErrors:t}}function rs(e,t={}){const{lineCounter:n,prettyErrors:s}=is(t),i=new ss(n?.addNewLine),r=new Cn(t);let o=null;for(const t of r.compose(i.parse(e),!0,e.length))if(o){if("silent"!==o.options.logLevel){o.errors.push(new tn(t.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else o=t;return s&&n&&(o.errors.forEach(sn(e,n)),o.warnings.forEach(sn(e,n))),o}var os=Object.freeze({__proto__:null,Alias:fe,CST:Fn,Composer:Cn,Document:Xt,Lexer:Yn,LineCounter:Jn,Pair:He,Parser:ss,Scalar:ge,Schema:Qt,YAMLError:en,YAMLMap:Qe,YAMLParseError:tn,YAMLSeq:Ze,YAMLWarning:nn,isAlias:K,isCollection:V,isDocument:U,isMap:F,isNode:z,isPair:R,isScalar:W,isSeq:H,parse:function(e,t,n){let s;"function"==typeof t?s=t:void 0===n&&t&&"object"==typeof t&&(n=t);const i=rs(e,n);if(!i)return null;if(i.warnings.forEach((e=>Be(i.options.logLevel,e))),i.errors.length>0){if("silent"!==i.options.logLevel)throw i.errors[0];i.errors=[]}return i.toJS(Object.assign({reviver:s},n))},parseAllDocuments:function(e,t={}){const{lineCounter:n,prettyErrors:s}=is(t),i=new ss(n?.addNewLine),r=new Cn(t),o=Array.from(r.compose(i.parse(e)));if(s&&n)for(const t of o)t.errors.forEach(sn(e,n)),t.warnings.forEach(sn(e,n));return o.length>0?o:Object.assign([],{empty:!0},r.streamInfo())},parseDocument:rs,stringify:function(e,t,n){let s=null;if("function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t),"string"==typeof n&&(n=n.length),"number"==typeof n){const e=Math.round(n);n=e<1?void 0:e>8?{indent:8}:{indent:e}}if(void 0===e){const{keepUndefined:e}=n??t??{};if(!e)return}return U(e)&&!s?e.toString(n):new Xt(e,s,n).toString(n)},visit:Q,visitAsync:Z});const as={right:function(e,t){e=e.trim();const n=hs.stringWidth(e);if(n<t)return" ".repeat(t-n)+e;return e},center:function(e,t){e=e.trim();const n=hs.stringWidth(e);if(n>=t)return e;return" ".repeat(t-n>>1)+e}};class cs{constructor(e){var t;this.width=e.width,this.wrap=null===(t=e.wrap)||void 0===t||t,this.rows=[]}span(...e){this.div(...e).span=!0}resetOutput(){this.rows=[]}div(...e){if(0===e.length&&this.div(""),this.wrap&&this.shouldApplyLayoutDSL(...e)&&"string"==typeof e[0])return this.applyLayoutDSL(e[0]);const t=e.map((e=>"string"==typeof e?this.colFromString(e):e));return this.rows.push(t),t}shouldApplyLayoutDSL(...e){return 1===e.length&&"string"==typeof e[0]&&/[\t\n]/.test(e[0])}applyLayoutDSL(e){const t=e.split("\n").map((e=>e.split("\t")));let n=0;return t.forEach((e=>{e.length>1&&hs.stringWidth(e[0])>n&&(n=Math.min(Math.floor(.5*this.width),hs.stringWidth(e[0])))})),t.forEach((e=>{this.div(...e.map(((t,s)=>({text:t.trim(),padding:this.measurePadding(t),width:0===s&&e.length>1?n:void 0}))))})),this.rows[this.rows.length-1]}colFromString(e){return{text:e,padding:this.measurePadding(e)}}measurePadding(e){const t=hs.stripAnsi(e);return[0,t.match(/\s*$/)[0].length,0,t.match(/^\s*/)[0].length]}toString(){const e=[];return this.rows.forEach((t=>{this.rowToString(t,e)})),e.filter((e=>!e.hidden)).map((e=>e.text)).join("\n")}rowToString(e,t){return this.rasterize(e).forEach(((n,s)=>{let i="";n.forEach(((n,r)=>{const{width:o}=e[r],a=this.negatePadding(e[r]);let c=n;if(a>hs.stringWidth(n)&&(c+=" ".repeat(a-hs.stringWidth(n))),e[r].align&&"left"!==e[r].align&&this.wrap){c=(0,as[e[r].align])(c,a),hs.stringWidth(c)<a&&(c+=" ".repeat((o||0)-hs.stringWidth(c)-1))}const l=e[r].padding||[0,0,0,0];l[3]&&(i+=" ".repeat(l[3])),i+=ls(e[r],c,"| "),i+=c,i+=ls(e[r],c," |"),l[1]&&(i+=" ".repeat(l[1])),0===s&&t.length>0&&(i=this.renderInline(i,t[t.length-1]))})),t.push({text:i.replace(/ +$/,""),span:e.span})})),t}renderInline(e,t){const n=e.match(/^ */),s=n?n[0].length:0,i=t.text,r=hs.stringWidth(i.trimRight());return t.span?this.wrap?s<r?e:(t.hidden=!0,i.trimRight()+" ".repeat(s-r)+e.trimLeft()):(t.hidden=!0,i+e):e}rasterize(e){const t=[],n=this.columnWidths(e);let s;return e.forEach(((e,i)=>{e.width=n[i],s=this.wrap?hs.wrap(e.text,this.negatePadding(e),{hard:!0}).split("\n"):e.text.split("\n"),e.border&&(s.unshift("."+"-".repeat(this.negatePadding(e)+2)+"."),s.push("'"+"-".repeat(this.negatePadding(e)+2)+"'")),e.padding&&(s.unshift(...new Array(e.padding[0]||0).fill("")),s.push(...new Array(e.padding[2]||0).fill(""))),s.forEach(((e,n)=>{t[n]||t.push([]);const s=t[n];for(let e=0;e<i;e++)void 0===s[e]&&s.push("");s.push(e)}))})),t}negatePadding(e){let t=e.width||0;return e.padding&&(t-=(e.padding[3]||0)+(e.padding[1]||0)),e.border&&(t-=4),t}columnWidths(e){if(!this.wrap)return e.map((e=>e.width||hs.stringWidth(e.text)));let t=e.length,n=this.width;const s=e.map((e=>{if(e.width)return t--,n-=e.width,e.width})),i=t?Math.floor(n/t):0;return s.map(((t,n)=>void 0===t?Math.max(i,function(e){const t=e.padding||[],n=1+(t[3]||0)+(t[1]||0);if(e.border)return n+4;return n}(e[n])):t))}}function ls(e,t,n){return e.border?/[.']-+[.']/.test(t)?"":0!==t.trim().length?n:"  ":""}let hs;const us=new RegExp("(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)","g");function fs(e){return e.replace(us,"")}function ds(e,t){const[n,s]=e.match(us)||["",""];e=fs(e);let i="";for(let n=0;n<e.length;n++)0!==n&&n%t==0&&(i+="\n"),i+=e.charAt(n);return n&&s&&(i=`${n}${i}${s}`),i}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
function ps(e){if(e!==e.toLowerCase()&&e!==e.toUpperCase()||(e=e.toLowerCase()),-1===e.indexOf("-")&&-1===e.indexOf("_"))return e;{let t="",n=!1;const s=e.match(/^-+/);for(let i=s?s[0].length:0;i<e.length;i++){let s=e.charAt(i);n&&(n=!1,s=s.toUpperCase()),0===i||"-"!==s&&"_"!==s?"-"!==s&&"_"!==s&&(t+=s):n=!0}return t}}function gs(e,t){const n=e.toLowerCase();t=t||"-";let s="";for(let i=0;i<e.length;i++){const r=n.charAt(i),o=e.charAt(i);s+=r!==o&&i>0?`${t}${n.charAt(i)}`:o}return s}function ms(e){return null!=e&&("number"==typeof e||(!!/^0x[0-9a-f]+$/i.test(e)||!/^0[^.]/.test(e)&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)))}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var ys;
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
let bs;!function(e){e.BOOLEAN="boolean",e.STRING="string",e.NUMBER="number",e.ARRAY="array"}(ys||(ys={}));function vs(e){return void 0!==e?e+1:1}function ws(e){return"__proto__"===e?"___proto___":e}
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 * CJS and ESM environments.
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var ks,Os,Es;const Ss=process&&process.env&&process.env.YARGS_MIN_NODE_VERSION?Number(process.env.YARGS_MIN_NODE_VERSION):12,As=null!==(Os=null===(ks=null===process||void 0===process?void 0:process.versions)||void 0===ks?void 0:ks.node)&&void 0!==Os?Os:null===(Es=null===process||void 0===process?void 0:process.version)||void 0===Es?void 0:Es.slice(1);if(As){if(Number(As.match(/^([^.]+)/)[1])<Ss)throw Error(`yargs parser supports a minimum Node.js version of ${Ss}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`)}const Ns=process?process.env:{},Cs=new class{constructor(e){bs=e}parse(e,t){const n=Object.assign({alias:void 0,array:void 0,boolean:void 0,config:void 0,configObjects:void 0,configuration:void 0,coerce:void 0,count:void 0,default:void 0,envPrefix:void 0,narg:void 0,normalize:void 0,string:void 0,number:void 0,__:void 0,key:void 0},t),s=function(e){if(Array.isArray(e))return e.map((e=>"string"!=typeof e?e+"":e));e=e.trim();let t=0,n=null,s=null,i=null;const r=[];for(let o=0;o<e.length;o++)n=s,s=e.charAt(o)," "!==s||i?(s===i?i=null:"'"!==s&&'"'!==s||i||(i=s),r[t]||(r[t]=""),r[t]+=s):" "!==n&&t++;return r}(e),i="string"==typeof e,r=function(e){const t=[],n=Object.create(null);let s=!0;Object.keys(e).forEach((function(n){t.push([].concat(e[n],n))}));for(;s;){s=!1;for(let e=0;e<t.length;e++)for(let n=e+1;n<t.length;n++){if(t[e].filter((function(e){return-1!==t[n].indexOf(e)})).length){t[e]=t[e].concat(t[n]),t.splice(n,1),s=!0;break}}}return t.forEach((function(e){const t=(e=e.filter((function(e,t,n){return n.indexOf(e)===t}))).pop();void 0!==t&&"string"==typeof t&&(n[t]=e)})),n}(Object.assign(Object.create(null),n.alias)),o=Object.assign({"boolean-negation":!0,"camel-case-expansion":!0,"combine-arrays":!1,"dot-notation":!0,"duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"greedy-arrays":!0,"halt-at-non-option":!1,"nargs-eats-options":!1,"negation-prefix":"no-","parse-numbers":!0,"parse-positional-numbers":!0,"populate--":!1,"set-placeholder-key":!1,"short-option-groups":!0,"strip-aliased":!1,"strip-dashed":!1,"unknown-options-as-args":!1},n.configuration),a=Object.assign(Object.create(null),n.default),c=n.configObjects||[],l=n.envPrefix,h=o["populate--"],u=h?"--":"_",f=Object.create(null),d=Object.create(null),p=n.__||bs.format,g={aliases:Object.create(null),arrays:Object.create(null),bools:Object.create(null),strings:Object.create(null),numbers:Object.create(null),counts:Object.create(null),normalize:Object.create(null),configs:Object.create(null),nargs:Object.create(null),coercions:Object.create(null),keys:[]},m=/^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/,y=new RegExp("^--"+o["negation-prefix"]+"(.+)");[].concat(n.array||[]).filter(Boolean).forEach((function(e){const t="object"==typeof e?e.key:e,n=Object.keys(e).map((function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]})).filter(Boolean).pop();n&&(g[n][t]=!0),g.arrays[t]=!0,g.keys.push(t)})),[].concat(n.boolean||[]).filter(Boolean).forEach((function(e){g.bools[e]=!0,g.keys.push(e)})),[].concat(n.string||[]).filter(Boolean).forEach((function(e){g.strings[e]=!0,g.keys.push(e)})),[].concat(n.number||[]).filter(Boolean).forEach((function(e){g.numbers[e]=!0,g.keys.push(e)})),[].concat(n.count||[]).filter(Boolean).forEach((function(e){g.counts[e]=!0,g.keys.push(e)})),[].concat(n.normalize||[]).filter(Boolean).forEach((function(e){g.normalize[e]=!0,g.keys.push(e)})),"object"==typeof n.narg&&Object.entries(n.narg).forEach((([e,t])=>{"number"==typeof t&&(g.nargs[e]=t,g.keys.push(e))})),"object"==typeof n.coerce&&Object.entries(n.coerce).forEach((([e,t])=>{"function"==typeof t&&(g.coercions[e]=t,g.keys.push(e))})),void 0!==n.config&&(Array.isArray(n.config)||"string"==typeof n.config?[].concat(n.config).filter(Boolean).forEach((function(e){g.configs[e]=!0})):"object"==typeof n.config&&Object.entries(n.config).forEach((([e,t])=>{"boolean"!=typeof t&&"function"!=typeof t||(g.configs[e]=t)}))),function(...e){e.forEach((function(e){Object.keys(e||{}).forEach((function(e){g.aliases[e]||(g.aliases[e]=[].concat(r[e]||[]),g.aliases[e].concat(e).forEach((function(t){if(/-/.test(t)&&o["camel-case-expansion"]){const n=ps(t);n!==e&&-1===g.aliases[e].indexOf(n)&&(g.aliases[e].push(n),f[n]=!0)}})),g.aliases[e].concat(e).forEach((function(t){if(t.length>1&&/[A-Z]/.test(t)&&o["camel-case-expansion"]){const n=gs(t,"-");n!==e&&-1===g.aliases[e].indexOf(n)&&(g.aliases[e].push(n),f[n]=!0)}})),g.aliases[e].forEach((function(t){g.aliases[t]=[e].concat(g.aliases[e].filter((function(e){return t!==e})))})))}))}))}(n.key,r,n.default,g.arrays),Object.keys(a).forEach((function(e){(g.aliases[e]||[]).forEach((function(t){a[t]=a[e]}))}));let b=null;Object.keys(g.counts).find((e=>T(e,g.arrays)?(b=Error(p("Invalid configuration: %s, opts.count excludes opts.array.",e)),!0):!!T(e,g.nargs)&&(b=Error(p("Invalid configuration: %s, opts.count excludes opts.narg.",e)),!0)));let v=[];const w=Object.assign(Object.create(null),{_:[]}),k={};for(let e=0;e<s.length;e++){const t=s[e],n=t.replace(/^-{3,}/,"---");let i,r,a,c,l,h;if("--"!==t&&/^-/.test(t)&&P(t))O(t);else{if(n.match(/^---+(=|$)/)){O(t);continue}if(t.match(/^--.+=/)||!o["short-option-groups"]&&t.match(/^-.+=/))c=t.match(/^--?([^=]+)=([\s\S]*)$/),null!==c&&Array.isArray(c)&&c.length>=3&&(T(c[1],g.arrays)?e=S(e,c[1],s,c[2]):!1!==T(c[1],g.nargs)?e=E(e,c[1],s,c[2]):A(c[1],c[2],!0));else if(t.match(y)&&o["boolean-negation"])c=t.match(y),null!==c&&Array.isArray(c)&&c.length>=2&&(r=c[1],A(r,!!T(r,g.arrays)&&[!1]));else if(t.match(/^--.+/)||!o["short-option-groups"]&&t.match(/^-[^-]+/))c=t.match(/^--?(.+)/),null!==c&&Array.isArray(c)&&c.length>=2&&(r=c[1],T(r,g.arrays)?e=S(e,r,s):!1!==T(r,g.nargs)?e=E(e,r,s):(l=s[e+1],void 0===l||l.match(/^-/)&&!l.match(m)||T(r,g.bools)||T(r,g.counts)?/^(true|false)$/.test(l)?(A(r,l),e++):A(r,D(r)):(A(r,l),e++)));else if(t.match(/^-.\..+=/))c=t.match(/^-([^=]+)=([\s\S]*)$/),null!==c&&Array.isArray(c)&&c.length>=3&&A(c[1],c[2]);else if(t.match(/^-.\..+/)&&!t.match(m))l=s[e+1],c=t.match(/^-(.\..+)/),null!==c&&Array.isArray(c)&&c.length>=2&&(r=c[1],void 0===l||l.match(/^-/)||T(r,g.bools)||T(r,g.counts)?A(r,D(r)):(A(r,l),e++));else if(t.match(/^-[^-]+/)&&!t.match(m)){a=t.slice(1,-1).split(""),i=!1;for(let n=0;n<a.length;n++){if(l=t.slice(n+2),a[n+1]&&"="===a[n+1]){h=t.slice(n+3),r=a[n],T(r,g.arrays)?e=S(e,r,s,h):!1!==T(r,g.nargs)?e=E(e,r,s,h):A(r,h),i=!0;break}if("-"!==l){if(/[A-Za-z]/.test(a[n])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(l)&&!1===T(l,g.bools)){A(a[n],l),i=!0;break}if(a[n+1]&&a[n+1].match(/\W/)){A(a[n],l),i=!0;break}A(a[n],D(a[n]))}else A(a[n],l)}r=t.slice(-1)[0],i||"-"===r||(T(r,g.arrays)?e=S(e,r,s):!1!==T(r,g.nargs)?e=E(e,r,s):(l=s[e+1],void 0===l||/^(-|--)[^-]/.test(l)&&!l.match(m)||T(r,g.bools)||T(r,g.counts)?/^(true|false)$/.test(l)?(A(r,l),e++):A(r,D(r)):(A(r,l),e++)))}else if(t.match(/^-[0-9]$/)&&t.match(m)&&T(t.slice(1),g.bools))r=t.slice(1),A(r,D(r));else{if("--"===t){v=s.slice(e+1);break}if(o["halt-at-non-option"]){v=s.slice(e);break}O(t)}}}function O(e){const t=x("_",e);"string"!=typeof t&&"number"!=typeof t||w._.push(t)}function E(e,t,n,s){let i,r=T(t,g.nargs);if(r="number"!=typeof r||isNaN(r)?1:r,0===r)return B(s)||(b=Error(p("Argument unexpected for: %s",t))),A(t,D(t)),e;let a=B(s)?0:1;if(o["nargs-eats-options"])n.length-(e+1)+a<r&&(b=Error(p("Not enough arguments following: %s",t))),a=r;else{for(i=e+1;i<n.length&&(!n[i].match(/^-[^0-9]/)||n[i].match(m)||P(n[i]));i++)a++;a<r&&(b=Error(p("Not enough arguments following: %s",t)))}let c=Math.min(a,r);for(!B(s)&&c>0&&(A(t,s),c--),i=e+1;i<c+e+1;i++)A(t,n[i]);return e+c}function S(e,t,n,s){let r=[],c=s||n[e+1];const l=T(t,g.nargs);if(T(t,g.bools)&&!/^(true|false)$/.test(c))r.push(!0);else if(B(c)||B(s)&&/^-/.test(c)&&!m.test(c)&&!P(c)){if(void 0!==a[t]){const e=a[t];r=Array.isArray(e)?e:[e]}}else{B(s)||r.push(C(t,s,!0));for(let s=e+1;s<n.length&&!(!o["greedy-arrays"]&&r.length>0||l&&"number"==typeof l&&r.length>=l)&&(c=n[s],!/^-/.test(c)||m.test(c)||P(c));s++)e=s,r.push(C(t,c,i))}return"number"==typeof l&&(l&&r.length<l||isNaN(l)&&0===r.length)&&(b=Error(p("Not enough arguments following: %s",t))),A(t,r),e}function A(e,t,n=i){if(/-/.test(e)&&o["camel-case-expansion"]){const t=e.split(".").map((function(e){return ps(e)})).join(".");N(e,t)}const s=C(e,t,n),r=e.split(".");if(M(w,r,s),g.aliases[e]&&g.aliases[e].forEach((function(e){const t=e.split(".");M(w,t,s)})),r.length>1&&o["dot-notation"]&&(g.aliases[r[0]]||[]).forEach((function(t){let n=t.split(".");const i=[].concat(r);i.shift(),n=n.concat(i),(g.aliases[e]||[]).includes(n.join("."))||M(w,n,s)})),T(e,g.normalize)&&!T(e,g.arrays)){[e].concat(g.aliases[e]||[]).forEach((function(e){Object.defineProperty(k,e,{enumerable:!0,get:()=>t,set(e){t="string"==typeof e?bs.normalize(e):e}})}))}}function N(e,t){g.aliases[e]&&g.aliases[e].length||(g.aliases[e]=[t],f[t]=!0),g.aliases[t]&&g.aliases[t].length||N(t,e)}function C(e,t,n){n&&(t=function(e){return"string"!=typeof e||"'"!==e[0]&&'"'!==e[0]||e[e.length-1]!==e[0]?e:e.substring(1,e.length-1)}(t)),(T(e,g.bools)||T(e,g.counts))&&"string"==typeof t&&(t="true"===t);let s=Array.isArray(t)?t.map((function(t){return x(e,t)})):x(e,t);return T(e,g.counts)&&(B(s)||"boolean"==typeof s)&&(s=vs()),T(e,g.normalize)&&T(e,g.arrays)&&(s=Array.isArray(t)?t.map((e=>bs.normalize(e))):bs.normalize(t)),s}function x(e,t){if(!o["parse-positional-numbers"]&&"_"===e)return t;if(!T(e,g.strings)&&!T(e,g.bools)&&!Array.isArray(t)){(ms(t)&&o["parse-numbers"]&&Number.isSafeInteger(Math.floor(parseFloat(`${t}`)))||!B(t)&&T(e,g.numbers))&&(t=Number(t))}return t}function j(e,t){Object.keys(e).forEach((function(n){const s=e[n],i=t?t+"."+n:n;"object"==typeof s&&null!==s&&!Array.isArray(s)&&o["dot-notation"]?j(s,i):(!$(w,i.split("."))||T(i,g.arrays)&&o["combine-arrays"])&&A(i,s)}))}function _(e,t){if(void 0===l)return;const n="string"==typeof l?l:"",s=bs.env();Object.keys(s).forEach((function(i){if(""===n||0===i.lastIndexOf(n,0)){const r=i.split("__").map((function(e,t){return 0===t&&(e=e.substring(n.length)),ps(e)}));(t&&g.configs[r.join(".")]||!t)&&!$(e,r)&&A(r.join("."),s[i])}}))}function I(e,t,n,s=!1){Object.keys(n).forEach((function(i){$(e,i.split("."))||(M(e,i.split("."),n[i]),s&&(d[i]=!0),(t[i]||[]).forEach((function(t){$(e,t.split("."))||M(e,t.split("."),n[i])})))}))}function $(e,t){let n=e;o["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach((function(e){n=n[e]||{}}));const s=t[t.length-1];return"object"==typeof n&&s in n}function M(e,t,n){let s=e;o["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach((function(e){e=ws(e),"object"==typeof s&&void 0===s[e]&&(s[e]={}),"object"!=typeof s[e]||Array.isArray(s[e])?(Array.isArray(s[e])?s[e].push({}):s[e]=[s[e],{}],s=s[e][s[e].length-1]):s=s[e]}));const i=ws(t[t.length-1]),r=T(t.join("."),g.arrays),a=Array.isArray(n);let c=o["duplicate-arguments-array"];!c&&T(i,g.nargs)&&(c=!0,(!B(s[i])&&1===g.nargs[i]||Array.isArray(s[i])&&s[i].length===g.nargs[i])&&(s[i]=void 0)),n===vs()?s[i]=vs(s[i]):Array.isArray(s[i])?c&&r&&a?s[i]=o["flatten-duplicate-arrays"]?s[i].concat(n):(Array.isArray(s[i][0])?s[i]:[s[i]]).concat([n]):c||Boolean(r)!==Boolean(a)?s[i]=s[i].concat([n]):s[i]=n:void 0===s[i]&&r?s[i]=a?n:[n]:!c||void 0===s[i]||T(i,g.counts)||T(i,g.bools)?s[i]=n:s[i]=[s[i],n]}function T(e,t){const n=[].concat(g.aliases[e]||[],e),s=Object.keys(t),i=n.find((e=>s.includes(e)));return!!i&&t[i]}function L(e){const t=Object.keys(g);return[].concat(t.map((e=>g[e]))).some((function(t){return Array.isArray(t)?t.includes(e):t[e]}))}function P(e){return o["unknown-options-as-args"]&&function(e){if(e=e.replace(/^-{3,}/,"--"),e.match(m))return!1;if(function(e){if(e.match(m)||!e.match(/^-[^-]+/))return!1;let t,n=!0;const s=e.slice(1).split("");for(let i=0;i<s.length;i++){if(t=e.slice(i+2),!L(s[i])){n=!1;break}if(s[i+1]&&"="===s[i+1]||"-"===t||/[A-Za-z]/.test(s[i])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(t)||s[i+1]&&s[i+1].match(/\W/))break}return n}(e))return!1;return!function(e,...t){return[].concat(...t).some((function(t){const n=e.match(t);return n&&L(n[1])}))}(e,/^-+([^=]+?)=[\s\S]*$/,y,/^-+([^=]+?)$/,/^-+([^=]+?)-$/,/^-+([^=]+?\d+)$/,/^-+([^=]+?)\W+.*$/)}(e)}function D(e){return T(e,g.bools)||T(e,g.counts)||!(`${e}`in a)?(t=function(e){let t=ys.BOOLEAN;return T(e,g.strings)?t=ys.STRING:T(e,g.numbers)?t=ys.NUMBER:T(e,g.bools)?t=ys.BOOLEAN:T(e,g.arrays)&&(t=ys.ARRAY),t}(e),{[ys.BOOLEAN]:!0,[ys.STRING]:"",[ys.NUMBER]:void 0,[ys.ARRAY]:[]}[t]):a[e];var t}function B(e){return void 0===e}return _(w,!0),_(w,!1),function(e){const t=Object.create(null);I(t,g.aliases,a),Object.keys(g.configs).forEach((function(n){const s=e[n]||t[n];if(s)try{let e=null;const t=bs.resolve(bs.cwd(),s),i=g.configs[n];if("function"==typeof i){try{e=i(t)}catch(t){e=t}if(e instanceof Error)return void(b=e)}else e=bs.require(t);j(e)}catch(t){"PermissionDenied"===t.name?b=t:e[n]&&(b=Error(p("Invalid JSON config file: %s",s)))}}))}(w),void 0!==c&&c.forEach((function(e){j(e)})),I(w,g.aliases,a,!0),function(e){let t;const n=new Set;Object.keys(e).forEach((function(s){if(!n.has(s)&&(t=T(s,g.coercions),"function"==typeof t))try{const i=x(s,t(e[s]));[].concat(g.aliases[s]||[],s).forEach((t=>{n.add(t),e[t]=i}))}catch(e){b=e}}))}(w),o["set-placeholder-key"]&&function(e){g.keys.forEach((t=>{~t.indexOf(".")||void 0===e[t]&&(e[t]=void 0)}))}(w),Object.keys(g.counts).forEach((function(e){$(w,e.split("."))||A(e,0)})),h&&v.length&&(w[u]=[]),v.forEach((function(e){w[u].push(e)})),o["camel-case-expansion"]&&o["strip-dashed"]&&Object.keys(w).filter((e=>"--"!==e&&e.includes("-"))).forEach((e=>{delete w[e]})),o["strip-aliased"]&&[].concat(...Object.keys(r).map((e=>r[e]))).forEach((e=>{o["camel-case-expansion"]&&e.includes("-")&&delete w[e.split(".").map((e=>ps(e))).join(".")],delete w[e]})),{aliases:Object.assign({},g.aliases),argv:Object.assign(k,w),configuration:o,defaulted:Object.assign({},d),error:b,newAliases:Object.assign({},f)}}}({cwd:process.cwd,env:()=>Ns,format:i.format,normalize:n.normalize,resolve:n.resolve,require:e=>{if("undefined"!=typeof require)return require(e);if(e.match(/\.json$/))return JSON.parse(s.readFileSync(e,"utf8"));throw Error("only .json config files are supported in ESM")}}),xs=function(e,t){return Cs.parse(e.slice(),t).argv};function js(){return process.versions.electron&&!process.defaultApp?0:1}xs.detailed=function(e,t){return Cs.parse(e.slice(),t)},xs.camelCase=ps,xs.decamelize=gs,xs.looksLikeNumber=ms;class _s extends Error{constructor(e){super(e||"yargs error"),this.name="YError",Error.captureStackTrace&&Error.captureStackTrace(this,_s)}}var Is={fs:{readFileSync:s.readFileSync,writeFile:s.writeFile},format:i.format,resolve:n.resolve,exists:e=>{try{return s.statSync(e).isFile()}catch(e){return!1}}};let $s;class Ms{constructor(e){e=e||{},this.directory=e.directory||"./locales",this.updateFiles="boolean"!=typeof e.updateFiles||e.updateFiles,this.locale=e.locale||"en",this.fallbackToLanguage="boolean"!=typeof e.fallbackToLanguage||e.fallbackToLanguage,this.cache=Object.create(null),this.writeQueue=[]}__(...e){if("string"!=typeof arguments[0])return this._taggedLiteral(arguments[0],...arguments);const t=e.shift();let n=function(){};return"function"==typeof e[e.length-1]&&(n=e.pop()),n=n||function(){},this.cache[this.locale]||this._readLocaleFile(),!this.cache[this.locale][t]&&this.updateFiles?(this.cache[this.locale][t]=t,this._enqueueWrite({directory:this.directory,locale:this.locale,cb:n})):n(),$s.format.apply($s.format,[this.cache[this.locale][t]||t].concat(e))}__n(){const e=Array.prototype.slice.call(arguments),t=e.shift(),n=e.shift(),s=e.shift();let i=function(){};"function"==typeof e[e.length-1]&&(i=e.pop()),this.cache[this.locale]||this._readLocaleFile();let r=1===s?t:n;if(this.cache[this.locale][t]){r=this.cache[this.locale][t][1===s?"one":"other"]}!this.cache[this.locale][t]&&this.updateFiles?(this.cache[this.locale][t]={one:t,other:n},this._enqueueWrite({directory:this.directory,locale:this.locale,cb:i})):i();const o=[r];return~r.indexOf("%d")&&o.push(s),$s.format.apply($s.format,o.concat(e))}setLocale(e){this.locale=e}getLocale(){return this.locale}updateLocale(e){this.cache[this.locale]||this._readLocaleFile();for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(this.cache[this.locale][t]=e[t])}_taggedLiteral(e,...t){let n="";return e.forEach((function(e,s){const i=t[s+1];n+=e,void 0!==i&&(n+="%s")})),this.__.apply(this,[n].concat([].slice.call(t,1)))}_enqueueWrite(e){this.writeQueue.push(e),1===this.writeQueue.length&&this._processWriteQueue()}_processWriteQueue(){const e=this,t=this.writeQueue[0],n=t.directory,s=t.locale,i=t.cb,r=this._resolveLocaleFile(n,s),o=JSON.stringify(this.cache[s],null,2);$s.fs.writeFile(r,o,"utf-8",(function(t){e.writeQueue.shift(),e.writeQueue.length>0&&e._processWriteQueue(),i(t)}))}_readLocaleFile(){let e={};const t=this._resolveLocaleFile(this.directory,this.locale);try{$s.fs.readFileSync&&(e=JSON.parse($s.fs.readFileSync(t,"utf-8")))}catch(n){if(n instanceof SyntaxError&&(n.message="syntax error in "+t),"ENOENT"!==n.code)throw n;e={}}this.cache[this.locale]=e}_resolveLocaleFile(e,t){let n=$s.resolve(e,"./",t+".json");if(this.fallbackToLanguage&&!this._fileExistsSync(n)&&~t.lastIndexOf("_")){const s=$s.resolve(e,"./",t.split("_")[0]+".json");this._fileExistsSync(s)&&(n=s)}return n}_fileExistsSync(e){return $s.exists(e)}}const Ts="loading a directory of commands is not supported yet for ESM";let Ls;try{Ls=r.fileURLToPath("undefined"==typeof document?require("url").pathToFileURL(__filename).href:o&&"SCRIPT"===o.tagName.toUpperCase()&&o.src||new URL("index.js",document.baseURI).href)}catch(e){Ls=process.cwd()}const Ps=Ls.substring(0,Ls.lastIndexOf("node_modules"));var Ds,Bs={assert:{notStrictEqual:t.notStrictEqual,strictEqual:t.strictEqual},cliui:function(e){return function(e,t){return hs=t,new cs({width:(null==e?void 0:e.width)||("object"==typeof process&&process.stdout&&process.stdout.columns?process.stdout.columns:80),wrap:null==e?void 0:e.wrap})}(e,{stringWidth:e=>[...e].length,stripAnsi:fs,wrap:ds})},findUp:function(e,t){let i,r=n.resolve(".",e);for(s.statSync(r).isDirectory()||(r=n.dirname(r));;){if(i=t(r,s.readdirSync(r)),i)return n.resolve(r,i);if(r=n.dirname(i=r),i===r)break}},getEnv:e=>process.env[e],inspect:i.inspect,getCallerFile:()=>{throw new _s(Ts)},getProcessArgvBin:function(){return process.argv[js()]},mainFilename:Ps||process.cwd(),Parser:xs,path:{basename:n.basename,dirname:n.dirname,extname:n.extname,relative:n.relative,resolve:n.resolve},process:{argv:()=>process.argv,cwd:process.cwd,emitWarning:(e,t)=>process.emitWarning(e,t),execPath:()=>process.execPath,exit:process.exit,nextTick:process.nextTick,stdColumns:void 0!==process.stdout.columns?process.stdout.columns:null},readFileSync:s.readFileSync,require:()=>{throw new _s("require is not supported by ESM")},requireDirectory:()=>{throw new _s(Ts)},stringWidth:e=>[...e].length,y18n:(Ds={directory:n.resolve(Ls,"../../../locales"),updateFiles:!1},function(e,t){$s=t;const n=new Ms(e);return{__:n.__.bind(n),__n:n.__n.bind(n),setLocale:n.setLocale.bind(n),getLocale:n.getLocale.bind(n),updateLocale:n.updateLocale.bind(n),locale:n.locale}}(Ds,Is))};function qs(e,t,n,s){n.assert.notStrictEqual(e,t,s)}function Ks(e,t){t.assert.strictEqual(typeof e,"string")}function Us(e){return Object.keys(e)}function Fs(e){return!!e&&!!e.then&&"function"==typeof e.then}function Rs(e){const t=e.replace(/\s{2,}/g," ").split(/\s+(?![^[]*]|[^<]*>)/),n=/\.*[\][<>]/g,s=t.shift();if(!s)throw new Error(`No command found in: ${e}`);const i={cmd:s.replace(n,""),demanded:[],optional:[]};return t.forEach(((e,s)=>{let r=!1;e=e.replace(/\s/g,""),/\.+[\]>]/.test(e)&&s===t.length-1&&(r=!0),/^\[/.test(e)?i.optional.push({cmd:e.replace(n,"").split("|"),variadic:r}):i.demanded.push({cmd:e.replace(n,"").split("|"),variadic:r})})),i}const Ws=["first","second","third","fourth","fifth","sixth"];function Hs(e,t,n){try{let s=0;const[i,r,o]="object"==typeof e?[{demanded:[],optional:[]},e,t]:[Rs(`cmd ${e}`),t,n],a=[].slice.call(r);for(;a.length&&void 0===a[a.length-1];)a.pop();const c=o||a.length;if(c<i.demanded.length)throw new _s(`Not enough arguments provided. Expected ${i.demanded.length} but received ${a.length}.`);const l=i.demanded.length+i.optional.length;if(c>l)throw new _s(`Too many arguments provided. Expected max ${l} but received ${c}.`);i.demanded.forEach((e=>{const t=Vs(a.shift());0===e.cmd.filter((e=>e===t||"*"===e)).length&&zs(t,e.cmd,s),s+=1})),i.optional.forEach((e=>{if(0===a.length)return;const t=Vs(a.shift());0===e.cmd.filter((e=>e===t||"*"===e)).length&&zs(t,e.cmd,s),s+=1}))}catch(e){console.warn(e.stack)}}function Vs(e){return Array.isArray(e)?"array":null===e?"null":typeof e}function zs(e,t,n){throw new _s(`Invalid ${Ws[n]||"manyith"} argument. Expected ${t.join(" or ")} but received ${e}.`)}class Gs{constructor(e){this.globalMiddleware=[],this.frozens=[],this.yargs=e}addMiddleware(e,t,n=!0,s=!1){if(Hs("<array|function> [boolean] [boolean] [boolean]",[e,t,n],arguments.length),Array.isArray(e)){for(let s=0;s<e.length;s++){if("function"!=typeof e[s])throw Error("middleware must be a function");const i=e[s];i.applyBeforeValidation=t,i.global=n}Array.prototype.push.apply(this.globalMiddleware,e)}else if("function"==typeof e){const i=e;i.applyBeforeValidation=t,i.global=n,i.mutates=s,this.globalMiddleware.push(e)}return this.yargs}addCoerceMiddleware(e,t){const n=this.yargs.getAliases();return this.globalMiddleware=this.globalMiddleware.filter((e=>{const s=[...n[t]||[],t];return!e.option||!s.includes(e.option)})),e.option=t,this.addMiddleware(e,!0,!0,!0)}getMiddleware(){return this.globalMiddleware}freeze(){this.frozens.push([...this.globalMiddleware])}unfreeze(){const e=this.frozens.pop();void 0!==e&&(this.globalMiddleware=e)}reset(){this.globalMiddleware=this.globalMiddleware.filter((e=>e.global))}}function Ys(e,t,n,s){return n.reduce(((e,n)=>{if(n.applyBeforeValidation!==s)return e;if(n.mutates){if(n.applied)return e;n.applied=!0}if(Fs(e))return e.then((e=>Promise.all([e,n(e,t)]))).then((([e,t])=>Object.assign(e,t)));{const s=n(e,t);return Fs(s)?s.then((t=>Object.assign(e,t))):Object.assign(e,s)}}),e)}function Js(e,t,n=e=>{throw e}){try{const n="function"==typeof e?e():e;return Fs(n)?n.then((e=>t(e))):t(n)}catch(e){return n(e)}}const Qs=/(^\*)|(^\$0)/;class Xs{constructor(e,t,n,s){this.requireCache=new Set,this.handlers={},this.aliasMap={},this.frozens=[],this.shim=s,this.usage=e,this.globalMiddleware=n,this.validation=t}addDirectory(e,t,n,s){"boolean"!=typeof(s=s||{}).recurse&&(s.recurse=!1),Array.isArray(s.extensions)||(s.extensions=["js"]);const i="function"==typeof s.visit?s.visit:e=>e;s.visit=(e,t,n)=>{const s=i(e,t,n);if(s){if(this.requireCache.has(t))return s;this.requireCache.add(t),this.addHandler(s)}return s},this.shim.requireDirectory({require:t,filename:n},e,s)}addHandler(e,t,n,s,i,r){let o=[];const a=function(e){return e?e.map((e=>(e.applyBeforeValidation=!1,e))):[]}(i);if(s=s||(()=>{}),Array.isArray(e))if(function(e){return e.every((e=>"string"==typeof e))}(e))[e,...o]=e;else for(const t of e)this.addHandler(t);else{if(function(e){return"object"==typeof e&&!Array.isArray(e)}(e)){let t=Array.isArray(e.command)||"string"==typeof e.command?e.command:this.moduleName(e);return e.aliases&&(t=[].concat(t).concat(e.aliases)),void this.addHandler(t,this.extractDesc(e),e.builder,e.handler,e.middlewares,e.deprecated)}if(Zs(n))return void this.addHandler([e].concat(o),t,n.builder,n.handler,n.middlewares,n.deprecated)}if("string"==typeof e){const i=Rs(e);o=o.map((e=>Rs(e).cmd));let c=!1;const l=[i.cmd].concat(o).filter((e=>!Qs.test(e)||(c=!0,!1)));0===l.length&&c&&l.push("$0"),c&&(i.cmd=l[0],o=l.slice(1),e=e.replace(Qs,i.cmd)),o.forEach((e=>{this.aliasMap[e]=i.cmd})),!1!==t&&this.usage.command(e,t,c,o,r),this.handlers[i.cmd]={original:e,description:t,handler:s,builder:n||{},middlewares:a,deprecated:r,demanded:i.demanded,optional:i.optional},c&&(this.defaultCommand=this.handlers[i.cmd])}}getCommandHandlers(){return this.handlers}getCommands(){return Object.keys(this.handlers).concat(Object.keys(this.aliasMap))}hasDefaultCommand(){return!!this.defaultCommand}runCommand(e,t,n,s,i,r){const o=this.handlers[e]||this.handlers[this.aliasMap[e]]||this.defaultCommand,a=t.getInternalMethods().getContext(),c=a.commands.slice(),l=!e;e&&(a.commands.push(e),a.fullCommands.push(o.original));const h=this.applyBuilderUpdateUsageAndParse(l,o,t,n.aliases,c,s,i,r);return Fs(h)?h.then((e=>this.applyMiddlewareAndGetResult(l,o,e.innerArgv,a,i,e.aliases,t))):this.applyMiddlewareAndGetResult(l,o,h.innerArgv,a,i,h.aliases,t)}applyBuilderUpdateUsageAndParse(e,t,n,s,i,r,o,a){const c=t.builder;let l=n;if(ei(c)){n.getInternalMethods().getUsageInstance().freeze();const h=c(n.getInternalMethods().reset(s),a);if(Fs(h))return h.then((s=>{var a;return l=(a=s)&&"function"==typeof a.getInternalMethods?s:n,this.parseAndUpdateUsage(e,t,l,i,r,o)}))}else(function(e){return"object"==typeof e})(c)&&(n.getInternalMethods().getUsageInstance().freeze(),l=n.getInternalMethods().reset(s),Object.keys(t.builder).forEach((e=>{l.option(e,c[e])})));return this.parseAndUpdateUsage(e,t,l,i,r,o)}parseAndUpdateUsage(e,t,n,s,i,r){e&&n.getInternalMethods().getUsageInstance().unfreeze(!0),this.shouldUpdateUsage(n)&&n.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(s,t),t.description);const o=n.getInternalMethods().runYargsParserAndExecuteCommands(null,void 0,!0,i,r);return Fs(o)?o.then((e=>({aliases:n.parsed.aliases,innerArgv:e}))):{aliases:n.parsed.aliases,innerArgv:o}}shouldUpdateUsage(e){return!e.getInternalMethods().getUsageInstance().getUsageDisabled()&&0===e.getInternalMethods().getUsageInstance().getUsage().length}usageFromParentCommandsCommandHandler(e,t){const n=Qs.test(t.original)?t.original.replace(Qs,"").trim():t.original,s=e.filter((e=>!Qs.test(e)));return s.push(n),`$0 ${s.join(" ")}`}handleValidationAndGetResult(e,t,n,s,i,r,o,a){if(!r.getInternalMethods().getHasOutput()){const t=r.getInternalMethods().runValidation(i,a,r.parsed.error,e);n=Js(n,(e=>(t(e),e)))}if(t.handler&&!r.getInternalMethods().getHasOutput()){r.getInternalMethods().setHasOutput();const s=!!r.getOptions().configuration["populate--"];r.getInternalMethods().postProcess(n,s,!1,!1),n=Js(n=Ys(n,r,o,!1),(e=>{const n=t.handler(e);return Fs(n)?n.then((()=>e)):e})),e||r.getInternalMethods().getUsageInstance().cacheHelpMessage(),Fs(n)&&!r.getInternalMethods().hasParseCallback()&&n.catch((e=>{try{r.getInternalMethods().getUsageInstance().fail(null,e)}catch(e){}}))}return e||(s.commands.pop(),s.fullCommands.pop()),n}applyMiddlewareAndGetResult(e,t,n,s,i,r,o){let a={};if(i)return n;o.getInternalMethods().getHasOutput()||(a=this.populatePositionals(t,n,s,o));const c=this.globalMiddleware.getMiddleware().slice(0).concat(t.middlewares),l=Ys(n,o,c,!0);return Fs(l)?l.then((n=>this.handleValidationAndGetResult(e,t,n,s,r,o,c,a))):this.handleValidationAndGetResult(e,t,l,s,r,o,c,a)}populatePositionals(e,t,n,s){t._=t._.slice(n.commands.length);const i=e.demanded.slice(0),r=e.optional.slice(0),o={};for(this.validation.positionalCount(i.length,t._.length);i.length;){const e=i.shift();this.populatePositional(e,t,o)}for(;r.length;){const e=r.shift();this.populatePositional(e,t,o)}return t._=n.commands.concat(t._.map((e=>""+e))),this.postProcessPositionals(t,o,this.cmdToParseOptions(e.original),s),o}populatePositional(e,t,n){const s=e.cmd[0];e.variadic?n[s]=t._.splice(0).map(String):t._.length&&(n[s]=[String(t._.shift())])}cmdToParseOptions(e){const t={array:[],default:{},alias:{},demand:{}},n=Rs(e);return n.demanded.forEach((e=>{const[n,...s]=e.cmd;e.variadic&&(t.array.push(n),t.default[n]=[]),t.alias[n]=s,t.demand[n]=!0})),n.optional.forEach((e=>{const[n,...s]=e.cmd;e.variadic&&(t.array.push(n),t.default[n]=[]),t.alias[n]=s})),t}postProcessPositionals(e,t,n,s){const i=Object.assign({},s.getOptions());i.default=Object.assign(n.default,i.default);for(const e of Object.keys(n.alias))i.alias[e]=(i.alias[e]||[]).concat(n.alias[e]);i.array=i.array.concat(n.array),i.config={};const r=[];if(Object.keys(t).forEach((e=>{t[e].map((t=>{i.configuration["unknown-options-as-args"]&&(i.key[e]=!0),r.push(`--${e}`),r.push(t)}))})),!r.length)return;const o=Object.assign({},i.configuration,{"populate--":!1}),a=this.shim.Parser.detailed(r,Object.assign({},i,{configuration:o}));if(a.error)s.getInternalMethods().getUsageInstance().fail(a.error.message,a.error);else{const n=Object.keys(t);Object.keys(t).forEach((e=>{n.push(...a.aliases[e])})),Object.keys(a.argv).forEach((i=>{n.includes(i)&&(t[i]||(t[i]=a.argv[i]),!this.isInConfigs(s,i)&&!this.isDefaulted(s,i)&&Object.prototype.hasOwnProperty.call(e,i)&&Object.prototype.hasOwnProperty.call(a.argv,i)&&(Array.isArray(e[i])||Array.isArray(a.argv[i]))?e[i]=[].concat(e[i],a.argv[i]):e[i]=a.argv[i])}))}}isDefaulted(e,t){const{default:n}=e.getOptions();return Object.prototype.hasOwnProperty.call(n,t)||Object.prototype.hasOwnProperty.call(n,this.shim.Parser.camelCase(t))}isInConfigs(e,t){const{configObjects:n}=e.getOptions();return n.some((e=>Object.prototype.hasOwnProperty.call(e,t)))||n.some((e=>Object.prototype.hasOwnProperty.call(e,this.shim.Parser.camelCase(t))))}runDefaultBuilderOn(e){if(!this.defaultCommand)return;if(this.shouldUpdateUsage(e)){const t=Qs.test(this.defaultCommand.original)?this.defaultCommand.original:this.defaultCommand.original.replace(/^[^[\]<>]*/,"$0 ");e.getInternalMethods().getUsageInstance().usage(t,this.defaultCommand.description)}const t=this.defaultCommand.builder;if(ei(t))return t(e,!0);Zs(t)||Object.keys(t).forEach((n=>{e.option(n,t[n])}))}moduleName(e){const t=function(e){if("undefined"==typeof require)return null;for(let t,n=0,s=Object.keys(require.cache);n<s.length;n++)if(t=require.cache[s[n]],t.exports===e)return t;return null}(e);if(!t)throw new Error(`No command name given for module: ${this.shim.inspect(e)}`);return this.commandFromFilename(t.filename)}commandFromFilename(e){return this.shim.path.basename(e,this.shim.path.extname(e))}extractDesc({describe:e,description:t,desc:n}){for(const s of[e,t,n]){if("string"==typeof s||!1===s)return s;qs(s,!0,this.shim)}return!1}freeze(){this.frozens.push({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand})}unfreeze(){const e=this.frozens.pop();qs(e,void 0,this.shim),({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand}=e)}reset(){return this.handlers={},this.aliasMap={},this.defaultCommand=void 0,this.requireCache=new Set,this}}function Zs(e){return"object"==typeof e&&!!e.builder&&"function"==typeof e.handler}function ei(e){return"function"==typeof e}function ti(e={},t=()=>!0){const n={};return Us(e).forEach((s=>{t(s,e[s])&&(n[s]=e[s])})),n}function ni(e){"undefined"!=typeof process&&[process.stdout,process.stderr].forEach((t=>{const n=t;n._handle&&n.isTTY&&"function"==typeof n._handle.setBlocking&&n._handle.setBlocking(e)}))}function si(e){return"boolean"==typeof e}function ii(e,t){const n=t.y18n.__,s={},i=[];s.failFn=function(e){i.push(e)};let r=null,o=null,a=!0;s.showHelpOnFail=function(t=!0,n){const[i,c]="string"==typeof t?[!0,t]:[t,n];return e.getInternalMethods().isGlobalContext()&&(o=c),r=c,a=i,s};let c=!1;s.fail=function(t,n){const l=e.getInternalMethods().getLoggerInstance();if(!i.length){if(e.getExitProcess()&&ni(!0),!c){c=!0,a&&(e.showHelp("error"),l.error()),(t||n)&&l.error(t||n);const s=r||o;s&&((t||n)&&l.error(""),l.error(s))}if(n=n||new _s(t),e.getExitProcess())return e.exit(1);if(e.getInternalMethods().hasParseCallback())return e.exit(1,n);throw n}for(let e=i.length-1;e>=0;--e){const r=i[e];if(si(r)){if(n)throw n;if(t)throw Error(t)}else r(t,n,s)}};let l=[],h=!1;s.usage=(e,t)=>null===e?(h=!0,l=[],s):(h=!1,l.push([e,t||""]),s),s.getUsage=()=>l,s.getUsageDisabled=()=>h,s.getPositionalGroupName=()=>n("Positionals:");let u=[];s.example=(e,t)=>{u.push([e,t||""])};let f=[];s.command=function(e,t,n,s,i=!1){n&&(f=f.map((e=>(e[2]=!1,e)))),f.push([e,t||"",n,s,i])},s.getCommands=()=>f;let d={};s.describe=function(e,t){Array.isArray(e)?e.forEach((e=>{s.describe(e,t)})):"object"==typeof e?Object.keys(e).forEach((t=>{s.describe(t,e[t])})):d[e]=t},s.getDescriptions=()=>d;let p=[];s.epilog=e=>{p.push(e)};let g,m=!1;s.wrap=e=>{m=!0,g=e},s.getWrap=()=>t.getEnv("YARGS_DISABLE_WRAP")?null:(m||(g=function(){const e=80;return t.process.stdColumns?Math.min(e,t.process.stdColumns):e}(),m=!0),g);const y="__yargsString__:";function b(e,n,s){let i=0;return Array.isArray(e)||(e=Object.values(e).map((e=>[e]))),e.forEach((e=>{i=Math.max(t.stringWidth(s?`${s} ${ai(e[0])}`:ai(e[0]))+oi(e[0]),i)})),n&&(i=Math.min(i,parseInt((.5*n).toString(),10))),i}let v;function w(t){return e.getOptions().hiddenOptions.indexOf(t)<0||e.parsed.argv[e.getOptions().showHiddenOpt]}function k(e,t){let s=`[${n("default:")} `;if(void 0===e&&!t)return null;if(t)s+=t;else switch(typeof e){case"string":s+=`"${e}"`;break;case"object":s+=JSON.stringify(e);break;default:s+=e}return`${s}]`}s.deferY18nLookup=e=>y+e,s.help=function(){if(v)return v;!function(){const t=e.getDemandedOptions(),n=e.getOptions();(Object.keys(n.alias)||[]).forEach((i=>{n.alias[i].forEach((r=>{d[r]&&s.describe(i,d[r]),r in t&&e.demandOption(i,t[r]),n.boolean.includes(r)&&e.boolean(i),n.count.includes(r)&&e.count(i),n.string.includes(r)&&e.string(i),n.normalize.includes(r)&&e.normalize(i),n.array.includes(r)&&e.array(i),n.number.includes(r)&&e.number(i)}))}))}();const i=e.customScriptName?e.$0:t.path.basename(e.$0),r=e.getDemandedOptions(),o=e.getDemandedCommands(),a=e.getDeprecatedOptions(),c=e.getGroups(),g=e.getOptions();let m=[];m=m.concat(Object.keys(d)),m=m.concat(Object.keys(r)),m=m.concat(Object.keys(o)),m=m.concat(Object.keys(g.default)),m=m.filter(w),m=Object.keys(m.reduce(((e,t)=>("_"!==t&&(e[t]=!0),e)),{}));const O=s.getWrap(),E=t.cliui({width:O,wrap:!!O});if(!h)if(l.length)l.forEach((e=>{E.div({text:`${e[0].replace(/\$0/g,i)}`}),e[1]&&E.div({text:`${e[1]}`,padding:[1,0,0,0]})})),E.div();else if(f.length){let e=null;e=o._?`${i} <${n("command")}>\n`:`${i} [${n("command")}]\n`,E.div(`${e}`)}if(f.length>1||1===f.length&&!f[0][2]){E.div(n("Commands:"));const t=e.getInternalMethods().getContext(),s=t.commands.length?`${t.commands.join(" ")} `:"";!0===e.getInternalMethods().getParserConfiguration()["sort-commands"]&&(f=f.sort(((e,t)=>e[0].localeCompare(t[0]))));const r=i?`${i} `:"";f.forEach((e=>{const t=`${r}${s}${e[0].replace(/^\$0 ?/,"")}`;E.span({text:t,padding:[0,2,0,2],width:b(f,O,`${i}${s}`)+4},{text:e[1]});const o=[];e[2]&&o.push(`[${n("default")}]`),e[3]&&e[3].length&&o.push(`[${n("aliases:")} ${e[3].join(", ")}]`),e[4]&&("string"==typeof e[4]?o.push(`[${n("deprecated: %s",e[4])}]`):o.push(`[${n("deprecated")}]`)),o.length?E.div({text:o.join(" "),padding:[0,0,0,2],align:"right"}):E.div()})),E.div()}const S=(Object.keys(g.alias)||[]).concat(Object.keys(e.parsed.newAliases)||[]);m=m.filter((t=>!e.parsed.newAliases[t]&&S.every((e=>-1===(g.alias[e]||[]).indexOf(t)))));const A=n("Options:");c[A]||(c[A]=[]),function(e,t,n,s){let i=[],r=null;Object.keys(n).forEach((e=>{i=i.concat(n[e])})),e.forEach((e=>{r=[e].concat(t[e]),r.some((e=>-1!==i.indexOf(e)))||n[s].push(e)}))}(m,g.alias,c,A);const N=e=>/^--/.test(ai(e)),C=Object.keys(c).filter((e=>c[e].length>0)).map((e=>({groupName:e,normalizedKeys:c[e].filter(w).map((e=>{if(S.includes(e))return e;for(let t,n=0;void 0!==(t=S[n]);n++)if((g.alias[t]||[]).includes(e))return t;return e}))}))).filter((({normalizedKeys:e})=>e.length>0)).map((({groupName:e,normalizedKeys:t})=>{const n=t.reduce(((t,n)=>(t[n]=[n].concat(g.alias[n]||[]).map((t=>e===s.getPositionalGroupName()?t:(/^[0-9]$/.test(t)?g.boolean.includes(n)?"-":"--":t.length>1?"--":"-")+t)).sort(((e,t)=>N(e)===N(t)?0:N(e)?1:-1)).join(", "),t)),{});return{groupName:e,normalizedKeys:t,switches:n}}));if(C.filter((({groupName:e})=>e!==s.getPositionalGroupName())).some((({normalizedKeys:e,switches:t})=>!e.every((e=>N(t[e])))))&&C.filter((({groupName:e})=>e!==s.getPositionalGroupName())).forEach((({normalizedKeys:e,switches:t})=>{e.forEach((e=>{var n,s;N(t[e])&&(t[e]=(n=t[e],s=4,ri(n)?{text:n.text,indentation:n.indentation+s}:{text:n,indentation:s}))}))})),C.forEach((({groupName:t,normalizedKeys:i,switches:o})=>{E.div(t),i.forEach((t=>{const i=o[t];let c=d[t]||"",l=null;c.includes(y)&&(c=n(c.substring(16))),g.boolean.includes(t)&&(l=`[${n("boolean")}]`),g.count.includes(t)&&(l=`[${n("count")}]`),g.string.includes(t)&&(l=`[${n("string")}]`),g.normalize.includes(t)&&(l=`[${n("string")}]`),g.array.includes(t)&&(l=`[${n("array")}]`),g.number.includes(t)&&(l=`[${n("number")}]`);const h=[t in a?(u=a[t],"string"==typeof u?`[${n("deprecated: %s",u)}]`:`[${n("deprecated")}]`):null,l,t in r?`[${n("required")}]`:null,g.choices&&g.choices[t]?`[${n("choices:")} ${s.stringifiedValues(g.choices[t])}]`:null,k(g.default[t],g.defaultDescription[t])].filter(Boolean).join(" ");var u;E.span({text:ai(i),padding:[0,2,0,2+oi(i)],width:b(o,O)+4},c);const f=!0===e.getInternalMethods().getUsageConfiguration()["hide-types"];h&&!f?E.div({text:h,padding:[0,0,0,2],align:"right"}):E.div()})),E.div()})),u.length&&(E.div(n("Examples:")),u.forEach((e=>{e[0]=e[0].replace(/\$0/g,i)})),u.forEach((e=>{""===e[1]?E.div({text:e[0],padding:[0,2,0,2]}):E.div({text:e[0],padding:[0,2,0,2],width:b(u,O)+4},{text:e[1]})})),E.div()),p.length>0){const e=p.map((e=>e.replace(/\$0/g,i))).join("\n");E.div(`${e}\n`)}return E.toString().replace(/\s*$/,"")},s.cacheHelpMessage=function(){v=this.help()},s.clearCachedHelpMessage=function(){v=void 0},s.hasCachedHelpMessage=function(){return!!v},s.showHelp=t=>{const n=e.getInternalMethods().getLoggerInstance();t||(t="error");("function"==typeof t?t:n[t])(s.help())},s.functionDescription=e=>["(",e.name?t.Parser.decamelize(e.name,"-"):n("generated-value"),")"].join(""),s.stringifiedValues=function(e,t){let n="";const s=t||", ",i=[].concat(e);return e&&i.length?(i.forEach((e=>{n.length&&(n+=s),n+=JSON.stringify(e)})),n):n};let O=null;s.version=e=>{O=e},s.showVersion=t=>{const n=e.getInternalMethods().getLoggerInstance();t||(t="error");("function"==typeof t?t:n[t])(O)},s.reset=function(e){return r=null,c=!1,l=[],h=!1,p=[],u=[],f=[],d=ti(d,(t=>!e[t])),s};const E=[];return s.freeze=function(){E.push({failMessage:r,failureOutput:c,usages:l,usageDisabled:h,epilogs:p,examples:u,commands:f,descriptions:d})},s.unfreeze=function(e=!1){const t=E.pop();t&&(e?(d={...t.descriptions,...d},f=[...t.commands,...f],l=[...t.usages,...l],u=[...t.examples,...u],p=[...t.epilogs,...p]):({failMessage:r,failureOutput:c,usages:l,usageDisabled:h,epilogs:p,examples:u,commands:f,descriptions:d}=t))},s}function ri(e){return"object"==typeof e}function oi(e){return ri(e)?e.indentation:0}function ai(e){return ri(e)?e.text:e}class ci{constructor(e,t,n,s){var i,r,o;this.yargs=e,this.usage=t,this.command=n,this.shim=s,this.completionKey="get-yargs-completions",this.aliases=null,this.customCompletionFunction=null,this.indexAfterLastReset=0,this.zshShell=null!==(o=(null===(i=this.shim.getEnv("SHELL"))||void 0===i?void 0:i.includes("zsh"))||(null===(r=this.shim.getEnv("ZSH_NAME"))||void 0===r?void 0:r.includes("zsh")))&&void 0!==o&&o}defaultCompletion(e,t,n,s){const i=this.command.getCommandHandlers();for(let t=0,n=e.length;t<n;++t)if(i[e[t]]&&i[e[t]].builder){const n=i[e[t]].builder;if(ei(n)){this.indexAfterLastReset=t+1;const e=this.yargs.getInternalMethods().reset();return n(e,!0),e.argv}}const r=[];this.commandCompletions(r,e,n),this.optionCompletions(r,e,t,n),this.choicesFromOptionsCompletions(r,e,t,n),this.choicesFromPositionalsCompletions(r,e,t,n),s(null,r)}commandCompletions(e,t,n){const s=this.yargs.getInternalMethods().getContext().commands;n.match(/^-/)||s[s.length-1]===n||this.previousArgHasChoices(t)||this.usage.getCommands().forEach((n=>{const s=Rs(n[0]).cmd;if(-1===t.indexOf(s))if(this.zshShell){const t=n[1]||"";e.push(s.replace(/:/g,"\\:")+":"+t)}else e.push(s)}))}optionCompletions(e,t,n,s){if((s.match(/^-/)||""===s&&0===e.length)&&!this.previousArgHasChoices(t)){const n=this.yargs.getOptions(),i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[];Object.keys(n.key).forEach((r=>{const o=!!n.configuration["boolean-negation"]&&n.boolean.includes(r);i.includes(r)||n.hiddenOptions.includes(r)||this.argsContainKey(t,r,o)||this.completeOptionKey(r,e,s,o&&!!n.default[r])}))}}choicesFromOptionsCompletions(e,t,n,s){if(this.previousArgHasChoices(t)){const n=this.getPreviousArgChoices(t);n&&n.length>0&&e.push(...n.map((e=>e.replace(/:/g,"\\:"))))}}choicesFromPositionalsCompletions(e,t,n,s){if(""===s&&e.length>0&&this.previousArgHasChoices(t))return;const i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[],r=Math.max(this.indexAfterLastReset,this.yargs.getInternalMethods().getContext().commands.length+1),o=i[n._.length-r-1];if(!o)return;const a=this.yargs.getOptions().choices[o]||[];for(const t of a)t.startsWith(s)&&e.push(t.replace(/:/g,"\\:"))}getPreviousArgChoices(e){if(e.length<1)return;let t=e[e.length-1],n="";if(!t.startsWith("-")&&e.length>1&&(n=t,t=e[e.length-2]),!t.startsWith("-"))return;const s=t.replace(/^-+/,""),i=this.yargs.getOptions(),r=[s,...this.yargs.getAliases()[s]||[]];let o;for(const e of r)if(Object.prototype.hasOwnProperty.call(i.key,e)&&Array.isArray(i.choices[e])){o=i.choices[e];break}return o?o.filter((e=>!n||e.startsWith(n))):void 0}previousArgHasChoices(e){const t=this.getPreviousArgChoices(e);return void 0!==t&&t.length>0}argsContainKey(e,t,n){const s=t=>-1!==e.indexOf((/^[^0-9]$/.test(t)?"-":"--")+t);if(s(t))return!0;if(n&&s(`no-${t}`))return!0;if(this.aliases)for(const e of this.aliases[t])if(s(e))return!0;return!1}completeOptionKey(e,t,n,s){var i,r,o,a;let c=e;if(this.zshShell){const t=this.usage.getDescriptions(),n=null===(r=null===(i=null==this?void 0:this.aliases)||void 0===i?void 0:i[e])||void 0===r?void 0:r.find((e=>{const n=t[e];return"string"==typeof n&&n.length>0})),s=n?t[n]:void 0,l=null!==(a=null!==(o=t[e])&&void 0!==o?o:s)&&void 0!==a?a:"";c=`${e.replace(/:/g,"\\:")}:${l.replace("__yargsString__:","").replace(/(\r\n|\n|\r)/gm," ")}`}const l=!/^--/.test(n)&&(e=>/^[^0-9]$/.test(e))(e)?"-":"--";t.push(l+c),s&&t.push(l+"no-"+c)}customCompletion(e,t,n,s){if(qs(this.customCompletionFunction,null,this.shim),this.customCompletionFunction.length<3){const e=this.customCompletionFunction(n,t);return Fs(e)?e.then((e=>{this.shim.process.nextTick((()=>{s(null,e)}))})).catch((e=>{this.shim.process.nextTick((()=>{s(e,void 0)}))})):s(null,e)}return function(e){return e.length>3}(this.customCompletionFunction)?this.customCompletionFunction(n,t,((i=s)=>this.defaultCompletion(e,t,n,i)),(e=>{s(null,e)})):this.customCompletionFunction(n,t,(e=>{s(null,e)}))}getCompletion(e,t){const n=e.length?e[e.length-1]:"",s=this.yargs.parse(e,!0),i=this.customCompletionFunction?s=>this.customCompletion(e,s,n,t):s=>this.defaultCompletion(e,s,n,t);return Fs(s)?s.then(i):i(s)}generateCompletionScript(e,t){let n=this.zshShell?'#compdef {{app_name}}\n###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$\'\n\' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "${words[@]}"))\n  IFS=$si\n  _describe \'values\' reply\n}\ncompdef _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n':'###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word="${COMP_WORDS[COMP_CWORD]}"\n    args=("${COMP_WORDS[@]}")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions "${args[@]}")\n\n    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ ${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n';const s=this.shim.path.basename(e);return e.match(/\.js$/)&&(e=`./${e}`),n=n.replace(/{{app_name}}/g,s),n=n.replace(/{{completion_command}}/g,t),n.replace(/{{app_path}}/g,e)}registerFunction(e){this.customCompletionFunction=e}setParsed(e){this.aliases=e.aliases}}function li(e,t){if(0===e.length)return t.length;if(0===t.length)return e.length;const n=[];let s,i;for(s=0;s<=t.length;s++)n[s]=[s];for(i=0;i<=e.length;i++)n[0][i]=i;for(s=1;s<=t.length;s++)for(i=1;i<=e.length;i++)t.charAt(s-1)===e.charAt(i-1)?n[s][i]=n[s-1][i-1]:s>1&&i>1&&t.charAt(s-2)===e.charAt(i-1)&&t.charAt(s-1)===e.charAt(i-2)?n[s][i]=n[s-2][i-2]+1:n[s][i]=Math.min(n[s-1][i-1]+1,Math.min(n[s][i-1]+1,n[s-1][i]+1));return n[t.length][e.length]}const hi=["$0","--","_"];let ui,fi=[];function di(e,t,n,s){ui=s;let i={};if(Object.prototype.hasOwnProperty.call(e,"extends")){if("string"!=typeof e.extends)return i;const s=/\.json|\..*rc$/.test(e.extends);let r=null;if(s)r=function(e,t){return ui.path.resolve(e,t)}(t,e.extends);else try{r=require.resolve(e.extends)}catch(t){return e}!function(e){if(fi.indexOf(e)>-1)throw new _s(`Circular extended configurations: '${e}'.`)}(r),fi.push(r),i=s?JSON.parse(ui.readFileSync(r,"utf8")):require(e.extends),delete e.extends,i=di(i,ui.path.dirname(r),n,ui)}return fi=[],n?pi(i,e):Object.assign({},i,e)}function pi(e,t){const n={};function s(e){return e&&"object"==typeof e&&!Array.isArray(e)}Object.assign(n,e);for(const i of Object.keys(t))s(t[i])&&s(n[i])?n[i]=pi(e[i],t[i]):n[i]=t[i];return n}var gi,mi,yi,bi,vi,wi,ki,Oi,Ei,Si,Ai,Ni,Ci,xi,ji,_i,Ii,$i,Mi,Ti,Li,Pi,Di,Bi,qi,Ki,Ui,Fi,Ri,Wi,Hi,Vi,zi,Gi,Yi,Ji=function(e,t,n,s,i){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?i.call(e,n):i?i.value=n:t.set(e,n),n},Qi=function(e,t,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(e):s?s.value:t.get(e)};const Xi=Symbol("copyDoubleDash"),Zi=Symbol("copyDoubleDash"),er=Symbol("deleteFromParserHintObject"),tr=Symbol("emitWarning"),nr=Symbol("freeze"),sr=Symbol("getDollarZero"),ir=Symbol("getParserConfiguration"),rr=Symbol("getUsageConfiguration"),or=Symbol("guessLocale"),ar=Symbol("guessVersion"),cr=Symbol("parsePositionalNumbers"),lr=Symbol("pkgUp"),hr=Symbol("populateParserHintArray"),ur=Symbol("populateParserHintSingleValueDictionary"),fr=Symbol("populateParserHintArrayDictionary"),dr=Symbol("populateParserHintDictionary"),pr=Symbol("sanitizeKey"),gr=Symbol("setKey"),mr=Symbol("unfreeze"),yr=Symbol("validateAsync"),br=Symbol("getCommandInstance"),vr=Symbol("getContext"),wr=Symbol("getHasOutput"),kr=Symbol("getLoggerInstance"),Or=Symbol("getParseContext"),Er=Symbol("getUsageInstance"),Sr=Symbol("getValidationInstance"),Ar=Symbol("hasParseCallback"),Nr=Symbol("isGlobalContext"),Cr=Symbol("postProcess"),xr=Symbol("rebase"),jr=Symbol("reset"),_r=Symbol("runYargsParserAndExecuteCommands"),Ir=Symbol("runValidation"),$r=Symbol("setHasOutput"),Mr=Symbol("kTrackManuallySetKeys");class Tr{constructor(e=[],t,n,s){this.customScriptName=!1,this.parsed=!1,gi.set(this,void 0),mi.set(this,void 0),yi.set(this,{commands:[],fullCommands:[]}),bi.set(this,null),vi.set(this,null),wi.set(this,"show-hidden"),ki.set(this,null),Oi.set(this,!0),Ei.set(this,{}),Si.set(this,!0),Ai.set(this,[]),Ni.set(this,void 0),Ci.set(this,{}),xi.set(this,!1),ji.set(this,null),_i.set(this,!0),Ii.set(this,void 0),$i.set(this,""),Mi.set(this,void 0),Ti.set(this,void 0),Li.set(this,{}),Pi.set(this,null),Di.set(this,null),Bi.set(this,{}),qi.set(this,{}),Ki.set(this,void 0),Ui.set(this,!1),Fi.set(this,void 0),Ri.set(this,!1),Wi.set(this,!1),Hi.set(this,!1),Vi.set(this,void 0),zi.set(this,{}),Gi.set(this,null),Yi.set(this,void 0),Ji(this,Fi,s,"f"),Ji(this,Ki,e,"f"),Ji(this,mi,t,"f"),Ji(this,Ti,n,"f"),Ji(this,Ni,new Gs(this),"f"),this.$0=this[sr](),this[jr](),Ji(this,gi,Qi(this,gi,"f"),"f"),Ji(this,Vi,Qi(this,Vi,"f"),"f"),Ji(this,Yi,Qi(this,Yi,"f"),"f"),Ji(this,Mi,Qi(this,Mi,"f"),"f"),Qi(this,Mi,"f").showHiddenOpt=Qi(this,wi,"f"),Ji(this,Ii,this[Zi](),"f")}addHelpOpt(e,t){return Hs("[string|boolean] [string]",[e,t],arguments.length),Qi(this,ji,"f")&&(this[er](Qi(this,ji,"f")),Ji(this,ji,null,"f")),!1===e&&void 0===t||(Ji(this,ji,"string"==typeof e?e:"help","f"),this.boolean(Qi(this,ji,"f")),this.describe(Qi(this,ji,"f"),t||Qi(this,Vi,"f").deferY18nLookup("Show help"))),this}help(e,t){return this.addHelpOpt(e,t)}addShowHiddenOpt(e,t){if(Hs("[string|boolean] [string]",[e,t],arguments.length),!1===e&&void 0===t)return this;const n="string"==typeof e?e:Qi(this,wi,"f");return this.boolean(n),this.describe(n,t||Qi(this,Vi,"f").deferY18nLookup("Show hidden options")),Qi(this,Mi,"f").showHiddenOpt=n,this}showHidden(e,t){return this.addShowHiddenOpt(e,t)}alias(e,t){return Hs("<object|string|array> [string|array]",[e,t],arguments.length),this[fr](this.alias.bind(this),"alias",e,t),this}array(e){return Hs("<array|string>",[e],arguments.length),this[hr]("array",e),this[Mr](e),this}boolean(e){return Hs("<array|string>",[e],arguments.length),this[hr]("boolean",e),this[Mr](e),this}check(e,t){return Hs("<function> [boolean]",[e,t],arguments.length),this.middleware(((t,n)=>Js((()=>e(t,n.getOptions())),(n=>(n?("string"==typeof n||n instanceof Error)&&Qi(this,Vi,"f").fail(n.toString(),n):Qi(this,Vi,"f").fail(Qi(this,Fi,"f").y18n.__("Argument check failed: %s",e.toString())),t)),(e=>(Qi(this,Vi,"f").fail(e.message?e.message:e.toString(),e),t)))),!1,t),this}choices(e,t){return Hs("<object|string|array> [string|array]",[e,t],arguments.length),this[fr](this.choices.bind(this),"choices",e,t),this}coerce(e,t){if(Hs("<object|string|array> [function]",[e,t],arguments.length),Array.isArray(e)){if(!t)throw new _s("coerce callback must be provided");for(const n of e)this.coerce(n,t);return this}if("object"==typeof e){for(const t of Object.keys(e))this.coerce(t,e[t]);return this}if(!t)throw new _s("coerce callback must be provided");return Qi(this,Mi,"f").key[e]=!0,Qi(this,Ni,"f").addCoerceMiddleware(((n,s)=>{let i;return Object.prototype.hasOwnProperty.call(n,e)?Js((()=>(i=s.getAliases(),t(n[e]))),(t=>{n[e]=t;const r=s.getInternalMethods().getParserConfiguration()["strip-aliased"];if(i[e]&&!0!==r)for(const s of i[e])n[s]=t;return n}),(e=>{throw new _s(e.message)})):n}),e),this}conflicts(e,t){return Hs("<string|object> [string|array]",[e,t],arguments.length),Qi(this,Yi,"f").conflicts(e,t),this}config(e="config",t,n){return Hs("[object|string] [string|function] [function]",[e,t,n],arguments.length),"object"!=typeof e||Array.isArray(e)?("function"==typeof t&&(n=t,t=void 0),this.describe(e,t||Qi(this,Vi,"f").deferY18nLookup("Path to JSON config file")),(Array.isArray(e)?e:[e]).forEach((e=>{Qi(this,Mi,"f").config[e]=n||!0})),this):(e=di(e,Qi(this,mi,"f"),this[ir]()["deep-merge-config"]||!1,Qi(this,Fi,"f")),Qi(this,Mi,"f").configObjects=(Qi(this,Mi,"f").configObjects||[]).concat(e),this)}completion(e,t,n){return Hs("[string] [string|boolean|function] [function]",[e,t,n],arguments.length),"function"==typeof t&&(n=t,t=void 0),Ji(this,vi,e||Qi(this,vi,"f")||"completion","f"),t||!1===t||(t="generate completion script"),this.command(Qi(this,vi,"f"),t),n&&Qi(this,bi,"f").registerFunction(n),this}command(e,t,n,s,i,r){return Hs("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]",[e,t,n,s,i,r],arguments.length),Qi(this,gi,"f").addHandler(e,t,n,s,i,r),this}commands(e,t,n,s,i,r){return this.command(e,t,n,s,i,r)}commandDir(e,t){Hs("<string> [object]",[e,t],arguments.length);const n=Qi(this,Ti,"f")||Qi(this,Fi,"f").require;return Qi(this,gi,"f").addDirectory(e,n,Qi(this,Fi,"f").getCallerFile(),t),this}count(e){return Hs("<array|string>",[e],arguments.length),this[hr]("count",e),this[Mr](e),this}default(e,t,n){return Hs("<object|string|array> [*] [string]",[e,t,n],arguments.length),n&&(Ks(e,Qi(this,Fi,"f")),Qi(this,Mi,"f").defaultDescription[e]=n),"function"==typeof t&&(Ks(e,Qi(this,Fi,"f")),Qi(this,Mi,"f").defaultDescription[e]||(Qi(this,Mi,"f").defaultDescription[e]=Qi(this,Vi,"f").functionDescription(t)),t=t.call()),this[ur](this.default.bind(this),"default",e,t),this}defaults(e,t,n){return this.default(e,t,n)}demandCommand(e=1,t,n,s){return Hs("[number] [number|string] [string|null|undefined] [string|null|undefined]",[e,t,n,s],arguments.length),"number"!=typeof t&&(n=t,t=1/0),this.global("_",!1),Qi(this,Mi,"f").demandedCommands._={min:e,max:t,minMsg:n,maxMsg:s},this}demand(e,t,n){return Array.isArray(t)?(t.forEach((e=>{qs(n,!0,Qi(this,Fi,"f")),this.demandOption(e,n)})),t=1/0):"number"!=typeof t&&(n=t,t=1/0),"number"==typeof e?(qs(n,!0,Qi(this,Fi,"f")),this.demandCommand(e,t,n,n)):Array.isArray(e)?e.forEach((e=>{qs(n,!0,Qi(this,Fi,"f")),this.demandOption(e,n)})):"string"==typeof n?this.demandOption(e,n):!0!==n&&void 0!==n||this.demandOption(e),this}demandOption(e,t){return Hs("<object|string|array> [string]",[e,t],arguments.length),this[ur](this.demandOption.bind(this),"demandedOptions",e,t),this}deprecateOption(e,t){return Hs("<string> [string|boolean]",[e,t],arguments.length),Qi(this,Mi,"f").deprecatedOptions[e]=t,this}describe(e,t){return Hs("<object|string|array> [string]",[e,t],arguments.length),this[gr](e,!0),Qi(this,Vi,"f").describe(e,t),this}detectLocale(e){return Hs("<boolean>",[e],arguments.length),Ji(this,Oi,e,"f"),this}env(e){return Hs("[string|boolean]",[e],arguments.length),!1===e?delete Qi(this,Mi,"f").envPrefix:Qi(this,Mi,"f").envPrefix=e||"",this}epilogue(e){return Hs("<string>",[e],arguments.length),Qi(this,Vi,"f").epilog(e),this}epilog(e){return this.epilogue(e)}example(e,t){return Hs("<string|array> [string]",[e,t],arguments.length),Array.isArray(e)?e.forEach((e=>this.example(...e))):Qi(this,Vi,"f").example(e,t),this}exit(e,t){Ji(this,xi,!0,"f"),Ji(this,ki,t,"f"),Qi(this,Si,"f")&&Qi(this,Fi,"f").process.exit(e)}exitProcess(e=!0){return Hs("[boolean]",[e],arguments.length),Ji(this,Si,e,"f"),this}fail(e){if(Hs("<function|boolean>",[e],arguments.length),"boolean"==typeof e&&!1!==e)throw new _s("Invalid first argument. Expected function or boolean 'false'");return Qi(this,Vi,"f").failFn(e),this}getAliases(){return this.parsed?this.parsed.aliases:{}}async getCompletion(e,t){return Hs("<array> [function]",[e,t],arguments.length),t?Qi(this,bi,"f").getCompletion(e,t):new Promise(((t,n)=>{Qi(this,bi,"f").getCompletion(e,((e,s)=>{e?n(e):t(s)}))}))}getDemandedOptions(){return Hs([],0),Qi(this,Mi,"f").demandedOptions}getDemandedCommands(){return Hs([],0),Qi(this,Mi,"f").demandedCommands}getDeprecatedOptions(){return Hs([],0),Qi(this,Mi,"f").deprecatedOptions}getDetectLocale(){return Qi(this,Oi,"f")}getExitProcess(){return Qi(this,Si,"f")}getGroups(){return Object.assign({},Qi(this,Ci,"f"),Qi(this,qi,"f"))}getHelp(){if(Ji(this,xi,!0,"f"),!Qi(this,Vi,"f").hasCachedHelpMessage()){if(!this.parsed){const e=this[_r](Qi(this,Ki,"f"),void 0,void 0,0,!0);if(Fs(e))return e.then((()=>Qi(this,Vi,"f").help()))}const e=Qi(this,gi,"f").runDefaultBuilderOn(this);if(Fs(e))return e.then((()=>Qi(this,Vi,"f").help()))}return Promise.resolve(Qi(this,Vi,"f").help())}getOptions(){return Qi(this,Mi,"f")}getStrict(){return Qi(this,Ri,"f")}getStrictCommands(){return Qi(this,Wi,"f")}getStrictOptions(){return Qi(this,Hi,"f")}global(e,t){return Hs("<string|array> [boolean]",[e,t],arguments.length),e=[].concat(e),!1!==t?Qi(this,Mi,"f").local=Qi(this,Mi,"f").local.filter((t=>-1===e.indexOf(t))):e.forEach((e=>{Qi(this,Mi,"f").local.includes(e)||Qi(this,Mi,"f").local.push(e)})),this}group(e,t){Hs("<string|array> <string>",[e,t],arguments.length);const n=Qi(this,qi,"f")[t]||Qi(this,Ci,"f")[t];Qi(this,qi,"f")[t]&&delete Qi(this,qi,"f")[t];const s={};return Qi(this,Ci,"f")[t]=(n||[]).concat(e).filter((e=>!s[e]&&(s[e]=!0))),this}hide(e){return Hs("<string>",[e],arguments.length),Qi(this,Mi,"f").hiddenOptions.push(e),this}implies(e,t){return Hs("<string|object> [number|string|array]",[e,t],arguments.length),Qi(this,Yi,"f").implies(e,t),this}locale(e){return Hs("[string]",[e],arguments.length),void 0===e?(this[or](),Qi(this,Fi,"f").y18n.getLocale()):(Ji(this,Oi,!1,"f"),Qi(this,Fi,"f").y18n.setLocale(e),this)}middleware(e,t,n){return Qi(this,Ni,"f").addMiddleware(e,!!t,n)}nargs(e,t){return Hs("<string|object|array> [number]",[e,t],arguments.length),this[ur](this.nargs.bind(this),"narg",e,t),this}normalize(e){return Hs("<array|string>",[e],arguments.length),this[hr]("normalize",e),this}number(e){return Hs("<array|string>",[e],arguments.length),this[hr]("number",e),this[Mr](e),this}option(e,t){if(Hs("<string|object> [object]",[e,t],arguments.length),"object"==typeof e)Object.keys(e).forEach((t=>{this.options(t,e[t])}));else{"object"!=typeof t&&(t={}),this[Mr](e),!Qi(this,Gi,"f")||"version"!==e&&"version"!==(null==t?void 0:t.alias)||this[tr](['"version" is a reserved word.',"Please do one of the following:",'- Disable version with `yargs.version(false)` if using "version" as an option',"- Use the built-in `yargs.version` method instead (if applicable)","- Use a different option key","https://yargs.js.org/docs/#api-reference-version"].join("\n"),void 0,"versionWarning"),Qi(this,Mi,"f").key[e]=!0,t.alias&&this.alias(e,t.alias);const n=t.deprecate||t.deprecated;n&&this.deprecateOption(e,n);const s=t.demand||t.required||t.require;s&&this.demand(e,s),t.demandOption&&this.demandOption(e,"string"==typeof t.demandOption?t.demandOption:void 0),t.conflicts&&this.conflicts(e,t.conflicts),"default"in t&&this.default(e,t.default),void 0!==t.implies&&this.implies(e,t.implies),void 0!==t.nargs&&this.nargs(e,t.nargs),t.config&&this.config(e,t.configParser),t.normalize&&this.normalize(e),t.choices&&this.choices(e,t.choices),t.coerce&&this.coerce(e,t.coerce),t.group&&this.group(e,t.group),(t.boolean||"boolean"===t.type)&&(this.boolean(e),t.alias&&this.boolean(t.alias)),(t.array||"array"===t.type)&&(this.array(e),t.alias&&this.array(t.alias)),(t.number||"number"===t.type)&&(this.number(e),t.alias&&this.number(t.alias)),(t.string||"string"===t.type)&&(this.string(e),t.alias&&this.string(t.alias)),(t.count||"count"===t.type)&&this.count(e),"boolean"==typeof t.global&&this.global(e,t.global),t.defaultDescription&&(Qi(this,Mi,"f").defaultDescription[e]=t.defaultDescription),t.skipValidation&&this.skipValidation(e);const i=t.describe||t.description||t.desc,r=Qi(this,Vi,"f").getDescriptions();Object.prototype.hasOwnProperty.call(r,e)&&"string"!=typeof i||this.describe(e,i),t.hidden&&this.hide(e),t.requiresArg&&this.requiresArg(e)}return this}options(e,t){return this.option(e,t)}parse(e,t,n){Hs("[string|array] [function|boolean|object] [function]",[e,t,n],arguments.length),this[nr](),void 0===e&&(e=Qi(this,Ki,"f")),"object"==typeof t&&(Ji(this,Di,t,"f"),t=n),"function"==typeof t&&(Ji(this,Pi,t,"f"),t=!1),t||Ji(this,Ki,e,"f"),Qi(this,Pi,"f")&&Ji(this,Si,!1,"f");const s=this[_r](e,!!t),i=this.parsed;return Qi(this,bi,"f").setParsed(this.parsed),Fs(s)?s.then((e=>(Qi(this,Pi,"f")&&Qi(this,Pi,"f").call(this,Qi(this,ki,"f"),e,Qi(this,$i,"f")),e))).catch((e=>{throw Qi(this,Pi,"f")&&Qi(this,Pi,"f")(e,this.parsed.argv,Qi(this,$i,"f")),e})).finally((()=>{this[mr](),this.parsed=i})):(Qi(this,Pi,"f")&&Qi(this,Pi,"f").call(this,Qi(this,ki,"f"),s,Qi(this,$i,"f")),this[mr](),this.parsed=i,s)}parseAsync(e,t,n){const s=this.parse(e,t,n);return Fs(s)?s:Promise.resolve(s)}parseSync(e,t,n){const s=this.parse(e,t,n);if(Fs(s))throw new _s(".parseSync() must not be used with asynchronous builders, handlers, or middleware");return s}parserConfiguration(e){return Hs("<object>",[e],arguments.length),Ji(this,Li,e,"f"),this}pkgConf(e,t){Hs("<string> [string]",[e,t],arguments.length);let n=null;const s=this[lr](t||Qi(this,mi,"f"));return s[e]&&"object"==typeof s[e]&&(n=di(s[e],t||Qi(this,mi,"f"),this[ir]()["deep-merge-config"]||!1,Qi(this,Fi,"f")),Qi(this,Mi,"f").configObjects=(Qi(this,Mi,"f").configObjects||[]).concat(n)),this}positional(e,t){Hs("<string> <object>",[e,t],arguments.length);const n=["default","defaultDescription","implies","normalize","choices","conflicts","coerce","type","describe","desc","description","alias"];t=ti(t,((e,t)=>!("type"===e&&!["string","number","boolean"].includes(t))&&n.includes(e)));const s=Qi(this,yi,"f").fullCommands[Qi(this,yi,"f").fullCommands.length-1],i=s?Qi(this,gi,"f").cmdToParseOptions(s):{array:[],alias:{},default:{},demand:{}};return Us(i).forEach((n=>{const s=i[n];Array.isArray(s)?-1!==s.indexOf(e)&&(t[n]=!0):s[e]&&!(n in t)&&(t[n]=s[e])})),this.group(e,Qi(this,Vi,"f").getPositionalGroupName()),this.option(e,t)}recommendCommands(e=!0){return Hs("[boolean]",[e],arguments.length),Ji(this,Ui,e,"f"),this}required(e,t,n){return this.demand(e,t,n)}require(e,t,n){return this.demand(e,t,n)}requiresArg(e){return Hs("<array|string|object> [number]",[e],arguments.length),"string"==typeof e&&Qi(this,Mi,"f").narg[e]||this[ur](this.requiresArg.bind(this),"narg",e,NaN),this}showCompletionScript(e,t){return Hs("[string] [string]",[e,t],arguments.length),e=e||this.$0,Qi(this,Ii,"f").log(Qi(this,bi,"f").generateCompletionScript(e,t||Qi(this,vi,"f")||"completion")),this}showHelp(e){if(Hs("[string|function]",[e],arguments.length),Ji(this,xi,!0,"f"),!Qi(this,Vi,"f").hasCachedHelpMessage()){if(!this.parsed){const t=this[_r](Qi(this,Ki,"f"),void 0,void 0,0,!0);if(Fs(t))return t.then((()=>{Qi(this,Vi,"f").showHelp(e)})),this}const t=Qi(this,gi,"f").runDefaultBuilderOn(this);if(Fs(t))return t.then((()=>{Qi(this,Vi,"f").showHelp(e)})),this}return Qi(this,Vi,"f").showHelp(e),this}scriptName(e){return this.customScriptName=!0,this.$0=e,this}showHelpOnFail(e,t){return Hs("[boolean|string] [string]",[e,t],arguments.length),Qi(this,Vi,"f").showHelpOnFail(e,t),this}showVersion(e){return Hs("[string|function]",[e],arguments.length),Qi(this,Vi,"f").showVersion(e),this}skipValidation(e){return Hs("<array|string>",[e],arguments.length),this[hr]("skipValidation",e),this}strict(e){return Hs("[boolean]",[e],arguments.length),Ji(this,Ri,!1!==e,"f"),this}strictCommands(e){return Hs("[boolean]",[e],arguments.length),Ji(this,Wi,!1!==e,"f"),this}strictOptions(e){return Hs("[boolean]",[e],arguments.length),Ji(this,Hi,!1!==e,"f"),this}string(e){return Hs("<array|string>",[e],arguments.length),this[hr]("string",e),this[Mr](e),this}terminalWidth(){return Hs([],0),Qi(this,Fi,"f").process.stdColumns}updateLocale(e){return this.updateStrings(e)}updateStrings(e){return Hs("<object>",[e],arguments.length),Ji(this,Oi,!1,"f"),Qi(this,Fi,"f").y18n.updateLocale(e),this}usage(e,t,n,s){if(Hs("<string|null|undefined> [string|boolean] [function|object] [function]",[e,t,n,s],arguments.length),void 0!==t){if(qs(e,null,Qi(this,Fi,"f")),(e||"").match(/^\$0( |$)/))return this.command(e,t,n,s);throw new _s(".usage() description must start with $0 if being used as alias for .command()")}return Qi(this,Vi,"f").usage(e),this}usageConfiguration(e){return Hs("<object>",[e],arguments.length),Ji(this,zi,e,"f"),this}version(e,t,n){const s="version";if(Hs("[boolean|string] [string] [string]",[e,t,n],arguments.length),Qi(this,Gi,"f")&&(this[er](Qi(this,Gi,"f")),Qi(this,Vi,"f").version(void 0),Ji(this,Gi,null,"f")),0===arguments.length)n=this[ar](),e=s;else if(1===arguments.length){if(!1===e)return this;n=e,e=s}else 2===arguments.length&&(n=t,t=void 0);return Ji(this,Gi,"string"==typeof e?e:s,"f"),t=t||Qi(this,Vi,"f").deferY18nLookup("Show version number"),Qi(this,Vi,"f").version(n||void 0),this.boolean(Qi(this,Gi,"f")),this.describe(Qi(this,Gi,"f"),t),this}wrap(e){return Hs("<number|null|undefined>",[e],arguments.length),Qi(this,Vi,"f").wrap(e),this}[(gi=new WeakMap,mi=new WeakMap,yi=new WeakMap,bi=new WeakMap,vi=new WeakMap,wi=new WeakMap,ki=new WeakMap,Oi=new WeakMap,Ei=new WeakMap,Si=new WeakMap,Ai=new WeakMap,Ni=new WeakMap,Ci=new WeakMap,xi=new WeakMap,ji=new WeakMap,_i=new WeakMap,Ii=new WeakMap,$i=new WeakMap,Mi=new WeakMap,Ti=new WeakMap,Li=new WeakMap,Pi=new WeakMap,Di=new WeakMap,Bi=new WeakMap,qi=new WeakMap,Ki=new WeakMap,Ui=new WeakMap,Fi=new WeakMap,Ri=new WeakMap,Wi=new WeakMap,Hi=new WeakMap,Vi=new WeakMap,zi=new WeakMap,Gi=new WeakMap,Yi=new WeakMap,Xi)](e){if(!e._||!e["--"])return e;e._.push.apply(e._,e["--"]);try{delete e["--"]}catch(e){}return e}[Zi](){return{log:(...e)=>{this[Ar]()||console.log(...e),Ji(this,xi,!0,"f"),Qi(this,$i,"f").length&&Ji(this,$i,Qi(this,$i,"f")+"\n","f"),Ji(this,$i,Qi(this,$i,"f")+e.join(" "),"f")},error:(...e)=>{this[Ar]()||console.error(...e),Ji(this,xi,!0,"f"),Qi(this,$i,"f").length&&Ji(this,$i,Qi(this,$i,"f")+"\n","f"),Ji(this,$i,Qi(this,$i,"f")+e.join(" "),"f")}}}[er](e){Us(Qi(this,Mi,"f")).forEach((t=>{if("configObjects"===t)return;const n=Qi(this,Mi,"f")[t];Array.isArray(n)?n.includes(e)&&n.splice(n.indexOf(e),1):"object"==typeof n&&delete n[e]})),delete Qi(this,Vi,"f").getDescriptions()[e]}[tr](e,t,n){Qi(this,Ei,"f")[n]||(Qi(this,Fi,"f").process.emitWarning(e,t),Qi(this,Ei,"f")[n]=!0)}[nr](){Qi(this,Ai,"f").push({options:Qi(this,Mi,"f"),configObjects:Qi(this,Mi,"f").configObjects.slice(0),exitProcess:Qi(this,Si,"f"),groups:Qi(this,Ci,"f"),strict:Qi(this,Ri,"f"),strictCommands:Qi(this,Wi,"f"),strictOptions:Qi(this,Hi,"f"),completionCommand:Qi(this,vi,"f"),output:Qi(this,$i,"f"),exitError:Qi(this,ki,"f"),hasOutput:Qi(this,xi,"f"),parsed:this.parsed,parseFn:Qi(this,Pi,"f"),parseContext:Qi(this,Di,"f")}),Qi(this,Vi,"f").freeze(),Qi(this,Yi,"f").freeze(),Qi(this,gi,"f").freeze(),Qi(this,Ni,"f").freeze()}[sr](){let e,t="";return e=/\b(node|iojs|electron)(\.exe)?$/.test(Qi(this,Fi,"f").process.argv()[0])?Qi(this,Fi,"f").process.argv().slice(1,2):Qi(this,Fi,"f").process.argv().slice(0,1),t=e.map((e=>{const t=this[xr](Qi(this,mi,"f"),e);return e.match(/^(\/|([a-zA-Z]:)?\\)/)&&t.length<e.length?t:e})).join(" ").trim(),Qi(this,Fi,"f").getEnv("_")&&Qi(this,Fi,"f").getProcessArgvBin()===Qi(this,Fi,"f").getEnv("_")&&(t=Qi(this,Fi,"f").getEnv("_").replace(`${Qi(this,Fi,"f").path.dirname(Qi(this,Fi,"f").process.execPath())}/`,"")),t}[ir](){return Qi(this,Li,"f")}[rr](){return Qi(this,zi,"f")}[or](){if(!Qi(this,Oi,"f"))return;const e=Qi(this,Fi,"f").getEnv("LC_ALL")||Qi(this,Fi,"f").getEnv("LC_MESSAGES")||Qi(this,Fi,"f").getEnv("LANG")||Qi(this,Fi,"f").getEnv("LANGUAGE")||"en_US";this.locale(e.replace(/[.:].*/,""))}[ar](){return this[lr]().version||"unknown"}[cr](e){const t=e["--"]?e["--"]:e._;for(let e,n=0;void 0!==(e=t[n]);n++)Qi(this,Fi,"f").Parser.looksLikeNumber(e)&&Number.isSafeInteger(Math.floor(parseFloat(`${e}`)))&&(t[n]=Number(e));return e}[lr](e){const t=e||"*";if(Qi(this,Bi,"f")[t])return Qi(this,Bi,"f")[t];let n={};try{let t=e||Qi(this,Fi,"f").mainFilename;!e&&Qi(this,Fi,"f").path.extname(t)&&(t=Qi(this,Fi,"f").path.dirname(t));const s=Qi(this,Fi,"f").findUp(t,((e,t)=>t.includes("package.json")?"package.json":void 0));qs(s,void 0,Qi(this,Fi,"f")),n=JSON.parse(Qi(this,Fi,"f").readFileSync(s,"utf8"))}catch(e){}return Qi(this,Bi,"f")[t]=n||{},Qi(this,Bi,"f")[t]}[hr](e,t){(t=[].concat(t)).forEach((t=>{t=this[pr](t),Qi(this,Mi,"f")[e].push(t)}))}[ur](e,t,n,s){this[dr](e,t,n,s,((e,t,n)=>{Qi(this,Mi,"f")[e][t]=n}))}[fr](e,t,n,s){this[dr](e,t,n,s,((e,t,n)=>{Qi(this,Mi,"f")[e][t]=(Qi(this,Mi,"f")[e][t]||[]).concat(n)}))}[dr](e,t,n,s,i){if(Array.isArray(n))n.forEach((t=>{e(t,s)}));else if((e=>"object"==typeof e)(n))for(const t of Us(n))e(t,n[t]);else i(t,this[pr](n),s)}[pr](e){return"__proto__"===e?"___proto___":e}[gr](e,t){return this[ur](this[gr].bind(this),"key",e,t),this}[mr](){var e,t,n,s,i,r,o,a,c,l,h,u;const f=Qi(this,Ai,"f").pop();let d;qs(f,void 0,Qi(this,Fi,"f")),e=this,t=this,n=this,s=this,i=this,r=this,o=this,a=this,c=this,l=this,h=this,u=this,({options:{set value(t){Ji(e,Mi,t,"f")}}.value,configObjects:d,exitProcess:{set value(e){Ji(t,Si,e,"f")}}.value,groups:{set value(e){Ji(n,Ci,e,"f")}}.value,output:{set value(e){Ji(s,$i,e,"f")}}.value,exitError:{set value(e){Ji(i,ki,e,"f")}}.value,hasOutput:{set value(e){Ji(r,xi,e,"f")}}.value,parsed:this.parsed,strict:{set value(e){Ji(o,Ri,e,"f")}}.value,strictCommands:{set value(e){Ji(a,Wi,e,"f")}}.value,strictOptions:{set value(e){Ji(c,Hi,e,"f")}}.value,completionCommand:{set value(e){Ji(l,vi,e,"f")}}.value,parseFn:{set value(e){Ji(h,Pi,e,"f")}}.value,parseContext:{set value(e){Ji(u,Di,e,"f")}}.value}=f),Qi(this,Mi,"f").configObjects=d,Qi(this,Vi,"f").unfreeze(),Qi(this,Yi,"f").unfreeze(),Qi(this,gi,"f").unfreeze(),Qi(this,Ni,"f").unfreeze()}[yr](e,t){return Js(t,(t=>(e(t),t)))}getInternalMethods(){return{getCommandInstance:this[br].bind(this),getContext:this[vr].bind(this),getHasOutput:this[wr].bind(this),getLoggerInstance:this[kr].bind(this),getParseContext:this[Or].bind(this),getParserConfiguration:this[ir].bind(this),getUsageConfiguration:this[rr].bind(this),getUsageInstance:this[Er].bind(this),getValidationInstance:this[Sr].bind(this),hasParseCallback:this[Ar].bind(this),isGlobalContext:this[Nr].bind(this),postProcess:this[Cr].bind(this),reset:this[jr].bind(this),runValidation:this[Ir].bind(this),runYargsParserAndExecuteCommands:this[_r].bind(this),setHasOutput:this[$r].bind(this)}}[br](){return Qi(this,gi,"f")}[vr](){return Qi(this,yi,"f")}[wr](){return Qi(this,xi,"f")}[kr](){return Qi(this,Ii,"f")}[Or](){return Qi(this,Di,"f")||{}}[Er](){return Qi(this,Vi,"f")}[Sr](){return Qi(this,Yi,"f")}[Ar](){return!!Qi(this,Pi,"f")}[Nr](){return Qi(this,_i,"f")}[Cr](e,t,n,s){if(n)return e;if(Fs(e))return e;t||(e=this[Xi](e));return(this[ir]()["parse-positional-numbers"]||void 0===this[ir]()["parse-positional-numbers"])&&(e=this[cr](e)),s&&(e=Ys(e,this,Qi(this,Ni,"f").getMiddleware(),!1)),e}[jr](e={}){Ji(this,Mi,Qi(this,Mi,"f")||{},"f");const t={};t.local=Qi(this,Mi,"f").local||[],t.configObjects=Qi(this,Mi,"f").configObjects||[];const n={};t.local.forEach((t=>{n[t]=!0,(e[t]||[]).forEach((e=>{n[e]=!0}))})),Object.assign(Qi(this,qi,"f"),Object.keys(Qi(this,Ci,"f")).reduce(((e,t)=>{const s=Qi(this,Ci,"f")[t].filter((e=>!(e in n)));return s.length>0&&(e[t]=s),e}),{})),Ji(this,Ci,{},"f");return["array","boolean","string","skipValidation","count","normalize","number","hiddenOptions"].forEach((e=>{t[e]=(Qi(this,Mi,"f")[e]||[]).filter((e=>!n[e]))})),["narg","key","alias","default","defaultDescription","config","choices","demandedOptions","demandedCommands","deprecatedOptions"].forEach((e=>{t[e]=ti(Qi(this,Mi,"f")[e],(e=>!n[e]))})),t.envPrefix=Qi(this,Mi,"f").envPrefix,Ji(this,Mi,t,"f"),Ji(this,Vi,Qi(this,Vi,"f")?Qi(this,Vi,"f").reset(n):ii(this,Qi(this,Fi,"f")),"f"),Ji(this,Yi,Qi(this,Yi,"f")?Qi(this,Yi,"f").reset(n):function(e,t,n){const s=n.y18n.__,i=n.y18n.__n,r={nonOptionCount:function(n){const s=e.getDemandedCommands(),r=n._.length+(n["--"]?n["--"].length:0)-e.getInternalMethods().getContext().commands.length;s._&&(r<s._.min||r>s._.max)&&(r<s._.min?void 0!==s._.minMsg?t.fail(s._.minMsg?s._.minMsg.replace(/\$0/g,r.toString()).replace(/\$1/,s._.min.toString()):null):t.fail(i("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",r,r.toString(),s._.min.toString())):r>s._.max&&(void 0!==s._.maxMsg?t.fail(s._.maxMsg?s._.maxMsg.replace(/\$0/g,r.toString()).replace(/\$1/,s._.max.toString()):null):t.fail(i("Too many non-option arguments: got %s, maximum of %s","Too many non-option arguments: got %s, maximum of %s",r,r.toString(),s._.max.toString()))))},positionalCount:function(e,n){n<e&&t.fail(i("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",n,n+"",e+""))},requiredArguments:function(e,n){let s=null;for(const t of Object.keys(n))Object.prototype.hasOwnProperty.call(e,t)&&void 0!==e[t]||(s=s||{},s[t]=n[t]);if(s){const e=[];for(const t of Object.keys(s)){const n=s[t];n&&e.indexOf(n)<0&&e.push(n)}const n=e.length?`\n${e.join("\n")}`:"";t.fail(i("Missing required argument: %s","Missing required arguments: %s",Object.keys(s).length,Object.keys(s).join(", ")+n))}},unknownArguments:function(n,s,o,a,c=!0){var l;const h=e.getInternalMethods().getCommandInstance().getCommands(),u=[],f=e.getInternalMethods().getContext();if(Object.keys(n).forEach((t=>{hi.includes(t)||Object.prototype.hasOwnProperty.call(o,t)||Object.prototype.hasOwnProperty.call(e.getInternalMethods().getParseContext(),t)||r.isValidAndSomeAliasIsNotNew(t,s)||u.push(t)})),c&&(f.commands.length>0||h.length>0||a)&&n._.slice(f.commands.length).forEach((e=>{h.includes(""+e)||u.push(""+e)})),c){const t=(null===(l=e.getDemandedCommands()._)||void 0===l?void 0:l.max)||0,s=f.commands.length+t;s<n._.length&&n._.slice(s).forEach((e=>{e=String(e),f.commands.includes(e)||u.includes(e)||u.push(e)}))}u.length&&t.fail(i("Unknown argument: %s","Unknown arguments: %s",u.length,u.map((e=>e.trim()?e:`"${e}"`)).join(", ")))},unknownCommands:function(n){const s=e.getInternalMethods().getCommandInstance().getCommands(),r=[],o=e.getInternalMethods().getContext();return(o.commands.length>0||s.length>0)&&n._.slice(o.commands.length).forEach((e=>{s.includes(""+e)||r.push(""+e)})),r.length>0&&(t.fail(i("Unknown command: %s","Unknown commands: %s",r.length,r.join(", "))),!0)},isValidAndSomeAliasIsNotNew:function(t,n){if(!Object.prototype.hasOwnProperty.call(n,t))return!1;const s=e.parsed.newAliases;return[t,...n[t]].some((e=>!Object.prototype.hasOwnProperty.call(s,e)||!s[t]))},limitedChoices:function(n){const i=e.getOptions(),r={};if(!Object.keys(i.choices).length)return;Object.keys(n).forEach((e=>{-1===hi.indexOf(e)&&Object.prototype.hasOwnProperty.call(i.choices,e)&&[].concat(n[e]).forEach((t=>{-1===i.choices[e].indexOf(t)&&void 0!==t&&(r[e]=(r[e]||[]).concat(t))}))}));const o=Object.keys(r);if(!o.length)return;let a=s("Invalid values:");o.forEach((e=>{a+=`\n  ${s("Argument: %s, Given: %s, Choices: %s",e,t.stringifiedValues(r[e]),t.stringifiedValues(i.choices[e]))}`})),t.fail(a)}};let o={};function a(e,t){const n=Number(t);return"number"==typeof(t=isNaN(n)?t:n)?t=e._.length>=t:t.match(/^--no-.+/)?(t=t.match(/^--no-(.+)/)[1],t=!Object.prototype.hasOwnProperty.call(e,t)):t=Object.prototype.hasOwnProperty.call(e,t),t}r.implies=function(t,s){Hs("<string|object> [array|number|string]",[t,s],arguments.length),"object"==typeof t?Object.keys(t).forEach((e=>{r.implies(e,t[e])})):(e.global(t),o[t]||(o[t]=[]),Array.isArray(s)?s.forEach((e=>r.implies(t,e))):(qs(s,void 0,n),o[t].push(s)))},r.getImplied=function(){return o},r.implications=function(e){const n=[];if(Object.keys(o).forEach((t=>{const s=t;(o[t]||[]).forEach((t=>{let i=s;const r=t;i=a(e,i),t=a(e,t),i&&!t&&n.push(` ${s} -> ${r}`)}))})),n.length){let e=`${s("Implications failed:")}\n`;n.forEach((t=>{e+=t})),t.fail(e)}};let c={};r.conflicts=function(t,n){Hs("<string|object> [array|string]",[t,n],arguments.length),"object"==typeof t?Object.keys(t).forEach((e=>{r.conflicts(e,t[e])})):(e.global(t),c[t]||(c[t]=[]),Array.isArray(n)?n.forEach((e=>r.conflicts(t,e))):c[t].push(n))},r.getConflicting=()=>c,r.conflicting=function(i){Object.keys(i).forEach((e=>{c[e]&&c[e].forEach((n=>{n&&void 0!==i[e]&&void 0!==i[n]&&t.fail(s("Arguments %s and %s are mutually exclusive",e,n))}))})),e.getInternalMethods().getParserConfiguration()["strip-dashed"]&&Object.keys(c).forEach((e=>{c[e].forEach((r=>{r&&void 0!==i[n.Parser.camelCase(e)]&&void 0!==i[n.Parser.camelCase(r)]&&t.fail(s("Arguments %s and %s are mutually exclusive",e,r))}))}))},r.recommendCommands=function(e,n){n=n.sort(((e,t)=>t.length-e.length));let i=null,r=1/0;for(let t,s=0;void 0!==(t=n[s]);s++){const n=li(e,t);n<=3&&n<r&&(r=n,i=t)}i&&t.fail(s("Did you mean %s?",i))},r.reset=function(e){return o=ti(o,(t=>!e[t])),c=ti(c,(t=>!e[t])),r};const l=[];return r.freeze=function(){l.push({implied:o,conflicting:c})},r.unfreeze=function(){const e=l.pop();qs(e,void 0,n),({implied:o,conflicting:c}=e)},r}(this,Qi(this,Vi,"f"),Qi(this,Fi,"f")),"f"),Ji(this,gi,Qi(this,gi,"f")?Qi(this,gi,"f").reset():function(e,t,n,s){return new Xs(e,t,n,s)}(Qi(this,Vi,"f"),Qi(this,Yi,"f"),Qi(this,Ni,"f"),Qi(this,Fi,"f")),"f"),Qi(this,bi,"f")||Ji(this,bi,function(e,t,n,s){return new ci(e,t,n,s)}(this,Qi(this,Vi,"f"),Qi(this,gi,"f"),Qi(this,Fi,"f")),"f"),Qi(this,Ni,"f").reset(),Ji(this,vi,null,"f"),Ji(this,$i,"","f"),Ji(this,ki,null,"f"),Ji(this,xi,!1,"f"),this.parsed=!1,this}[xr](e,t){return Qi(this,Fi,"f").path.relative(e,t)}[_r](e,t,n,s=0,i=!1){let r=!!n||i;e=e||Qi(this,Ki,"f"),Qi(this,Mi,"f").__=Qi(this,Fi,"f").y18n.__,Qi(this,Mi,"f").configuration=this[ir]();const o=!!Qi(this,Mi,"f").configuration["populate--"],a=Object.assign({},Qi(this,Mi,"f").configuration,{"populate--":!0}),c=Qi(this,Fi,"f").Parser.detailed(e,Object.assign({},Qi(this,Mi,"f"),{configuration:{"parse-positional-numbers":!1,...a}})),l=Object.assign(c.argv,Qi(this,Di,"f"));let h;const u=c.aliases;let f=!1,d=!1;Object.keys(l).forEach((e=>{e===Qi(this,ji,"f")&&l[e]?f=!0:e===Qi(this,Gi,"f")&&l[e]&&(d=!0)})),l.$0=this.$0,this.parsed=c,0===s&&Qi(this,Vi,"f").clearCachedHelpMessage();try{if(this[or](),t)return this[Cr](l,o,!!n,!1);if(Qi(this,ji,"f")){[Qi(this,ji,"f")].concat(u[Qi(this,ji,"f")]||[]).filter((e=>e.length>1)).includes(""+l._[l._.length-1])&&(l._.pop(),f=!0)}Ji(this,_i,!1,"f");const a=Qi(this,gi,"f").getCommands(),p=Qi(this,bi,"f").completionKey in l,g=f||p||i;if(l._.length){if(a.length){let e;for(let t,r=s||0;void 0!==l._[r];r++){if(t=String(l._[r]),a.includes(t)&&t!==Qi(this,vi,"f")){const e=Qi(this,gi,"f").runCommand(t,this,c,r+1,i,f||d||i);return this[Cr](e,o,!!n,!1)}if(!e&&t!==Qi(this,vi,"f")){e=t;break}}!Qi(this,gi,"f").hasDefaultCommand()&&Qi(this,Ui,"f")&&e&&!g&&Qi(this,Yi,"f").recommendCommands(e,a)}Qi(this,vi,"f")&&l._.includes(Qi(this,vi,"f"))&&!p&&(Qi(this,Si,"f")&&ni(!0),this.showCompletionScript(),this.exit(0))}if(Qi(this,gi,"f").hasDefaultCommand()&&!g){const e=Qi(this,gi,"f").runCommand(null,this,c,0,i,f||d||i);return this[Cr](e,o,!!n,!1)}if(p){Qi(this,Si,"f")&&ni(!0);const t=(e=[].concat(e)).slice(e.indexOf(`--${Qi(this,bi,"f").completionKey}`)+1);return Qi(this,bi,"f").getCompletion(t,((e,t)=>{if(e)throw new _s(e.message);(t||[]).forEach((e=>{Qi(this,Ii,"f").log(e)})),this.exit(0)})),this[Cr](l,!o,!!n,!1)}if(Qi(this,xi,"f")||(f?(Qi(this,Si,"f")&&ni(!0),r=!0,this.showHelp("log"),this.exit(0)):d&&(Qi(this,Si,"f")&&ni(!0),r=!0,Qi(this,Vi,"f").showVersion("log"),this.exit(0))),!r&&Qi(this,Mi,"f").skipValidation.length>0&&(r=Object.keys(l).some((e=>Qi(this,Mi,"f").skipValidation.indexOf(e)>=0&&!0===l[e]))),!r){if(c.error)throw new _s(c.error.message);if(!p){const e=this[Ir](u,{},c.error);n||(h=Ys(l,this,Qi(this,Ni,"f").getMiddleware(),!0)),h=this[yr](e,null!=h?h:l),Fs(h)&&!n&&(h=h.then((()=>Ys(l,this,Qi(this,Ni,"f").getMiddleware(),!1))))}}}catch(e){if(!(e instanceof _s))throw e;Qi(this,Vi,"f").fail(e.message,e)}return this[Cr](null!=h?h:l,o,!!n,!0)}[Ir](e,t,n,s){const i={...this.getDemandedOptions()};return r=>{if(n)throw new _s(n.message);Qi(this,Yi,"f").nonOptionCount(r),Qi(this,Yi,"f").requiredArguments(r,i);let o=!1;Qi(this,Wi,"f")&&(o=Qi(this,Yi,"f").unknownCommands(r)),Qi(this,Ri,"f")&&!o?Qi(this,Yi,"f").unknownArguments(r,e,t,!!s):Qi(this,Hi,"f")&&Qi(this,Yi,"f").unknownArguments(r,e,{},!1,!1),Qi(this,Yi,"f").limitedChoices(r),Qi(this,Yi,"f").implications(r),Qi(this,Yi,"f").conflicting(r)}}[$r](){Ji(this,xi,!0,"f")}[Mr](e){if("string"==typeof e)Qi(this,Mi,"f").key[e]=!0;else for(const t of e)Qi(this,Mi,"f").key[t]=!0}}var Lr,Pr=(Lr=Bs,(e=[],t=Lr.process.cwd(),n)=>{const s=new Tr(e,t,n,Lr);return Object.defineProperty(s,"argv",{get:()=>s.parse(),enumerable:!0}),s.help(),s.version(),s})(function(e){return e.slice(js()+1)}(process.argv)).option("issue",{alias:"i",description:"GitHub issue number",type:"number",default:8}).option("aider-args",{description:"Arguments to pass to aider",type:"string",default:"--architect --model bedrock/converse/us.deepseek.r1-v1:0 --editor-model bedrock/anthropic.claude-3-5-sonnet-20241022-v2:0"}).help().alias("help","h").parseSync(),Dr=Pr.issue,Br=e.spawnSync("gh",["issue","view",Dr.toString(),"--json","author,title,body,labels,comments"],{encoding:"utf8",stdio:"pipe"});console.info("gh result:",Br);var qr=JSON.parse(Br.stdout);qr.labels.some((function(e){return e.name.includes("llm-pr")}))||(console.warn($.yellow("Issue #".concat(Dr," is missing the required 'llm-pr' label. Processing skipped."))),process.exit(0));var Kr={author:qr.author.login,title:qr.title,description:qr.body,comments:qr.comments.map((function(e){return{author:e.author.login,body:e.body}}))},Ur="\nModify the code to solve the following GitHub issue:\n```yml\n".concat(os.stringify(Kr).trim(),"\n```\n").trim();console.info(Ur);var Fr,Rr=["--yes-always","--no-gitignore","--no-show-model-warnings"];Pr["aider-args"]&&Rr.push.apply(Rr,function(e){if(Array.isArray(e))return a(e)}(Fr=Pr["aider-args"].split(/s+/))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(Fr)||function(e,t){if(e){if("string"==typeof e)return a(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}(Fr)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),Rr.push("--message",Ur),console.info("Running aider with ".concat(Rr)),e.spawnSync("aider",Rr,{stdio:"inherit",shell:!0}),console.info("\nIssue #".concat(Dr," processed successfully.")),console.info("AWS_REGION:",process.env.AWS_REGION);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
