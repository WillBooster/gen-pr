"use strict";var e=require("node:child_process"),t=require("node:os"),n=require("node:crypto"),s=require("node:fs"),r=require("node:path"),o=require("node:http"),i=require("node:https");require("node:net");var a=require("node:tls"),c=require("node:events"),l=require("node:assert"),u=require("node:util"),f=require("node:undici"),d=require("node:string_decoder"),h=require("node:timers");function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,s=Array(t);n<t;n++)s[n]=e[n];return s}function m(e){return function(e){if(Array.isArray(e))return p(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return p(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?p(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var y,b,v={},w={},k={};function O(){if(y)return k;return y=1,Object.defineProperty(k,"__esModule",{value:!0}),k.toCommandProperties=k.toCommandValue=void 0,k.toCommandValue=function(e){return null==e?"":"string"==typeof e||e instanceof String?e:JSON.stringify(e)},k.toCommandProperties=function(e){return Object.keys(e).length?{title:e.title,file:e.file,line:e.startLine,endLine:e.endLine,col:e.startColumn,endColumn:e.endColumn}:{}},k}function S(){if(b)return w;b=1;var e=w&&w.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,r)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),n=w&&w.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=w&&w.__importStar||function(t){if(t&&t.__esModule)return t;var s={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&e(s,t,r);return n(s,t),s};Object.defineProperty(w,"__esModule",{value:!0}),w.issue=w.issueCommand=void 0;const r=s(t),o=O();function i(e,t,n){const s=new a(e,t,n);process.stdout.write(s.toString()+r.EOL)}w.issueCommand=i,w.issue=function(e,t=""){i(e,{},t)};class a{constructor(e,t,n){e||(e="missing.command"),this.command=e,this.properties=t,this.message=n}toString(){let e="::"+this.command;if(this.properties&&Object.keys(this.properties).length>0){e+=" ";let n=!0;for(const s in this.properties)if(this.properties.hasOwnProperty(s)){const r=this.properties[s];r&&(n?n=!1:e+=",",e+=`${s}=${t=r,(0,o.toCommandValue)(t).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/:/g,"%3A").replace(/,/g,"%2C")}`)}}var t;return e+=`::${function(e){return(0,o.toCommandValue)(e).replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A")}(this.message)}`,e}}return w}var E,_={};var A,N={},T={},x={};var C,I,P,$,L={};function j(){return P||(P=1,I=function(){if(C)return L;C=1;var e,t=a,n=o,s=i,r=c,l=u;function f(e){var t=this;t.options=e||{},t.proxyOptions=t.options.proxy||{},t.maxSockets=t.options.maxSockets||n.Agent.defaultMaxSockets,t.requests=[],t.sockets=[],t.on("free",(function(e,n,s,r){for(var o=h(n,s,r),i=0,a=t.requests.length;i<a;++i){var c=t.requests[i];if(c.host===o.host&&c.port===o.port)return t.requests.splice(i,1),void c.request.onSocket(e)}e.destroy(),t.removeSocket(e)}))}function d(e,n){var s=this;f.prototype.createSocket.call(s,e,(function(r){var o=e.request.getHeader("host"),i=p({},s.options,{socket:r,servername:o?o.replace(/:.*$/,""):e.host}),a=t.connect(0,i);s.sockets[s.sockets.indexOf(r)]=a,n(a)}))}function h(e,t,n){return"string"==typeof e?{host:e,port:t,localAddress:n}:e}function p(e){for(var t=1,n=arguments.length;t<n;++t){var s=arguments[t];if("object"==typeof s)for(var r=Object.keys(s),o=0,i=r.length;o<i;++o){var a=r[o];void 0!==s[a]&&(e[a]=s[a])}}return e}return L.httpOverHttp=function(e){var t=new f(e);return t.request=n.request,t},L.httpsOverHttp=function(e){var t=new f(e);return t.request=n.request,t.createSocket=d,t.defaultPort=443,t},L.httpOverHttps=function(e){var t=new f(e);return t.request=s.request,t},L.httpsOverHttps=function(e){var t=new f(e);return t.request=s.request,t.createSocket=d,t.defaultPort=443,t},l.inherits(f,r.EventEmitter),f.prototype.addRequest=function(e,t,n,s){var r=this,o=p({request:e},r.options,h(t,n,s));r.sockets.length>=this.maxSockets?r.requests.push(o):r.createSocket(o,(function(t){function n(){r.emit("free",t,o)}function s(e){r.removeSocket(t),t.removeListener("free",n),t.removeListener("close",s),t.removeListener("agentRemove",s)}t.on("free",n),t.on("close",s),t.on("agentRemove",s),e.onSocket(t)}))},f.prototype.createSocket=function(t,n){var s=this,r={};s.sockets.push(r);var o=p({},s.proxyOptions,{method:"CONNECT",path:t.host+":"+t.port,agent:!1,headers:{host:t.host+":"+t.port}});t.localAddress&&(o.localAddress=t.localAddress),o.proxyAuth&&(o.headers=o.headers||{},o.headers["Proxy-Authorization"]="Basic "+new Buffer(o.proxyAuth).toString("base64")),e("making CONNECT request");var i=s.request(o);function a(o,a,c){var l;return i.removeAllListeners(),a.removeAllListeners(),200!==o.statusCode?(e("tunneling socket could not be established, statusCode=%d",o.statusCode),a.destroy(),(l=new Error("tunneling socket could not be established, statusCode="+o.statusCode)).code="ECONNRESET",t.request.emit("error",l),void s.removeSocket(r)):c.length>0?(e("got illegal response body from proxy"),a.destroy(),(l=new Error("got illegal response body from proxy")).code="ECONNRESET",t.request.emit("error",l),void s.removeSocket(r)):(e("tunneling connection has established"),s.sockets[s.sockets.indexOf(r)]=a,n(a))}i.useChunkedEncodingByDefault=!1,i.once("response",(function(e){e.upgrade=!0})),i.once("upgrade",(function(e,t,n){process.nextTick((function(){a(e,t,n)}))})),i.once("connect",a),i.once("error",(function(n){i.removeAllListeners(),e("tunneling socket could not be established, cause=%s\n",n.message,n.stack);var o=new Error("tunneling socket could not be established, cause="+n.message);o.code="ECONNRESET",t.request.emit("error",o),s.removeSocket(r)})),i.end()},f.prototype.removeSocket=function(e){var t=this.sockets.indexOf(e);if(-1!==t){this.sockets.splice(t,1);var n=this.requests.shift();n&&this.createSocket(n,(function(e){n.request.onSocket(e)}))}},e=process.env.NODE_DEBUG&&/\btunnel\b/.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments);"string"==typeof e[0]?e[0]="TUNNEL: "+e[0]:e.unshift("TUNNEL:"),console.error.apply(console,e)}:function(){},L.debug=e,L}()),I}function M(){if($)return T;$=1;var e=T&&T.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,r)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),t=T&&T.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=T&&T.__importStar||function(n){if(n&&n.__esModule)return n;var s={};if(null!=n)for(var r in n)"default"!==r&&Object.prototype.hasOwnProperty.call(n,r)&&e(s,n,r);return t(s,n),s},s=T&&T.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(T,"__esModule",{value:!0}),T.HttpClient=T.isHttps=T.HttpClientResponse=T.HttpClientError=T.getProxyUrl=T.MediaTypes=T.Headers=T.HttpCodes=void 0;const r=n(o),a=n(i),c=n(function(){if(A)return x;function e(e){if(!e.hostname)return!1;if(function(e){const t=e.toLowerCase();return"localhost"===t||t.startsWith("127.")||t.startsWith("[::1]")||t.startsWith("[0:0:0:0:0:0:0:1]")}(e.hostname))return!0;const t=process.env.no_proxy||process.env.NO_PROXY||"";if(!t)return!1;let n;e.port?n=Number(e.port):"http:"===e.protocol?n=80:"https:"===e.protocol&&(n=443);const s=[e.hostname.toUpperCase()];"number"==typeof n&&s.push(`${s[0]}:${n}`);for(const e of t.split(",").map((e=>e.trim().toUpperCase())).filter((e=>e)))if("*"===e||s.some((t=>t===e||t.endsWith(`.${e}`)||e.startsWith(".")&&t.endsWith(`${e}`))))return!0;return!1}A=1,Object.defineProperty(x,"__esModule",{value:!0}),x.checkBypass=x.getProxyUrl=void 0,x.getProxyUrl=function(n){const s="https:"===n.protocol;if(e(n))return;const r=s?process.env.https_proxy||process.env.HTTPS_PROXY:process.env.http_proxy||process.env.HTTP_PROXY;if(r)try{return new t(r)}catch(e){if(!r.startsWith("http://")&&!r.startsWith("https://"))return new t(`http://${r}`)}},x.checkBypass=e;class t extends URL{constructor(e,t){super(e,t),this._decodedUsername=decodeURIComponent(super.username),this._decodedPassword=decodeURIComponent(super.password)}get username(){return this._decodedUsername}get password(){return this._decodedPassword}}return x}()),l=n(j()),u=f;var d,h,p;!function(e){e[e.OK=200]="OK",e[e.MultipleChoices=300]="MultipleChoices",e[e.MovedPermanently=301]="MovedPermanently",e[e.ResourceMoved=302]="ResourceMoved",e[e.SeeOther=303]="SeeOther",e[e.NotModified=304]="NotModified",e[e.UseProxy=305]="UseProxy",e[e.SwitchProxy=306]="SwitchProxy",e[e.TemporaryRedirect=307]="TemporaryRedirect",e[e.PermanentRedirect=308]="PermanentRedirect",e[e.BadRequest=400]="BadRequest",e[e.Unauthorized=401]="Unauthorized",e[e.PaymentRequired=402]="PaymentRequired",e[e.Forbidden=403]="Forbidden",e[e.NotFound=404]="NotFound",e[e.MethodNotAllowed=405]="MethodNotAllowed",e[e.NotAcceptable=406]="NotAcceptable",e[e.ProxyAuthenticationRequired=407]="ProxyAuthenticationRequired",e[e.RequestTimeout=408]="RequestTimeout",e[e.Conflict=409]="Conflict",e[e.Gone=410]="Gone",e[e.TooManyRequests=429]="TooManyRequests",e[e.InternalServerError=500]="InternalServerError",e[e.NotImplemented=501]="NotImplemented",e[e.BadGateway=502]="BadGateway",e[e.ServiceUnavailable=503]="ServiceUnavailable",e[e.GatewayTimeout=504]="GatewayTimeout"}(d||(T.HttpCodes=d={})),function(e){e.Accept="accept",e.ContentType="content-type"}(h||(T.Headers=h={})),function(e){e.ApplicationJson="application/json"}(p||(T.MediaTypes=p={})),T.getProxyUrl=function(e){const t=c.getProxyUrl(new URL(e));return t?t.href:""};const m=[d.MovedPermanently,d.ResourceMoved,d.SeeOther,d.TemporaryRedirect,d.PermanentRedirect],g=[d.BadGateway,d.ServiceUnavailable,d.GatewayTimeout],y=["OPTIONS","GET","DELETE","HEAD"];class b extends Error{constructor(e,t){super(e),this.name="HttpClientError",this.statusCode=t,Object.setPrototypeOf(this,b.prototype)}}T.HttpClientError=b;class v{constructor(e){this.message=e}readBody(){return s(this,void 0,void 0,(function*(){return new Promise((e=>s(this,void 0,void 0,(function*(){let t=Buffer.alloc(0);this.message.on("data",(e=>{t=Buffer.concat([t,e])})),this.message.on("end",(()=>{e(t.toString())}))}))))}))}readBodyBuffer(){return s(this,void 0,void 0,(function*(){return new Promise((e=>s(this,void 0,void 0,(function*(){const t=[];this.message.on("data",(e=>{t.push(e)})),this.message.on("end",(()=>{e(Buffer.concat(t))}))}))))}))}}T.HttpClientResponse=v,T.isHttps=function(e){return"https:"===new URL(e).protocol};T.HttpClient=class{constructor(e,t,n){this._ignoreSslError=!1,this._allowRedirects=!0,this._allowRedirectDowngrade=!1,this._maxRedirects=50,this._allowRetries=!1,this._maxRetries=1,this._keepAlive=!1,this._disposed=!1,this.userAgent=e,this.handlers=t||[],this.requestOptions=n,n&&(null!=n.ignoreSslError&&(this._ignoreSslError=n.ignoreSslError),this._socketTimeout=n.socketTimeout,null!=n.allowRedirects&&(this._allowRedirects=n.allowRedirects),null!=n.allowRedirectDowngrade&&(this._allowRedirectDowngrade=n.allowRedirectDowngrade),null!=n.maxRedirects&&(this._maxRedirects=Math.max(n.maxRedirects,0)),null!=n.keepAlive&&(this._keepAlive=n.keepAlive),null!=n.allowRetries&&(this._allowRetries=n.allowRetries),null!=n.maxRetries&&(this._maxRetries=n.maxRetries))}options(e,t){return s(this,void 0,void 0,(function*(){return this.request("OPTIONS",e,null,t||{})}))}get(e,t){return s(this,void 0,void 0,(function*(){return this.request("GET",e,null,t||{})}))}del(e,t){return s(this,void 0,void 0,(function*(){return this.request("DELETE",e,null,t||{})}))}post(e,t,n){return s(this,void 0,void 0,(function*(){return this.request("POST",e,t,n||{})}))}patch(e,t,n){return s(this,void 0,void 0,(function*(){return this.request("PATCH",e,t,n||{})}))}put(e,t,n){return s(this,void 0,void 0,(function*(){return this.request("PUT",e,t,n||{})}))}head(e,t){return s(this,void 0,void 0,(function*(){return this.request("HEAD",e,null,t||{})}))}sendStream(e,t,n,r){return s(this,void 0,void 0,(function*(){return this.request(e,t,n,r)}))}getJson(e,t={}){return s(this,void 0,void 0,(function*(){t[h.Accept]=this._getExistingOrDefaultHeader(t,h.Accept,p.ApplicationJson);const n=yield this.get(e,t);return this._processResponse(n,this.requestOptions)}))}postJson(e,t,n={}){return s(this,void 0,void 0,(function*(){const s=JSON.stringify(t,null,2);n[h.Accept]=this._getExistingOrDefaultHeader(n,h.Accept,p.ApplicationJson),n[h.ContentType]=this._getExistingOrDefaultHeader(n,h.ContentType,p.ApplicationJson);const r=yield this.post(e,s,n);return this._processResponse(r,this.requestOptions)}))}putJson(e,t,n={}){return s(this,void 0,void 0,(function*(){const s=JSON.stringify(t,null,2);n[h.Accept]=this._getExistingOrDefaultHeader(n,h.Accept,p.ApplicationJson),n[h.ContentType]=this._getExistingOrDefaultHeader(n,h.ContentType,p.ApplicationJson);const r=yield this.put(e,s,n);return this._processResponse(r,this.requestOptions)}))}patchJson(e,t,n={}){return s(this,void 0,void 0,(function*(){const s=JSON.stringify(t,null,2);n[h.Accept]=this._getExistingOrDefaultHeader(n,h.Accept,p.ApplicationJson),n[h.ContentType]=this._getExistingOrDefaultHeader(n,h.ContentType,p.ApplicationJson);const r=yield this.patch(e,s,n);return this._processResponse(r,this.requestOptions)}))}request(e,t,n,r){return s(this,void 0,void 0,(function*(){if(this._disposed)throw new Error("Client has already been disposed.");const s=new URL(t);let o=this._prepareRequest(e,s,r);const i=this._allowRetries&&y.includes(e)?this._maxRetries+1:1;let a,c=0;do{if(a=yield this.requestRaw(o,n),a&&a.message&&a.message.statusCode===d.Unauthorized){let e;for(const t of this.handlers)if(t.canHandleAuthentication(a)){e=t;break}return e?e.handleAuthentication(this,o,n):a}let t=this._maxRedirects;for(;a.message.statusCode&&m.includes(a.message.statusCode)&&this._allowRedirects&&t>0;){const i=a.message.headers.location;if(!i)break;const c=new URL(i);if("https:"===s.protocol&&s.protocol!==c.protocol&&!this._allowRedirectDowngrade)throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");if(yield a.readBody(),c.hostname!==s.hostname)for(const e in r)"authorization"===e.toLowerCase()&&delete r[e];o=this._prepareRequest(e,c,r),a=yield this.requestRaw(o,n),t--}if(!a.message.statusCode||!g.includes(a.message.statusCode))return a;c+=1,c<i&&(yield a.readBody(),yield this._performExponentialBackoff(c))}while(c<i);return a}))}dispose(){this._agent&&this._agent.destroy(),this._disposed=!0}requestRaw(e,t){return s(this,void 0,void 0,(function*(){return new Promise(((n,s)=>{this.requestRawWithCallback(e,t,(function(e,t){e?s(e):t?n(t):s(new Error("Unknown error"))}))}))}))}requestRawWithCallback(e,t,n){"string"==typeof t&&(e.options.headers||(e.options.headers={}),e.options.headers["Content-Length"]=Buffer.byteLength(t,"utf8"));let s=!1;function r(e,t){s||(s=!0,n(e,t))}const o=e.httpModule.request(e.options,(e=>{r(void 0,new v(e))}));let i;o.on("socket",(e=>{i=e})),o.setTimeout(this._socketTimeout||18e4,(()=>{i&&i.end(),r(new Error(`Request timeout: ${e.options.path}`))})),o.on("error",(function(e){r(e)})),t&&"string"==typeof t&&o.write(t,"utf8"),t&&"string"!=typeof t?(t.on("close",(function(){o.end()})),t.pipe(o)):o.end()}getAgent(e){const t=new URL(e);return this._getAgent(t)}getAgentDispatcher(e){const t=new URL(e),n=c.getProxyUrl(t);if(n&&n.hostname)return this._getProxyAgentDispatcher(t,n)}_prepareRequest(e,t,n){const s={};s.parsedUrl=t;const o="https:"===s.parsedUrl.protocol;s.httpModule=o?a:r;const i=o?443:80;if(s.options={},s.options.host=s.parsedUrl.hostname,s.options.port=s.parsedUrl.port?parseInt(s.parsedUrl.port):i,s.options.path=(s.parsedUrl.pathname||"")+(s.parsedUrl.search||""),s.options.method=e,s.options.headers=this._mergeHeaders(n),null!=this.userAgent&&(s.options.headers["user-agent"]=this.userAgent),s.options.agent=this._getAgent(s.parsedUrl),this.handlers)for(const e of this.handlers)e.prepareRequest(s.options);return s}_mergeHeaders(e){return this.requestOptions&&this.requestOptions.headers?Object.assign({},w(this.requestOptions.headers),w(e||{})):w(e||{})}_getExistingOrDefaultHeader(e,t,n){let s;return this.requestOptions&&this.requestOptions.headers&&(s=w(this.requestOptions.headers)[t]),e[t]||s||n}_getAgent(e){let t;const n=c.getProxyUrl(e),s=n&&n.hostname;if(this._keepAlive&&s&&(t=this._proxyAgent),s||(t=this._agent),t)return t;const o="https:"===e.protocol;let i=100;if(this.requestOptions&&(i=this.requestOptions.maxSockets||r.globalAgent.maxSockets),n&&n.hostname){const e={maxSockets:i,keepAlive:this._keepAlive,proxy:Object.assign(Object.assign({},(n.username||n.password)&&{proxyAuth:`${n.username}:${n.password}`}),{host:n.hostname,port:n.port})};let s;const r="https:"===n.protocol;s=o?r?l.httpsOverHttps:l.httpsOverHttp:r?l.httpOverHttps:l.httpOverHttp,t=s(e),this._proxyAgent=t}if(!t){const e={keepAlive:this._keepAlive,maxSockets:i};t=o?new a.Agent(e):new r.Agent(e),this._agent=t}return o&&this._ignoreSslError&&(t.options=Object.assign(t.options||{},{rejectUnauthorized:!1})),t}_getProxyAgentDispatcher(e,t){let n;if(this._keepAlive&&(n=this._proxyAgentDispatcher),n)return n;const s="https:"===e.protocol;return n=new u.ProxyAgent(Object.assign({uri:t.href,pipelining:this._keepAlive?1:0},(t.username||t.password)&&{token:`Basic ${Buffer.from(`${t.username}:${t.password}`).toString("base64")}`})),this._proxyAgentDispatcher=n,s&&this._ignoreSslError&&(n.options=Object.assign(n.options.requestTls||{},{rejectUnauthorized:!1})),n}_performExponentialBackoff(e){return s(this,void 0,void 0,(function*(){e=Math.min(10,e);const t=5*Math.pow(2,e);return new Promise((e=>setTimeout((()=>e()),t)))}))}_processResponse(e,t){return s(this,void 0,void 0,(function*(){return new Promise(((n,r)=>s(this,void 0,void 0,(function*(){const s=e.message.statusCode||0,o={statusCode:s,result:null,headers:{}};let i,a;s===d.NotFound&&n(o);try{a=yield e.readBody(),a&&a.length>0&&(i=t&&t.deserializeDates?JSON.parse(a,(function(e,t){if("string"==typeof t){const e=new Date(t);if(!isNaN(e.valueOf()))return e}return t})):JSON.parse(a),o.result=i),o.headers=e.message.headers}catch(e){}if(s>299){let e;e=i&&i.message?i.message:a&&a.length>0?a:`Failed request: (${s})`;const t=new b(e,s);t.result=o.result,r(t)}else n(o)}))))}))}};const w=e=>Object.keys(e).reduce(((t,n)=>(t[n.toLowerCase()]=e[n],t)),{});return T}var R,D,B={};function q(){if(R)return B;R=1;var e=B&&B.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(B,"__esModule",{value:!0}),B.PersonalAccessTokenCredentialHandler=B.BearerCredentialHandler=B.BasicCredentialHandler=void 0;B.BasicCredentialHandler=class{constructor(e,t){this.username=e,this.password=t}prepareRequest(e){if(!e.headers)throw Error("The request has no headers");e.headers.Authorization=`Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`}canHandleAuthentication(){return!1}handleAuthentication(){return e(this,void 0,void 0,(function*(){throw new Error("not implemented")}))}};B.BearerCredentialHandler=class{constructor(e){this.token=e}prepareRequest(e){if(!e.headers)throw Error("The request has no headers");e.headers.Authorization=`Bearer ${this.token}`}canHandleAuthentication(){return!1}handleAuthentication(){return e(this,void 0,void 0,(function*(){throw new Error("not implemented")}))}};return B.PersonalAccessTokenCredentialHandler=class{constructor(e){this.token=e}prepareRequest(e){if(!e.headers)throw Error("The request has no headers");e.headers.Authorization=`Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`}canHandleAuthentication(){return!1}handleAuthentication(){return e(this,void 0,void 0,(function*(){throw new Error("not implemented")}))}},B}function U(){if(D)return N;D=1;var e=N&&N.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(N,"__esModule",{value:!0}),N.OidcClient=void 0;const t=M(),n=q(),s=le();class r{static createHttpClient(e=!0,s=10){const o={allowRetries:e,maxRetries:s};return new t.HttpClient("actions/oidc-client",[new n.BearerCredentialHandler(r.getRequestToken())],o)}static getRequestToken(){const e=process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;if(!e)throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");return e}static getIDTokenUrl(){const e=process.env.ACTIONS_ID_TOKEN_REQUEST_URL;if(!e)throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");return e}static getCall(t){var n;return e(this,void 0,void 0,(function*(){const e=r.createHttpClient(),s=yield e.getJson(t).catch((e=>{throw new Error(`Failed to get ID Token. \n \n        Error Code : ${e.statusCode}\n \n        Error Message: ${e.message}`)})),o=null===(n=s.result)||void 0===n?void 0:n.value;if(!o)throw new Error("Response json body do not have ID Token field");return o}))}static getIDToken(t){return e(this,void 0,void 0,(function*(){try{let e=r.getIDTokenUrl();if(t){e=`${e}&audience=${encodeURIComponent(t)}`}(0,s.debug)(`ID token url is ${e}`);const n=yield r.getCall(e);return(0,s.setSecret)(n),n}catch(e){throw new Error(`Error message: ${e.message}`)}}))}}return N.OidcClient=r,N}var K,F={};function H(){return K||(K=1,function(e){var n=F&&F.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.summary=e.markdownSummary=e.SUMMARY_DOCS_URL=e.SUMMARY_ENV_VAR=void 0;const r=t,o=s,{access:i,appendFile:a,writeFile:c}=o.promises;e.SUMMARY_ENV_VAR="GITHUB_STEP_SUMMARY",e.SUMMARY_DOCS_URL="https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";const l=new class{constructor(){this._buffer=""}filePath(){return n(this,void 0,void 0,(function*(){if(this._filePath)return this._filePath;const t=process.env[e.SUMMARY_ENV_VAR];if(!t)throw new Error(`Unable to find environment variable for $${e.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);try{yield i(t,o.constants.R_OK|o.constants.W_OK)}catch(e){throw new Error(`Unable to access summary file: '${t}'. Check if the file has correct read/write permissions.`)}return this._filePath=t,this._filePath}))}wrap(e,t,n={}){const s=Object.entries(n).map((([e,t])=>` ${e}="${t}"`)).join("");return t?`<${e}${s}>${t}</${e}>`:`<${e}${s}>`}write(e){return n(this,void 0,void 0,(function*(){const t=!!(null==e?void 0:e.overwrite),n=yield this.filePath(),s=t?c:a;return yield s(n,this._buffer,{encoding:"utf8"}),this.emptyBuffer()}))}clear(){return n(this,void 0,void 0,(function*(){return this.emptyBuffer().write({overwrite:!0})}))}stringify(){return this._buffer}isEmptyBuffer(){return 0===this._buffer.length}emptyBuffer(){return this._buffer="",this}addRaw(e,t=!1){return this._buffer+=e,t?this.addEOL():this}addEOL(){return this.addRaw(r.EOL)}addCodeBlock(e,t){const n=Object.assign({},t&&{lang:t}),s=this.wrap("pre",this.wrap("code",e),n);return this.addRaw(s).addEOL()}addList(e,t=!1){const n=t?"ol":"ul",s=e.map((e=>this.wrap("li",e))).join(""),r=this.wrap(n,s);return this.addRaw(r).addEOL()}addTable(e){const t=e.map((e=>{const t=e.map((e=>{if("string"==typeof e)return this.wrap("td",e);const{header:t,data:n,colspan:s,rowspan:r}=e,o=t?"th":"td",i=Object.assign(Object.assign({},s&&{colspan:s}),r&&{rowspan:r});return this.wrap(o,n,i)})).join("");return this.wrap("tr",t)})).join(""),n=this.wrap("table",t);return this.addRaw(n).addEOL()}addDetails(e,t){const n=this.wrap("details",this.wrap("summary",e)+t);return this.addRaw(n).addEOL()}addImage(e,t,n){const{width:s,height:r}=n||{},o=Object.assign(Object.assign({},s&&{width:s}),r&&{height:r}),i=this.wrap("img",null,Object.assign({src:e,alt:t},o));return this.addRaw(i).addEOL()}addHeading(e,t){const n=`h${t}`,s=["h1","h2","h3","h4","h5","h6"].includes(n)?n:"h1",r=this.wrap(s,e);return this.addRaw(r).addEOL()}addSeparator(){const e=this.wrap("hr",null);return this.addRaw(e).addEOL()}addBreak(){const e=this.wrap("br",null);return this.addRaw(e).addEOL()}addQuote(e,t){const n=Object.assign({},t&&{cite:t}),s=this.wrap("blockquote",e,n);return this.addRaw(s).addEOL()}addLink(e,t){const n=this.wrap("a",e,{href:t});return this.addRaw(n).addEOL()}};e.markdownSummary=l,e.summary=l}(F)),F}var W,V={};var G,J,Y,Q,X,z,Z={},ee={},te={},ne={},se={};function re(){return G||(G=1,function(e){var t,n=se&&se.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),o=se&&se.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=se&&se.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.hasOwnProperty.call(e,s)&&n(t,e,s);return o(t,e),t},a=se&&se.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.getCmdPath=e.tryGetExecutablePath=e.isRooted=e.isDirectory=e.exists=e.READONLY=e.UV_FS_O_EXLOCK=e.IS_WINDOWS=e.unlink=e.symlink=e.stat=e.rmdir=e.rm=e.rename=e.readlink=e.readdir=e.open=e.mkdir=e.lstat=e.copyFile=e.chmod=void 0;const c=i(s),l=i(r);function u(e){return(1&e.mode)>0||(8&e.mode)>0&&e.gid===process.getgid()||(64&e.mode)>0&&e.uid===process.getuid()}t=c.promises,e.chmod=t.chmod,e.copyFile=t.copyFile,e.lstat=t.lstat,e.mkdir=t.mkdir,e.open=t.open,e.readdir=t.readdir,e.readlink=t.readlink,e.rename=t.rename,e.rm=t.rm,e.rmdir=t.rmdir,e.stat=t.stat,e.symlink=t.symlink,e.unlink=t.unlink,e.IS_WINDOWS="win32"===process.platform,e.UV_FS_O_EXLOCK=268435456,e.READONLY=c.constants.O_RDONLY,e.exists=function(t){return a(this,void 0,void 0,(function*(){try{yield e.stat(t)}catch(e){if("ENOENT"===e.code)return!1;throw e}return!0}))},e.isDirectory=function(t,n=!1){return a(this,void 0,void 0,(function*(){return(n?yield e.stat(t):yield e.lstat(t)).isDirectory()}))},e.isRooted=function(t){if(!(t=function(t){if(t=t||"",e.IS_WINDOWS)return(t=t.replace(/\//g,"\\")).replace(/\\\\+/g,"\\");return t.replace(/\/\/+/g,"/")}(t)))throw new Error('isRooted() parameter "p" cannot be empty');return e.IS_WINDOWS?t.startsWith("\\")||/^[A-Z]:/i.test(t):t.startsWith("/")},e.tryGetExecutablePath=function(t,n){return a(this,void 0,void 0,(function*(){let s;try{s=yield e.stat(t)}catch(e){"ENOENT"!==e.code&&console.log(`Unexpected error attempting to determine if executable file exists '${t}': ${e}`)}if(s&&s.isFile())if(e.IS_WINDOWS){const e=l.extname(t).toUpperCase();if(n.some((t=>t.toUpperCase()===e)))return t}else if(u(s))return t;const r=t;for(const o of n){t=r+o,s=void 0;try{s=yield e.stat(t)}catch(e){"ENOENT"!==e.code&&console.log(`Unexpected error attempting to determine if executable file exists '${t}': ${e}`)}if(s&&s.isFile()){if(e.IS_WINDOWS){try{const n=l.dirname(t),s=l.basename(t).toUpperCase();for(const r of yield e.readdir(n))if(s===r.toUpperCase()){t=l.join(n,r);break}}catch(e){console.log(`Unexpected error attempting to determine the actual case of the file '${t}': ${e}`)}return t}if(u(s))return t}}return""}))},e.getCmdPath=function(){var e;return null!==(e=process.env.COMSPEC)&&void 0!==e?e:"cmd.exe"}}(se)),se}function oe(){if(J)return ne;J=1;var e=ne&&ne.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),t=ne&&ne.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=ne&&ne.__importStar||function(n){if(n&&n.__esModule)return n;var s={};if(null!=n)for(var r in n)"default"!==r&&Object.hasOwnProperty.call(n,r)&&e(s,n,r);return t(s,n),s},s=ne&&ne.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(ne,"__esModule",{value:!0}),ne.findInPath=ne.which=ne.mkdirP=ne.rmRF=ne.mv=ne.cp=void 0;const o=l,i=n(r),a=n(re());function c(e){return s(this,void 0,void 0,(function*(){if(a.IS_WINDOWS&&/[*"<>|]/.test(e))throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');try{yield a.rm(e,{force:!0,maxRetries:3,recursive:!0,retryDelay:300})}catch(e){throw new Error(`File was unable to be removed ${e}`)}}))}function u(e){return s(this,void 0,void 0,(function*(){o.ok(e,"a path argument must be provided"),yield a.mkdir(e,{recursive:!0})}))}function f(e){return s(this,void 0,void 0,(function*(){if(!e)throw new Error("parameter 'tool' is required");const t=[];if(a.IS_WINDOWS&&process.env.PATHEXT)for(const e of process.env.PATHEXT.split(i.delimiter))e&&t.push(e);if(a.isRooted(e)){const n=yield a.tryGetExecutablePath(e,t);return n?[n]:[]}if(e.includes(i.sep))return[];const n=[];if(process.env.PATH)for(const e of process.env.PATH.split(i.delimiter))e&&n.push(e);const s=[];for(const r of n){const n=yield a.tryGetExecutablePath(i.join(r,e),t);n&&s.push(n)}return s}))}function d(e,t,n,r){return s(this,void 0,void 0,(function*(){if(n>=255)return;n++,yield u(t);const s=yield a.readdir(e);for(const o of s){const s=`${e}/${o}`,i=`${t}/${o}`;(yield a.lstat(s)).isDirectory()?yield d(s,i,n,r):yield h(s,i,r)}yield a.chmod(t,(yield a.stat(e)).mode)}))}function h(e,t,n){return s(this,void 0,void 0,(function*(){if((yield a.lstat(e)).isSymbolicLink()){try{yield a.lstat(t),yield a.unlink(t)}catch(e){"EPERM"===e.code&&(yield a.chmod(t,"0666"),yield a.unlink(t))}const n=yield a.readlink(e);yield a.symlink(n,t,a.IS_WINDOWS?"junction":null)}else(yield a.exists(t))&&!n||(yield a.copyFile(e,t))}))}return ne.cp=function(e,t,n={}){return s(this,void 0,void 0,(function*(){const{force:s,recursive:r,copySourceDirectory:o}=function(e){const t=null==e.force||e.force,n=Boolean(e.recursive),s=null==e.copySourceDirectory||Boolean(e.copySourceDirectory);return{force:t,recursive:n,copySourceDirectory:s}}(n),c=(yield a.exists(t))?yield a.stat(t):null;if(c&&c.isFile()&&!s)return;const l=c&&c.isDirectory()&&o?i.join(t,i.basename(e)):t;if(!(yield a.exists(e)))throw new Error(`no such file or directory: ${e}`);if((yield a.stat(e)).isDirectory()){if(!r)throw new Error(`Failed to copy. ${e} is a directory, but tried to copy without recursive flag.`);yield d(e,l,0,s)}else{if(""===i.relative(e,l))throw new Error(`'${l}' and '${e}' are the same file`);yield h(e,l,s)}}))},ne.mv=function(e,t,n={}){return s(this,void 0,void 0,(function*(){if(yield a.exists(t)){let s=!0;if((yield a.isDirectory(t))&&(t=i.join(t,i.basename(e)),s=yield a.exists(t)),s){if(null!=n.force&&!n.force)throw new Error("Destination already exists");yield c(t)}}yield u(i.dirname(t)),yield a.rename(e,t)}))},ne.rmRF=c,ne.mkdirP=u,ne.which=function e(t,n){return s(this,void 0,void 0,(function*(){if(!t)throw new Error("parameter 'tool' is required");if(n){const n=yield e(t,!1);if(!n)throw a.IS_WINDOWS?new Error(`Unable to locate executable file: ${t}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`):new Error(`Unable to locate executable file: ${t}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);return n}const s=yield f(t);return s&&s.length>0?s[0]:""}))},ne.findInPath=f,ne}function ie(){if(Y)return te;Y=1;var n=te&&te.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),s=te&&te.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=te&&te.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return s(t,e),t},i=te&&te.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(te,"__esModule",{value:!0}),te.argStringToArray=te.ToolRunner=void 0;const a=o(t),l=o(c),u=o(e),f=o(r),d=o(oe()),p=o(re()),m=h,g="win32"===process.platform;class y extends l.EventEmitter{constructor(e,t,n){if(super(),!e)throw new Error("Parameter 'toolPath' cannot be null or empty.");this.toolPath=e,this.args=t||[],this.options=n||{}}_debug(e){this.options.listeners&&this.options.listeners.debug&&this.options.listeners.debug(e)}_getCommandString(e,t){const n=this._getSpawnFileName(),s=this._getSpawnArgs(e);let r=t?"":"[command]";if(g)if(this._isCmdFile()){r+=n;for(const e of s)r+=` ${e}`}else if(e.windowsVerbatimArguments){r+=`"${n}"`;for(const e of s)r+=` ${e}`}else{r+=this._windowsQuoteCmdArg(n);for(const e of s)r+=` ${this._windowsQuoteCmdArg(e)}`}else{r+=n;for(const e of s)r+=` ${e}`}return r}_processLineBuffer(e,t,n){try{let s=t+e.toString(),r=s.indexOf(a.EOL);for(;r>-1;){n(s.substring(0,r)),s=s.substring(r+a.EOL.length),r=s.indexOf(a.EOL)}return s}catch(e){return this._debug(`error processing line. Failed with error ${e}`),""}}_getSpawnFileName(){return g&&this._isCmdFile()?process.env.COMSPEC||"cmd.exe":this.toolPath}_getSpawnArgs(e){if(g&&this._isCmdFile()){let t=`/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;for(const n of this.args)t+=" ",t+=e.windowsVerbatimArguments?n:this._windowsQuoteCmdArg(n);return t+='"',[t]}return this.args}_endsWith(e,t){return e.endsWith(t)}_isCmdFile(){const e=this.toolPath.toUpperCase();return this._endsWith(e,".CMD")||this._endsWith(e,".BAT")}_windowsQuoteCmdArg(e){if(!this._isCmdFile())return this._uvQuoteCmdArg(e);if(!e)return'""';const t=[" ","\t","&","(",")","[","]","{","}","^","=",";","!","'","+",",","`","~","|","<",">",'"'];let n=!1;for(const s of e)if(t.some((e=>e===s))){n=!0;break}if(!n)return e;let s='"',r=!0;for(let t=e.length;t>0;t--)s+=e[t-1],r&&"\\"===e[t-1]?s+="\\":'"'===e[t-1]?(r=!0,s+='"'):r=!1;return s+='"',s.split("").reverse().join("")}_uvQuoteCmdArg(e){if(!e)return'""';if(!e.includes(" ")&&!e.includes("\t")&&!e.includes('"'))return e;if(!e.includes('"')&&!e.includes("\\"))return`"${e}"`;let t='"',n=!0;for(let s=e.length;s>0;s--)t+=e[s-1],n&&"\\"===e[s-1]?t+="\\":'"'===e[s-1]?(n=!0,t+="\\"):n=!1;return t+='"',t.split("").reverse().join("")}_cloneExecOptions(e){const t={cwd:(e=e||{}).cwd||process.cwd(),env:e.env||process.env,silent:e.silent||!1,windowsVerbatimArguments:e.windowsVerbatimArguments||!1,failOnStdErr:e.failOnStdErr||!1,ignoreReturnCode:e.ignoreReturnCode||!1,delay:e.delay||1e4};return t.outStream=e.outStream||process.stdout,t.errStream=e.errStream||process.stderr,t}_getSpawnOptions(e,t){e=e||{};const n={};return n.cwd=e.cwd,n.env=e.env,n.windowsVerbatimArguments=e.windowsVerbatimArguments||this._isCmdFile(),e.windowsVerbatimArguments&&(n.argv0=`"${t}"`),n}exec(){return i(this,void 0,void 0,(function*(){return!p.isRooted(this.toolPath)&&(this.toolPath.includes("/")||g&&this.toolPath.includes("\\"))&&(this.toolPath=f.resolve(process.cwd(),this.options.cwd||process.cwd(),this.toolPath)),this.toolPath=yield d.which(this.toolPath,!0),new Promise(((e,t)=>i(this,void 0,void 0,(function*(){this._debug(`exec tool: ${this.toolPath}`),this._debug("arguments:");for(const e of this.args)this._debug(`   ${e}`);const n=this._cloneExecOptions(this.options);!n.silent&&n.outStream&&n.outStream.write(this._getCommandString(n)+a.EOL);const s=new b(n,this.toolPath);if(s.on("debug",(e=>{this._debug(e)})),this.options.cwd&&!(yield p.exists(this.options.cwd)))return t(new Error(`The cwd: ${this.options.cwd} does not exist!`));const r=this._getSpawnFileName(),o=u.spawn(r,this._getSpawnArgs(n),this._getSpawnOptions(this.options,r));let i="";o.stdout&&o.stdout.on("data",(e=>{this.options.listeners&&this.options.listeners.stdout&&this.options.listeners.stdout(e),!n.silent&&n.outStream&&n.outStream.write(e),i=this._processLineBuffer(e,i,(e=>{this.options.listeners&&this.options.listeners.stdline&&this.options.listeners.stdline(e)}))}));let c="";if(o.stderr&&o.stderr.on("data",(e=>{if(s.processStderr=!0,this.options.listeners&&this.options.listeners.stderr&&this.options.listeners.stderr(e),!n.silent&&n.errStream&&n.outStream){(n.failOnStdErr?n.errStream:n.outStream).write(e)}c=this._processLineBuffer(e,c,(e=>{this.options.listeners&&this.options.listeners.errline&&this.options.listeners.errline(e)}))})),o.on("error",(e=>{s.processError=e.message,s.processExited=!0,s.processClosed=!0,s.CheckComplete()})),o.on("exit",(e=>{s.processExitCode=e,s.processExited=!0,this._debug(`Exit code ${e} received from tool '${this.toolPath}'`),s.CheckComplete()})),o.on("close",(e=>{s.processExitCode=e,s.processExited=!0,s.processClosed=!0,this._debug(`STDIO streams have closed for tool '${this.toolPath}'`),s.CheckComplete()})),s.on("done",((n,s)=>{i.length>0&&this.emit("stdline",i),c.length>0&&this.emit("errline",c),o.removeAllListeners(),n?t(n):e(s)})),this.options.input){if(!o.stdin)throw new Error("child process missing stdin");o.stdin.end(this.options.input)}}))))}))}}te.ToolRunner=y,te.argStringToArray=function(e){const t=[];let n=!1,s=!1,r="";function o(e){s&&'"'!==e&&(r+="\\"),r+=e,s=!1}for(let i=0;i<e.length;i++){const a=e.charAt(i);'"'!==a?"\\"===a&&s?o(a):"\\"===a&&n?s=!0:" "!==a||n?o(a):r.length>0&&(t.push(r),r=""):s?o(a):n=!n}return r.length>0&&t.push(r.trim()),t};class b extends l.EventEmitter{constructor(e,t){if(super(),this.processClosed=!1,this.processError="",this.processExitCode=0,this.processExited=!1,this.processStderr=!1,this.delay=1e4,this.done=!1,this.timeout=null,!t)throw new Error("toolPath must not be empty");this.options=e,this.toolPath=t,e.delay&&(this.delay=e.delay)}CheckComplete(){this.done||(this.processClosed?this._setResult():this.processExited&&(this.timeout=m.setTimeout(b.HandleTimeout,this.delay,this)))}_debug(e){this.emit("debug",e)}_setResult(){let e;this.processExited&&(this.processError?e=new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`):0===this.processExitCode||this.options.ignoreReturnCode?this.processStderr&&this.options.failOnStdErr&&(e=new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`)):e=new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`)),this.timeout&&(clearTimeout(this.timeout),this.timeout=null),this.done=!0,this.emit("done",e,this.processExitCode)}static HandleTimeout(e){if(!e.done){if(!e.processClosed&&e.processExited){const t=`The STDIO streams did not close within ${e.delay/1e3} seconds of the exit event from process '${e.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;e._debug(t)}e._setResult()}}}return te}function ae(){if(Q)return ee;Q=1;var e=ee&&ee.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),t=ee&&ee.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=ee&&ee.__importStar||function(n){if(n&&n.__esModule)return n;var s={};if(null!=n)for(var r in n)"default"!==r&&Object.hasOwnProperty.call(n,r)&&e(s,n,r);return t(s,n),s},s=ee&&ee.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(ee,"__esModule",{value:!0}),ee.getExecOutput=ee.exec=void 0;const r=d,o=n(ie());function i(e,t,n){return s(this,void 0,void 0,(function*(){const s=o.argStringToArray(e);if(0===s.length)throw new Error("Parameter 'commandLine' cannot be null or empty.");const r=s[0];t=s.slice(1).concat(t||[]);return new o.ToolRunner(r,t,n).exec()}))}return ee.exec=i,ee.getExecOutput=function(e,t,n){var o,a;return s(this,void 0,void 0,(function*(){let s="",c="";const l=new r.StringDecoder("utf8"),u=new r.StringDecoder("utf8"),f=null===(o=null==n?void 0:n.listeners)||void 0===o?void 0:o.stdout,d=null===(a=null==n?void 0:n.listeners)||void 0===a?void 0:a.stderr,h=Object.assign(Object.assign({},null==n?void 0:n.listeners),{stdout:e=>{s+=l.write(e),f&&f(e)},stderr:e=>{c+=u.write(e),d&&d(e)}}),p=yield i(e,t,Object.assign(Object.assign({},n),{listeners:h}));return s+=l.end(),c+=u.end(),{exitCode:p,stdout:s,stderr:c}}))},ee}function ce(){return X||(X=1,function(e){var n=Z&&Z.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,r)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),s=Z&&Z.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=Z&&Z.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return s(t,e),t},o=Z&&Z.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))},i=Z&&Z.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.getDetails=e.isLinux=e.isMacOS=e.isWindows=e.arch=e.platform=void 0;const a=i(t),c=r(ae());e.platform=a.default.platform(),e.arch=a.default.arch(),e.isWindows="win32"===e.platform,e.isMacOS="darwin"===e.platform,e.isLinux="linux"===e.platform,e.getDetails=function(){return o(this,void 0,void 0,(function*(){return Object.assign(Object.assign({},yield e.isWindows?o(void 0,void 0,void 0,(function*(){const{stdout:e}=yield c.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"',void 0,{silent:!0}),{stdout:t}=yield c.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"',void 0,{silent:!0});return{name:t.trim(),version:e.trim()}})):e.isMacOS?o(void 0,void 0,void 0,(function*(){var e,t,n,s;const{stdout:r}=yield c.getExecOutput("sw_vers",void 0,{silent:!0}),o=null!==(t=null===(e=r.match(/ProductVersion:\s*(.+)/))||void 0===e?void 0:e[1])&&void 0!==t?t:"";return{name:null!==(s=null===(n=r.match(/ProductName:\s*(.+)/))||void 0===n?void 0:n[1])&&void 0!==s?s:"",version:o}})):o(void 0,void 0,void 0,(function*(){const{stdout:e}=yield c.getExecOutput("lsb_release",["-i","-r","-s"],{silent:!0}),[t,n]=e.trim().split("\n");return{name:t,version:n}}))),{platform:e.platform,arch:e.arch,isWindows:e.isWindows,isMacOS:e.isMacOS,isLinux:e.isLinux})}))}}(Z)),Z}function le(){return z||(z=1,function(e){var o=v&&v.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,r)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),i=v&&v.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=v&&v.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},c=v&&v.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,o){function i(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.platform=e.toPlatformPath=e.toWin32Path=e.toPosixPath=e.markdownSummary=e.summary=e.getIDToken=e.getState=e.saveState=e.group=e.endGroup=e.startGroup=e.info=e.notice=e.warning=e.error=e.debug=e.isDebug=e.setFailed=e.setCommandEcho=e.setOutput=e.getBooleanInput=e.getMultilineInput=e.getInput=e.addPath=e.setSecret=e.exportVariable=e.ExitCode=void 0;const l=S(),u=function(){if(E)return _;E=1;var e=_&&_.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,r)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),r=_&&_.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=_&&_.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var s in t)"default"!==s&&Object.prototype.hasOwnProperty.call(t,s)&&e(n,t,s);return r(n,t),n};Object.defineProperty(_,"__esModule",{value:!0}),_.prepareKeyValueMessage=_.issueFileCommand=void 0;const i=o(n),a=o(s),c=o(t),l=O();return _.issueFileCommand=function(e,t){const n=process.env[`GITHUB_${e}`];if(!n)throw new Error(`Unable to find environment variable for file command ${e}`);if(!a.existsSync(n))throw new Error(`Missing file at path: ${n}`);a.appendFileSync(n,`${(0,l.toCommandValue)(t)}${c.EOL}`,{encoding:"utf8"})},_.prepareKeyValueMessage=function(e,t){const n=`ghadelimiter_${i.randomUUID()}`,s=(0,l.toCommandValue)(t);if(e.includes(n))throw new Error(`Unexpected input: name should not contain the delimiter "${n}"`);if(s.includes(n))throw new Error(`Unexpected input: value should not contain the delimiter "${n}"`);return`${e}<<${n}${c.EOL}${s}${c.EOL}${n}`},_}(),f=O(),d=a(t),h=a(r),p=U();var m;function g(e,t){const n=process.env[`INPUT_${e.replace(/ /g,"_").toUpperCase()}`]||"";if(t&&t.required&&!n)throw new Error(`Input required and not supplied: ${e}`);return t&&!1===t.trimWhitespace?n:n.trim()}function y(e,t={}){(0,l.issueCommand)("error",(0,f.toCommandProperties)(t),e instanceof Error?e.toString():e)}function b(e){(0,l.issue)("group",e)}function w(){(0,l.issue)("endgroup")}!function(e){e[e.Success=0]="Success",e[e.Failure=1]="Failure"}(m||(e.ExitCode=m={})),e.exportVariable=function(e,t){const n=(0,f.toCommandValue)(t);if(process.env[e]=n,process.env.GITHUB_ENV||"")return(0,u.issueFileCommand)("ENV",(0,u.prepareKeyValueMessage)(e,t));(0,l.issueCommand)("set-env",{name:e},n)},e.setSecret=function(e){(0,l.issueCommand)("add-mask",{},e)},e.addPath=function(e){process.env.GITHUB_PATH||""?(0,u.issueFileCommand)("PATH",e):(0,l.issueCommand)("add-path",{},e),process.env.PATH=`${e}${h.delimiter}${process.env.PATH}`},e.getInput=g,e.getMultilineInput=function(e,t){const n=g(e,t).split("\n").filter((e=>""!==e));return t&&!1===t.trimWhitespace?n:n.map((e=>e.trim()))},e.getBooleanInput=function(e,t){const n=g(e,t);if(["true","True","TRUE"].includes(n))return!0;if(["false","False","FALSE"].includes(n))return!1;throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${e}\nSupport boolean input list: \`true | True | TRUE | false | False | FALSE\``)},e.setOutput=function(e,t){if(process.env.GITHUB_OUTPUT||"")return(0,u.issueFileCommand)("OUTPUT",(0,u.prepareKeyValueMessage)(e,t));process.stdout.write(d.EOL),(0,l.issueCommand)("set-output",{name:e},(0,f.toCommandValue)(t))},e.setCommandEcho=function(e){(0,l.issue)("echo",e?"on":"off")},e.setFailed=function(e){process.exitCode=m.Failure,y(e)},e.isDebug=function(){return"1"===process.env.RUNNER_DEBUG},e.debug=function(e){(0,l.issueCommand)("debug",{},e)},e.error=y,e.warning=function(e,t={}){(0,l.issueCommand)("warning",(0,f.toCommandProperties)(t),e instanceof Error?e.toString():e)},e.notice=function(e,t={}){(0,l.issueCommand)("notice",(0,f.toCommandProperties)(t),e instanceof Error?e.toString():e)},e.info=function(e){process.stdout.write(e+d.EOL)},e.startGroup=b,e.endGroup=w,e.group=function(e,t){return c(this,void 0,void 0,(function*(){let n;b(e);try{n=yield t()}finally{w()}return n}))},e.saveState=function(e,t){if(process.env.GITHUB_STATE||"")return(0,u.issueFileCommand)("STATE",(0,u.prepareKeyValueMessage)(e,t));(0,l.issueCommand)("save-state",{name:e},(0,f.toCommandValue)(t))},e.getState=function(e){return process.env[`STATE_${e}`]||""},e.getIDToken=function(e){return c(this,void 0,void 0,(function*(){return yield p.OidcClient.getIDToken(e)}))};var k=H();Object.defineProperty(e,"summary",{enumerable:!0,get:function(){return k.summary}});var A=H();Object.defineProperty(e,"markdownSummary",{enumerable:!0,get:function(){return A.markdownSummary}});var N=function(){if(W)return V;W=1;var e=V&&V.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,s,r)}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),t=V&&V.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=V&&V.__importStar||function(n){if(n&&n.__esModule)return n;var s={};if(null!=n)for(var r in n)"default"!==r&&Object.prototype.hasOwnProperty.call(n,r)&&e(s,n,r);return t(s,n),s};Object.defineProperty(V,"__esModule",{value:!0}),V.toPlatformPath=V.toWin32Path=V.toPosixPath=void 0;const s=n(r);return V.toPosixPath=function(e){return e.replace(/[\\]/g,"/")},V.toWin32Path=function(e){return e.replace(/[/]/g,"\\")},V.toPlatformPath=function(e){return e.replace(/[/\\]/g,s.sep)},V}();Object.defineProperty(e,"toPosixPath",{enumerable:!0,get:function(){return N.toPosixPath}}),Object.defineProperty(e,"toWin32Path",{enumerable:!0,get:function(){return N.toWin32Path}}),Object.defineProperty(e,"toPlatformPath",{enumerable:!0,get:function(){return N.toPlatformPath}}),e.platform=a(ce())}(v)),v}var ue=g(le());const fe=(e=0)=>t=>`[${t+e}m`,de=(e=0)=>t=>`[${38+e};5;${t}m`,he=(e=0)=>(t,n,s)=>`[${38+e};2;${t};${n};${s}m`,pe={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(pe.modifier);Object.keys(pe.color),Object.keys(pe.bgColor);const me=function(){const e=new Map;for(const[t,n]of Object.entries(pe)){for(const[t,s]of Object.entries(n))pe[t]={open:`[${s[0]}m`,close:`[${s[1]}m`},n[t]=pe[t],e.set(s[0],s[1]);Object.defineProperty(pe,t,{value:n,enumerable:!1})}return Object.defineProperty(pe,"codes",{value:e,enumerable:!1}),pe.color.close="[39m",pe.bgColor.close="[49m",pe.color.ansi=fe(),pe.color.ansi256=de(),pe.color.ansi16m=he(),pe.bgColor.ansi=fe(10),pe.bgColor.ansi256=de(10),pe.bgColor.ansi16m=he(10),Object.defineProperties(pe,{rgbToAnsi256:{value:(e,t,n)=>e===t&&t===n?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(n/255*5),enumerable:!1},hexToRgb:{value(e){const t=/[a-f\d]{6}|[a-f\d]{3}/i.exec(e.toString(16));if(!t)return[0,0,0];let[n]=t;3===n.length&&(n=[...n].map((e=>e+e)).join(""));const s=Number.parseInt(n,16);return[s>>16&255,s>>8&255,255&s]},enumerable:!1},hexToAnsi256:{value:e=>pe.rgbToAnsi256(...pe.hexToRgb(e)),enumerable:!1},ansi256ToAnsi:{value(e){if(e<8)return 30+e;if(e<16)return e-8+90;let t,n,s;if(e>=232)t=(10*(e-232)+8)/255,n=t,s=t;else{const r=(e-=16)%36;t=Math.floor(e/36)/5,n=Math.floor(r/6)/5,s=r%6/5}const r=2*Math.max(t,n,s);if(0===r)return 30;let o=30+(Math.round(s)<<2|Math.round(n)<<1|Math.round(t));return 2===r&&(o+=60),o},enumerable:!1},rgbToAnsi:{value:(e,t,n)=>pe.ansi256ToAnsi(pe.rgbToAnsi256(e,t,n)),enumerable:!1},hexToAnsi:{value:e=>pe.ansi256ToAnsi(pe.hexToAnsi256(e)),enumerable:!1}}),pe}(),ge=(()=>{if(!("navigator"in globalThis))return 0;if(globalThis.navigator.userAgentData){const e=navigator.userAgentData.brands.find((({brand:e})=>"Chromium"===e));if(e&&e.version>93)return 3}return/\b(Chrome|Chromium)\//.test(globalThis.navigator.userAgent)?1:0})(),ye=0!==ge&&{level:ge},be={stdout:ye,stderr:ye};function ve(e,t,n){let s=e.indexOf(t);if(-1===s)return e;const r=t.length;let o=0,i="";do{i+=e.slice(o,s)+t+n,o=s+r,s=e.indexOf(t,o)}while(-1!==s);return i+=e.slice(o),i}const{stdout:we,stderr:ke}=be,Oe=Symbol("GENERATOR"),Se=Symbol("STYLER"),Ee=Symbol("IS_EMPTY"),_e=["ansi","ansi","ansi256","ansi16m"],Ae=Object.create(null),Ne=e=>{const t=(...e)=>e.join(" ");return((e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const n=we?we.level:0;e.level=void 0===t.level?n:t.level})(t,e),Object.setPrototypeOf(t,Te.prototype),t};function Te(e){return Ne(e)}Object.setPrototypeOf(Te.prototype,Function.prototype);for(const[e,t]of Object.entries(me))Ae[e]={get(){const n=$e(this,Pe(t.open,t.close,this[Se]),this[Ee]);return Object.defineProperty(this,e,{value:n}),n}};Ae.visible={get(){const e=$e(this,this[Se],!0);return Object.defineProperty(this,"visible",{value:e}),e}};const xe=(e,t,n,...s)=>"rgb"===e?"ansi16m"===t?me[n].ansi16m(...s):"ansi256"===t?me[n].ansi256(me.rgbToAnsi256(...s)):me[n].ansi(me.rgbToAnsi(...s)):"hex"===e?xe("rgb",t,n,...me.hexToRgb(...s)):me[n][e](...s),Ce=["rgb","hex","ansi256"];for(const e of Ce){Ae[e]={get(){const{level:t}=this;return function(...n){const s=Pe(xe(e,_e[t],"color",...n),me.color.close,this[Se]);return $e(this,s,this[Ee])}}};Ae["bg"+e[0].toUpperCase()+e.slice(1)]={get(){const{level:t}=this;return function(...n){const s=Pe(xe(e,_e[t],"bgColor",...n),me.bgColor.close,this[Se]);return $e(this,s,this[Ee])}}}}const Ie=Object.defineProperties((()=>{}),{...Ae,level:{enumerable:!0,get(){return this[Oe].level},set(e){this[Oe].level=e}}}),Pe=(e,t,n)=>{let s,r;return void 0===n?(s=e,r=t):(s=n.openAll+e,r=t+n.closeAll),{open:e,close:t,openAll:s,closeAll:r,parent:n}},$e=(e,t,n)=>{const s=(...e)=>Le(s,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(s,Ie),s[Oe]=e,s[Se]=t,s[Ee]=n,s},Le=(e,t)=>{if(e.level<=0||!t)return e[Ee]?"":t;let n=e[Se];if(void 0===n)return t;const{openAll:s,closeAll:r}=n;if(t.includes(""))for(;void 0!==n;)t=ve(t,n.close,n.open),n=n.parent;const o=t.indexOf("\n");return-1!==o&&(t=function(e,t,n,s){let r=0,o="";do{const i="\r"===e[s-1];o+=e.slice(r,i?s-1:s)+t+(i?"\r\n":"\n")+n,r=s+1,s=e.indexOf("\n",r)}while(-1!==s);return o+=e.slice(r),o}(t,r,s,o)),s+t+r};Object.defineProperties(Te.prototype,Ae);const je=Te();Te({level:ke?ke.level:0});const Me=Symbol.for("yaml.alias"),Re=Symbol.for("yaml.document"),De=Symbol.for("yaml.map"),Be=Symbol.for("yaml.pair"),qe=Symbol.for("yaml.scalar"),Ue=Symbol.for("yaml.seq"),Ke=Symbol.for("yaml.node.type"),Fe=e=>!!e&&"object"==typeof e&&e[Ke]===Me,He=e=>!!e&&"object"==typeof e&&e[Ke]===Re,We=e=>!!e&&"object"==typeof e&&e[Ke]===De,Ve=e=>!!e&&"object"==typeof e&&e[Ke]===Be,Ge=e=>!!e&&"object"==typeof e&&e[Ke]===qe,Je=e=>!!e&&"object"==typeof e&&e[Ke]===Ue;function Ye(e){if(e&&"object"==typeof e)switch(e[Ke]){case De:case Ue:return!0}return!1}function Qe(e){if(e&&"object"==typeof e)switch(e[Ke]){case Me:case De:case qe:case Ue:return!0}return!1}const Xe=Symbol("break visit"),ze=Symbol("skip children"),Ze=Symbol("remove node");function et(e,t){const n=rt(t);if(He(e)){tt(null,e.contents,n,Object.freeze([e]))===Ze&&(e.contents=null)}else tt(null,e,n,Object.freeze([]))}function tt(e,t,n,s){const r=ot(e,t,n,s);if(Qe(r)||Ve(r))return it(e,s,r),tt(e,r,n,s);if("symbol"!=typeof r)if(Ye(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const r=tt(e,t.items[e],n,s);if("number"==typeof r)e=r-1;else{if(r===Xe)return Xe;r===Ze&&(t.items.splice(e,1),e-=1)}}}else if(Ve(t)){s=Object.freeze(s.concat(t));const e=tt("key",t.key,n,s);if(e===Xe)return Xe;e===Ze&&(t.key=null);const r=tt("value",t.value,n,s);if(r===Xe)return Xe;r===Ze&&(t.value=null)}return r}async function nt(e,t){const n=rt(t);if(He(e)){await st(null,e.contents,n,Object.freeze([e]))===Ze&&(e.contents=null)}else await st(null,e,n,Object.freeze([]))}async function st(e,t,n,s){const r=await ot(e,t,n,s);if(Qe(r)||Ve(r))return it(e,s,r),st(e,r,n,s);if("symbol"!=typeof r)if(Ye(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const r=await st(e,t.items[e],n,s);if("number"==typeof r)e=r-1;else{if(r===Xe)return Xe;r===Ze&&(t.items.splice(e,1),e-=1)}}}else if(Ve(t)){s=Object.freeze(s.concat(t));const e=await st("key",t.key,n,s);if(e===Xe)return Xe;e===Ze&&(t.key=null);const r=await st("value",t.value,n,s);if(r===Xe)return Xe;r===Ze&&(t.value=null)}return r}function rt(e){return"object"==typeof e&&(e.Collection||e.Node||e.Value)?Object.assign({Alias:e.Node,Map:e.Node,Scalar:e.Node,Seq:e.Node},e.Value&&{Map:e.Value,Scalar:e.Value,Seq:e.Value},e.Collection&&{Map:e.Collection,Seq:e.Collection},e):e}function ot(e,t,n,s){return"function"==typeof n?n(e,t,s):We(t)?n.Map?.(e,t,s):Je(t)?n.Seq?.(e,t,s):Ve(t)?n.Pair?.(e,t,s):Ge(t)?n.Scalar?.(e,t,s):Fe(t)?n.Alias?.(e,t,s):void 0}function it(e,t,n){const s=t[t.length-1];if(Ye(s))s.items[e]=n;else if(Ve(s))"key"===e?s.key=n:s.value=n;else{if(!He(s)){const e=Fe(s)?"alias":"scalar";throw new Error(`Cannot replace node with ${e} parent`)}s.contents=n}}et.BREAK=Xe,et.SKIP=ze,et.REMOVE=Ze,nt.BREAK=Xe,nt.SKIP=ze,nt.REMOVE=Ze;const at={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class ct{constructor(e,t){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},ct.defaultYaml,e),this.tags=Object.assign({},ct.defaultTags,t)}clone(){const e=new ct(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){const e=new ct(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:ct.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},ct.defaultTags)}return e}add(e,t){this.atNextDocument&&(this.yaml={explicit:ct.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},ct.defaultTags),this.atNextDocument=!1);const n=e.trim().split(/[ \t]+/),s=n.shift();switch(s){case"%TAG":{if(2!==n.length&&(t(0,"%TAG directive should contain exactly two parts"),n.length<2))return!1;const[e,s]=n;return this.tags[e]=s,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==n.length)return t(0,"%YAML directive should contain exactly one part"),!1;const[e]=n;if("1.1"===e||"1.2"===e)return this.yaml.version=e,!0;return t(6,`Unsupported YAML version ${e}`,/^\d+\.\d+$/.test(e)),!1}default:return t(0,`Unknown directive ${s}`,!0),!1}}tagName(e,t){if("!"===e)return"!";if("!"!==e[0])return t(`Not a valid tag: ${e}`),null;if("<"===e[1]){const n=e.slice(2,-1);return"!"===n||"!!"===n?(t(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(">"!==e[e.length-1]&&t("Verbatim tags must end with a >"),n)}const[,n,s]=e.match(/^(.*!)([^!]*)$/s);s||t(`The ${e} tag has no suffix`);const r=this.tags[n];if(r)try{return r+decodeURIComponent(s)}catch(e){return t(String(e)),null}return"!"===n?e:(t(`Could not resolve tag: ${e}`),null)}tagString(e){for(const[t,n]of Object.entries(this.tags))if(e.startsWith(n))return t+e.substring(n.length).replace(/[!,[\]{}]/g,(e=>at[e]));return"!"===e[0]?e:`!<${e}>`}toString(e){const t=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],n=Object.entries(this.tags);let s;if(e&&n.length>0&&Qe(e.contents)){const t={};et(e.contents,((e,n)=>{Qe(n)&&n.tag&&(t[n.tag]=!0)})),s=Object.keys(t)}else s=[];for(const[r,o]of n)"!!"===r&&"tag:yaml.org,2002:"===o||e&&!s.some((e=>e.startsWith(o)))||t.push(`%TAG ${r} ${o}`);return t.join("\n")}}function lt(e){if(/[\x00-\x19\s,[\]{}]/.test(e)){const t=JSON.stringify(e);throw new Error(`Anchor must not contain whitespace or control characters: ${t}`)}return!0}function ut(e){const t=new Set;return et(e,{Value(e,n){n.anchor&&t.add(n.anchor)}}),t}function ft(e,t){for(let n=1;;++n){const s=`${e}${n}`;if(!t.has(s))return s}}function dt(e,t,n,s){if(s&&"object"==typeof s)if(Array.isArray(s))for(let t=0,n=s.length;t<n;++t){const n=s[t],r=dt(e,s,String(t),n);void 0===r?delete s[t]:r!==n&&(s[t]=r)}else if(s instanceof Map)for(const t of Array.from(s.keys())){const n=s.get(t),r=dt(e,s,t,n);void 0===r?s.delete(t):r!==n&&s.set(t,r)}else if(s instanceof Set)for(const t of Array.from(s)){const n=dt(e,s,t,t);void 0===n?s.delete(t):n!==t&&(s.delete(t),s.add(n))}else for(const[t,n]of Object.entries(s)){const r=dt(e,s,t,n);void 0===r?delete s[t]:r!==n&&(s[t]=r)}return e.call(t,n,s)}function ht(e,t,n){if(Array.isArray(e))return e.map(((e,t)=>ht(e,String(t),n)));if(e&&"function"==typeof e.toJSON){if(!n||(!Ge(s=e)&&!Ye(s)||!s.anchor))return e.toJSON(t,n);const r={aliasCount:0,count:1,res:void 0};n.anchors.set(e,r),n.onCreate=e=>{r.res=e,delete n.onCreate};const o=e.toJSON(t,n);return n.onCreate&&n.onCreate(o),o}var s;return"bigint"!=typeof e||n?.keep?e:Number(e)}ct.defaultYaml={explicit:!1,version:"1.2"},ct.defaultTags={"!!":"tag:yaml.org,2002:"};class pt{constructor(e){Object.defineProperty(this,Ke,{value:e})}clone(){const e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(e,{mapAsMap:t,maxAliasCount:n,onAnchor:s,reviver:r}={}){if(!He(e))throw new TypeError("A document argument is required");const o={anchors:new Map,doc:e,keep:!0,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof n?n:100},i=ht(this,"",o);if("function"==typeof s)for(const{count:e,res:t}of o.anchors.values())s(t,e);return"function"==typeof r?dt(r,{"":i},"",i):i}}class mt extends pt{constructor(e){super(Me),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(e){let t;return et(e,{Node:(e,n)=>{if(n===this)return et.BREAK;n.anchor===this.source&&(t=n)}}),t}toJSON(e,t){if(!t)return{source:this.source};const{anchors:n,doc:s,maxAliasCount:r}=t,o=this.resolve(s);if(!o){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(e)}let i=n.get(o);if(i||(ht(o,null,t),i=n.get(o)),!i||void 0===i.res){throw new ReferenceError("This should not happen: Alias anchor was not resolved?")}if(r>=0&&(i.count+=1,0===i.aliasCount&&(i.aliasCount=gt(s,o,n)),i.count*i.aliasCount>r)){throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack")}return i.res}toString(e,t,n){const s=`*${this.source}`;if(e){if(lt(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source)){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(e)}if(e.implicitKey)return`${s} `}return s}}function gt(e,t,n){if(Fe(t)){const s=t.resolve(e),r=n&&s&&n.get(s);return r?r.count*r.aliasCount:0}if(Ye(t)){let s=0;for(const r of t.items){const t=gt(e,r,n);t>s&&(s=t)}return s}if(Ve(t)){const s=gt(e,t.key,n),r=gt(e,t.value,n);return Math.max(s,r)}return 1}const yt=e=>!e||"function"!=typeof e&&"object"!=typeof e;class bt extends pt{constructor(e){super(qe),this.value=e}toJSON(e,t){return t?.keep?this.value:ht(this.value,e,t)}toString(){return String(this.value)}}bt.BLOCK_FOLDED="BLOCK_FOLDED",bt.BLOCK_LITERAL="BLOCK_LITERAL",bt.PLAIN="PLAIN",bt.QUOTE_DOUBLE="QUOTE_DOUBLE",bt.QUOTE_SINGLE="QUOTE_SINGLE";function vt(e,t,n){if(He(e)&&(e=e.contents),Qe(e))return e;if(Ve(e)){const t=n.schema[De].createNode?.(n.schema,null,n);return t.items.push(e),t}(e instanceof String||e instanceof Number||e instanceof Boolean||"undefined"!=typeof BigInt&&e instanceof BigInt)&&(e=e.valueOf());const{aliasDuplicateObjects:s,onAnchor:r,onTagObj:o,schema:i,sourceObjects:a}=n;let c;if(s&&e&&"object"==typeof e){if(c=a.get(e),c)return c.anchor||(c.anchor=r(e)),new mt(c.anchor);c={anchor:null,node:null},a.set(e,c)}t?.startsWith("!!")&&(t="tag:yaml.org,2002:"+t.slice(2));let l=function(e,t,n){if(t){const e=n.filter((e=>e.tag===t)),s=e.find((e=>!e.format))??e[0];if(!s)throw new Error(`Tag ${t} not found`);return s}return n.find((t=>t.identify?.(e)&&!t.format))}(e,t,i.tags);if(!l){if(e&&"function"==typeof e.toJSON&&(e=e.toJSON()),!e||"object"!=typeof e){const t=new bt(e);return c&&(c.node=t),t}l=e instanceof Map?i[De]:Symbol.iterator in Object(e)?i[Ue]:i[De]}o&&(o(l),delete n.onTagObj);const u=l?.createNode?l.createNode(n.schema,e,n):"function"==typeof l?.nodeClass?.from?l.nodeClass.from(n.schema,e,n):new bt(e);return t?u.tag=t:l.default||(u.tag=l.tag),c&&(c.node=u),u}function wt(e,t,n){let s=n;for(let e=t.length-1;e>=0;--e){const n=t[e];if("number"==typeof n&&Number.isInteger(n)&&n>=0){const e=[];e[n]=s,s=e}else s=new Map([[n,s]])}return vt(s,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}const kt=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class Ot extends pt{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(e){const t=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(t.schema=e),t.items=t.items.map((t=>Qe(t)||Ve(t)?t.clone(e):t)),this.range&&(t.range=this.range.slice()),t}addIn(e,t){if(kt(e))this.add(t);else{const[n,...s]=e,r=this.get(n,!0);if(Ye(r))r.addIn(s,t);else{if(void 0!==r||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,wt(this.schema,s,t))}}}deleteIn(e){const[t,...n]=e;if(0===n.length)return this.delete(t);const s=this.get(t,!0);if(Ye(s))return s.deleteIn(n);throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`)}getIn(e,t){const[n,...s]=e,r=this.get(n,!0);return 0===s.length?!t&&Ge(r)?r.value:r:Ye(r)?r.getIn(s,t):void 0}hasAllNullValues(e){return this.items.every((t=>{if(!Ve(t))return!1;const n=t.value;return null==n||e&&Ge(n)&&null==n.value&&!n.commentBefore&&!n.comment&&!n.tag}))}hasIn(e){const[t,...n]=e;if(0===n.length)return this.has(t);const s=this.get(t,!0);return!!Ye(s)&&s.hasIn(n)}setIn(e,t){const[n,...s]=e;if(0===s.length)this.set(n,t);else{const e=this.get(n,!0);if(Ye(e))e.setIn(s,t);else{if(void 0!==e||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,wt(this.schema,s,t))}}}}const St=e=>e.replace(/^(?!$)(?: $)?/gm,"#");function Et(e,t){return/^\n+$/.test(e)?e.substring(1):t?e.replace(/^(?! *$)/gm,t):e}const _t=(e,t,n)=>e.endsWith("\n")?Et(n,t):n.includes("\n")?"\n"+Et(n,t):(e.endsWith(" ")?"":" ")+n,At="flow",Nt="block",Tt="quoted";function xt(e,t,n="flow",{indentAtStart:s,lineWidth:r=80,minContentWidth:o=20,onFold:i,onOverflow:a}={}){if(!r||r<0)return e;r<o&&(o=0);const c=Math.max(1+o,1+r-t.length);if(e.length<=c)return e;const l=[],u={};let f,d,h=r-t.length;"number"==typeof s&&(s>r-Math.max(2,o)?l.push(0):h=r-s);let p=!1,m=-1,g=-1,y=-1;n===Nt&&(m=Ct(e,m,t.length),-1!==m&&(h=m+c));for(let s;s=e[m+=1];){if(n===Tt&&"\\"===s){switch(g=m,e[m+1]){case"x":m+=3;break;case"u":m+=5;break;case"U":m+=9;break;default:m+=1}y=m}if("\n"===s)n===Nt&&(m=Ct(e,m,t.length)),h=m+t.length+c,f=void 0;else{if(" "===s&&d&&" "!==d&&"\n"!==d&&"\t"!==d){const t=e[m+1];t&&" "!==t&&"\n"!==t&&"\t"!==t&&(f=m)}if(m>=h)if(f)l.push(f),h=f+c,f=void 0;else if(n===Tt){for(;" "===d||"\t"===d;)d=s,s=e[m+=1],p=!0;const t=m>y+1?m-2:g-1;if(u[t])return e;l.push(t),u[t]=!0,h=t+c,f=void 0}else p=!0}d=s}if(p&&a&&a(),0===l.length)return e;i&&i();let b=e.slice(0,l[0]);for(let s=0;s<l.length;++s){const r=l[s],o=l[s+1]||e.length;0===r?b=`\n${t}${e.slice(0,o)}`:(n===Tt&&u[r]&&(b+=`${e[r]}\\`),b+=`\n${t}${e.slice(r+1,o)}`)}return b}function Ct(e,t,n){let s=t,r=t+1,o=e[r];for(;" "===o||"\t"===o;)if(t<r+n)o=e[++t];else{do{o=e[++t]}while(o&&"\n"!==o);s=t,r=t+1,o=e[r]}return s}const It=(e,t)=>({indentAtStart:t?e.indent.length:e.indentAtStart,lineWidth:e.options.lineWidth,minContentWidth:e.options.minContentWidth}),Pt=e=>/^(%|---|\.\.\.)/m.test(e);function $t(e,t){const n=JSON.stringify(e);if(t.options.doubleQuotedAsJSON)return n;const{implicitKey:s}=t,r=t.options.doubleQuotedMinMultiLineLength,o=t.indent||(Pt(e)?"  ":"");let i="",a=0;for(let e=0,t=n[e];t;t=n[++e])if(" "===t&&"\\"===n[e+1]&&"n"===n[e+2]&&(i+=n.slice(a,e)+"\\ ",e+=1,a=e,t="\\"),"\\"===t)switch(n[e+1]){case"u":{i+=n.slice(a,e);const t=n.substr(e+2,4);switch(t){case"0000":i+="\\0";break;case"0007":i+="\\a";break;case"000b":i+="\\v";break;case"001b":i+="\\e";break;case"0085":i+="\\N";break;case"00a0":i+="\\_";break;case"2028":i+="\\L";break;case"2029":i+="\\P";break;default:"00"===t.substr(0,2)?i+="\\x"+t.substr(2):i+=n.substr(e,6)}e+=5,a=e+1}break;case"n":if(s||'"'===n[e+2]||n.length<r)e+=1;else{for(i+=n.slice(a,e)+"\n\n";"\\"===n[e+2]&&"n"===n[e+3]&&'"'!==n[e+4];)i+="\n",e+=2;i+=o," "===n[e+2]&&(i+="\\"),e+=1,a=e+1}break;default:e+=1}return i=a?i+n.slice(a):n,s?i:xt(i,o,Tt,It(t,!1))}function Lt(e,t){if(!1===t.options.singleQuote||t.implicitKey&&e.includes("\n")||/[ \t]\n|\n[ \t]/.test(e))return $t(e,t);const n=t.indent||(Pt(e)?"  ":""),s="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&\n${n}`)+"'";return t.implicitKey?s:xt(s,n,At,It(t,!1))}function jt(e,t){const{singleQuote:n}=t.options;let s;if(!1===n)s=$t;else{const t=e.includes('"'),r=e.includes("'");s=t&&!r?Lt:r&&!t?$t:n?Lt:$t}return s(e,t)}let Mt;try{Mt=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{Mt=/\n+(?!\n|$)/g}function Rt({comment:e,type:t,value:n},s,r,o){const{blockQuote:i,commentString:a,lineWidth:c}=s.options;if(!i||/\n[\t ]+$/.test(n)||/^\s*$/.test(n))return jt(n,s);const l=s.indent||(s.forceBlockIndent||Pt(n)?"  ":""),u="literal"===i||"folded"!==i&&t!==bt.BLOCK_FOLDED&&(t===bt.BLOCK_LITERAL||!function(e,t,n){if(!t||t<0)return!1;const s=t-n,r=e.length;if(r<=s)return!1;for(let t=0,n=0;t<r;++t)if("\n"===e[t]){if(t-n>s)return!0;if(n=t+1,r-n<=s)return!1}return!0}(n,c,l.length));if(!n)return u?"|\n":">\n";let f,d;for(d=n.length;d>0;--d){const e=n[d-1];if("\n"!==e&&"\t"!==e&&" "!==e)break}let h=n.substring(d);const p=h.indexOf("\n");-1===p?f="-":n===h||p!==h.length-1?(f="+",o&&o()):f="",h&&(n=n.slice(0,-h.length),"\n"===h[h.length-1]&&(h=h.slice(0,-1)),h=h.replace(Mt,`$&${l}`));let m,g=!1,y=-1;for(m=0;m<n.length;++m){const e=n[m];if(" "===e)g=!0;else{if("\n"!==e)break;y=m}}let b=n.substring(0,y<m?y+1:m);b&&(n=n.substring(b.length),b=b.replace(/\n+/g,`$&${l}`));let v=(g?l?"2":"1":"")+f;if(e&&(v+=" "+a(e.replace(/ ?[\r\n]+/g," ")),r&&r()),!u){const e=n.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${l}`);let r=!1;const o=It(s,!0);"folded"!==i&&t!==bt.BLOCK_FOLDED&&(o.onOverflow=()=>{r=!0});const a=xt(`${b}${e}${h}`,l,Nt,o);if(!r)return`>${v}\n${l}${a}`}return`|${v}\n${l}${b}${n=n.replace(/\n+/g,`$&${l}`)}${h}`}function Dt(e,t,n,s){const{implicitKey:r,inFlow:o}=t,i="string"==typeof e.value?e:Object.assign({},e,{value:String(e.value)});let{type:a}=e;a!==bt.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(i.value)&&(a=bt.QUOTE_DOUBLE);const c=e=>{switch(e){case bt.BLOCK_FOLDED:case bt.BLOCK_LITERAL:return r||o?jt(i.value,t):Rt(i,t,n,s);case bt.QUOTE_DOUBLE:return $t(i.value,t);case bt.QUOTE_SINGLE:return Lt(i.value,t);case bt.PLAIN:return function(e,t,n,s){const{type:r,value:o}=e,{actualString:i,implicitKey:a,indent:c,indentStep:l,inFlow:u}=t;if(a&&o.includes("\n")||u&&/[[\]{},]/.test(o))return jt(o,t);if(!o||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o))return a||u||!o.includes("\n")?jt(o,t):Rt(e,t,n,s);if(!a&&!u&&r!==bt.PLAIN&&o.includes("\n"))return Rt(e,t,n,s);if(Pt(o)){if(""===c)return t.forceBlockIndent=!0,Rt(e,t,n,s);if(a&&c===l)return jt(o,t)}const f=o.replace(/\n+/g,`$&\n${c}`);if(i){const e=e=>e.default&&"tag:yaml.org,2002:str"!==e.tag&&e.test?.test(f),{compat:n,tags:s}=t.doc.schema;if(s.some(e)||n?.some(e))return jt(o,t)}return a?f:xt(f,c,At,It(t,!1))}(i,t,n,s);default:return null}};let l=c(a);if(null===l){const{defaultKeyType:e,defaultStringType:n}=t.options,s=r&&e||n;if(l=c(s),null===l)throw new Error(`Unsupported default string type ${s}`)}return l}function Bt(e,t){const n=Object.assign({blockQuote:!0,commentString:St,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},e.schema.toStringOptions,t);let s;switch(n.collectionStyle){case"block":s=!1;break;case"flow":s=!0;break;default:s=null}return{anchors:new Set,doc:e,flowCollectionPadding:n.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof n.indent?" ".repeat(n.indent):"  ",inFlow:s,options:n}}function qt(e,t,n,s){if(Ve(e))return e.toString(t,n,s);if(Fe(e)){if(t.doc.directives)return e.toString(t);if(t.resolvedAliases?.has(e))throw new TypeError("Cannot stringify circular structure without alias nodes");t.resolvedAliases?t.resolvedAliases.add(e):t.resolvedAliases=new Set([e]),e=e.resolve(t.doc)}let r;const o=Qe(e)?e:t.doc.createNode(e,{onTagObj:e=>r=e});r||(r=function(e,t){if(t.tag){const n=e.filter((e=>e.tag===t.tag));if(n.length>0)return n.find((e=>e.format===t.format))??n[0]}let n,s;if(Ge(t)){s=t.value;let r=e.filter((e=>e.identify?.(s)));if(r.length>1){const e=r.filter((e=>e.test));e.length>0&&(r=e)}n=r.find((e=>e.format===t.format))??r.find((e=>!e.format))}else s=t,n=e.find((e=>e.nodeClass&&s instanceof e.nodeClass));if(!n)throw new Error(`Tag not resolved for ${s?.constructor?.name??typeof s} value`);return n}(t.doc.schema.tags,o));const i=function(e,t,{anchors:n,doc:s}){if(!s.directives)return"";const r=[],o=(Ge(e)||Ye(e))&&e.anchor;o&&lt(o)&&(n.add(o),r.push(`&${o}`));const i=e.tag?e.tag:t.default?null:t.tag;return i&&r.push(s.directives.tagString(i)),r.join(" ")}(o,r,t);i.length>0&&(t.indentAtStart=(t.indentAtStart??0)+i.length+1);const a="function"==typeof r.stringify?r.stringify(o,t,n,s):Ge(o)?Dt(o,t,n,s):o.toString(t,n,s);return i?Ge(o)||"{"===a[0]||"["===a[0]?`${i} ${a}`:`${i}\n${t.indent}${a}`:a}function Ut(e,t){"debug"!==e&&"warn"!==e||console.warn(t)}const Kt="<<",Ft={identify:e=>e===Kt||"symbol"==typeof e&&e.description===Kt,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new bt(Symbol(Kt)),{addToJSMap:Ht}),stringify:()=>Kt};function Ht(e,t,n){if(n=e&&Fe(n)?n.resolve(e.doc):n,Je(n))for(const s of n.items)Wt(e,t,s);else if(Array.isArray(n))for(const s of n)Wt(e,t,s);else Wt(e,t,n)}function Wt(e,t,n){const s=e&&Fe(n)?n.resolve(e.doc):n;if(!We(s))throw new Error("Merge sources must be maps or map aliases");const r=s.toJSON(null,e,Map);for(const[e,n]of r)t instanceof Map?t.has(e)||t.set(e,n):t instanceof Set?t.add(e):Object.prototype.hasOwnProperty.call(t,e)||Object.defineProperty(t,e,{value:n,writable:!0,enumerable:!0,configurable:!0});return t}function Vt(e,t,{key:n,value:s}){if(Qe(n)&&n.addToJSMap)n.addToJSMap(e,t,s);else if(((e,t)=>(Ft.identify(t)||Ge(t)&&(!t.type||t.type===bt.PLAIN)&&Ft.identify(t.value))&&e?.doc.schema.tags.some((e=>e.tag===Ft.tag&&e.default)))(e,n))Ht(e,t,s);else{const r=ht(n,"",e);if(t instanceof Map)t.set(r,ht(s,r,e));else if(t instanceof Set)t.add(r);else{const o=function(e,t,n){if(null===t)return"";if("object"!=typeof t)return String(t);if(Qe(e)&&n?.doc){const t=Bt(n.doc,{});t.anchors=new Set;for(const e of n.anchors.keys())t.anchors.add(e.anchor);t.inFlow=!0,t.inStringifyKey=!0;const s=e.toString(t);if(!n.mapKeyWarned){let e=JSON.stringify(s);e.length>40&&(e=e.substring(0,36)+'..."'),Ut(n.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),n.mapKeyWarned=!0}return s}return JSON.stringify(t)}(n,r,e),i=ht(s,o,e);o in t?Object.defineProperty(t,o,{value:i,writable:!0,enumerable:!0,configurable:!0}):t[o]=i}}return t}function Gt(e,t,n){const s=vt(e,void 0,n),r=vt(t,void 0,n);return new Jt(s,r)}class Jt{constructor(e,t=null){Object.defineProperty(this,Ke,{value:Be}),this.key=e,this.value=t}clone(e){let{key:t,value:n}=this;return Qe(t)&&(t=t.clone(e)),Qe(n)&&(n=n.clone(e)),new Jt(t,n)}toJSON(e,t){return Vt(t,t?.mapAsMap?new Map:{},this)}toString(e,t,n){return e?.doc?function({key:e,value:t},n,s,r){const{allNullValues:o,doc:i,indent:a,indentStep:c,options:{commentString:l,indentSeq:u,simpleKeys:f}}=n;let d=Qe(e)&&e.comment||null;if(f){if(d)throw new Error("With simple keys, key nodes cannot have comments");if(Ye(e)||!Qe(e)&&"object"==typeof e)throw new Error("With simple keys, collection cannot be used as a key value")}let h=!f&&(!e||d&&null==t&&!n.inFlow||Ye(e)||(Ge(e)?e.type===bt.BLOCK_FOLDED||e.type===bt.BLOCK_LITERAL:"object"==typeof e));n=Object.assign({},n,{allNullValues:!1,implicitKey:!h&&(f||!o),indent:a+c});let p,m,g,y=!1,b=!1,v=qt(e,n,(()=>y=!0),(()=>b=!0));if(!h&&!n.inFlow&&v.length>1024){if(f)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");h=!0}if(n.inFlow){if(o||null==t)return y&&s&&s(),""===v?"?":h?`? ${v}`:v}else if(o&&!f||null==t&&h)return v=`? ${v}`,d&&!y?v+=_t(v,n.indent,l(d)):b&&r&&r(),v;y&&(d=null),h?(d&&(v+=_t(v,n.indent,l(d))),v=`? ${v}\n${a}:`):(v=`${v}:`,d&&(v+=_t(v,n.indent,l(d)))),Qe(t)?(p=!!t.spaceBefore,m=t.commentBefore,g=t.comment):(p=!1,m=null,g=null,t&&"object"==typeof t&&(t=i.createNode(t))),n.implicitKey=!1,h||d||!Ge(t)||(n.indentAtStart=v.length+1),b=!1,u||!(c.length>=2)||n.inFlow||h||!Je(t)||t.flow||t.tag||t.anchor||(n.indent=n.indent.substring(2));let w=!1;const k=qt(t,n,(()=>w=!0),(()=>b=!0));let O=" ";if(d||p||m)O=p?"\n":"",m&&(O+=`\n${Et(l(m),n.indent)}`),""!==k||n.inFlow?O+=`\n${n.indent}`:"\n"===O&&(O="\n\n");else if(!h&&Ye(t)){const e=k[0],s=k.indexOf("\n"),r=-1!==s,o=n.inFlow??t.flow??0===t.items.length;if(r||!o){let t=!1;if(r&&("&"===e||"!"===e)){let n=k.indexOf(" ");"&"===e&&-1!==n&&n<s&&"!"===k[n+1]&&(n=k.indexOf(" ",n+1)),(-1===n||s<n)&&(t=!0)}t||(O=`\n${n.indent}`)}}else""!==k&&"\n"!==k[0]||(O="");return v+=O+k,n.inFlow?w&&s&&s():g&&!w?v+=_t(v,n.indent,l(g)):b&&r&&r(),v}(this,e,t,n):JSON.stringify(this)}}function Yt(e,t,n){return(t.inFlow??e.flow?Xt:Qt)(e,t,n)}function Qt({comment:e,items:t},n,{blockItemPrefix:s,flowChars:r,itemIndent:o,onChompKeep:i,onComment:a}){const{indent:c,options:{commentString:l}}=n,u=Object.assign({},n,{indent:o,type:null});let f=!1;const d=[];for(let e=0;e<t.length;++e){const r=t[e];let i=null;if(Qe(r))!f&&r.spaceBefore&&d.push(""),zt(n,d,r.commentBefore,f),r.comment&&(i=r.comment);else if(Ve(r)){const e=Qe(r.key)?r.key:null;e&&(!f&&e.spaceBefore&&d.push(""),zt(n,d,e.commentBefore,f))}f=!1;let a=qt(r,u,(()=>i=null),(()=>f=!0));i&&(a+=_t(a,o,l(i))),f&&i&&(f=!1),d.push(s+a)}let h;if(0===d.length)h=r.start+r.end;else{h=d[0];for(let e=1;e<d.length;++e){const t=d[e];h+=t?`\n${c}${t}`:"\n"}}return e?(h+="\n"+Et(l(e),c),a&&a()):f&&i&&i(),h}function Xt({items:e},t,{flowChars:n,itemIndent:s}){const{indent:r,indentStep:o,flowCollectionPadding:i,options:{commentString:a}}=t;s+=o;const c=Object.assign({},t,{indent:s,inFlow:!0,type:null});let l=!1,u=0;const f=[];for(let n=0;n<e.length;++n){const r=e[n];let o=null;if(Qe(r))r.spaceBefore&&f.push(""),zt(t,f,r.commentBefore,!1),r.comment&&(o=r.comment);else if(Ve(r)){const e=Qe(r.key)?r.key:null;e&&(e.spaceBefore&&f.push(""),zt(t,f,e.commentBefore,!1),e.comment&&(l=!0));const n=Qe(r.value)?r.value:null;n?(n.comment&&(o=n.comment),n.commentBefore&&(l=!0)):null==r.value&&e?.comment&&(o=e.comment)}o&&(l=!0);let i=qt(r,c,(()=>o=null));n<e.length-1&&(i+=","),o&&(i+=_t(i,s,a(o))),!l&&(f.length>u||i.includes("\n"))&&(l=!0),f.push(i),u=f.length}const{start:d,end:h}=n;if(0===f.length)return d+h;if(!l){const e=f.reduce(((e,t)=>e+t.length+2),2);l=t.options.lineWidth>0&&e>t.options.lineWidth}if(l){let e=d;for(const t of f)e+=t?`\n${o}${r}${t}`:"\n";return`${e}\n${r}${h}`}return`${d}${i}${f.join(" ")}${i}${h}`}function zt({indent:e,options:{commentString:t}},n,s,r){if(s&&r&&(s=s.replace(/^\n+/,"")),s){const r=Et(t(s),e);n.push(r.trimStart())}}function Zt(e,t){const n=Ge(t)?t.value:t;for(const s of e)if(Ve(s)){if(s.key===t||s.key===n)return s;if(Ge(s.key)&&s.key.value===n)return s}}class en extends Ot{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(De,e),this.items=[]}static from(e,t,n){const{keepUndefined:s,replacer:r}=n,o=new this(e),i=(e,i)=>{if("function"==typeof r)i=r.call(t,e,i);else if(Array.isArray(r)&&!r.includes(e))return;(void 0!==i||s)&&o.items.push(Gt(e,i,n))};if(t instanceof Map)for(const[e,n]of t)i(e,n);else if(t&&"object"==typeof t)for(const e of Object.keys(t))i(e,t[e]);return"function"==typeof e.sortMapEntries&&o.items.sort(e.sortMapEntries),o}add(e,t){let n;n=Ve(e)?e:e&&"object"==typeof e&&"key"in e?new Jt(e.key,e.value):new Jt(e,e?.value);const s=Zt(this.items,n.key),r=this.schema?.sortMapEntries;if(s){if(!t)throw new Error(`Key ${n.key} already set`);Ge(s.value)&&yt(n.value)?s.value.value=n.value:s.value=n.value}else if(r){const e=this.items.findIndex((e=>r(n,e)<0));-1===e?this.items.push(n):this.items.splice(e,0,n)}else this.items.push(n)}delete(e){const t=Zt(this.items,e);if(!t)return!1;return this.items.splice(this.items.indexOf(t),1).length>0}get(e,t){const n=Zt(this.items,e),s=n?.value;return(!t&&Ge(s)?s.value:s)??void 0}has(e){return!!Zt(this.items,e)}set(e,t){this.add(new Jt(e,t),!0)}toJSON(e,t,n){const s=n?new n:t?.mapAsMap?new Map:{};t?.onCreate&&t.onCreate(s);for(const e of this.items)Vt(t,s,e);return s}toString(e,t,n){if(!e)return JSON.stringify(this);for(const e of this.items)if(!Ve(e))throw new Error(`Map items must all be pairs; found ${JSON.stringify(e)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),Yt(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:n,onComment:t})}}const tn={collection:"map",default:!0,nodeClass:en,tag:"tag:yaml.org,2002:map",resolve:(e,t)=>(We(e)||t("Expected a mapping for this tag"),e),createNode:(e,t,n)=>en.from(e,t,n)};class nn extends Ot{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(Ue,e),this.items=[]}add(e){this.items.push(e)}delete(e){const t=sn(e);if("number"!=typeof t)return!1;return this.items.splice(t,1).length>0}get(e,t){const n=sn(e);if("number"!=typeof n)return;const s=this.items[n];return!t&&Ge(s)?s.value:s}has(e){const t=sn(e);return"number"==typeof t&&t<this.items.length}set(e,t){const n=sn(e);if("number"!=typeof n)throw new Error(`Expected a valid index, not ${e}.`);const s=this.items[n];Ge(s)&&yt(t)?s.value=t:this.items[n]=t}toJSON(e,t){const n=[];t?.onCreate&&t.onCreate(n);let s=0;for(const e of this.items)n.push(ht(e,String(s++),t));return n}toString(e,t,n){return e?Yt(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:n,onComment:t}):JSON.stringify(this)}static from(e,t,n){const{replacer:s}=n,r=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(let o of t){if("function"==typeof s){const n=t instanceof Set?o:String(e++);o=s.call(t,n,o)}r.items.push(vt(o,void 0,n))}}return r}}function sn(e){let t=Ge(e)?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),"number"==typeof t&&Number.isInteger(t)&&t>=0?t:null}const rn={collection:"seq",default:!0,nodeClass:nn,tag:"tag:yaml.org,2002:seq",resolve:(e,t)=>(Je(e)||t("Expected a sequence for this tag"),e),createNode:(e,t,n)=>nn.from(e,t,n)},on={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:(e,t,n,s)=>Dt(e,t=Object.assign({actualString:!0},t),n,s)},an={identify:e=>null==e,createNode:()=>new bt(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new bt(null),stringify:({source:e},t)=>"string"==typeof e&&an.test.test(e)?e:t.options.nullStr},cn={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>new bt("t"===e[0]||"T"===e[0]),stringify({source:e,value:t},n){if(e&&cn.test.test(e)){if(t===("t"===e[0]||"T"===e[0]))return e}return t?n.options.trueStr:n.options.falseStr}};function ln({format:e,minFractionDigits:t,tag:n,value:s}){if("bigint"==typeof s)return String(s);const r="number"==typeof s?s:Number(s);if(!isFinite(r))return isNaN(r)?".nan":r<0?"-.inf":".inf";let o=JSON.stringify(s);if(!e&&t&&(!n||"tag:yaml.org,2002:float"===n)&&/^\d/.test(o)){let e=o.indexOf(".");e<0&&(e=o.length,o+=".");let n=t-(o.length-e-1);for(;n-- >0;)o+="0"}return o}const un={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:ln},fn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():ln(e)}},dn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(e){const t=new bt(parseFloat(e)),n=e.indexOf(".");return-1!==n&&"0"===e[e.length-1]&&(t.minFractionDigits=e.length-n-1),t},stringify:ln},hn=e=>"bigint"==typeof e||Number.isInteger(e),pn=(e,t,n,{intAsBigInt:s})=>s?BigInt(e):parseInt(e.substring(t),n);function mn(e,t,n){const{value:s}=e;return hn(s)&&s>=0?n+s.toString(t):ln(e)}const gn={identify:e=>hn(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(e,t,n)=>pn(e,2,8,n),stringify:e=>mn(e,8,"0o")},yn={identify:hn,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(e,t,n)=>pn(e,0,10,n),stringify:ln},bn={identify:e=>hn(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(e,t,n)=>pn(e,2,16,n),stringify:e=>mn(e,16,"0x")},vn=[tn,rn,on,an,cn,gn,yn,bn,un,fn,dn];function wn(e){return"bigint"==typeof e||Number.isInteger(e)}const kn=({value:e})=>JSON.stringify(e),On=[tn,rn].concat([{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:kn},{identify:e=>null==e,createNode:()=>new bt(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:kn},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:e=>"true"===e,stringify:kn},{identify:wn,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(e,t,{intAsBigInt:n})=>n?BigInt(e):parseInt(e,10),stringify:({value:e})=>wn(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:kn}],{default:!0,tag:"",test:/^/,resolve:(e,t)=>(t(`Unresolved plain scalar ${JSON.stringify(e)}`),e)}),Sn={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(e,t){if("function"==typeof atob){const t=atob(e.replace(/[\n\r]/g,"")),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n[e]=t.charCodeAt(e);return n}return t("This environment does not support reading binary tags; either Buffer or atob is required"),e},stringify({comment:e,type:t,value:n},s,r,o){if(!n)return"";const i=n;let a;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let e="";for(let t=0;t<i.length;++t)e+=String.fromCharCode(i[t]);a=btoa(e)}if(t||(t=bt.BLOCK_LITERAL),t!==bt.QUOTE_DOUBLE){const e=Math.max(s.options.lineWidth-s.indent.length,s.options.minContentWidth),n=Math.ceil(a.length/e),r=new Array(n);for(let t=0,s=0;t<n;++t,s+=e)r[t]=a.substr(s,e);a=r.join(t===bt.BLOCK_LITERAL?"\n":" ")}return Dt({comment:e,type:t,value:a},s,r,o)}};function En(e,t){if(Je(e))for(let n=0;n<e.items.length;++n){let s=e.items[n];if(!Ve(s)){if(We(s)){s.items.length>1&&t("Each pair must have its own sequence indicator");const e=s.items[0]||new Jt(new bt(null));if(s.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${s.commentBefore}\n${e.key.commentBefore}`:s.commentBefore),s.comment){const t=e.value??e.key;t.comment=t.comment?`${s.comment}\n${t.comment}`:s.comment}s=e}e.items[n]=Ve(s)?s:new Jt(s)}}else t("Expected a sequence for this tag");return e}function _n(e,t,n){const{replacer:s}=n,r=new nn(e);r.tag="tag:yaml.org,2002:pairs";let o=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let i,a;if("function"==typeof s&&(e=s.call(t,String(o++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);i=e[0],a=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);i=t[0],a=e[i]}else i=e;r.items.push(Gt(i,a,n))}return r}const An={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:En,createNode:_n};class Nn extends nn{constructor(){super(),this.add=en.prototype.add.bind(this),this.delete=en.prototype.delete.bind(this),this.get=en.prototype.get.bind(this),this.has=en.prototype.has.bind(this),this.set=en.prototype.set.bind(this),this.tag=Nn.tag}toJSON(e,t){if(!t)return super.toJSON(e);const n=new Map;t?.onCreate&&t.onCreate(n);for(const e of this.items){let s,r;if(Ve(e)?(s=ht(e.key,"",t),r=ht(e.value,s,t)):s=ht(e,"",t),n.has(s))throw new Error("Ordered maps must not include duplicate keys");n.set(s,r)}return n}static from(e,t,n){const s=_n(e,t,n),r=new this;return r.items=s.items,r}}Nn.tag="tag:yaml.org,2002:omap";const Tn={collection:"seq",identify:e=>e instanceof Map,nodeClass:Nn,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){const n=En(e,t),s=[];for(const{key:e}of n.items)Ge(e)&&(s.includes(e.value)?t(`Ordered maps must not include duplicate keys: ${e.value}`):s.push(e.value));return Object.assign(new Nn,n)},createNode:(e,t,n)=>Nn.from(e,t,n)};function xn({value:e,source:t},n){return t&&(e?Cn:In).test.test(t)?t:e?n.options.trueStr:n.options.falseStr}const Cn={identify:e=>!0===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new bt(!0),stringify:xn},In={identify:e=>!1===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new bt(!1),stringify:xn},Pn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:ln},$n={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():ln(e)}},Ln={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(e){const t=new bt(parseFloat(e.replace(/_/g,""))),n=e.indexOf(".");if(-1!==n){const s=e.substring(n+1).replace(/_/g,"");"0"===s[s.length-1]&&(t.minFractionDigits=s.length)}return t},stringify:ln},jn=e=>"bigint"==typeof e||Number.isInteger(e);function Mn(e,t,n,{intAsBigInt:s}){const r=e[0];if("-"!==r&&"+"!==r||(t+=1),e=e.substring(t).replace(/_/g,""),s){switch(n){case 2:e=`0b${e}`;break;case 8:e=`0o${e}`;break;case 16:e=`0x${e}`}const t=BigInt(e);return"-"===r?BigInt(-1)*t:t}const o=parseInt(e,n);return"-"===r?-1*o:o}function Rn(e,t,n){const{value:s}=e;if(jn(s)){const e=s.toString(t);return s<0?"-"+n+e.substr(1):n+e}return ln(e)}const Dn={identify:jn,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(e,t,n)=>Mn(e,2,2,n),stringify:e=>Rn(e,2,"0b")},Bn={identify:jn,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(e,t,n)=>Mn(e,1,8,n),stringify:e=>Rn(e,8,"0")},qn={identify:jn,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(e,t,n)=>Mn(e,0,10,n),stringify:ln},Un={identify:jn,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(e,t,n)=>Mn(e,2,16,n),stringify:e=>Rn(e,16,"0x")};class Kn extends en{constructor(e){super(e),this.tag=Kn.tag}add(e){let t;t=Ve(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new Jt(e.key,null):new Jt(e,null);Zt(this.items,t.key)||this.items.push(t)}get(e,t){const n=Zt(this.items,e);return!t&&Ve(n)?Ge(n.key)?n.key.value:n.key:n}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);const n=Zt(this.items,e);n&&!t?this.items.splice(this.items.indexOf(n),1):!n&&t&&this.items.push(new Jt(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,n){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,n);throw new Error("Set items must all have null values")}static from(e,t,n){const{replacer:s}=n,r=new this(e);if(t&&Symbol.iterator in Object(t))for(let e of t)"function"==typeof s&&(e=s.call(t,e,e)),r.items.push(Gt(e,null,n));return r}}Kn.tag="tag:yaml.org,2002:set";const Fn={collection:"map",identify:e=>e instanceof Set,nodeClass:Kn,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,n)=>Kn.from(e,t,n),resolve(e,t){if(We(e)){if(e.hasAllNullValues(!0))return Object.assign(new Kn,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};function Hn(e,t){const n=e[0],s="-"===n||"+"===n?e.substring(1):e,r=e=>t?BigInt(e):Number(e),o=s.replace(/_/g,"").split(":").reduce(((e,t)=>e*r(60)+r(t)),r(0));return"-"===n?r(-1)*o:o}function Wn(e){let{value:t}=e,n=e=>e;if("bigint"==typeof t)n=e=>BigInt(e);else if(isNaN(t)||!isFinite(t))return ln(e);let s="";t<0&&(s="-",t*=n(-1));const r=n(60),o=[t%r];return t<60?o.unshift(0):(t=(t-o[0])/r,o.unshift(t%r),t>=60&&(t=(t-o[0])/r,o.unshift(t))),s+o.map((e=>String(e).padStart(2,"0"))).join(":").replace(/000000\d*$/,"")}const Vn={identify:e=>"bigint"==typeof e||Number.isInteger(e),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(e,t,{intAsBigInt:n})=>Hn(e,n),stringify:Wn},Gn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:e=>Hn(e,!1),stringify:Wn},Jn={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(e){const t=e.match(Jn.test);if(!t)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");const[,n,s,r,o,i,a]=t.map(Number),c=t[7]?Number((t[7]+"00").substr(1,3)):0;let l=Date.UTC(n,s-1,r,o||0,i||0,a||0,c);const u=t[8];if(u&&"Z"!==u){let e=Hn(u,!1);Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e?.toISOString().replace(/(T00:00:00)?\.000Z$/,"")??""},Yn=[tn,rn,on,an,Cn,In,Dn,Bn,qn,Un,Pn,$n,Ln,Sn,Ft,Tn,An,Fn,Vn,Gn,Jn],Qn=new Map([["core",vn],["failsafe",[tn,rn,on]],["json",On],["yaml11",Yn],["yaml-1.1",Yn]]),Xn={binary:Sn,bool:cn,float:dn,floatExp:fn,floatNaN:un,floatTime:Gn,int:yn,intHex:bn,intOct:gn,intTime:Vn,map:tn,merge:Ft,null:an,omap:Tn,pairs:An,seq:rn,set:Fn,timestamp:Jn},zn={"tag:yaml.org,2002:binary":Sn,"tag:yaml.org,2002:merge":Ft,"tag:yaml.org,2002:omap":Tn,"tag:yaml.org,2002:pairs":An,"tag:yaml.org,2002:set":Fn,"tag:yaml.org,2002:timestamp":Jn};function Zn(e,t,n){const s=Qn.get(t);if(s&&!e)return n&&!s.includes(Ft)?s.concat(Ft):s.slice();let r=s;if(!r){if(!Array.isArray(e)){const e=Array.from(Qn.keys()).filter((e=>"yaml11"!==e)).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown schema "${t}"; use one of ${e} or define customTags array`)}r=[]}if(Array.isArray(e))for(const t of e)r=r.concat(t);else"function"==typeof e&&(r=e(r.slice()));return n&&(r=r.concat(Ft)),r.reduce(((e,t)=>{const n="string"==typeof t?Xn[t]:t;if(!n){const e=JSON.stringify(t),n=Object.keys(Xn).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown custom tag ${e}; use one of ${n}`)}return e.includes(n)||e.push(n),e}),[])}const es=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class ts{constructor({compat:e,customTags:t,merge:n,resolveKnownTags:s,schema:r,sortMapEntries:o,toStringDefaults:i}){this.compat=Array.isArray(e)?Zn(e,"compat"):e?Zn(null,e):null,this.name="string"==typeof r&&r||"core",this.knownTags=s?zn:{},this.tags=Zn(t,this.name,n),this.toStringOptions=i??null,Object.defineProperty(this,De,{value:tn}),Object.defineProperty(this,qe,{value:on}),Object.defineProperty(this,Ue,{value:rn}),this.sortMapEntries="function"==typeof o?o:!0===o?es:null}clone(){const e=Object.create(ts.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}}class ns{constructor(e,t,n){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,Ke,{value:Re});let s=null;"function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t,t=void 0);const r=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},n);this.options=r;let{version:o}=r;n?._directives?(this.directives=n._directives.atDocument(),this.directives.yaml.explicit&&(o=this.directives.yaml.version)):this.directives=new ct({version:o}),this.setSchema(o,n),this.contents=void 0===e?null:this.createNode(e,s,n)}clone(){const e=Object.create(ns.prototype,{[Ke]:{value:Re}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=Qe(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){ss(this.contents)&&this.contents.add(e)}addIn(e,t){ss(this.contents)&&this.contents.addIn(e,t)}createAlias(e,t){if(!e.anchor){const n=ut(this);e.anchor=!t||n.has(t)?ft(t||"a",n):t}return new mt(e.anchor)}createNode(e,t,n){let s;if("function"==typeof t)e=t.call({"":e},"",e),s=t;else if(Array.isArray(t)){const e=e=>"number"==typeof e||e instanceof String||e instanceof Number,n=t.filter(e).map(String);n.length>0&&(t=t.concat(n)),s=t}else void 0===n&&t&&(n=t,t=void 0);const{aliasDuplicateObjects:r,anchorPrefix:o,flow:i,keepUndefined:a,onTagObj:c,tag:l}=n??{},{onAnchor:u,setAnchors:f,sourceObjects:d}=function(e,t){const n=[],s=new Map;let r=null;return{onAnchor:s=>{n.push(s),r||(r=ut(e));const o=ft(t,r);return r.add(o),o},setAnchors:()=>{for(const e of n){const t=s.get(e);if("object"!=typeof t||!t.anchor||!Ge(t.node)&&!Ye(t.node)){const t=new Error("Failed to resolve repeated object (this should not happen)");throw t.source=e,t}t.node.anchor=t.anchor}},sourceObjects:s}}(this,o||"a"),h=vt(e,l,{aliasDuplicateObjects:r??!0,keepUndefined:a??!1,onAnchor:u,onTagObj:c,replacer:s,schema:this.schema,sourceObjects:d});return i&&Ye(h)&&(h.flow=!0),f(),h}createPair(e,t,n={}){const s=this.createNode(e,null,n),r=this.createNode(t,null,n);return new Jt(s,r)}delete(e){return!!ss(this.contents)&&this.contents.delete(e)}deleteIn(e){return kt(e)?null!=this.contents&&(this.contents=null,!0):!!ss(this.contents)&&this.contents.deleteIn(e)}get(e,t){return Ye(this.contents)?this.contents.get(e,t):void 0}getIn(e,t){return kt(e)?!t&&Ge(this.contents)?this.contents.value:this.contents:Ye(this.contents)?this.contents.getIn(e,t):void 0}has(e){return!!Ye(this.contents)&&this.contents.has(e)}hasIn(e){return kt(e)?void 0!==this.contents:!!Ye(this.contents)&&this.contents.hasIn(e)}set(e,t){null==this.contents?this.contents=wt(this.schema,[e],t):ss(this.contents)&&this.contents.set(e,t)}setIn(e,t){kt(e)?this.contents=t:null==this.contents?this.contents=wt(this.schema,Array.from(e),t):ss(this.contents)&&this.contents.setIn(e,t)}setSchema(e,t={}){let n;switch("number"==typeof e&&(e=String(e)),e){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new ct({version:"1.1"}),n={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=e:this.directives=new ct({version:e}),n={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,n=null;break;default:{const t=JSON.stringify(e);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${t}`)}}if(t.schema instanceof Object)this.schema=t.schema;else{if(!n)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new ts(Object.assign(n,t))}}toJS({json:e,jsonArg:t,mapAsMap:n,maxAliasCount:s,onAnchor:r,reviver:o}={}){const i={anchors:new Map,doc:this,keep:!e,mapAsMap:!0===n,mapKeyWarned:!1,maxAliasCount:"number"==typeof s?s:100},a=ht(this.contents,t??"",i);if("function"==typeof r)for(const{count:e,res:t}of i.anchors.values())r(t,e);return"function"==typeof o?dt(o,{"":a},"",a):a}toJSON(e,t){return this.toJS({json:!0,jsonArg:e,mapAsMap:!1,onAnchor:t})}toString(e={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in e&&(!Number.isInteger(e.indent)||Number(e.indent)<=0)){const t=JSON.stringify(e.indent);throw new Error(`"indent" option must be a positive integer, not ${t}`)}return function(e,t){const n=[];let s=!0===t.directives;if(!1!==t.directives&&e.directives){const t=e.directives.toString(e);t?(n.push(t),s=!0):e.directives.docStart&&(s=!0)}s&&n.push("---");const r=Bt(e,t),{commentString:o}=r.options;if(e.commentBefore){1!==n.length&&n.unshift("");const t=o(e.commentBefore);n.unshift(Et(t,""))}let i=!1,a=null;if(e.contents){if(Qe(e.contents)){if(e.contents.spaceBefore&&s&&n.push(""),e.contents.commentBefore){const t=o(e.contents.commentBefore);n.push(Et(t,""))}r.forceBlockIndent=!!e.comment,a=e.contents.comment}const t=a?void 0:()=>i=!0;let c=qt(e.contents,r,(()=>a=null),t);a&&(c+=_t(c,"",o(a))),"|"!==c[0]&&">"!==c[0]||"---"!==n[n.length-1]?n.push(c):n[n.length-1]=`--- ${c}`}else n.push(qt(e.contents,r));if(e.directives?.docEnd)if(e.comment){const t=o(e.comment);t.includes("\n")?(n.push("..."),n.push(Et(t,""))):n.push(`... ${t}`)}else n.push("...");else{let t=e.comment;t&&i&&(t=t.replace(/^\n+/,"")),t&&(i&&!a||""===n[n.length-1]||n.push(""),n.push(Et(o(t),"")))}return n.join("\n")+"\n"}(this,e)}}function ss(e){if(Ye(e))return!0;throw new Error("Expected a YAML collection as document contents")}class rs extends Error{constructor(e,t,n,s){super(),this.name=e,this.code=n,this.message=s,this.pos=t}}class os extends rs{constructor(e,t,n){super("YAMLParseError",e,t,n)}}class is extends rs{constructor(e,t,n){super("YAMLWarning",e,t,n)}}const as=(e,t)=>n=>{if(-1===n.pos[0])return;n.linePos=n.pos.map((e=>t.linePos(e)));const{line:s,col:r}=n.linePos[0];n.message+=` at line ${s}, column ${r}`;let o=r-1,i=e.substring(t.lineStarts[s-1],t.lineStarts[s]).replace(/[\n\r]+$/,"");if(o>=60&&i.length>80){const e=Math.min(o-39,i.length-79);i="…"+i.substring(e),o-=e-1}if(i.length>80&&(i=i.substring(0,79)+"…"),s>1&&/^ *$/.test(i.substring(0,o))){let n=e.substring(t.lineStarts[s-2],t.lineStarts[s-1]);n.length>80&&(n=n.substring(0,79)+"…\n"),i=n+i}if(/[^ ]/.test(i)){let e=1;const t=n.linePos[1];t&&t.line===s&&t.col>r&&(e=Math.max(1,Math.min(t.col-r,80-o)));const a=" ".repeat(o)+"^".repeat(e);n.message+=`:\n\n${i}\n${a}\n`}};function cs(e,{flow:t,indicator:n,next:s,offset:r,onError:o,parentIndent:i,startOnNewline:a}){let c=!1,l=a,u=a,f="",d="",h=!1,p=!1,m=null,g=null,y=null,b=null,v=null,w=null,k=null;for(const r of e)switch(p&&("space"!==r.type&&"newline"!==r.type&&"comma"!==r.type&&o(r.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),p=!1),m&&(l&&"comment"!==r.type&&"newline"!==r.type&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),m=null),r.type){case"space":t||"doc-start"===n&&"flow-collection"===s?.type||!r.source.includes("\t")||(m=r),u=!0;break;case"comment":{u||o(r,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const e=r.source.substring(1)||" ";f?f+=d+e:f=e,d="",l=!1;break}case"newline":l?f?f+=r.source:w&&"seq-item-ind"===n||(c=!0):d+=r.source,l=!0,h=!0,(g||y)&&(b=r),u=!0;break;case"anchor":g&&o(r,"MULTIPLE_ANCHORS","A node can have at most one anchor"),r.source.endsWith(":")&&o(r.offset+r.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),g=r,null===k&&(k=r.offset),l=!1,u=!1,p=!0;break;case"tag":y&&o(r,"MULTIPLE_TAGS","A node can have at most one tag"),y=r,null===k&&(k=r.offset),l=!1,u=!1,p=!0;break;case n:(g||y)&&o(r,"BAD_PROP_ORDER",`Anchors and tags must be after the ${r.source} indicator`),w&&o(r,"UNEXPECTED_TOKEN",`Unexpected ${r.source} in ${t??"collection"}`),w=r,l="seq-item-ind"===n||"explicit-key-ind"===n,u=!1;break;case"comma":if(t){v&&o(r,"UNEXPECTED_TOKEN",`Unexpected , in ${t}`),v=r,l=!1,u=!1;break}default:o(r,"UNEXPECTED_TOKEN",`Unexpected ${r.type} token`),l=!1,u=!1}const O=e[e.length-1],S=O?O.offset+O.source.length:r;return p&&s&&"space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&("scalar"!==s.type||""!==s.source)&&o(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),m&&(l&&m.indent<=i||"block-map"===s?.type||"block-seq"===s?.type)&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:v,found:w,spaceBefore:c,comment:f,hasNewline:h,anchor:g,tag:y,newlineAfterProp:b,end:S,start:k??S}}function ls(e){if(!e)return null;switch(e.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(e.source.includes("\n"))return!0;if(e.end)for(const t of e.end)if("newline"===t.type)return!0;return!1;case"flow-collection":for(const t of e.items){for(const e of t.start)if("newline"===e.type)return!0;if(t.sep)for(const e of t.sep)if("newline"===e.type)return!0;if(ls(t.key)||ls(t.value))return!0}return!1;default:return!0}}function us(e,t,n){if("flow-collection"===t?.type){const s=t.end[0];if(s.indent===e&&("]"===s.source||"}"===s.source)&&ls(t)){n(s,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}}}function fs(e,t,n){const{uniqueKeys:s}=e.options;if(!1===s)return!1;const r="function"==typeof s?s:(e,t)=>e===t||Ge(e)&&Ge(t)&&e.value===t.value;return t.some((e=>r(e.key,n)))}const ds="All mapping items must start at the same column";function hs(e,t,n,s){let r="";if(e){let o=!1,i="";for(const a of e){const{source:e,type:c}=a;switch(c){case"space":o=!0;break;case"comment":{n&&!o&&s(a,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const t=e.substring(1)||" ";r?r+=i+t:r=t,i="";break}case"newline":r&&(i+=e),o=!0;break;default:s(a,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`)}t+=e.length}}return{comment:r,offset:t}}const ps="Block collections are not allowed within flow collections",ms=e=>e&&("block-map"===e.type||"block-seq"===e.type);function gs(e,t,n,s,r,o){const i="block-map"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,r,o){const i=new(o?.nodeClass??en)(n.schema);n.atRoot&&(n.atRoot=!1);let a=s.offset,c=null;for(const o of s.items){const{start:l,key:u,sep:f,value:d}=o,h=cs(l,{indicator:"explicit-key-ind",next:u??f?.[0],offset:a,onError:r,parentIndent:s.indent,startOnNewline:!0}),p=!h.found;if(p){if(u&&("block-seq"===u.type?r(a,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in u&&u.indent!==s.indent&&r(a,"BAD_INDENT",ds)),!h.anchor&&!h.tag&&!f){c=h.end,h.comment&&(i.comment?i.comment+="\n"+h.comment:i.comment=h.comment);continue}(h.newlineAfterProp||ls(u))&&r(u??l[l.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else h.found?.indent!==s.indent&&r(a,"BAD_INDENT",ds);n.atKey=!0;const m=h.end,g=u?e(n,u,h,r):t(n,m,l,null,h,r);n.schema.compat&&us(s.indent,u,r),n.atKey=!1,fs(n,i.items,g)&&r(m,"DUPLICATE_KEY","Map keys must be unique");const y=cs(f??[],{indicator:"map-value-ind",next:d,offset:g.range[2],onError:r,parentIndent:s.indent,startOnNewline:!u||"block-scalar"===u.type});if(a=y.end,y.found){p&&("block-map"!==d?.type||y.hasNewline||r(a,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),n.options.strict&&h.start<y.found.offset-1024&&r(g.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));const c=d?e(n,d,y,r):t(n,a,f,null,y,r);n.schema.compat&&us(s.indent,d,r),a=c.range[2];const l=new Jt(g,c);n.options.keepSourceTokens&&(l.srcToken=o),i.items.push(l)}else{p&&r(g.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const e=new Jt(g);n.options.keepSourceTokens&&(e.srcToken=o),i.items.push(e)}}return c&&c<a&&r(c,"IMPOSSIBLE","Map comment with trailing content"),i.range=[s.offset,a,c??a],i}(e,t,n,s,o):"block-seq"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,r,o){const i=new(o?.nodeClass??nn)(n.schema);n.atRoot&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let a=s.offset,c=null;for(const{start:o,value:l}of s.items){const u=cs(o,{indicator:"seq-item-ind",next:l,offset:a,onError:r,parentIndent:s.indent,startOnNewline:!0});if(!u.found){if(!(u.anchor||u.tag||l)){c=u.end,u.comment&&(i.comment=u.comment);continue}l&&"block-seq"===l.type?r(u.end,"BAD_INDENT","All sequence items must start at the same column"):r(a,"MISSING_CHAR","Sequence item without - indicator")}const f=l?e(n,l,u,r):t(n,u.end,o,null,u,r);n.schema.compat&&us(s.indent,l,r),a=f.range[2],i.items.push(f)}return i.range=[s.offset,a,c??a],i}(e,t,n,s,o):function({composeNode:e,composeEmptyNode:t},n,s,r,o){const i="{"===s.start.source,a=i?"flow map":"flow sequence",c=new(o?.nodeClass??(i?en:nn))(n.schema);c.flow=!0;const l=n.atRoot;l&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let u=s.offset+s.start.source.length;for(let o=0;o<s.items.length;++o){const l=s.items[o],{start:f,key:d,sep:h,value:p}=l,m=cs(f,{flow:a,indicator:"explicit-key-ind",next:d??h?.[0],offset:u,onError:r,parentIndent:s.indent,startOnNewline:!1});if(!m.found){if(!(m.anchor||m.tag||h||p)){0===o&&m.comma?r(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`):o<s.items.length-1&&r(m.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${a}`),m.comment&&(c.comment?c.comment+="\n"+m.comment:c.comment=m.comment),u=m.end;continue}!i&&n.options.strict&&ls(d)&&r(d,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===o)m.comma&&r(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`);else if(m.comma||r(m.start,"MISSING_CHAR",`Missing , between ${a} items`),m.comment){let e="";e:for(const t of f)switch(t.type){case"comma":case"space":break;case"comment":e=t.source.substring(1);break e;default:break e}if(e){let t=c.items[c.items.length-1];Ve(t)&&(t=t.value??t.key),t.comment?t.comment+="\n"+e:t.comment=e,m.comment=m.comment.substring(e.length+1)}}if(i||h||m.found){n.atKey=!0;const o=m.end,g=d?e(n,d,m,r):t(n,o,f,null,m,r);ms(d)&&r(g.range,"BLOCK_IN_FLOW",ps),n.atKey=!1;const y=cs(h??[],{flow:a,indicator:"map-value-ind",next:p,offset:g.range[2],onError:r,parentIndent:s.indent,startOnNewline:!1});if(y.found){if(!i&&!m.found&&n.options.strict){if(h)for(const e of h){if(e===y.found)break;if("newline"===e.type){r(e,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}m.start<y.found.offset-1024&&r(y.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else p&&("source"in p&&p.source&&":"===p.source[0]?r(p,"MISSING_CHAR",`Missing space after : in ${a}`):r(y.start,"MISSING_CHAR",`Missing , or : between ${a} items`));const b=p?e(n,p,y,r):y.found?t(n,y.end,h,null,y,r):null;b?ms(p)&&r(b.range,"BLOCK_IN_FLOW",ps):y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const v=new Jt(g,b);if(n.options.keepSourceTokens&&(v.srcToken=l),i){const e=c;fs(n,e.items,g)&&r(o,"DUPLICATE_KEY","Map keys must be unique"),e.items.push(v)}else{const e=new en(n.schema);e.flow=!0,e.items.push(v);const t=(b??g).range;e.range=[g.range[0],t[1],t[2]],c.items.push(e)}u=b?b.range[2]:y.end}else{const s=p?e(n,p,m,r):t(n,m.end,h,null,m,r);c.items.push(s),u=s.range[2],ms(p)&&r(s.range,"BLOCK_IN_FLOW",ps)}}const f=i?"}":"]",[d,...h]=s.end;let p=u;if(d&&d.source===f)p=d.offset+d.source.length;else{const e=a[0].toUpperCase()+a.substring(1);r(u,l?"MISSING_CHAR":"BAD_INDENT",l?`${e} must end with a ${f}`:`${e} in block collection must be sufficiently indented and end with a ${f}`),d&&1!==d.source.length&&h.unshift(d)}if(h.length>0){const e=hs(h,p,n.options.strict,r);e.comment&&(c.comment?c.comment+="\n"+e.comment:c.comment=e.comment),c.range=[s.offset,p,e.offset]}else c.range=[s.offset,p,p];return c}(e,t,n,s,o),a=i.constructor;return"!"===r||r===a.tagName?(i.tag=a.tagName,i):(r&&(i.tag=r),i)}function ys(e,t,n){const s=t.offset,r=function({offset:e,props:t},n,s){if("block-scalar-header"!==t[0].type)return s(t[0],"IMPOSSIBLE","Block scalar header not found"),null;const{source:r}=t[0],o=r[0];let i=0,a="",c=-1;for(let t=1;t<r.length;++t){const n=r[t];if(a||"-"!==n&&"+"!==n){const s=Number(n);!i&&s?i=s:-1===c&&(c=e+t)}else a=n}-1!==c&&s(c,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${r}`);let l=!1,u="",f=r.length;for(let e=1;e<t.length;++e){const r=t[e];switch(r.type){case"space":l=!0;case"newline":f+=r.source.length;break;case"comment":if(n&&!l){s(r,"MISSING_CHAR","Comments must be separated from other tokens by white space characters")}f+=r.source.length,u=r.source.substring(1);break;case"error":s(r,"UNEXPECTED_TOKEN",r.message),f+=r.source.length;break;default:{s(r,"UNEXPECTED_TOKEN",`Unexpected token in block scalar header: ${r.type}`);const e=r.source;e&&"string"==typeof e&&(f+=e.length)}}}return{mode:o,indent:i,chomp:a,comment:u,length:f}}(t,e.options.strict,n);if(!r)return{value:"",type:null,comment:"",range:[s,s,s]};const o=">"===r.mode?bt.BLOCK_FOLDED:bt.BLOCK_LITERAL,i=t.source?function(e){const t=e.split(/\n( *)/),n=t[0],s=n.match(/^( *)/),r=[s?.[1]?[s[1],n.slice(s[1].length)]:["",n]];for(let e=1;e<t.length;e+=2)r.push([t[e],t[e+1]]);return r}(t.source):[];let a=i.length;for(let e=i.length-1;e>=0;--e){const t=i[e][1];if(""!==t&&"\r"!==t)break;a=e}if(0===a){const e="+"===r.chomp&&i.length>0?"\n".repeat(Math.max(1,i.length-1)):"";let n=s+r.length;return t.source&&(n+=t.source.length),{value:e,type:o,comment:r.comment,range:[s,n,n]}}let c=t.indent+r.indent,l=t.offset+r.length,u=0;for(let t=0;t<a;++t){const[s,o]=i[t];if(""!==o&&"\r"!==o){if(s.length<c){const e="Block scalars with more-indented leading empty lines must use an explicit indentation indicator";n(l+s.length,"MISSING_CHAR",e)}if(0===r.indent&&(c=s.length),u=t,0===c&&!e.atRoot){n(l,"BAD_INDENT","Block scalar values in collections must be indented")}break}0===r.indent&&s.length>c&&(c=s.length),l+=s.length+o.length+1}for(let e=i.length-1;e>=a;--e)i[e][0].length>c&&(a=e+1);let f="",d="",h=!1;for(let e=0;e<u;++e)f+=i[e][0].slice(c)+"\n";for(let e=u;e<a;++e){let[t,s]=i[e];l+=t.length+s.length+1;const a="\r"===s[s.length-1];if(a&&(s=s.slice(0,-1)),s&&t.length<c){const e=`Block scalar lines must not be less indented than their ${r.indent?"explicit indentation indicator":"first line"}`;n(l-s.length-(a?2:1),"BAD_INDENT",e),t=""}o===bt.BLOCK_LITERAL?(f+=d+t.slice(c)+s,d="\n"):t.length>c||"\t"===s[0]?(" "===d?d="\n":h||"\n"!==d||(d="\n\n"),f+=d+t.slice(c)+s,d="\n",h=!0):""===s?"\n"===d?f+="\n":d="\n":(f+=d+s,d=" ",h=!1)}switch(r.chomp){case"-":break;case"+":for(let e=a;e<i.length;++e)f+="\n"+i[e][0].slice(c);"\n"!==f[f.length-1]&&(f+="\n");break;default:f+="\n"}const p=s+r.length+t.source.length;return{value:f,type:o,comment:r.comment,range:[s,p,p]}}function bs(e,t,n){const{offset:s,type:r,source:o,end:i}=e;let a,c;const l=(e,t,r)=>n(s+e,t,r);switch(r){case"scalar":a=bt.PLAIN,c=function(e,t){let n="";switch(e[0]){case"\t":n="a tab character";break;case",":n="flow indicator character ,";break;case"%":n="directive indicator character %";break;case"|":case">":n=`block scalar indicator ${e[0]}`;break;case"@":case"`":n=`reserved character ${e[0]}`}n&&t(0,"BAD_SCALAR_START",`Plain value cannot start with ${n}`);return vs(e)}(o,l);break;case"single-quoted-scalar":a=bt.QUOTE_SINGLE,c=function(e,t){"'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote");return vs(e.slice(1,-1)).replace(/''/g,"'")}(o,l);break;case"double-quoted-scalar":a=bt.QUOTE_DOUBLE,c=function(e,t){let n="";for(let s=1;s<e.length-1;++s){const r=e[s];if("\r"!==r||"\n"!==e[s+1])if("\n"===r){const{fold:t,offset:r}=ws(e,s);n+=t,s=r}else if("\\"===r){let r=e[++s];const o=ks[r];if(o)n+=o;else if("\n"===r)for(r=e[s+1];" "===r||"\t"===r;)r=e[1+ ++s];else if("\r"===r&&"\n"===e[s+1])for(r=e[1+ ++s];" "===r||"\t"===r;)r=e[1+ ++s];else if("x"===r||"u"===r||"U"===r){const o={x:2,u:4,U:8}[r];n+=Os(e,s+1,o,t),s+=o}else{const r=e.substr(s-1,2);t(s-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${r}`),n+=r}}else if(" "===r||"\t"===r){const t=s;let o=e[s+1];for(;" "===o||"\t"===o;)o=e[1+ ++s];"\n"===o||"\r"===o&&"\n"===e[s+2]||(n+=s>t?e.slice(t,s+1):r)}else n+=r}'"'===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR",'Missing closing "quote');return n}(o,l);break;default:return n(e,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${r}`),{value:"",type:null,comment:"",range:[s,s+o.length,s+o.length]}}const u=s+o.length,f=hs(i,u,t,n);return{value:c,type:a,comment:f.comment,range:[s,u,f.offset]}}function vs(e){let t,n;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),n=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,n=/[ \t]*(.*?)[ \t]*\r?\n/sy}let s=t.exec(e);if(!s)return e;let r=s[1],o=" ",i=t.lastIndex;for(n.lastIndex=i;s=n.exec(e);)""===s[1]?"\n"===o?r+=o:o="\n":(r+=o+s[1],o=" "),i=n.lastIndex;const a=/[ \t]*(.*)/sy;return a.lastIndex=i,s=a.exec(e),r+o+(s?.[1]??"")}function ws(e,t){let n="",s=e[t+1];for(;!(" "!==s&&"\t"!==s&&"\n"!==s&&"\r"!==s||"\r"===s&&"\n"!==e[t+2]);)"\n"===s&&(n+="\n"),s=e[(t+=1)+1];return n||(n=" "),{fold:n,offset:t}}const ks={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"",_:" ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function Os(e,t,n,s){const r=e.substr(t,n),o=r.length===n&&/^[0-9a-fA-F]+$/.test(r)?parseInt(r,16):NaN;if(isNaN(o)){const r=e.substr(t-2,n+2);return s(t-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${r}`),r}return String.fromCodePoint(o)}function Ss(e,t,n,s){const{value:r,type:o,comment:i,range:a}="block-scalar"===t.type?ys(e,t,s):bs(t,e.options.strict,s),c=n?e.directives.tagName(n.source,(e=>s(n,"TAG_RESOLVE_FAILED",e))):null;let l,u;l=e.options.stringKeys&&e.atKey?e.schema[qe]:c?function(e,t,n,s,r){if("!"===n)return e[qe];const o=[];for(const t of e.tags)if(!t.collection&&t.tag===n){if(!t.default||!t.test)return t;o.push(t)}for(const e of o)if(e.test?.test(t))return e;const i=e.knownTags[n];if(i&&!i.collection)return e.tags.push(Object.assign({},i,{default:!1,test:void 0})),i;return r(s,"TAG_RESOLVE_FAILED",`Unresolved tag: ${n}`,"tag:yaml.org,2002:str"!==n),e[qe]}(e.schema,r,c,n,s):"scalar"===t.type?function({atKey:e,directives:t,schema:n},s,r,o){const i=n.tags.find((t=>(!0===t.default||e&&"key"===t.default)&&t.test?.test(s)))||n[qe];if(n.compat){const e=n.compat.find((e=>e.default&&e.test?.test(s)))??n[qe];if(i.tag!==e.tag){o(r,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${t.tagString(i.tag)} or ${t.tagString(e.tag)}`,!0)}}return i}(e,r,t,s):e.schema[qe];try{const o=l.resolve(r,(e=>s(n??t,"TAG_RESOLVE_FAILED",e)),e.options);u=Ge(o)?o:new bt(o)}catch(e){const o=e instanceof Error?e.message:String(e);s(n??t,"TAG_RESOLVE_FAILED",o),u=new bt(r)}return u.range=a,u.source=r,o&&(u.type=o),c&&(u.tag=c),l.format&&(u.format=l.format),i&&(u.comment=i),u}function Es(e,t,n){if(t){null===n&&(n=t.length);for(let s=n-1;s>=0;--s){let n=t[s];switch(n.type){case"space":case"comment":case"newline":e-=n.source.length;continue}for(n=t[++s];"space"===n?.type;)e+=n.source.length,n=t[++s];break}}return e}const _s={composeNode:As,composeEmptyNode:Ns};function As(e,t,n,s){const r=e.atKey,{spaceBefore:o,comment:i,anchor:a,tag:c}=n;let l,u=!0;switch(t.type){case"alias":l=function({options:e},{offset:t,source:n,end:s},r){const o=new mt(n.substring(1));""===o.source&&r(t,"BAD_ALIAS","Alias cannot be an empty string");o.source.endsWith(":")&&r(t+n.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0);const i=t+n.length,a=hs(s,i,e.strict,r);o.range=[t,i,a.offset],a.comment&&(o.comment=a.comment);return o}(e,t,s),(a||c)&&s(t,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":l=Ss(e,t,c,s),a&&(l.anchor=a.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":l=function(e,t,n,s,r){const o=s.tag,i=o?t.directives.tagName(o.source,(e=>r(o,"TAG_RESOLVE_FAILED",e))):null;if("block-seq"===n.type){const{anchor:e,newlineAfterProp:t}=s,n=e&&o?e.offset>o.offset?e:o:e??o;n&&(!t||t.offset<n.offset)&&r(n,"MISSING_CHAR","Missing newline after block sequence props")}const a="block-map"===n.type?"map":"block-seq"===n.type?"seq":"{"===n.start.source?"map":"seq";if(!o||!i||"!"===i||i===en.tagName&&"map"===a||i===nn.tagName&&"seq"===a)return gs(e,t,n,r,i);let c=t.schema.tags.find((e=>e.tag===i&&e.collection===a));if(!c){const s=t.schema.knownTags[i];if(!s||s.collection!==a)return s?r(o,"BAD_COLLECTION_TYPE",`${s.tag} used for ${a} collection, but expects ${s.collection??"scalar"}`,!0):r(o,"TAG_RESOLVE_FAILED",`Unresolved tag: ${i}`,!0),gs(e,t,n,r,i);t.schema.tags.push(Object.assign({},s,{default:!1})),c=s}const l=gs(e,t,n,r,i,c),u=c.resolve?.(l,(e=>r(o,"TAG_RESOLVE_FAILED",e)),t.options)??l,f=Qe(u)?u:new bt(u);return f.range=l.range,f.tag=i,c?.format&&(f.format=c.format),f}(_s,e,t,n,s),a&&(l.anchor=a.source.substring(1));break;default:s(t,"UNEXPECTED_TOKEN","error"===t.type?t.message:`Unsupported token (type: ${t.type})`),l=Ns(e,t.offset,void 0,null,n,s),u=!1}if(a&&""===l.anchor&&s(a,"BAD_ALIAS","Anchor cannot be an empty string"),r&&e.options.stringKeys&&(!Ge(l)||"string"!=typeof l.value||l.tag&&"tag:yaml.org,2002:str"!==l.tag)){s(c??t,"NON_STRING_KEY","With stringKeys, all keys must be strings")}return o&&(l.spaceBefore=!0),i&&("scalar"===t.type&&""===t.source?l.comment=i:l.commentBefore=i),e.options.keepSourceTokens&&u&&(l.srcToken=t),l}function Ns(e,t,n,s,{spaceBefore:r,comment:o,anchor:i,tag:a,end:c},l){const u=Ss(e,{type:"scalar",offset:Es(t,n,s),indent:-1,source:""},a,l);return i&&(u.anchor=i.source.substring(1),""===u.anchor&&l(i,"BAD_ALIAS","Anchor cannot be an empty string")),r&&(u.spaceBefore=!0),o&&(u.comment=o,u.range[2]=c),u}function Ts(e){if("number"==typeof e)return[e,e+1];if(Array.isArray(e))return 2===e.length?e:[e[0],e[1]];const{offset:t,source:n}=e;return[t,t+("string"==typeof n?n.length:1)]}function xs(e){let t="",n=!1,s=!1;for(let r=0;r<e.length;++r){const o=e[r];switch(o[0]){case"#":t+=(""===t?"":s?"\n\n":"\n")+(o.substring(1)||" "),n=!0,s=!1;break;case"%":"#"!==e[r+1]?.[0]&&(r+=1),n=!1;break;default:n||(s=!0),n=!1}}return{comment:t,afterEmptyLine:s}}class Cs{constructor(e={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(e,t,n,s)=>{const r=Ts(e);s?this.warnings.push(new is(r,t,n)):this.errors.push(new os(r,t,n))},this.directives=new ct({version:e.version||"1.2"}),this.options=e}decorate(e,t){const{comment:n,afterEmptyLine:s}=xs(this.prelude);if(n){const r=e.contents;if(t)e.comment=e.comment?`${e.comment}\n${n}`:n;else if(s||e.directives.docStart||!r)e.commentBefore=n;else if(Ye(r)&&!r.flow&&r.items.length>0){let e=r.items[0];Ve(e)&&(e=e.key);const t=e.commentBefore;e.commentBefore=t?`${n}\n${t}`:n}else{const e=r.commentBefore;r.commentBefore=e?`${n}\n${e}`:n}}t?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:xs(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,t=!1,n=-1){for(const t of e)yield*this.next(t);yield*this.end(t,n)}*next(e){switch(e.type){case"directive":this.directives.add(e.source,((t,n,s)=>{const r=Ts(e);r[0]+=t,this.onError(r,"BAD_DIRECTIVE",n,s)})),this.prelude.push(e.source),this.atDirectives=!0;break;case"document":{const t=function(e,t,{offset:n,start:s,value:r,end:o},i){const a=Object.assign({_directives:t},e),c=new ns(void 0,a),l={atKey:!1,atRoot:!0,directives:c.directives,options:c.options,schema:c.schema},u=cs(s,{indicator:"doc-start",next:r??o?.[0],offset:n,onError:i,parentIndent:0,startOnNewline:!0});u.found&&(c.directives.docStart=!0,!r||"block-map"!==r.type&&"block-seq"!==r.type||u.hasNewline||i(u.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),c.contents=r?As(l,r,u,i):Ns(l,u.end,s,null,u,i);const f=c.contents.range[2],d=hs(o,f,!1,i);return d.comment&&(c.comment=d.comment),c.range=[n,f,d.offset],c}(this.options,this.directives,e,this.onError);this.atDirectives&&!t.directives.docStart&&this.onError(e,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(t,!1),this.doc&&(yield this.doc),this.doc=t,this.atDirectives=!1;break}case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(e.source);break;case"error":{const t=e.source?`${e.message}: ${JSON.stringify(e.source)}`:e.message,n=new os(Ts(e),"UNEXPECTED_TOKEN",t);this.atDirectives||!this.doc?this.errors.push(n):this.doc.errors.push(n);break}case"doc-end":{if(!this.doc){const t="Unexpected doc-end without preceding document";this.errors.push(new os(Ts(e),"UNEXPECTED_TOKEN",t));break}this.doc.directives.docEnd=!0;const t=hs(e.end,e.offset+e.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,!0),t.comment){const e=this.doc.comment;this.doc.comment=e?`${e}\n${t.comment}`:t.comment}this.doc.range[2]=t.offset;break}default:this.errors.push(new os(Ts(e),"UNEXPECTED_TOKEN",`Unsupported token ${e.type}`))}}*end(e=!1,t=-1){if(this.doc)this.decorate(this.doc,!0),yield this.doc,this.doc=null;else if(e){const e=Object.assign({_directives:this.directives},this.options),n=new ns(void 0,e);this.atDirectives&&this.onError(t,"MISSING_CHAR","Missing directives-end indicator line"),n.range=[0,t,t],this.decorate(n,!1),yield n}}}function Is(e,t){if(t)for(const n of t)switch(n.type){case"space":case"comment":e.push(n);break;case"newline":return e.push(n),!0}return!1}function Ps(e,t,n){switch(e.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":e.type=n,e.source=t;break;case"block-scalar":{const s=e.props.slice(1);let r=t.length;"block-scalar-header"===e.props[0].type&&(r-=e.props[0].source.length);for(const e of s)e.offset+=r;delete e.props,Object.assign(e,{type:n,source:t,end:s});break}case"block-map":case"block-seq":{const s={type:"newline",offset:e.offset+t.length,indent:e.indent,source:"\n"};delete e.items,Object.assign(e,{type:n,source:t,end:[s]});break}default:{const s="indent"in e?e.indent:-1,r="end"in e&&Array.isArray(e.end)?e.end.filter((e=>"space"===e.type||"comment"===e.type||"newline"===e.type)):[];for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:n,indent:s,source:t,end:r})}}}function $s(e){switch(e.type){case"block-scalar":{let t="";for(const n of e.props)t+=$s(n);return t+e.source}case"block-map":case"block-seq":{let t="";for(const n of e.items)t+=Ls(n);return t}case"flow-collection":{let t=e.start.source;for(const n of e.items)t+=Ls(n);for(const n of e.end)t+=n.source;return t}case"document":{let t=Ls(e);if(e.end)for(const n of e.end)t+=n.source;return t}default:{let t=e.source;if("end"in e&&e.end)for(const n of e.end)t+=n.source;return t}}}function Ls({start:e,key:t,sep:n,value:s}){let r="";for(const t of e)r+=t.source;if(t&&(r+=$s(t)),n)for(const e of n)r+=e.source;return s&&(r+=$s(s)),r}const js=Symbol("break visit"),Ms=Symbol("skip children"),Rs=Symbol("remove item");function Ds(e,t){"type"in e&&"document"===e.type&&(e={start:e.start,value:e.value}),Bs(Object.freeze([]),e,t)}function Bs(e,t,n){let s=n(t,e);if("symbol"==typeof s)return s;for(const r of["key","value"]){const o=t[r];if(o&&"items"in o){for(let t=0;t<o.items.length;++t){const s=Bs(Object.freeze(e.concat([[r,t]])),o.items[t],n);if("number"==typeof s)t=s-1;else{if(s===js)return js;s===Rs&&(o.items.splice(t,1),t-=1)}}"function"==typeof s&&"key"===r&&(s=s(t,e))}}return"function"==typeof s?s(t,e):s}Ds.BREAK=js,Ds.SKIP=Ms,Ds.REMOVE=Rs,Ds.itemAtPath=(e,t)=>{let n=e;for(const[e,s]of t){const t=n?.[e];if(!t||!("items"in t))return;n=t.items[s]}return n},Ds.parentCollection=(e,t)=>{const n=Ds.itemAtPath(e,t.slice(0,-1)),s=t[t.length-1][0],r=n?.[s];if(r&&"items"in r)return r;throw new Error("Parent collection not found")};const qs="\ufeff",Us="",Ks="",Fs="";function Hs(e){switch(e){case qs:return"byte-order-mark";case Us:return"doc-mode";case Ks:return"flow-error-end";case Fs:return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(e[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}var Ws=Object.freeze({__proto__:null,BOM:qs,DOCUMENT:Us,FLOW_END:Ks,SCALAR:Fs,createScalarToken:function(e,t){const{implicitKey:n=!1,indent:s,inFlow:r=!1,offset:o=-1,type:i="PLAIN"}=t,a=Dt({type:i,value:e},{implicitKey:n,indent:s>0?" ".repeat(s):"",inFlow:r,options:{blockQuote:!0,lineWidth:-1}}),c=t.end??[{type:"newline",offset:-1,indent:s,source:"\n"}];switch(a[0]){case"|":case">":{const e=a.indexOf("\n"),t=a.substring(0,e),n=a.substring(e+1)+"\n",r=[{type:"block-scalar-header",offset:o,indent:s,source:t}];return Is(r,c)||r.push({type:"newline",offset:-1,indent:s,source:"\n"}),{type:"block-scalar",offset:o,indent:s,props:r,source:n}}case'"':return{type:"double-quoted-scalar",offset:o,indent:s,source:a,end:c};case"'":return{type:"single-quoted-scalar",offset:o,indent:s,source:a,end:c};default:return{type:"scalar",offset:o,indent:s,source:a,end:c}}},isCollection:e=>!!e&&"items"in e,isScalar:e=>!!e&&("scalar"===e.type||"single-quoted-scalar"===e.type||"double-quoted-scalar"===e.type||"block-scalar"===e.type),prettyToken:function(e){switch(e){case qs:return"<BOM>";case Us:return"<DOC>";case Ks:return"<FLOW_END>";case Fs:return"<SCALAR>";default:return JSON.stringify(e)}},resolveAsScalar:function(e,t=!0,n){if(e){const s=(e,t,s)=>{const r="number"==typeof e?e:Array.isArray(e)?e[0]:e.offset;if(!n)throw new os([r,r+1],t,s);n(r,t,s)};switch(e.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return bs(e,t,s);case"block-scalar":return ys({options:{strict:t}},e,s)}}return null},setScalarValue:function(e,t,n={}){let{afterKey:s=!1,implicitKey:r=!1,inFlow:o=!1,type:i}=n,a="indent"in e?e.indent:null;if(s&&"number"==typeof a&&(a+=2),!i)switch(e.type){case"single-quoted-scalar":i="QUOTE_SINGLE";break;case"double-quoted-scalar":i="QUOTE_DOUBLE";break;case"block-scalar":{const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");i=">"===t.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:i="PLAIN"}const c=Dt({type:i,value:t},{implicitKey:r||null===a,indent:null!==a&&a>0?" ".repeat(a):"",inFlow:o,options:{blockQuote:!0,lineWidth:-1}});switch(c[0]){case"|":case">":!function(e,t){const n=t.indexOf("\n"),s=t.substring(0,n),r=t.substring(n+1)+"\n";if("block-scalar"===e.type){const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");t.source=s,e.source=r}else{const{offset:t}=e,n="indent"in e?e.indent:-1,o=[{type:"block-scalar-header",offset:t,indent:n,source:s}];Is(o,"end"in e?e.end:void 0)||o.push({type:"newline",offset:-1,indent:n,source:"\n"});for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:"block-scalar",indent:n,props:o,source:r})}}(e,c);break;case'"':Ps(e,c,"double-quoted-scalar");break;case"'":Ps(e,c,"single-quoted-scalar");break;default:Ps(e,c,"scalar")}},stringify:e=>"type"in e?$s(e):Ls(e),tokenType:Hs,visit:Ds});function Vs(e){switch(e){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}const Gs=new Set("0123456789ABCDEFabcdef"),Js=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),Ys=new Set(",[]{}"),Qs=new Set(" ,[]{}\n\r\t"),Xs=e=>!e||Qs.has(e);class zs{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(e,t=!1){if(e){if("string"!=typeof e)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null}this.atEnd=!t;let n=this.next??"stream";for(;n&&(t||this.hasChars(1));)n=yield*this.parseNext(n)}atLineEnd(){let e=this.pos,t=this.buffer[e];for(;" "===t||"\t"===t;)t=this.buffer[++e];return!t||"#"===t||"\n"===t||"\r"===t&&"\n"===this.buffer[e+1]}charAt(e){return this.buffer[this.pos+e]}continueScalar(e){let t=this.buffer[e];if(this.indentNext>0){let n=0;for(;" "===t;)t=this.buffer[++n+e];if("\r"===t){const t=this.buffer[n+e+1];if("\n"===t||!t&&!this.atEnd)return e+n+1}return"\n"===t||n>=this.indentNext||!t&&!this.atEnd?e+n:-1}if("-"===t||"."===t){const t=this.buffer.substr(e,3);if(("---"===t||"..."===t)&&Vs(this.buffer[e+3]))return-1}return e}getLine(){let e=this.lineEndPos;return("number"!=typeof e||-1!==e&&e<this.pos)&&(e=this.buffer.indexOf("\n",this.pos),this.lineEndPos=e),-1===e?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[e-1]&&(e-=1),this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let e=this.getLine();if(null===e)return this.setNext("stream");if(e[0]===qs&&(yield*this.pushCount(1),e=e.substring(1)),"%"===e[0]){let t=e.length,n=e.indexOf("#");for(;-1!==n;){const s=e[n-1];if(" "===s||"\t"===s){t=n-1;break}n=e.indexOf("#",n+1)}for(;;){const n=e[t-1];if(" "!==n&&"\t"!==n)break;t-=1}const s=(yield*this.pushCount(t))+(yield*this.pushSpaces(!0));return yield*this.pushCount(e.length-s),this.pushNewline(),"stream"}if(this.atLineEnd()){const t=yield*this.pushSpaces(!0);return yield*this.pushCount(e.length-t),yield*this.pushNewline(),"stream"}return yield Us,yield*this.parseLineStart()}*parseLineStart(){const e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if("-"===e||"."===e){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");const e=this.peek(3);if(("---"===e||"..."===e)&&Vs(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===e?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!Vs(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){const[e,t]=this.peek(2);if(!t&&!this.atEnd)return this.setNext("block-start");if(("-"===e||"?"===e||":"===e)&&Vs(t)){const e=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0));return this.indentNext=this.indentValue+1,this.indentValue+=e,yield*this.parseBlockStart()}return"doc"}*parseDocument(){yield*this.pushSpaces(!0);const e=this.getLine();if(null===e)return this.setNext("doc");let t=yield*this.pushIndicators();switch(e[t]){case"#":yield*this.pushCount(e.length-t);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(Xs),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return t+=(yield*this.parseBlockScalarHeader()),t+=(yield*this.pushSpaces(!0)),yield*this.pushCount(e.length-t),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,t,n=-1;do{e=yield*this.pushNewline(),e>0?(t=yield*this.pushSpaces(!1),this.indentValue=n=t):t=0,t+=(yield*this.pushSpaces(!0))}while(e+t>0);const s=this.getLine();if(null===s)return this.setNext("flow");if(-1!==n&&n<this.indentNext&&"#"!==s[0]||0===n&&(s.startsWith("---")||s.startsWith("..."))&&Vs(s[3])){if(!(n===this.indentNext-1&&1===this.flowLevel&&("]"===s[0]||"}"===s[0])))return this.flowLevel=0,yield Ks,yield*this.parseLineStart()}let r=0;for(;","===s[r];)r+=(yield*this.pushCount(1)),r+=(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(r+=(yield*this.pushIndicators()),s[r]){case void 0:return"flow";case"#":return yield*this.pushCount(s.length-r),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,this.flowLevel-=1,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(Xs),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":{const e=this.charAt(1);if(this.flowKey||Vs(e)||","===e)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow"}default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){const e=this.charAt(0);let t=this.buffer.indexOf(e,this.pos+1);if("'"===e)for(;-1!==t&&"'"===this.buffer[t+1];)t=this.buffer.indexOf("'",t+2);else for(;-1!==t;){let e=0;for(;"\\"===this.buffer[t-1-e];)e+=1;if(e%2==0)break;t=this.buffer.indexOf('"',t+1)}const n=this.buffer.substring(0,t);let s=n.indexOf("\n",this.pos);if(-1!==s){for(;-1!==s;){const e=this.continueScalar(s+1);if(-1===e)break;s=n.indexOf("\n",e)}-1!==s&&(t=s-("\r"===n[s-1]?2:1))}if(-1===t){if(!this.atEnd)return this.setNext("quoted-scalar");t=this.buffer.length}return yield*this.pushToIndex(t+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let e=this.pos;for(;;){const t=this.buffer[++e];if("+"===t)this.blockScalarKeep=!0;else if(t>"0"&&t<="9")this.blockScalarIndent=Number(t)-1;else if("-"!==t)break}return yield*this.pushUntil((e=>Vs(e)||"#"===e))}*parseBlockScalar(){let e,t=this.pos-1,n=0;e:for(let s=this.pos;e=this.buffer[s];++s)switch(e){case" ":n+=1;break;case"\n":t=s,n=0;break;case"\r":{const e=this.buffer[s+1];if(!e&&!this.atEnd)return this.setNext("block-scalar");if("\n"===e)break}default:break e}if(!e&&!this.atEnd)return this.setNext("block-scalar");if(n>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=n:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{const e=this.continueScalar(t+1);if(-1===e)break;t=this.buffer.indexOf("\n",e)}while(-1!==t);if(-1===t){if(!this.atEnd)return this.setNext("block-scalar");t=this.buffer.length}}let s=t+1;for(e=this.buffer[s];" "===e;)e=this.buffer[++s];if("\t"===e){for(;"\t"===e||" "===e||"\r"===e||"\n"===e;)e=this.buffer[++s];t=s-1}else if(!this.blockScalarKeep)for(;;){let e=t-1,s=this.buffer[e];"\r"===s&&(s=this.buffer[--e]);const r=e;for(;" "===s;)s=this.buffer[--e];if(!("\n"===s&&e>=this.pos&&e+1+n>r))break;t=e}return yield Fs,yield*this.pushToIndex(t+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){const e=this.flowLevel>0;let t,n=this.pos-1,s=this.pos-1;for(;t=this.buffer[++s];)if(":"===t){const t=this.buffer[s+1];if(Vs(t)||e&&Ys.has(t))break;n=s}else if(Vs(t)){let r=this.buffer[s+1];if("\r"===t&&("\n"===r?(s+=1,t="\n",r=this.buffer[s+1]):n=s),"#"===r||e&&Ys.has(r))break;if("\n"===t){const e=this.continueScalar(s+1);if(-1===e)break;s=Math.max(s,e-2)}}else{if(e&&Ys.has(t))break;n=s}return t||this.atEnd?(yield Fs,yield*this.pushToIndex(n+1,!0),e?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(e){return e>0?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,t){const n=this.buffer.slice(this.pos,e);return n?(yield n,this.pos+=n.length,n.length):(t&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(Xs))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":{const e=this.flowLevel>0,t=this.charAt(1);if(Vs(t)||e&&Ys.has(t))return e?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}}return 0}*pushTag(){if("<"===this.charAt(1)){let e=this.pos+2,t=this.buffer[e];for(;!Vs(t)&&">"!==t;)t=this.buffer[++e];return yield*this.pushToIndex(">"===t?e+1:e,!1)}{let e=this.pos+1,t=this.buffer[e];for(;t;)if(Js.has(t))t=this.buffer[++e];else{if("%"!==t||!Gs.has(this.buffer[e+1])||!Gs.has(this.buffer[e+2]))break;t=this.buffer[e+=3]}return yield*this.pushToIndex(e,!1)}}*pushNewline(){const e=this.buffer[this.pos];return"\n"===e?yield*this.pushCount(1):"\r"===e&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(e){let t,n=this.pos-1;do{t=this.buffer[++n]}while(" "===t||e&&"\t"===t);const s=n-this.pos;return s>0&&(yield this.buffer.substr(this.pos,s),this.pos=n),s}*pushUntil(e){let t=this.pos,n=this.buffer[t];for(;!e(n);)n=this.buffer[++t];return yield*this.pushToIndex(t,!1)}}class Zs{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let t=0,n=this.lineStarts.length;for(;t<n;){const s=t+n>>1;this.lineStarts[s]<e?t=s+1:n=s}if(this.lineStarts[t]===e)return{line:t+1,col:1};if(0===t)return{line:0,col:e};return{line:t,col:e-this.lineStarts[t-1]+1}}}}function er(e,t){for(let n=0;n<e.length;++n)if(e[n].type===t)return!0;return!1}function tr(e){for(let t=0;t<e.length;++t)switch(e[t].type){case"space":case"comment":case"newline":break;default:return t}return-1}function nr(e){switch(e?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return!0;default:return!1}}function sr(e){switch(e.type){case"document":return e.start;case"block-map":{const t=e.items[e.items.length-1];return t.sep??t.start}case"block-seq":return e.items[e.items.length-1].start;default:return[]}}function rr(e){if(0===e.length)return[];let t=e.length;e:for(;--t>=0;)switch(e[t].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break e}for(;"space"===e[++t]?.type;);return e.splice(t,e.length)}function or(e){if("flow-seq-start"===e.start.type)for(const t of e.items)!t.sep||t.value||er(t.start,"explicit-key-ind")||er(t.sep,"map-value-ind")||(t.key&&(t.value=t.key),delete t.key,nr(t.value)?t.value.end?Array.prototype.push.apply(t.value.end,t.sep):t.value.end=t.sep:Array.prototype.push.apply(t.start,t.sep),delete t.sep)}class ir{constructor(e){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new zs,this.onNewLine=e}*parse(e,t=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(const n of this.lexer.lex(e,t))yield*this.next(n);t||(yield*this.end())}*next(e){if(this.source=e,this.atScalar)return this.atScalar=!1,yield*this.step(),void(this.offset+=e.length);const t=Hs(e);if(t)if("scalar"===t)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=t,yield*this.step(),t){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case"space":this.atNewLine&&" "===e[0]&&(this.indent+=e.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=e.length}else{const t=`Not a YAML token: ${e}`;yield*this.pop({type:"error",offset:this.offset,message:t,source:e}),this.offset+=e.length}}*end(){for(;this.stack.length>0;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){const e=this.peek(1);if("doc-end"!==this.type||e&&"doc-end"===e.type){if(!e)return yield*this.stream();switch(e.type){case"document":return yield*this.document(e);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(e);case"block-scalar":return yield*this.blockScalar(e);case"block-map":return yield*this.blockMap(e);case"block-seq":return yield*this.blockSequence(e);case"flow-collection":return yield*this.flowCollection(e);case"doc-end":return yield*this.documentEnd(e)}yield*this.pop()}else{for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(e){return this.stack[this.stack.length-e]}*pop(e){const t=e??this.stack.pop();if(t)if(0===this.stack.length)yield t;else{const e=this.peek(1);switch("block-scalar"===t.type?t.indent="indent"in e?e.indent:0:"flow-collection"===t.type&&"document"===e.type&&(t.indent=0),"flow-collection"===t.type&&or(t),e.type){case"document":e.value=t;break;case"block-scalar":e.props.push(t);break;case"block-map":{const n=e.items[e.items.length-1];if(n.value)return e.items.push({start:[],key:t,sep:[]}),void(this.onKeyLine=!0);if(!n.sep)return Object.assign(n,{key:t,sep:[]}),void(this.onKeyLine=!n.explicitKey);n.value=t;break}case"block-seq":{const n=e.items[e.items.length-1];n.value?e.items.push({start:[],value:t}):n.value=t;break}case"flow-collection":{const n=e.items[e.items.length-1];return void(!n||n.value?e.items.push({start:[],key:t,sep:[]}):n.sep?n.value=t:Object.assign(n,{key:t,sep:[]}))}default:yield*this.pop(),yield*this.pop(t)}if(!("document"!==e.type&&"block-map"!==e.type&&"block-seq"!==e.type||"block-map"!==t.type&&"block-seq"!==t.type)){const n=t.items[t.items.length-1];n&&!n.sep&&!n.value&&n.start.length>0&&-1===tr(n.start)&&(0===t.indent||n.start.every((e=>"comment"!==e.type||e.indent<t.indent)))&&("document"===e.type?e.end=n.start:e.items.push({start:n.start}),t.items.splice(-1,1))}}else{const e="Tried to pop an empty stack";yield{type:"error",offset:this.offset,source:"",message:e}}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":{const e={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&e.start.push(this.sourceToken),void this.stack.push(e)}}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case"doc-start":return void(-1!==tr(e.start)?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void e.start.push(this.sourceToken)}const t=this.startBlockValue(e);t?this.stack.push(t):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(e){if("map-value-ind"===this.type){const t=rr(sr(this.peek(2)));let n;e.end?(n=e.end,n.push(this.sourceToken),delete e.end):n=[this.sourceToken];const s={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:t,key:e,sep:n}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=s}else yield*this.lineEnd(e)}*blockScalar(e){switch(this.type){case"space":case"comment":case"newline":return void e.props.push(this.sourceToken);case"scalar":if(e.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(this.onKeyLine=!1,t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else if(t.sep)t.sep.push(this.sourceToken);else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return}if(this.indent>=e.indent){const n=!this.onKeyLine&&this.indent===e.indent,s=n&&(t.sep||t.explicitKey)&&"seq-item-ind"!==this.type;let r=[];if(s&&t.sep&&!t.value){const n=[];for(let s=0;s<t.sep.length;++s){const r=t.sep[s];switch(r.type){case"newline":n.push(s);break;case"space":break;case"comment":r.indent>e.indent&&(n.length=0);break;default:n.length=0}}n.length>=2&&(r=t.sep.splice(n[1]))}switch(this.type){case"anchor":case"tag":return void(s||t.value?(r.push(this.sourceToken),e.items.push({start:r}),this.onKeyLine=!0):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"explicit-key-ind":return t.sep||t.explicitKey?s||t.value?(r.push(this.sourceToken),e.items.push({start:r,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(t.start.push(this.sourceToken),t.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":if(t.explicitKey)if(t.sep)if(t.value)e.items.push({start:[],key:null,sep:[this.sourceToken]});else if(er(t.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:r,key:null,sep:[this.sourceToken]}]});else if(nr(t.key)&&!er(t.sep,"newline")){const e=rr(t.start),n=t.key,s=t.sep;s.push(this.sourceToken),delete t.key,delete t.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:n,sep:s}]})}else r.length>0?t.sep=t.sep.concat(r,this.sourceToken):t.sep.push(this.sourceToken);else if(er(t.start,"newline"))Object.assign(t,{key:null,sep:[this.sourceToken]});else{const e=rr(t.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]})}else t.sep?t.value||s?e.items.push({start:r,key:null,sep:[this.sourceToken]}):er(t.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]});return void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(s||t.value?(e.items.push({start:r,key:n,sep:[]}),this.onKeyLine=!0):t.sep?this.stack.push(n):(Object.assign(t,{key:n,sep:[]}),this.onKeyLine=!0))}default:{const s=this.startBlockValue(e);if(s){if("block-seq"===s.type){if(!t.explicitKey&&t.sep&&!er(t.sep,"newline"))return void(yield*this.pop({type:"error",offset:this.offset,message:"Unexpected block-seq-ind on same line with key",source:this.source}))}else n&&e.items.push({start:r});return void this.stack.push(s)}}}}yield*this.pop(),yield*this.step()}*blockSequence(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return;case"anchor":case"tag":if(t.value||this.indent<=e.indent)break;return void t.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==e.indent)break;return void(t.value||er(t.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken))}if(this.indent>e.indent){const t=this.startBlockValue(e);if(t)return void this.stack.push(t)}yield*this.pop(),yield*this.step()}*flowCollection(e){const t=e.items[e.items.length-1];if("flow-error-end"===this.type){let e;do{yield*this.pop(),e=this.peek(1)}while(e&&"flow-collection"===e.type)}else if(0===e.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!t||t.sep?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken));case"map-value-ind":return void(!t||t.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!t||t.value?e.items.push({start:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(!t||t.value?e.items.push({start:[],key:n,sep:[]}):t.sep?this.stack.push(n):Object.assign(t,{key:n,sep:[]}))}case"flow-map-end":case"flow-seq-end":return void e.end.push(this.sourceToken)}const n=this.startBlockValue(e);n?this.stack.push(n):(yield*this.pop(),yield*this.step())}else{const t=this.peek(2);if("block-map"===t.type&&("map-value-ind"===this.type&&t.indent===e.indent||"newline"===this.type&&!t.items[t.items.length-1].sep))yield*this.pop(),yield*this.step();else if("map-value-ind"===this.type&&"flow-collection"!==t.type){const n=rr(sr(t));or(e);const s=e.end.splice(1,e.end.length);s.push(this.sourceToken);const r={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:n,key:e,sep:s}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=r}else yield*this.lineEnd(e)}}flowScalar(e){if(this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}return{type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":{this.onKeyLine=!0;const t=rr(sr(e));return t.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,explicitKey:!0}]}}case"map-value-ind":{this.onKeyLine=!0;const t=rr(sr(e));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(e,t){return"comment"===this.type&&(!(this.indent<=t)&&e.every((e=>"newline"===e.type||"space"===e.type)))}*documentEnd(e){"doc-mode"!==this.type&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop()))}*lineEnd(e){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function ar(e){const t=!1!==e.prettyErrors;return{lineCounter:e.lineCounter||t&&new Zs||null,prettyErrors:t}}function cr(e,t={}){const{lineCounter:n,prettyErrors:s}=ar(t),r=new ir(n?.addNewLine),o=new Cs(t);let i=null;for(const t of o.compose(r.parse(e),!0,e.length))if(i){if("silent"!==i.options.logLevel){i.errors.push(new os(t.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else i=t;return s&&n&&(i.errors.forEach(as(e,n)),i.warnings.forEach(as(e,n))),i}var lr=Object.freeze({__proto__:null,Alias:mt,CST:Ws,Composer:Cs,Document:ns,Lexer:zs,LineCounter:Zs,Pair:Jt,Parser:ir,Scalar:bt,Schema:ts,YAMLError:rs,YAMLMap:en,YAMLParseError:os,YAMLSeq:nn,YAMLWarning:is,isAlias:Fe,isCollection:Ye,isDocument:He,isMap:We,isNode:Qe,isPair:Ve,isScalar:Ge,isSeq:Je,parse:function(e,t,n){let s;"function"==typeof t?s=t:void 0===n&&t&&"object"==typeof t&&(n=t);const r=cr(e,n);if(!r)return null;if(r.warnings.forEach((e=>Ut(r.options.logLevel,e))),r.errors.length>0){if("silent"!==r.options.logLevel)throw r.errors[0];r.errors=[]}return r.toJS(Object.assign({reviver:s},n))},parseAllDocuments:function(e,t={}){const{lineCounter:n,prettyErrors:s}=ar(t),r=new ir(n?.addNewLine),o=new Cs(t),i=Array.from(o.compose(r.parse(e)));if(s&&n)for(const t of i)t.errors.forEach(as(e,n)),t.warnings.forEach(as(e,n));return i.length>0?i:Object.assign([],{empty:!0},o.streamInfo())},parseDocument:cr,stringify:function(e,t,n){let s=null;if("function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t),"string"==typeof n&&(n=n.length),"number"==typeof n){const e=Math.round(n);n=e<1?void 0:e>8?{indent:8}:{indent:e}}if(void 0===e){const{keepUndefined:e}=n??t??{};if(!e)return}return He(e)&&!s?e.toString(n):new ns(e,s,n).toString(n)},visit:et,visitAsync:nt}),ur=ue.getInput("issue-number",{required:!0});function fr(e){return String(e).padStart(2,"0")}function dr(t,n){console.info(je.green("$ ".concat(t," ").concat(n))),e.spawnSync(t,n,{stdio:"inherit"})}!function(){var t,n;dr("python",["-m","pip","install aider-install"]),dr("aider-install",[]),dr("uv",["tool","run","--from","aider-chat","pip","install boto3"]);var s=e.spawnSync("gh",["issue","view",ur.toString(),"--json","author,title,body,labels,comments"],{encoding:"utf8",stdio:"pipe"}),r=JSON.parse(s.stdout),o={author:r.author.login,title:r.title,description:r.body,comments:r.comments.map((function(e){return{author:e.author.login,body:e.body}}))},i="\nModify the code to solve the following GitHub issue:\n````yml\n".concat(lr.stringify(o).trim(),"\n````\n").trim(),a=new Date,c="llm-pr-".concat(ur,"-").concat(a.getFullYear(),"_").concat(fr(a.getMonth()+1)).concat(fr(a.getDate()),"_").concat(fr(a.getHours())).concat(fr(a.getMinutes())).concat(fr(a.getSeconds()));dr("git",["switch","-C",c]);var l=["--yes-always","--no-gitignore","--no-show-model-warnings","--no-stream"];l.push.apply(l,m("--architect --model bedrock/converse/us.deepseek.r1-v1:0 --editor-model bedrock/anthropic.claude-3-5-sonnet-20241022-v2:0".split(/\s+/))),l.push("--message",i),console.info(je.green("$ aider ".concat(l)));var u=null!=(t=null==(n=e.spawnSync("aider",l,{encoding:"utf8",stdio:"pipe"}).stdout.split(/─+/).at(-1))?void 0:n.trim())?t:"";dr("git",["push","origin",c]);var f,d=(f=e.spawnSync("git",["remote","get-url","origin"],{encoding:"utf8",stdio:"pipe"}).stdout.trim().match(/github\.com[\/:]([\w-]+\/[\w-]+)(\.git)?$/))?f[1]:"";dr("gh",["pr","create","--title",e.spawnSync("git",["log","main..HEAD","--reverse","--pretty=%s","-1"],{encoding:"utf8",stdio:"pipe"}).stdout.trim(),"--body","Closes #".concat(ur,"\n\n````\n").concat(u,"\n````"),"--repo",d]),console.info("\nIssue #".concat(ur," processed successfully.")),console.info("AWS_REGION_NAME:",process.env.AWS_REGION_NAME)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
