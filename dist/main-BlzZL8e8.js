import e,{spawn as t}from"node:child_process";import n from"node:fs";var s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var o,r={exports:{}};function a(){if(o)return r.exports;o=1;let e,t,n,{defineProperty:s,setPrototypeOf:i,create:a,keys:c}=Object,l="",{round:u,max:f}=Math,h=e=>{let t=/([a-f\d]{3,6})/i.exec(e)?.[1],n=t?.length,s=parseInt(6^n?3^n?"0":t[0]+t[0]+t[1]+t[1]+t[2]+t[2]:t,16);return[s>>16&255,s>>8&255,255&s]},d=(e,t,n)=>e^t||t^n?16+36*u(e/51)+6*u(t/51)+u(n/51):8>e?16:e>248?231:u(24*(e-8)/247)+232,p=e=>{let t,n,s,i,o;return 8>e?30+e:16>e?e-8+90:(232>e?(o=(e-=16)%36,t=(e/36|0)/5,n=(o/6|0)/5,s=o%6/5):t=n=s=(10*(e-232)+8)/255,i=2*f(t,n,s),i?30+(u(s)<<2|u(n)<<1|u(t))+(2^i?0:60):30)},m=(()=>{let n=e=>o.some((t=>e.test(t))),s=globalThis,i=s.process??{},o=i.argv??[],r=i.env??{},a=-1;try{e=","+c(r).join(",")}catch(e){r={},a=0}let l="FORCE_COLOR",u={false:0,0:0,1:1,2:2,3:3}[r[l]]??-1,f=l in r&&u||n(/^--color=?(true|always)?$/);return f&&(a=u),~a||(a=((n,s,i)=>(t=n.TERM,{"24bit":3,truecolor:3,ansi256:2,ansi:1}[n.COLORTERM]||(n.CI?/,GITHUB/.test(e)?3:1:s&&"dumb"!==t?i?3:/-256/.test(t)?2:1:0)))(r,!!r.PM2_HOME||r.NEXT_RUNTIME?.includes("edge")||!!i.stdout?.isTTY,"win32"===i.platform)),!u||r.NO_COLOR||n(/^--(no-color|color=(false|never))$/)?0:s.window?.chrome||f&&!a?3:a})(),g={open:l,close:l},y=39,b=49,w={},k=({p:e},{open:t,close:s})=>{let o=(e,...n)=>{if(!e){if(t&&t===s)return t;if((e??l)===l)return l}let i,r=e.raw?String.raw({raw:e},...n):l+e,a=o.p,c=a.o,u=a.c;if(r.includes(""))for(;a;a=a.p){let{open:e,close:t}=a,n=t.length,s=l,o=0;if(n)for(;~(i=r.indexOf(t,o));o=i+n)s+=r.slice(o,i)+e;r=s+r.slice(o)}return c+(r.includes("\n")?r.replace(/(\r?\n)/g,u+"$1"+c):r)+u},r=t,a=s;return e&&(r=e.o+t,a=s+e.c),i(o,n),o.p={open:t,close:s,o:r,c:a,p:e},o.open=r,o.close=a,o};const v=function(e=m){let t={Ansis:v,isSupported:()=>o,strip:e=>e.replace(/[Â›][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,l),extend(e){for(let t in e){let n=e[t],i=(typeof n)[0],o="s"===i?E(...h(n)):n;w[t]="f"===i?{get(){return(...e)=>k(this,n(...e))}}:{get(){let e=k(this,o);return s(this,t,{value:e}),e}}}return n=a({},w),i(t,n),t}},o=e>0,r=(e,t)=>o?{open:`[${e}m`,close:`[${t}m`}:g,c=e=>t=>e(...h(t)),u=(e,t)=>(n,s,i)=>r(`${e}8;2;${n};${s};${i}`,t),f=(e,t)=>(n,s,i)=>r(((e,t,n)=>p(d(e,t,n)))(n,s,i)+e,t),S=e=>(t,n,s)=>e(d(t,n,s)),E=u(3,y),N=u(4,b),O=e=>r("38;5;"+e,y),A=e=>r("48;5;"+e,b);2===e?(E=S(O),N=S(A)):1===e&&(E=f(0,y),N=f(10,b),O=e=>r(p(e),y),A=e=>r(p(e)+10,b));let I,T={fg:O,bg:A,rgb:E,bgRgb:N,hex:c(E),bgHex:c(N),visible:g,reset:r(0,0),bold:r(1,22),dim:r(2,22),italic:r(3,23),underline:r(4,24),inverse:r(7,27),hidden:r(8,28),strikethrough:r(9,29)},x="Bright";return"black,red,green,yellow,blue,magenta,cyan,white,gray".split(",").map(((e,t)=>{I="bg"+e[0].toUpperCase()+e.slice(1),8>t?(T[e+x]=r(90+t,y),T[I+x]=r(100+t,b)):t=60,T[e]=r(30+t,y),T[I]=r(40+t,b)})),t.extend(T)},S=new v;return r.exports=S,S.default=S,r.exports}var c=i(a());const{Ansis:l,fg:u,bg:f,rgb:h,bgRgb:d,hex:p,bgHex:m,reset:g,inverse:y,hidden:b,visible:w,bold:k,dim:v,italic:S,underline:E,strikethrough:N,black:O,red:A,green:I,yellow:T,blue:x,magenta:$,cyan:L,white:C,gray:_,redBright:B,greenBright:M,yellowBright:K,blueBright:j,magentaBright:P,cyanBright:D,whiteBright:q,bgBlack:R,bgRed:U,bgGreen:F,bgYellow:G,bgBlue:V,bgMagenta:W,bgCyan:Y,bgWhite:J,bgGray:H,bgRedBright:Q,bgGreenBright:X,bgYellowBright:z,bgBlueBright:Z,bgMagentaBright:ee,bgCyanBright:te,bgWhiteBright:ne}=c,se=Symbol.for("yaml.alias"),ie=Symbol.for("yaml.document"),oe=Symbol.for("yaml.map"),re=Symbol.for("yaml.pair"),ae=Symbol.for("yaml.scalar"),ce=Symbol.for("yaml.seq"),le=Symbol.for("yaml.node.type"),ue=e=>!!e&&"object"==typeof e&&e[le]===se,fe=e=>!!e&&"object"==typeof e&&e[le]===ie,he=e=>!!e&&"object"==typeof e&&e[le]===oe,de=e=>!!e&&"object"==typeof e&&e[le]===re,pe=e=>!!e&&"object"==typeof e&&e[le]===ae,me=e=>!!e&&"object"==typeof e&&e[le]===ce;function ge(e){if(e&&"object"==typeof e)switch(e[le]){case oe:case ce:return!0}return!1}function ye(e){if(e&&"object"==typeof e)switch(e[le]){case se:case oe:case ae:case ce:return!0}return!1}const be=Symbol("break visit"),we=Symbol("skip children"),ke=Symbol("remove node");function ve(e,t){const n=Oe(t);if(fe(e)){Se(null,e.contents,n,Object.freeze([e]))===ke&&(e.contents=null)}else Se(null,e,n,Object.freeze([]))}function Se(e,t,n,s){const i=Ae(e,t,n,s);if(ye(i)||de(i))return Ie(e,s,i),Se(e,i,n,s);if("symbol"!=typeof i)if(ge(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=Se(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===be)return be;i===ke&&(t.items.splice(e,1),e-=1)}}}else if(de(t)){s=Object.freeze(s.concat(t));const e=Se("key",t.key,n,s);if(e===be)return be;e===ke&&(t.key=null);const i=Se("value",t.value,n,s);if(i===be)return be;i===ke&&(t.value=null)}return i}async function Ee(e,t){const n=Oe(t);if(fe(e)){await Ne(null,e.contents,n,Object.freeze([e]))===ke&&(e.contents=null)}else await Ne(null,e,n,Object.freeze([]))}async function Ne(e,t,n,s){const i=await Ae(e,t,n,s);if(ye(i)||de(i))return Ie(e,s,i),Ne(e,i,n,s);if("symbol"!=typeof i)if(ge(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=await Ne(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===be)return be;i===ke&&(t.items.splice(e,1),e-=1)}}}else if(de(t)){s=Object.freeze(s.concat(t));const e=await Ne("key",t.key,n,s);if(e===be)return be;e===ke&&(t.key=null);const i=await Ne("value",t.value,n,s);if(i===be)return be;i===ke&&(t.value=null)}return i}function Oe(e){return"object"==typeof e&&(e.Collection||e.Node||e.Value)?Object.assign({Alias:e.Node,Map:e.Node,Scalar:e.Node,Seq:e.Node},e.Value&&{Map:e.Value,Scalar:e.Value,Seq:e.Value},e.Collection&&{Map:e.Collection,Seq:e.Collection},e):e}function Ae(e,t,n,s){return"function"==typeof n?n(e,t,s):he(t)?n.Map?.(e,t,s):me(t)?n.Seq?.(e,t,s):de(t)?n.Pair?.(e,t,s):pe(t)?n.Scalar?.(e,t,s):ue(t)?n.Alias?.(e,t,s):void 0}function Ie(e,t,n){const s=t[t.length-1];if(ge(s))s.items[e]=n;else if(de(s))"key"===e?s.key=n:s.value=n;else{if(!fe(s)){const e=ue(s)?"alias":"scalar";throw new Error(`Cannot replace node with ${e} parent`)}s.contents=n}}ve.BREAK=be,ve.SKIP=we,ve.REMOVE=ke,Ee.BREAK=be,Ee.SKIP=we,Ee.REMOVE=ke;const Te={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class xe{constructor(e,t){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},xe.defaultYaml,e),this.tags=Object.assign({},xe.defaultTags,t)}clone(){const e=new xe(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){const e=new xe(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:xe.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},xe.defaultTags)}return e}add(e,t){this.atNextDocument&&(this.yaml={explicit:xe.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},xe.defaultTags),this.atNextDocument=!1);const n=e.trim().split(/[ \t]+/),s=n.shift();switch(s){case"%TAG":{if(2!==n.length&&(t(0,"%TAG directive should contain exactly two parts"),n.length<2))return!1;const[e,s]=n;return this.tags[e]=s,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==n.length)return t(0,"%YAML directive should contain exactly one part"),!1;const[e]=n;if("1.1"===e||"1.2"===e)return this.yaml.version=e,!0;return t(6,`Unsupported YAML version ${e}`,/^\d+\.\d+$/.test(e)),!1}default:return t(0,`Unknown directive ${s}`,!0),!1}}tagName(e,t){if("!"===e)return"!";if("!"!==e[0])return t(`Not a valid tag: ${e}`),null;if("<"===e[1]){const n=e.slice(2,-1);return"!"===n||"!!"===n?(t(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(">"!==e[e.length-1]&&t("Verbatim tags must end with a >"),n)}const[,n,s]=e.match(/^(.*!)([^!]*)$/s);s||t(`The ${e} tag has no suffix`);const i=this.tags[n];if(i)try{return i+decodeURIComponent(s)}catch(e){return t(String(e)),null}return"!"===n?e:(t(`Could not resolve tag: ${e}`),null)}tagString(e){for(const[t,n]of Object.entries(this.tags))if(e.startsWith(n))return t+e.substring(n.length).replace(/[!,[\]{}]/g,(e=>Te[e]));return"!"===e[0]?e:`!<${e}>`}toString(e){const t=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],n=Object.entries(this.tags);let s;if(e&&n.length>0&&ye(e.contents)){const t={};ve(e.contents,((e,n)=>{ye(n)&&n.tag&&(t[n.tag]=!0)})),s=Object.keys(t)}else s=[];for(const[i,o]of n)"!!"===i&&"tag:yaml.org,2002:"===o||e&&!s.some((e=>e.startsWith(o)))||t.push(`%TAG ${i} ${o}`);return t.join("\n")}}function $e(e){if(/[\x00-\x19\s,[\]{}]/.test(e)){const t=JSON.stringify(e);throw new Error(`Anchor must not contain whitespace or control characters: ${t}`)}return!0}function Le(e){const t=new Set;return ve(e,{Value(e,n){n.anchor&&t.add(n.anchor)}}),t}function Ce(e,t){for(let n=1;;++n){const s=`${e}${n}`;if(!t.has(s))return s}}function _e(e,t,n,s){if(s&&"object"==typeof s)if(Array.isArray(s))for(let t=0,n=s.length;t<n;++t){const n=s[t],i=_e(e,s,String(t),n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}else if(s instanceof Map)for(const t of Array.from(s.keys())){const n=s.get(t),i=_e(e,s,t,n);void 0===i?s.delete(t):i!==n&&s.set(t,i)}else if(s instanceof Set)for(const t of Array.from(s)){const n=_e(e,s,t,t);void 0===n?s.delete(t):n!==t&&(s.delete(t),s.add(n))}else for(const[t,n]of Object.entries(s)){const i=_e(e,s,t,n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}return e.call(t,n,s)}function Be(e,t,n){if(Array.isArray(e))return e.map(((e,t)=>Be(e,String(t),n)));if(e&&"function"==typeof e.toJSON){if(!n||(!pe(s=e)&&!ge(s)||!s.anchor))return e.toJSON(t,n);const i={aliasCount:0,count:1,res:void 0};n.anchors.set(e,i),n.onCreate=e=>{i.res=e,delete n.onCreate};const o=e.toJSON(t,n);return n.onCreate&&n.onCreate(o),o}var s;return"bigint"!=typeof e||n?.keep?e:Number(e)}xe.defaultYaml={explicit:!1,version:"1.2"},xe.defaultTags={"!!":"tag:yaml.org,2002:"};class Me{constructor(e){Object.defineProperty(this,le,{value:e})}clone(){const e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(e,{mapAsMap:t,maxAliasCount:n,onAnchor:s,reviver:i}={}){if(!fe(e))throw new TypeError("A document argument is required");const o={anchors:new Map,doc:e,keep:!0,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof n?n:100},r=Be(this,"",o);if("function"==typeof s)for(const{count:e,res:t}of o.anchors.values())s(t,e);return"function"==typeof i?_e(i,{"":r},"",r):r}}class Ke extends Me{constructor(e){super(se),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(e){let t;return ve(e,{Node:(e,n)=>{if(n===this)return ve.BREAK;n.anchor===this.source&&(t=n)}}),t}toJSON(e,t){if(!t)return{source:this.source};const{anchors:n,doc:s,maxAliasCount:i}=t,o=this.resolve(s);if(!o){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(e)}let r=n.get(o);if(r||(Be(o,null,t),r=n.get(o)),!r||void 0===r.res){throw new ReferenceError("This should not happen: Alias anchor was not resolved?")}if(i>=0&&(r.count+=1,0===r.aliasCount&&(r.aliasCount=je(s,o,n)),r.count*r.aliasCount>i)){throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack")}return r.res}toString(e,t,n){const s=`*${this.source}`;if(e){if($e(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source)){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(e)}if(e.implicitKey)return`${s} `}return s}}function je(e,t,n){if(ue(t)){const s=t.resolve(e),i=n&&s&&n.get(s);return i?i.count*i.aliasCount:0}if(ge(t)){let s=0;for(const i of t.items){const t=je(e,i,n);t>s&&(s=t)}return s}if(de(t)){const s=je(e,t.key,n),i=je(e,t.value,n);return Math.max(s,i)}return 1}const Pe=e=>!e||"function"!=typeof e&&"object"!=typeof e;class De extends Me{constructor(e){super(ae),this.value=e}toJSON(e,t){return t?.keep?this.value:Be(this.value,e,t)}toString(){return String(this.value)}}De.BLOCK_FOLDED="BLOCK_FOLDED",De.BLOCK_LITERAL="BLOCK_LITERAL",De.PLAIN="PLAIN",De.QUOTE_DOUBLE="QUOTE_DOUBLE",De.QUOTE_SINGLE="QUOTE_SINGLE";function qe(e,t,n){if(fe(e)&&(e=e.contents),ye(e))return e;if(de(e)){const t=n.schema[oe].createNode?.(n.schema,null,n);return t.items.push(e),t}(e instanceof String||e instanceof Number||e instanceof Boolean||"undefined"!=typeof BigInt&&e instanceof BigInt)&&(e=e.valueOf());const{aliasDuplicateObjects:s,onAnchor:i,onTagObj:o,schema:r,sourceObjects:a}=n;let c;if(s&&e&&"object"==typeof e){if(c=a.get(e),c)return c.anchor||(c.anchor=i(e)),new Ke(c.anchor);c={anchor:null,node:null},a.set(e,c)}t?.startsWith("!!")&&(t="tag:yaml.org,2002:"+t.slice(2));let l=function(e,t,n){if(t){const e=n.filter((e=>e.tag===t)),s=e.find((e=>!e.format))??e[0];if(!s)throw new Error(`Tag ${t} not found`);return s}return n.find((t=>t.identify?.(e)&&!t.format))}(e,t,r.tags);if(!l){if(e&&"function"==typeof e.toJSON&&(e=e.toJSON()),!e||"object"!=typeof e){const t=new De(e);return c&&(c.node=t),t}l=e instanceof Map?r[oe]:Symbol.iterator in Object(e)?r[ce]:r[oe]}o&&(o(l),delete n.onTagObj);const u=l?.createNode?l.createNode(n.schema,e,n):"function"==typeof l?.nodeClass?.from?l.nodeClass.from(n.schema,e,n):new De(e);return t?u.tag=t:l.default||(u.tag=l.tag),c&&(c.node=u),u}function Re(e,t,n){let s=n;for(let e=t.length-1;e>=0;--e){const n=t[e];if("number"==typeof n&&Number.isInteger(n)&&n>=0){const e=[];e[n]=s,s=e}else s=new Map([[n,s]])}return qe(s,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}const Ue=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class Fe extends Me{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(e){const t=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(t.schema=e),t.items=t.items.map((t=>ye(t)||de(t)?t.clone(e):t)),this.range&&(t.range=this.range.slice()),t}addIn(e,t){if(Ue(e))this.add(t);else{const[n,...s]=e,i=this.get(n,!0);if(ge(i))i.addIn(s,t);else{if(void 0!==i||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,Re(this.schema,s,t))}}}deleteIn(e){const[t,...n]=e;if(0===n.length)return this.delete(t);const s=this.get(t,!0);if(ge(s))return s.deleteIn(n);throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`)}getIn(e,t){const[n,...s]=e,i=this.get(n,!0);return 0===s.length?!t&&pe(i)?i.value:i:ge(i)?i.getIn(s,t):void 0}hasAllNullValues(e){return this.items.every((t=>{if(!de(t))return!1;const n=t.value;return null==n||e&&pe(n)&&null==n.value&&!n.commentBefore&&!n.comment&&!n.tag}))}hasIn(e){const[t,...n]=e;if(0===n.length)return this.has(t);const s=this.get(t,!0);return!!ge(s)&&s.hasIn(n)}setIn(e,t){const[n,...s]=e;if(0===s.length)this.set(n,t);else{const e=this.get(n,!0);if(ge(e))e.setIn(s,t);else{if(void 0!==e||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,Re(this.schema,s,t))}}}}const Ge=e=>e.replace(/^(?!$)(?: $)?/gm,"#");function Ve(e,t){return/^\n+$/.test(e)?e.substring(1):t?e.replace(/^(?! *$)/gm,t):e}const We=(e,t,n)=>e.endsWith("\n")?Ve(n,t):n.includes("\n")?"\n"+Ve(n,t):(e.endsWith(" ")?"":" ")+n,Ye="flow",Je="block",He="quoted";function Qe(e,t,n="flow",{indentAtStart:s,lineWidth:i=80,minContentWidth:o=20,onFold:r,onOverflow:a}={}){if(!i||i<0)return e;i<o&&(o=0);const c=Math.max(1+o,1+i-t.length);if(e.length<=c)return e;const l=[],u={};let f,h,d=i-t.length;"number"==typeof s&&(s>i-Math.max(2,o)?l.push(0):d=i-s);let p=!1,m=-1,g=-1,y=-1;n===Je&&(m=Xe(e,m,t.length),-1!==m&&(d=m+c));for(let s;s=e[m+=1];){if(n===He&&"\\"===s){switch(g=m,e[m+1]){case"x":m+=3;break;case"u":m+=5;break;case"U":m+=9;break;default:m+=1}y=m}if("\n"===s)n===Je&&(m=Xe(e,m,t.length)),d=m+t.length+c,f=void 0;else{if(" "===s&&h&&" "!==h&&"\n"!==h&&"\t"!==h){const t=e[m+1];t&&" "!==t&&"\n"!==t&&"\t"!==t&&(f=m)}if(m>=d)if(f)l.push(f),d=f+c,f=void 0;else if(n===He){for(;" "===h||"\t"===h;)h=s,s=e[m+=1],p=!0;const t=m>y+1?m-2:g-1;if(u[t])return e;l.push(t),u[t]=!0,d=t+c,f=void 0}else p=!0}h=s}if(p&&a&&a(),0===l.length)return e;r&&r();let b=e.slice(0,l[0]);for(let s=0;s<l.length;++s){const i=l[s],o=l[s+1]||e.length;0===i?b=`\n${t}${e.slice(0,o)}`:(n===He&&u[i]&&(b+=`${e[i]}\\`),b+=`\n${t}${e.slice(i+1,o)}`)}return b}function Xe(e,t,n){let s=t,i=t+1,o=e[i];for(;" "===o||"\t"===o;)if(t<i+n)o=e[++t];else{do{o=e[++t]}while(o&&"\n"!==o);s=t,i=t+1,o=e[i]}return s}const ze=(e,t)=>({indentAtStart:t?e.indent.length:e.indentAtStart,lineWidth:e.options.lineWidth,minContentWidth:e.options.minContentWidth}),Ze=e=>/^(%|---|\.\.\.)/m.test(e);function et(e,t){const n=JSON.stringify(e);if(t.options.doubleQuotedAsJSON)return n;const{implicitKey:s}=t,i=t.options.doubleQuotedMinMultiLineLength,o=t.indent||(Ze(e)?"  ":"");let r="",a=0;for(let e=0,t=n[e];t;t=n[++e])if(" "===t&&"\\"===n[e+1]&&"n"===n[e+2]&&(r+=n.slice(a,e)+"\\ ",e+=1,a=e,t="\\"),"\\"===t)switch(n[e+1]){case"u":{r+=n.slice(a,e);const t=n.substr(e+2,4);switch(t){case"0000":r+="\\0";break;case"0007":r+="\\a";break;case"000b":r+="\\v";break;case"001b":r+="\\e";break;case"0085":r+="\\N";break;case"00a0":r+="\\_";break;case"2028":r+="\\L";break;case"2029":r+="\\P";break;default:"00"===t.substr(0,2)?r+="\\x"+t.substr(2):r+=n.substr(e,6)}e+=5,a=e+1}break;case"n":if(s||'"'===n[e+2]||n.length<i)e+=1;else{for(r+=n.slice(a,e)+"\n\n";"\\"===n[e+2]&&"n"===n[e+3]&&'"'!==n[e+4];)r+="\n",e+=2;r+=o," "===n[e+2]&&(r+="\\"),e+=1,a=e+1}break;default:e+=1}return r=a?r+n.slice(a):n,s?r:Qe(r,o,He,ze(t,!1))}function tt(e,t){if(!1===t.options.singleQuote||t.implicitKey&&e.includes("\n")||/[ \t]\n|\n[ \t]/.test(e))return et(e,t);const n=t.indent||(Ze(e)?"  ":""),s="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&\n${n}`)+"'";return t.implicitKey?s:Qe(s,n,Ye,ze(t,!1))}function nt(e,t){const{singleQuote:n}=t.options;let s;if(!1===n)s=et;else{const t=e.includes('"'),i=e.includes("'");s=t&&!i?tt:i&&!t?et:n?tt:et}return s(e,t)}let st;try{st=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{st=/\n+(?!\n|$)/g}function it({comment:e,type:t,value:n},s,i,o){const{blockQuote:r,commentString:a,lineWidth:c}=s.options;if(!r||/\n[\t ]+$/.test(n)||/^\s*$/.test(n))return nt(n,s);const l=s.indent||(s.forceBlockIndent||Ze(n)?"  ":""),u="literal"===r||"folded"!==r&&t!==De.BLOCK_FOLDED&&(t===De.BLOCK_LITERAL||!function(e,t,n){if(!t||t<0)return!1;const s=t-n,i=e.length;if(i<=s)return!1;for(let t=0,n=0;t<i;++t)if("\n"===e[t]){if(t-n>s)return!0;if(n=t+1,i-n<=s)return!1}return!0}(n,c,l.length));if(!n)return u?"|\n":">\n";let f,h;for(h=n.length;h>0;--h){const e=n[h-1];if("\n"!==e&&"\t"!==e&&" "!==e)break}let d=n.substring(h);const p=d.indexOf("\n");-1===p?f="-":n===d||p!==d.length-1?(f="+",o&&o()):f="",d&&(n=n.slice(0,-d.length),"\n"===d[d.length-1]&&(d=d.slice(0,-1)),d=d.replace(st,`$&${l}`));let m,g=!1,y=-1;for(m=0;m<n.length;++m){const e=n[m];if(" "===e)g=!0;else{if("\n"!==e)break;y=m}}let b=n.substring(0,y<m?y+1:m);b&&(n=n.substring(b.length),b=b.replace(/\n+/g,`$&${l}`));let w=(g?l?"2":"1":"")+f;if(e&&(w+=" "+a(e.replace(/ ?[\r\n]+/g," ")),i&&i()),!u){const e=n.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${l}`);let i=!1;const o=ze(s,!0);"folded"!==r&&t!==De.BLOCK_FOLDED&&(o.onOverflow=()=>{i=!0});const a=Qe(`${b}${e}${d}`,l,Je,o);if(!i)return`>${w}\n${l}${a}`}return`|${w}\n${l}${b}${n=n.replace(/\n+/g,`$&${l}`)}${d}`}function ot(e,t,n,s){const{implicitKey:i,inFlow:o}=t,r="string"==typeof e.value?e:Object.assign({},e,{value:String(e.value)});let{type:a}=e;a!==De.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(r.value)&&(a=De.QUOTE_DOUBLE);const c=e=>{switch(e){case De.BLOCK_FOLDED:case De.BLOCK_LITERAL:return i||o?nt(r.value,t):it(r,t,n,s);case De.QUOTE_DOUBLE:return et(r.value,t);case De.QUOTE_SINGLE:return tt(r.value,t);case De.PLAIN:return function(e,t,n,s){const{type:i,value:o}=e,{actualString:r,implicitKey:a,indent:c,indentStep:l,inFlow:u}=t;if(a&&o.includes("\n")||u&&/[[\]{},]/.test(o))return nt(o,t);if(!o||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o))return a||u||!o.includes("\n")?nt(o,t):it(e,t,n,s);if(!a&&!u&&i!==De.PLAIN&&o.includes("\n"))return it(e,t,n,s);if(Ze(o)){if(""===c)return t.forceBlockIndent=!0,it(e,t,n,s);if(a&&c===l)return nt(o,t)}const f=o.replace(/\n+/g,`$&\n${c}`);if(r){const e=e=>e.default&&"tag:yaml.org,2002:str"!==e.tag&&e.test?.test(f),{compat:n,tags:s}=t.doc.schema;if(s.some(e)||n?.some(e))return nt(o,t)}return a?f:Qe(f,c,Ye,ze(t,!1))}(r,t,n,s);default:return null}};let l=c(a);if(null===l){const{defaultKeyType:e,defaultStringType:n}=t.options,s=i&&e||n;if(l=c(s),null===l)throw new Error(`Unsupported default string type ${s}`)}return l}function rt(e,t){const n=Object.assign({blockQuote:!0,commentString:Ge,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},e.schema.toStringOptions,t);let s;switch(n.collectionStyle){case"block":s=!1;break;case"flow":s=!0;break;default:s=null}return{anchors:new Set,doc:e,flowCollectionPadding:n.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof n.indent?" ".repeat(n.indent):"  ",inFlow:s,options:n}}function at(e,t,n,s){if(de(e))return e.toString(t,n,s);if(ue(e)){if(t.doc.directives)return e.toString(t);if(t.resolvedAliases?.has(e))throw new TypeError("Cannot stringify circular structure without alias nodes");t.resolvedAliases?t.resolvedAliases.add(e):t.resolvedAliases=new Set([e]),e=e.resolve(t.doc)}let i;const o=ye(e)?e:t.doc.createNode(e,{onTagObj:e=>i=e});i||(i=function(e,t){if(t.tag){const n=e.filter((e=>e.tag===t.tag));if(n.length>0)return n.find((e=>e.format===t.format))??n[0]}let n,s;if(pe(t)){s=t.value;let i=e.filter((e=>e.identify?.(s)));if(i.length>1){const e=i.filter((e=>e.test));e.length>0&&(i=e)}n=i.find((e=>e.format===t.format))??i.find((e=>!e.format))}else s=t,n=e.find((e=>e.nodeClass&&s instanceof e.nodeClass));if(!n)throw new Error(`Tag not resolved for ${s?.constructor?.name??typeof s} value`);return n}(t.doc.schema.tags,o));const r=function(e,t,{anchors:n,doc:s}){if(!s.directives)return"";const i=[],o=(pe(e)||ge(e))&&e.anchor;o&&$e(o)&&(n.add(o),i.push(`&${o}`));const r=e.tag?e.tag:t.default?null:t.tag;return r&&i.push(s.directives.tagString(r)),i.join(" ")}(o,i,t);r.length>0&&(t.indentAtStart=(t.indentAtStart??0)+r.length+1);const a="function"==typeof i.stringify?i.stringify(o,t,n,s):pe(o)?ot(o,t,n,s):o.toString(t,n,s);return r?pe(o)||"{"===a[0]||"["===a[0]?`${r} ${a}`:`${r}\n${t.indent}${a}`:a}function ct(e,t){"debug"!==e&&"warn"!==e||console.warn(t)}const lt="<<",ut={identify:e=>e===lt||"symbol"==typeof e&&e.description===lt,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new De(Symbol(lt)),{addToJSMap:ft}),stringify:()=>lt};function ft(e,t,n){if(n=e&&ue(n)?n.resolve(e.doc):n,me(n))for(const s of n.items)ht(e,t,s);else if(Array.isArray(n))for(const s of n)ht(e,t,s);else ht(e,t,n)}function ht(e,t,n){const s=e&&ue(n)?n.resolve(e.doc):n;if(!he(s))throw new Error("Merge sources must be maps or map aliases");const i=s.toJSON(null,e,Map);for(const[e,n]of i)t instanceof Map?t.has(e)||t.set(e,n):t instanceof Set?t.add(e):Object.prototype.hasOwnProperty.call(t,e)||Object.defineProperty(t,e,{value:n,writable:!0,enumerable:!0,configurable:!0});return t}function dt(e,t,{key:n,value:s}){if(ye(n)&&n.addToJSMap)n.addToJSMap(e,t,s);else if(((e,t)=>(ut.identify(t)||pe(t)&&(!t.type||t.type===De.PLAIN)&&ut.identify(t.value))&&e?.doc.schema.tags.some((e=>e.tag===ut.tag&&e.default)))(e,n))ft(e,t,s);else{const i=Be(n,"",e);if(t instanceof Map)t.set(i,Be(s,i,e));else if(t instanceof Set)t.add(i);else{const o=function(e,t,n){if(null===t)return"";if("object"!=typeof t)return String(t);if(ye(e)&&n?.doc){const t=rt(n.doc,{});t.anchors=new Set;for(const e of n.anchors.keys())t.anchors.add(e.anchor);t.inFlow=!0,t.inStringifyKey=!0;const s=e.toString(t);if(!n.mapKeyWarned){let e=JSON.stringify(s);e.length>40&&(e=e.substring(0,36)+'..."'),ct(n.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),n.mapKeyWarned=!0}return s}return JSON.stringify(t)}(n,i,e),r=Be(s,o,e);o in t?Object.defineProperty(t,o,{value:r,writable:!0,enumerable:!0,configurable:!0}):t[o]=r}}return t}function pt(e,t,n){const s=qe(e,void 0,n),i=qe(t,void 0,n);return new mt(s,i)}class mt{constructor(e,t=null){Object.defineProperty(this,le,{value:re}),this.key=e,this.value=t}clone(e){let{key:t,value:n}=this;return ye(t)&&(t=t.clone(e)),ye(n)&&(n=n.clone(e)),new mt(t,n)}toJSON(e,t){return dt(t,t?.mapAsMap?new Map:{},this)}toString(e,t,n){return e?.doc?function({key:e,value:t},n,s,i){const{allNullValues:o,doc:r,indent:a,indentStep:c,options:{commentString:l,indentSeq:u,simpleKeys:f}}=n;let h=ye(e)&&e.comment||null;if(f){if(h)throw new Error("With simple keys, key nodes cannot have comments");if(ge(e)||!ye(e)&&"object"==typeof e)throw new Error("With simple keys, collection cannot be used as a key value")}let d=!f&&(!e||h&&null==t&&!n.inFlow||ge(e)||(pe(e)?e.type===De.BLOCK_FOLDED||e.type===De.BLOCK_LITERAL:"object"==typeof e));n=Object.assign({},n,{allNullValues:!1,implicitKey:!d&&(f||!o),indent:a+c});let p,m,g,y=!1,b=!1,w=at(e,n,(()=>y=!0),(()=>b=!0));if(!d&&!n.inFlow&&w.length>1024){if(f)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");d=!0}if(n.inFlow){if(o||null==t)return y&&s&&s(),""===w?"?":d?`? ${w}`:w}else if(o&&!f||null==t&&d)return w=`? ${w}`,h&&!y?w+=We(w,n.indent,l(h)):b&&i&&i(),w;y&&(h=null),d?(h&&(w+=We(w,n.indent,l(h))),w=`? ${w}\n${a}:`):(w=`${w}:`,h&&(w+=We(w,n.indent,l(h)))),ye(t)?(p=!!t.spaceBefore,m=t.commentBefore,g=t.comment):(p=!1,m=null,g=null,t&&"object"==typeof t&&(t=r.createNode(t))),n.implicitKey=!1,d||h||!pe(t)||(n.indentAtStart=w.length+1),b=!1,u||!(c.length>=2)||n.inFlow||d||!me(t)||t.flow||t.tag||t.anchor||(n.indent=n.indent.substring(2));let k=!1;const v=at(t,n,(()=>k=!0),(()=>b=!0));let S=" ";if(h||p||m)S=p?"\n":"",m&&(S+=`\n${Ve(l(m),n.indent)}`),""!==v||n.inFlow?S+=`\n${n.indent}`:"\n"===S&&(S="\n\n");else if(!d&&ge(t)){const e=v[0],s=v.indexOf("\n"),i=-1!==s,o=n.inFlow??t.flow??0===t.items.length;if(i||!o){let t=!1;if(i&&("&"===e||"!"===e)){let n=v.indexOf(" ");"&"===e&&-1!==n&&n<s&&"!"===v[n+1]&&(n=v.indexOf(" ",n+1)),(-1===n||s<n)&&(t=!0)}t||(S=`\n${n.indent}`)}}else""!==v&&"\n"!==v[0]||(S="");return w+=S+v,n.inFlow?k&&s&&s():g&&!k?w+=We(w,n.indent,l(g)):b&&i&&i(),w}(this,e,t,n):JSON.stringify(this)}}function gt(e,t,n){return(t.inFlow??e.flow?bt:yt)(e,t,n)}function yt({comment:e,items:t},n,{blockItemPrefix:s,flowChars:i,itemIndent:o,onChompKeep:r,onComment:a}){const{indent:c,options:{commentString:l}}=n,u=Object.assign({},n,{indent:o,type:null});let f=!1;const h=[];for(let e=0;e<t.length;++e){const i=t[e];let r=null;if(ye(i))!f&&i.spaceBefore&&h.push(""),wt(n,h,i.commentBefore,f),i.comment&&(r=i.comment);else if(de(i)){const e=ye(i.key)?i.key:null;e&&(!f&&e.spaceBefore&&h.push(""),wt(n,h,e.commentBefore,f))}f=!1;let a=at(i,u,(()=>r=null),(()=>f=!0));r&&(a+=We(a,o,l(r))),f&&r&&(f=!1),h.push(s+a)}let d;if(0===h.length)d=i.start+i.end;else{d=h[0];for(let e=1;e<h.length;++e){const t=h[e];d+=t?`\n${c}${t}`:"\n"}}return e?(d+="\n"+Ve(l(e),c),a&&a()):f&&r&&r(),d}function bt({items:e},t,{flowChars:n,itemIndent:s}){const{indent:i,indentStep:o,flowCollectionPadding:r,options:{commentString:a}}=t;s+=o;const c=Object.assign({},t,{indent:s,inFlow:!0,type:null});let l=!1,u=0;const f=[];for(let n=0;n<e.length;++n){const i=e[n];let o=null;if(ye(i))i.spaceBefore&&f.push(""),wt(t,f,i.commentBefore,!1),i.comment&&(o=i.comment);else if(de(i)){const e=ye(i.key)?i.key:null;e&&(e.spaceBefore&&f.push(""),wt(t,f,e.commentBefore,!1),e.comment&&(l=!0));const n=ye(i.value)?i.value:null;n?(n.comment&&(o=n.comment),n.commentBefore&&(l=!0)):null==i.value&&e?.comment&&(o=e.comment)}o&&(l=!0);let r=at(i,c,(()=>o=null));n<e.length-1&&(r+=","),o&&(r+=We(r,s,a(o))),!l&&(f.length>u||r.includes("\n"))&&(l=!0),f.push(r),u=f.length}const{start:h,end:d}=n;if(0===f.length)return h+d;if(!l){const e=f.reduce(((e,t)=>e+t.length+2),2);l=t.options.lineWidth>0&&e>t.options.lineWidth}if(l){let e=h;for(const t of f)e+=t?`\n${o}${i}${t}`:"\n";return`${e}\n${i}${d}`}return`${h}${r}${f.join(" ")}${r}${d}`}function wt({indent:e,options:{commentString:t}},n,s,i){if(s&&i&&(s=s.replace(/^\n+/,"")),s){const i=Ve(t(s),e);n.push(i.trimStart())}}function kt(e,t){const n=pe(t)?t.value:t;for(const s of e)if(de(s)){if(s.key===t||s.key===n)return s;if(pe(s.key)&&s.key.value===n)return s}}class vt extends Fe{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(oe,e),this.items=[]}static from(e,t,n){const{keepUndefined:s,replacer:i}=n,o=new this(e),r=(e,r)=>{if("function"==typeof i)r=i.call(t,e,r);else if(Array.isArray(i)&&!i.includes(e))return;(void 0!==r||s)&&o.items.push(pt(e,r,n))};if(t instanceof Map)for(const[e,n]of t)r(e,n);else if(t&&"object"==typeof t)for(const e of Object.keys(t))r(e,t[e]);return"function"==typeof e.sortMapEntries&&o.items.sort(e.sortMapEntries),o}add(e,t){let n;n=de(e)?e:e&&"object"==typeof e&&"key"in e?new mt(e.key,e.value):new mt(e,e?.value);const s=kt(this.items,n.key),i=this.schema?.sortMapEntries;if(s){if(!t)throw new Error(`Key ${n.key} already set`);pe(s.value)&&Pe(n.value)?s.value.value=n.value:s.value=n.value}else if(i){const e=this.items.findIndex((e=>i(n,e)<0));-1===e?this.items.push(n):this.items.splice(e,0,n)}else this.items.push(n)}delete(e){const t=kt(this.items,e);if(!t)return!1;return this.items.splice(this.items.indexOf(t),1).length>0}get(e,t){const n=kt(this.items,e),s=n?.value;return(!t&&pe(s)?s.value:s)??void 0}has(e){return!!kt(this.items,e)}set(e,t){this.add(new mt(e,t),!0)}toJSON(e,t,n){const s=n?new n:t?.mapAsMap?new Map:{};t?.onCreate&&t.onCreate(s);for(const e of this.items)dt(t,s,e);return s}toString(e,t,n){if(!e)return JSON.stringify(this);for(const e of this.items)if(!de(e))throw new Error(`Map items must all be pairs; found ${JSON.stringify(e)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),gt(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:n,onComment:t})}}const St={collection:"map",default:!0,nodeClass:vt,tag:"tag:yaml.org,2002:map",resolve:(e,t)=>(he(e)||t("Expected a mapping for this tag"),e),createNode:(e,t,n)=>vt.from(e,t,n)};class Et extends Fe{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(ce,e),this.items=[]}add(e){this.items.push(e)}delete(e){const t=Nt(e);if("number"!=typeof t)return!1;return this.items.splice(t,1).length>0}get(e,t){const n=Nt(e);if("number"!=typeof n)return;const s=this.items[n];return!t&&pe(s)?s.value:s}has(e){const t=Nt(e);return"number"==typeof t&&t<this.items.length}set(e,t){const n=Nt(e);if("number"!=typeof n)throw new Error(`Expected a valid index, not ${e}.`);const s=this.items[n];pe(s)&&Pe(t)?s.value=t:this.items[n]=t}toJSON(e,t){const n=[];t?.onCreate&&t.onCreate(n);let s=0;for(const e of this.items)n.push(Be(e,String(s++),t));return n}toString(e,t,n){return e?gt(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:n,onComment:t}):JSON.stringify(this)}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(let o of t){if("function"==typeof s){const n=t instanceof Set?o:String(e++);o=s.call(t,n,o)}i.items.push(qe(o,void 0,n))}}return i}}function Nt(e){let t=pe(e)?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),"number"==typeof t&&Number.isInteger(t)&&t>=0?t:null}const Ot={collection:"seq",default:!0,nodeClass:Et,tag:"tag:yaml.org,2002:seq",resolve:(e,t)=>(me(e)||t("Expected a sequence for this tag"),e),createNode:(e,t,n)=>Et.from(e,t,n)},At={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:(e,t,n,s)=>ot(e,t=Object.assign({actualString:!0},t),n,s)},It={identify:e=>null==e,createNode:()=>new De(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new De(null),stringify:({source:e},t)=>"string"==typeof e&&It.test.test(e)?e:t.options.nullStr},Tt={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>new De("t"===e[0]||"T"===e[0]),stringify({source:e,value:t},n){if(e&&Tt.test.test(e)){if(t===("t"===e[0]||"T"===e[0]))return e}return t?n.options.trueStr:n.options.falseStr}};function xt({format:e,minFractionDigits:t,tag:n,value:s}){if("bigint"==typeof s)return String(s);const i="number"==typeof s?s:Number(s);if(!isFinite(i))return isNaN(i)?".nan":i<0?"-.inf":".inf";let o=JSON.stringify(s);if(!e&&t&&(!n||"tag:yaml.org,2002:float"===n)&&/^\d/.test(o)){let e=o.indexOf(".");e<0&&(e=o.length,o+=".");let n=t-(o.length-e-1);for(;n-- >0;)o+="0"}return o}const $t={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:xt},Lt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():xt(e)}},Ct={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(e){const t=new De(parseFloat(e)),n=e.indexOf(".");return-1!==n&&"0"===e[e.length-1]&&(t.minFractionDigits=e.length-n-1),t},stringify:xt},_t=e=>"bigint"==typeof e||Number.isInteger(e),Bt=(e,t,n,{intAsBigInt:s})=>s?BigInt(e):parseInt(e.substring(t),n);function Mt(e,t,n){const{value:s}=e;return _t(s)&&s>=0?n+s.toString(t):xt(e)}const Kt={identify:e=>_t(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(e,t,n)=>Bt(e,2,8,n),stringify:e=>Mt(e,8,"0o")},jt={identify:_t,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(e,t,n)=>Bt(e,0,10,n),stringify:xt},Pt={identify:e=>_t(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(e,t,n)=>Bt(e,2,16,n),stringify:e=>Mt(e,16,"0x")},Dt=[St,Ot,At,It,Tt,Kt,jt,Pt,$t,Lt,Ct];function qt(e){return"bigint"==typeof e||Number.isInteger(e)}const Rt=({value:e})=>JSON.stringify(e),Ut=[St,Ot].concat([{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:Rt},{identify:e=>null==e,createNode:()=>new De(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:Rt},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:e=>"true"===e,stringify:Rt},{identify:qt,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(e,t,{intAsBigInt:n})=>n?BigInt(e):parseInt(e,10),stringify:({value:e})=>qt(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:Rt}],{default:!0,tag:"",test:/^/,resolve:(e,t)=>(t(`Unresolved plain scalar ${JSON.stringify(e)}`),e)}),Ft={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(e,t){if("function"==typeof atob){const t=atob(e.replace(/[\n\r]/g,"")),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n[e]=t.charCodeAt(e);return n}return t("This environment does not support reading binary tags; either Buffer or atob is required"),e},stringify({comment:e,type:t,value:n},s,i,o){if(!n)return"";const r=n;let a;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let e="";for(let t=0;t<r.length;++t)e+=String.fromCharCode(r[t]);a=btoa(e)}if(t||(t=De.BLOCK_LITERAL),t!==De.QUOTE_DOUBLE){const e=Math.max(s.options.lineWidth-s.indent.length,s.options.minContentWidth),n=Math.ceil(a.length/e),i=new Array(n);for(let t=0,s=0;t<n;++t,s+=e)i[t]=a.substr(s,e);a=i.join(t===De.BLOCK_LITERAL?"\n":" ")}return ot({comment:e,type:t,value:a},s,i,o)}};function Gt(e,t){if(me(e))for(let n=0;n<e.items.length;++n){let s=e.items[n];if(!de(s)){if(he(s)){s.items.length>1&&t("Each pair must have its own sequence indicator");const e=s.items[0]||new mt(new De(null));if(s.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${s.commentBefore}\n${e.key.commentBefore}`:s.commentBefore),s.comment){const t=e.value??e.key;t.comment=t.comment?`${s.comment}\n${t.comment}`:s.comment}s=e}e.items[n]=de(s)?s:new mt(s)}}else t("Expected a sequence for this tag");return e}function Vt(e,t,n){const{replacer:s}=n,i=new Et(e);i.tag="tag:yaml.org,2002:pairs";let o=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let r,a;if("function"==typeof s&&(e=s.call(t,String(o++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);r=e[0],a=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);r=t[0],a=e[r]}else r=e;i.items.push(pt(r,a,n))}return i}const Wt={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:Gt,createNode:Vt};class Yt extends Et{constructor(){super(),this.add=vt.prototype.add.bind(this),this.delete=vt.prototype.delete.bind(this),this.get=vt.prototype.get.bind(this),this.has=vt.prototype.has.bind(this),this.set=vt.prototype.set.bind(this),this.tag=Yt.tag}toJSON(e,t){if(!t)return super.toJSON(e);const n=new Map;t?.onCreate&&t.onCreate(n);for(const e of this.items){let s,i;if(de(e)?(s=Be(e.key,"",t),i=Be(e.value,s,t)):s=Be(e,"",t),n.has(s))throw new Error("Ordered maps must not include duplicate keys");n.set(s,i)}return n}static from(e,t,n){const s=Vt(e,t,n),i=new this;return i.items=s.items,i}}Yt.tag="tag:yaml.org,2002:omap";const Jt={collection:"seq",identify:e=>e instanceof Map,nodeClass:Yt,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){const n=Gt(e,t),s=[];for(const{key:e}of n.items)pe(e)&&(s.includes(e.value)?t(`Ordered maps must not include duplicate keys: ${e.value}`):s.push(e.value));return Object.assign(new Yt,n)},createNode:(e,t,n)=>Yt.from(e,t,n)};function Ht({value:e,source:t},n){return t&&(e?Qt:Xt).test.test(t)?t:e?n.options.trueStr:n.options.falseStr}const Qt={identify:e=>!0===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new De(!0),stringify:Ht},Xt={identify:e=>!1===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new De(!1),stringify:Ht},zt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:xt},Zt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():xt(e)}},en={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(e){const t=new De(parseFloat(e.replace(/_/g,""))),n=e.indexOf(".");if(-1!==n){const s=e.substring(n+1).replace(/_/g,"");"0"===s[s.length-1]&&(t.minFractionDigits=s.length)}return t},stringify:xt},tn=e=>"bigint"==typeof e||Number.isInteger(e);function nn(e,t,n,{intAsBigInt:s}){const i=e[0];if("-"!==i&&"+"!==i||(t+=1),e=e.substring(t).replace(/_/g,""),s){switch(n){case 2:e=`0b${e}`;break;case 8:e=`0o${e}`;break;case 16:e=`0x${e}`}const t=BigInt(e);return"-"===i?BigInt(-1)*t:t}const o=parseInt(e,n);return"-"===i?-1*o:o}function sn(e,t,n){const{value:s}=e;if(tn(s)){const e=s.toString(t);return s<0?"-"+n+e.substr(1):n+e}return xt(e)}const on={identify:tn,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(e,t,n)=>nn(e,2,2,n),stringify:e=>sn(e,2,"0b")},rn={identify:tn,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(e,t,n)=>nn(e,1,8,n),stringify:e=>sn(e,8,"0")},an={identify:tn,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(e,t,n)=>nn(e,0,10,n),stringify:xt},cn={identify:tn,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(e,t,n)=>nn(e,2,16,n),stringify:e=>sn(e,16,"0x")};class ln extends vt{constructor(e){super(e),this.tag=ln.tag}add(e){let t;t=de(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new mt(e.key,null):new mt(e,null);kt(this.items,t.key)||this.items.push(t)}get(e,t){const n=kt(this.items,e);return!t&&de(n)?pe(n.key)?n.key.value:n.key:n}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);const n=kt(this.items,e);n&&!t?this.items.splice(this.items.indexOf(n),1):!n&&t&&this.items.push(new mt(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,n){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,n);throw new Error("Set items must all have null values")}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t))for(let e of t)"function"==typeof s&&(e=s.call(t,e,e)),i.items.push(pt(e,null,n));return i}}ln.tag="tag:yaml.org,2002:set";const un={collection:"map",identify:e=>e instanceof Set,nodeClass:ln,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,n)=>ln.from(e,t,n),resolve(e,t){if(he(e)){if(e.hasAllNullValues(!0))return Object.assign(new ln,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};function fn(e,t){const n=e[0],s="-"===n||"+"===n?e.substring(1):e,i=e=>t?BigInt(e):Number(e),o=s.replace(/_/g,"").split(":").reduce(((e,t)=>e*i(60)+i(t)),i(0));return"-"===n?i(-1)*o:o}function hn(e){let{value:t}=e,n=e=>e;if("bigint"==typeof t)n=e=>BigInt(e);else if(isNaN(t)||!isFinite(t))return xt(e);let s="";t<0&&(s="-",t*=n(-1));const i=n(60),o=[t%i];return t<60?o.unshift(0):(t=(t-o[0])/i,o.unshift(t%i),t>=60&&(t=(t-o[0])/i,o.unshift(t))),s+o.map((e=>String(e).padStart(2,"0"))).join(":").replace(/000000\d*$/,"")}const dn={identify:e=>"bigint"==typeof e||Number.isInteger(e),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(e,t,{intAsBigInt:n})=>fn(e,n),stringify:hn},pn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:e=>fn(e,!1),stringify:hn},mn={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(e){const t=e.match(mn.test);if(!t)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");const[,n,s,i,o,r,a]=t.map(Number),c=t[7]?Number((t[7]+"00").substr(1,3)):0;let l=Date.UTC(n,s-1,i,o||0,r||0,a||0,c);const u=t[8];if(u&&"Z"!==u){let e=fn(u,!1);Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e?.toISOString().replace(/(T00:00:00)?\.000Z$/,"")??""},gn=[St,Ot,At,It,Qt,Xt,on,rn,an,cn,zt,Zt,en,Ft,ut,Jt,Wt,un,dn,pn,mn],yn=new Map([["core",Dt],["failsafe",[St,Ot,At]],["json",Ut],["yaml11",gn],["yaml-1.1",gn]]),bn={binary:Ft,bool:Tt,float:Ct,floatExp:Lt,floatNaN:$t,floatTime:pn,int:jt,intHex:Pt,intOct:Kt,intTime:dn,map:St,merge:ut,null:It,omap:Jt,pairs:Wt,seq:Ot,set:un,timestamp:mn},wn={"tag:yaml.org,2002:binary":Ft,"tag:yaml.org,2002:merge":ut,"tag:yaml.org,2002:omap":Jt,"tag:yaml.org,2002:pairs":Wt,"tag:yaml.org,2002:set":un,"tag:yaml.org,2002:timestamp":mn};function kn(e,t,n){const s=yn.get(t);if(s&&!e)return n&&!s.includes(ut)?s.concat(ut):s.slice();let i=s;if(!i){if(!Array.isArray(e)){const e=Array.from(yn.keys()).filter((e=>"yaml11"!==e)).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown schema "${t}"; use one of ${e} or define customTags array`)}i=[]}if(Array.isArray(e))for(const t of e)i=i.concat(t);else"function"==typeof e&&(i=e(i.slice()));return n&&(i=i.concat(ut)),i.reduce(((e,t)=>{const n="string"==typeof t?bn[t]:t;if(!n){const e=JSON.stringify(t),n=Object.keys(bn).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown custom tag ${e}; use one of ${n}`)}return e.includes(n)||e.push(n),e}),[])}const vn=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class Sn{constructor({compat:e,customTags:t,merge:n,resolveKnownTags:s,schema:i,sortMapEntries:o,toStringDefaults:r}){this.compat=Array.isArray(e)?kn(e,"compat"):e?kn(null,e):null,this.name="string"==typeof i&&i||"core",this.knownTags=s?wn:{},this.tags=kn(t,this.name,n),this.toStringOptions=r??null,Object.defineProperty(this,oe,{value:St}),Object.defineProperty(this,ae,{value:At}),Object.defineProperty(this,ce,{value:Ot}),this.sortMapEntries="function"==typeof o?o:!0===o?vn:null}clone(){const e=Object.create(Sn.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}}class En{constructor(e,t,n){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,le,{value:ie});let s=null;"function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t,t=void 0);const i=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},n);this.options=i;let{version:o}=i;n?._directives?(this.directives=n._directives.atDocument(),this.directives.yaml.explicit&&(o=this.directives.yaml.version)):this.directives=new xe({version:o}),this.setSchema(o,n),this.contents=void 0===e?null:this.createNode(e,s,n)}clone(){const e=Object.create(En.prototype,{[le]:{value:ie}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=ye(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){Nn(this.contents)&&this.contents.add(e)}addIn(e,t){Nn(this.contents)&&this.contents.addIn(e,t)}createAlias(e,t){if(!e.anchor){const n=Le(this);e.anchor=!t||n.has(t)?Ce(t||"a",n):t}return new Ke(e.anchor)}createNode(e,t,n){let s;if("function"==typeof t)e=t.call({"":e},"",e),s=t;else if(Array.isArray(t)){const e=e=>"number"==typeof e||e instanceof String||e instanceof Number,n=t.filter(e).map(String);n.length>0&&(t=t.concat(n)),s=t}else void 0===n&&t&&(n=t,t=void 0);const{aliasDuplicateObjects:i,anchorPrefix:o,flow:r,keepUndefined:a,onTagObj:c,tag:l}=n??{},{onAnchor:u,setAnchors:f,sourceObjects:h}=function(e,t){const n=[],s=new Map;let i=null;return{onAnchor:s=>{n.push(s),i||(i=Le(e));const o=Ce(t,i);return i.add(o),o},setAnchors:()=>{for(const e of n){const t=s.get(e);if("object"!=typeof t||!t.anchor||!pe(t.node)&&!ge(t.node)){const t=new Error("Failed to resolve repeated object (this should not happen)");throw t.source=e,t}t.node.anchor=t.anchor}},sourceObjects:s}}(this,o||"a"),d=qe(e,l,{aliasDuplicateObjects:i??!0,keepUndefined:a??!1,onAnchor:u,onTagObj:c,replacer:s,schema:this.schema,sourceObjects:h});return r&&ge(d)&&(d.flow=!0),f(),d}createPair(e,t,n={}){const s=this.createNode(e,null,n),i=this.createNode(t,null,n);return new mt(s,i)}delete(e){return!!Nn(this.contents)&&this.contents.delete(e)}deleteIn(e){return Ue(e)?null!=this.contents&&(this.contents=null,!0):!!Nn(this.contents)&&this.contents.deleteIn(e)}get(e,t){return ge(this.contents)?this.contents.get(e,t):void 0}getIn(e,t){return Ue(e)?!t&&pe(this.contents)?this.contents.value:this.contents:ge(this.contents)?this.contents.getIn(e,t):void 0}has(e){return!!ge(this.contents)&&this.contents.has(e)}hasIn(e){return Ue(e)?void 0!==this.contents:!!ge(this.contents)&&this.contents.hasIn(e)}set(e,t){null==this.contents?this.contents=Re(this.schema,[e],t):Nn(this.contents)&&this.contents.set(e,t)}setIn(e,t){Ue(e)?this.contents=t:null==this.contents?this.contents=Re(this.schema,Array.from(e),t):Nn(this.contents)&&this.contents.setIn(e,t)}setSchema(e,t={}){let n;switch("number"==typeof e&&(e=String(e)),e){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new xe({version:"1.1"}),n={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=e:this.directives=new xe({version:e}),n={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,n=null;break;default:{const t=JSON.stringify(e);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${t}`)}}if(t.schema instanceof Object)this.schema=t.schema;else{if(!n)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new Sn(Object.assign(n,t))}}toJS({json:e,jsonArg:t,mapAsMap:n,maxAliasCount:s,onAnchor:i,reviver:o}={}){const r={anchors:new Map,doc:this,keep:!e,mapAsMap:!0===n,mapKeyWarned:!1,maxAliasCount:"number"==typeof s?s:100},a=Be(this.contents,t??"",r);if("function"==typeof i)for(const{count:e,res:t}of r.anchors.values())i(t,e);return"function"==typeof o?_e(o,{"":a},"",a):a}toJSON(e,t){return this.toJS({json:!0,jsonArg:e,mapAsMap:!1,onAnchor:t})}toString(e={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in e&&(!Number.isInteger(e.indent)||Number(e.indent)<=0)){const t=JSON.stringify(e.indent);throw new Error(`"indent" option must be a positive integer, not ${t}`)}return function(e,t){const n=[];let s=!0===t.directives;if(!1!==t.directives&&e.directives){const t=e.directives.toString(e);t?(n.push(t),s=!0):e.directives.docStart&&(s=!0)}s&&n.push("---");const i=rt(e,t),{commentString:o}=i.options;if(e.commentBefore){1!==n.length&&n.unshift("");const t=o(e.commentBefore);n.unshift(Ve(t,""))}let r=!1,a=null;if(e.contents){if(ye(e.contents)){if(e.contents.spaceBefore&&s&&n.push(""),e.contents.commentBefore){const t=o(e.contents.commentBefore);n.push(Ve(t,""))}i.forceBlockIndent=!!e.comment,a=e.contents.comment}const t=a?void 0:()=>r=!0;let c=at(e.contents,i,(()=>a=null),t);a&&(c+=We(c,"",o(a))),"|"!==c[0]&&">"!==c[0]||"---"!==n[n.length-1]?n.push(c):n[n.length-1]=`--- ${c}`}else n.push(at(e.contents,i));if(e.directives?.docEnd)if(e.comment){const t=o(e.comment);t.includes("\n")?(n.push("..."),n.push(Ve(t,""))):n.push(`... ${t}`)}else n.push("...");else{let t=e.comment;t&&r&&(t=t.replace(/^\n+/,"")),t&&(r&&!a||""===n[n.length-1]||n.push(""),n.push(Ve(o(t),"")))}return n.join("\n")+"\n"}(this,e)}}function Nn(e){if(ge(e))return!0;throw new Error("Expected a YAML collection as document contents")}class On extends Error{constructor(e,t,n,s){super(),this.name=e,this.code=n,this.message=s,this.pos=t}}class An extends On{constructor(e,t,n){super("YAMLParseError",e,t,n)}}class In extends On{constructor(e,t,n){super("YAMLWarning",e,t,n)}}const Tn=(e,t)=>n=>{if(-1===n.pos[0])return;n.linePos=n.pos.map((e=>t.linePos(e)));const{line:s,col:i}=n.linePos[0];n.message+=` at line ${s}, column ${i}`;let o=i-1,r=e.substring(t.lineStarts[s-1],t.lineStarts[s]).replace(/[\n\r]+$/,"");if(o>=60&&r.length>80){const e=Math.min(o-39,r.length-79);r="â€¦"+r.substring(e),o-=e-1}if(r.length>80&&(r=r.substring(0,79)+"â€¦"),s>1&&/^ *$/.test(r.substring(0,o))){let n=e.substring(t.lineStarts[s-2],t.lineStarts[s-1]);n.length>80&&(n=n.substring(0,79)+"â€¦\n"),r=n+r}if(/[^ ]/.test(r)){let e=1;const t=n.linePos[1];t&&t.line===s&&t.col>i&&(e=Math.max(1,Math.min(t.col-i,80-o)));const a=" ".repeat(o)+"^".repeat(e);n.message+=`:\n\n${r}\n${a}\n`}};function xn(e,{flow:t,indicator:n,next:s,offset:i,onError:o,parentIndent:r,startOnNewline:a}){let c=!1,l=a,u=a,f="",h="",d=!1,p=!1,m=null,g=null,y=null,b=null,w=null,k=null,v=null;for(const i of e)switch(p&&("space"!==i.type&&"newline"!==i.type&&"comma"!==i.type&&o(i.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),p=!1),m&&(l&&"comment"!==i.type&&"newline"!==i.type&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),m=null),i.type){case"space":t||"doc-start"===n&&"flow-collection"===s?.type||!i.source.includes("\t")||(m=i),u=!0;break;case"comment":{u||o(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const e=i.source.substring(1)||" ";f?f+=h+e:f=e,h="",l=!1;break}case"newline":l?f?f+=i.source:k&&"seq-item-ind"===n||(c=!0):h+=i.source,l=!0,d=!0,(g||y)&&(b=i),u=!0;break;case"anchor":g&&o(i,"MULTIPLE_ANCHORS","A node can have at most one anchor"),i.source.endsWith(":")&&o(i.offset+i.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),g=i,null===v&&(v=i.offset),l=!1,u=!1,p=!0;break;case"tag":y&&o(i,"MULTIPLE_TAGS","A node can have at most one tag"),y=i,null===v&&(v=i.offset),l=!1,u=!1,p=!0;break;case n:(g||y)&&o(i,"BAD_PROP_ORDER",`Anchors and tags must be after the ${i.source} indicator`),k&&o(i,"UNEXPECTED_TOKEN",`Unexpected ${i.source} in ${t??"collection"}`),k=i,l="seq-item-ind"===n||"explicit-key-ind"===n,u=!1;break;case"comma":if(t){w&&o(i,"UNEXPECTED_TOKEN",`Unexpected , in ${t}`),w=i,l=!1,u=!1;break}default:o(i,"UNEXPECTED_TOKEN",`Unexpected ${i.type} token`),l=!1,u=!1}const S=e[e.length-1],E=S?S.offset+S.source.length:i;return p&&s&&"space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&("scalar"!==s.type||""!==s.source)&&o(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),m&&(l&&m.indent<=r||"block-map"===s?.type||"block-seq"===s?.type)&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:w,found:k,spaceBefore:c,comment:f,hasNewline:d,anchor:g,tag:y,newlineAfterProp:b,end:E,start:v??E}}function $n(e){if(!e)return null;switch(e.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(e.source.includes("\n"))return!0;if(e.end)for(const t of e.end)if("newline"===t.type)return!0;return!1;case"flow-collection":for(const t of e.items){for(const e of t.start)if("newline"===e.type)return!0;if(t.sep)for(const e of t.sep)if("newline"===e.type)return!0;if($n(t.key)||$n(t.value))return!0}return!1;default:return!0}}function Ln(e,t,n){if("flow-collection"===t?.type){const s=t.end[0];if(s.indent===e&&("]"===s.source||"}"===s.source)&&$n(t)){n(s,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}}}function Cn(e,t,n){const{uniqueKeys:s}=e.options;if(!1===s)return!1;const i="function"==typeof s?s:(e,t)=>e===t||pe(e)&&pe(t)&&e.value===t.value;return t.some((e=>i(e.key,n)))}const _n="All mapping items must start at the same column";function Bn(e,t,n,s){let i="";if(e){let o=!1,r="";for(const a of e){const{source:e,type:c}=a;switch(c){case"space":o=!0;break;case"comment":{n&&!o&&s(a,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const t=e.substring(1)||" ";i?i+=r+t:i=t,r="";break}case"newline":i&&(r+=e),o=!0;break;default:s(a,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`)}t+=e.length}}return{comment:i,offset:t}}const Mn="Block collections are not allowed within flow collections",Kn=e=>e&&("block-map"===e.type||"block-seq"===e.type);function jn(e,t,n,s,i,o){const r="block-map"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r=new(o?.nodeClass??vt)(n.schema);n.atRoot&&(n.atRoot=!1);let a=s.offset,c=null;for(const o of s.items){const{start:l,key:u,sep:f,value:h}=o,d=xn(l,{indicator:"explicit-key-ind",next:u??f?.[0],offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0}),p=!d.found;if(p){if(u&&("block-seq"===u.type?i(a,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in u&&u.indent!==s.indent&&i(a,"BAD_INDENT",_n)),!d.anchor&&!d.tag&&!f){c=d.end,d.comment&&(r.comment?r.comment+="\n"+d.comment:r.comment=d.comment);continue}(d.newlineAfterProp||$n(u))&&i(u??l[l.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else d.found?.indent!==s.indent&&i(a,"BAD_INDENT",_n);n.atKey=!0;const m=d.end,g=u?e(n,u,d,i):t(n,m,l,null,d,i);n.schema.compat&&Ln(s.indent,u,i),n.atKey=!1,Cn(n,r.items,g)&&i(m,"DUPLICATE_KEY","Map keys must be unique");const y=xn(f??[],{indicator:"map-value-ind",next:h,offset:g.range[2],onError:i,parentIndent:s.indent,startOnNewline:!u||"block-scalar"===u.type});if(a=y.end,y.found){p&&("block-map"!==h?.type||y.hasNewline||i(a,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),n.options.strict&&d.start<y.found.offset-1024&&i(g.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));const c=h?e(n,h,y,i):t(n,a,f,null,y,i);n.schema.compat&&Ln(s.indent,h,i),a=c.range[2];const l=new mt(g,c);n.options.keepSourceTokens&&(l.srcToken=o),r.items.push(l)}else{p&&i(g.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const e=new mt(g);n.options.keepSourceTokens&&(e.srcToken=o),r.items.push(e)}}return c&&c<a&&i(c,"IMPOSSIBLE","Map comment with trailing content"),r.range=[s.offset,a,c??a],r}(e,t,n,s,o):"block-seq"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r=new(o?.nodeClass??Et)(n.schema);n.atRoot&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let a=s.offset,c=null;for(const{start:o,value:l}of s.items){const u=xn(o,{indicator:"seq-item-ind",next:l,offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0});if(!u.found){if(!(u.anchor||u.tag||l)){c=u.end,u.comment&&(r.comment=u.comment);continue}l&&"block-seq"===l.type?i(u.end,"BAD_INDENT","All sequence items must start at the same column"):i(a,"MISSING_CHAR","Sequence item without - indicator")}const f=l?e(n,l,u,i):t(n,u.end,o,null,u,i);n.schema.compat&&Ln(s.indent,l,i),a=f.range[2],r.items.push(f)}return r.range=[s.offset,a,c??a],r}(e,t,n,s,o):function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r="{"===s.start.source,a=r?"flow map":"flow sequence",c=new(o?.nodeClass??(r?vt:Et))(n.schema);c.flow=!0;const l=n.atRoot;l&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let u=s.offset+s.start.source.length;for(let o=0;o<s.items.length;++o){const l=s.items[o],{start:f,key:h,sep:d,value:p}=l,m=xn(f,{flow:a,indicator:"explicit-key-ind",next:h??d?.[0],offset:u,onError:i,parentIndent:s.indent,startOnNewline:!1});if(!m.found){if(!(m.anchor||m.tag||d||p)){0===o&&m.comma?i(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`):o<s.items.length-1&&i(m.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${a}`),m.comment&&(c.comment?c.comment+="\n"+m.comment:c.comment=m.comment),u=m.end;continue}!r&&n.options.strict&&$n(h)&&i(h,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===o)m.comma&&i(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`);else if(m.comma||i(m.start,"MISSING_CHAR",`Missing , between ${a} items`),m.comment){let e="";e:for(const t of f)switch(t.type){case"comma":case"space":break;case"comment":e=t.source.substring(1);break e;default:break e}if(e){let t=c.items[c.items.length-1];de(t)&&(t=t.value??t.key),t.comment?t.comment+="\n"+e:t.comment=e,m.comment=m.comment.substring(e.length+1)}}if(r||d||m.found){n.atKey=!0;const o=m.end,g=h?e(n,h,m,i):t(n,o,f,null,m,i);Kn(h)&&i(g.range,"BLOCK_IN_FLOW",Mn),n.atKey=!1;const y=xn(d??[],{flow:a,indicator:"map-value-ind",next:p,offset:g.range[2],onError:i,parentIndent:s.indent,startOnNewline:!1});if(y.found){if(!r&&!m.found&&n.options.strict){if(d)for(const e of d){if(e===y.found)break;if("newline"===e.type){i(e,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}m.start<y.found.offset-1024&&i(y.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else p&&("source"in p&&p.source&&":"===p.source[0]?i(p,"MISSING_CHAR",`Missing space after : in ${a}`):i(y.start,"MISSING_CHAR",`Missing , or : between ${a} items`));const b=p?e(n,p,y,i):y.found?t(n,y.end,d,null,y,i):null;b?Kn(p)&&i(b.range,"BLOCK_IN_FLOW",Mn):y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const w=new mt(g,b);if(n.options.keepSourceTokens&&(w.srcToken=l),r){const e=c;Cn(n,e.items,g)&&i(o,"DUPLICATE_KEY","Map keys must be unique"),e.items.push(w)}else{const e=new vt(n.schema);e.flow=!0,e.items.push(w);const t=(b??g).range;e.range=[g.range[0],t[1],t[2]],c.items.push(e)}u=b?b.range[2]:y.end}else{const s=p?e(n,p,m,i):t(n,m.end,d,null,m,i);c.items.push(s),u=s.range[2],Kn(p)&&i(s.range,"BLOCK_IN_FLOW",Mn)}}const f=r?"}":"]",[h,...d]=s.end;let p=u;if(h&&h.source===f)p=h.offset+h.source.length;else{const e=a[0].toUpperCase()+a.substring(1);i(u,l?"MISSING_CHAR":"BAD_INDENT",l?`${e} must end with a ${f}`:`${e} in block collection must be sufficiently indented and end with a ${f}`),h&&1!==h.source.length&&d.unshift(h)}if(d.length>0){const e=Bn(d,p,n.options.strict,i);e.comment&&(c.comment?c.comment+="\n"+e.comment:c.comment=e.comment),c.range=[s.offset,p,e.offset]}else c.range=[s.offset,p,p];return c}(e,t,n,s,o),a=r.constructor;return"!"===i||i===a.tagName?(r.tag=a.tagName,r):(i&&(r.tag=i),r)}function Pn(e,t,n){const s=t.offset,i=function({offset:e,props:t},n,s){if("block-scalar-header"!==t[0].type)return s(t[0],"IMPOSSIBLE","Block scalar header not found"),null;const{source:i}=t[0],o=i[0];let r=0,a="",c=-1;for(let t=1;t<i.length;++t){const n=i[t];if(a||"-"!==n&&"+"!==n){const s=Number(n);!r&&s?r=s:-1===c&&(c=e+t)}else a=n}-1!==c&&s(c,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${i}`);let l=!1,u="",f=i.length;for(let e=1;e<t.length;++e){const i=t[e];switch(i.type){case"space":l=!0;case"newline":f+=i.source.length;break;case"comment":if(n&&!l){s(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters")}f+=i.source.length,u=i.source.substring(1);break;case"error":s(i,"UNEXPECTED_TOKEN",i.message),f+=i.source.length;break;default:{s(i,"UNEXPECTED_TOKEN",`Unexpected token in block scalar header: ${i.type}`);const e=i.source;e&&"string"==typeof e&&(f+=e.length)}}}return{mode:o,indent:r,chomp:a,comment:u,length:f}}(t,e.options.strict,n);if(!i)return{value:"",type:null,comment:"",range:[s,s,s]};const o=">"===i.mode?De.BLOCK_FOLDED:De.BLOCK_LITERAL,r=t.source?function(e){const t=e.split(/\n( *)/),n=t[0],s=n.match(/^( *)/),i=[s?.[1]?[s[1],n.slice(s[1].length)]:["",n]];for(let e=1;e<t.length;e+=2)i.push([t[e],t[e+1]]);return i}(t.source):[];let a=r.length;for(let e=r.length-1;e>=0;--e){const t=r[e][1];if(""!==t&&"\r"!==t)break;a=e}if(0===a){const e="+"===i.chomp&&r.length>0?"\n".repeat(Math.max(1,r.length-1)):"";let n=s+i.length;return t.source&&(n+=t.source.length),{value:e,type:o,comment:i.comment,range:[s,n,n]}}let c=t.indent+i.indent,l=t.offset+i.length,u=0;for(let t=0;t<a;++t){const[s,o]=r[t];if(""!==o&&"\r"!==o){if(s.length<c){const e="Block scalars with more-indented leading empty lines must use an explicit indentation indicator";n(l+s.length,"MISSING_CHAR",e)}if(0===i.indent&&(c=s.length),u=t,0===c&&!e.atRoot){n(l,"BAD_INDENT","Block scalar values in collections must be indented")}break}0===i.indent&&s.length>c&&(c=s.length),l+=s.length+o.length+1}for(let e=r.length-1;e>=a;--e)r[e][0].length>c&&(a=e+1);let f="",h="",d=!1;for(let e=0;e<u;++e)f+=r[e][0].slice(c)+"\n";for(let e=u;e<a;++e){let[t,s]=r[e];l+=t.length+s.length+1;const a="\r"===s[s.length-1];if(a&&(s=s.slice(0,-1)),s&&t.length<c){const e=`Block scalar lines must not be less indented than their ${i.indent?"explicit indentation indicator":"first line"}`;n(l-s.length-(a?2:1),"BAD_INDENT",e),t=""}o===De.BLOCK_LITERAL?(f+=h+t.slice(c)+s,h="\n"):t.length>c||"\t"===s[0]?(" "===h?h="\n":d||"\n"!==h||(h="\n\n"),f+=h+t.slice(c)+s,h="\n",d=!0):""===s?"\n"===h?f+="\n":h="\n":(f+=h+s,h=" ",d=!1)}switch(i.chomp){case"-":break;case"+":for(let e=a;e<r.length;++e)f+="\n"+r[e][0].slice(c);"\n"!==f[f.length-1]&&(f+="\n");break;default:f+="\n"}const p=s+i.length+t.source.length;return{value:f,type:o,comment:i.comment,range:[s,p,p]}}function Dn(e,t,n){const{offset:s,type:i,source:o,end:r}=e;let a,c;const l=(e,t,i)=>n(s+e,t,i);switch(i){case"scalar":a=De.PLAIN,c=function(e,t){let n="";switch(e[0]){case"\t":n="a tab character";break;case",":n="flow indicator character ,";break;case"%":n="directive indicator character %";break;case"|":case">":n=`block scalar indicator ${e[0]}`;break;case"@":case"`":n=`reserved character ${e[0]}`}n&&t(0,"BAD_SCALAR_START",`Plain value cannot start with ${n}`);return qn(e)}(o,l);break;case"single-quoted-scalar":a=De.QUOTE_SINGLE,c=function(e,t){"'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote");return qn(e.slice(1,-1)).replace(/''/g,"'")}(o,l);break;case"double-quoted-scalar":a=De.QUOTE_DOUBLE,c=function(e,t){let n="";for(let s=1;s<e.length-1;++s){const i=e[s];if("\r"!==i||"\n"!==e[s+1])if("\n"===i){const{fold:t,offset:i}=Rn(e,s);n+=t,s=i}else if("\\"===i){let i=e[++s];const o=Un[i];if(o)n+=o;else if("\n"===i)for(i=e[s+1];" "===i||"\t"===i;)i=e[1+ ++s];else if("\r"===i&&"\n"===e[s+1])for(i=e[1+ ++s];" "===i||"\t"===i;)i=e[1+ ++s];else if("x"===i||"u"===i||"U"===i){const o={x:2,u:4,U:8}[i];n+=Fn(e,s+1,o,t),s+=o}else{const i=e.substr(s-1,2);t(s-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),n+=i}}else if(" "===i||"\t"===i){const t=s;let o=e[s+1];for(;" "===o||"\t"===o;)o=e[1+ ++s];"\n"===o||"\r"===o&&"\n"===e[s+2]||(n+=s>t?e.slice(t,s+1):i)}else n+=i}'"'===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR",'Missing closing "quote');return n}(o,l);break;default:return n(e,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${i}`),{value:"",type:null,comment:"",range:[s,s+o.length,s+o.length]}}const u=s+o.length,f=Bn(r,u,t,n);return{value:c,type:a,comment:f.comment,range:[s,u,f.offset]}}function qn(e){let t,n;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),n=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,n=/[ \t]*(.*?)[ \t]*\r?\n/sy}let s=t.exec(e);if(!s)return e;let i=s[1],o=" ",r=t.lastIndex;for(n.lastIndex=r;s=n.exec(e);)""===s[1]?"\n"===o?i+=o:o="\n":(i+=o+s[1],o=" "),r=n.lastIndex;const a=/[ \t]*(.*)/sy;return a.lastIndex=r,s=a.exec(e),i+o+(s?.[1]??"")}function Rn(e,t){let n="",s=e[t+1];for(;!(" "!==s&&"\t"!==s&&"\n"!==s&&"\r"!==s||"\r"===s&&"\n"!==e[t+2]);)"\n"===s&&(n+="\n"),s=e[(t+=1)+1];return n||(n=" "),{fold:n,offset:t}}const Un={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"Â…",_:"Â ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function Fn(e,t,n,s){const i=e.substr(t,n),o=i.length===n&&/^[0-9a-fA-F]+$/.test(i)?parseInt(i,16):NaN;if(isNaN(o)){const i=e.substr(t-2,n+2);return s(t-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),i}return String.fromCodePoint(o)}function Gn(e,t,n,s){const{value:i,type:o,comment:r,range:a}="block-scalar"===t.type?Pn(e,t,s):Dn(t,e.options.strict,s),c=n?e.directives.tagName(n.source,(e=>s(n,"TAG_RESOLVE_FAILED",e))):null;let l,u;l=e.options.stringKeys&&e.atKey?e.schema[ae]:c?function(e,t,n,s,i){if("!"===n)return e[ae];const o=[];for(const t of e.tags)if(!t.collection&&t.tag===n){if(!t.default||!t.test)return t;o.push(t)}for(const e of o)if(e.test?.test(t))return e;const r=e.knownTags[n];if(r&&!r.collection)return e.tags.push(Object.assign({},r,{default:!1,test:void 0})),r;return i(s,"TAG_RESOLVE_FAILED",`Unresolved tag: ${n}`,"tag:yaml.org,2002:str"!==n),e[ae]}(e.schema,i,c,n,s):"scalar"===t.type?function({atKey:e,directives:t,schema:n},s,i,o){const r=n.tags.find((t=>(!0===t.default||e&&"key"===t.default)&&t.test?.test(s)))||n[ae];if(n.compat){const e=n.compat.find((e=>e.default&&e.test?.test(s)))??n[ae];if(r.tag!==e.tag){o(i,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${t.tagString(r.tag)} or ${t.tagString(e.tag)}`,!0)}}return r}(e,i,t,s):e.schema[ae];try{const o=l.resolve(i,(e=>s(n??t,"TAG_RESOLVE_FAILED",e)),e.options);u=pe(o)?o:new De(o)}catch(e){const o=e instanceof Error?e.message:String(e);s(n??t,"TAG_RESOLVE_FAILED",o),u=new De(i)}return u.range=a,u.source=i,o&&(u.type=o),c&&(u.tag=c),l.format&&(u.format=l.format),r&&(u.comment=r),u}function Vn(e,t,n){if(t){null===n&&(n=t.length);for(let s=n-1;s>=0;--s){let n=t[s];switch(n.type){case"space":case"comment":case"newline":e-=n.source.length;continue}for(n=t[++s];"space"===n?.type;)e+=n.source.length,n=t[++s];break}}return e}const Wn={composeNode:Yn,composeEmptyNode:Jn};function Yn(e,t,n,s){const i=e.atKey,{spaceBefore:o,comment:r,anchor:a,tag:c}=n;let l,u=!0;switch(t.type){case"alias":l=function({options:e},{offset:t,source:n,end:s},i){const o=new Ke(n.substring(1));""===o.source&&i(t,"BAD_ALIAS","Alias cannot be an empty string");o.source.endsWith(":")&&i(t+n.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0);const r=t+n.length,a=Bn(s,r,e.strict,i);o.range=[t,r,a.offset],a.comment&&(o.comment=a.comment);return o}(e,t,s),(a||c)&&s(t,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":l=Gn(e,t,c,s),a&&(l.anchor=a.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":l=function(e,t,n,s,i){const o=s.tag,r=o?t.directives.tagName(o.source,(e=>i(o,"TAG_RESOLVE_FAILED",e))):null;if("block-seq"===n.type){const{anchor:e,newlineAfterProp:t}=s,n=e&&o?e.offset>o.offset?e:o:e??o;n&&(!t||t.offset<n.offset)&&i(n,"MISSING_CHAR","Missing newline after block sequence props")}const a="block-map"===n.type?"map":"block-seq"===n.type?"seq":"{"===n.start.source?"map":"seq";if(!o||!r||"!"===r||r===vt.tagName&&"map"===a||r===Et.tagName&&"seq"===a)return jn(e,t,n,i,r);let c=t.schema.tags.find((e=>e.tag===r&&e.collection===a));if(!c){const s=t.schema.knownTags[r];if(!s||s.collection!==a)return s?i(o,"BAD_COLLECTION_TYPE",`${s.tag} used for ${a} collection, but expects ${s.collection??"scalar"}`,!0):i(o,"TAG_RESOLVE_FAILED",`Unresolved tag: ${r}`,!0),jn(e,t,n,i,r);t.schema.tags.push(Object.assign({},s,{default:!1})),c=s}const l=jn(e,t,n,i,r,c),u=c.resolve?.(l,(e=>i(o,"TAG_RESOLVE_FAILED",e)),t.options)??l,f=ye(u)?u:new De(u);return f.range=l.range,f.tag=r,c?.format&&(f.format=c.format),f}(Wn,e,t,n,s),a&&(l.anchor=a.source.substring(1));break;default:s(t,"UNEXPECTED_TOKEN","error"===t.type?t.message:`Unsupported token (type: ${t.type})`),l=Jn(e,t.offset,void 0,null,n,s),u=!1}if(a&&""===l.anchor&&s(a,"BAD_ALIAS","Anchor cannot be an empty string"),i&&e.options.stringKeys&&(!pe(l)||"string"!=typeof l.value||l.tag&&"tag:yaml.org,2002:str"!==l.tag)){s(c??t,"NON_STRING_KEY","With stringKeys, all keys must be strings")}return o&&(l.spaceBefore=!0),r&&("scalar"===t.type&&""===t.source?l.comment=r:l.commentBefore=r),e.options.keepSourceTokens&&u&&(l.srcToken=t),l}function Jn(e,t,n,s,{spaceBefore:i,comment:o,anchor:r,tag:a,end:c},l){const u=Gn(e,{type:"scalar",offset:Vn(t,n,s),indent:-1,source:""},a,l);return r&&(u.anchor=r.source.substring(1),""===u.anchor&&l(r,"BAD_ALIAS","Anchor cannot be an empty string")),i&&(u.spaceBefore=!0),o&&(u.comment=o,u.range[2]=c),u}function Hn(e){if("number"==typeof e)return[e,e+1];if(Array.isArray(e))return 2===e.length?e:[e[0],e[1]];const{offset:t,source:n}=e;return[t,t+("string"==typeof n?n.length:1)]}function Qn(e){let t="",n=!1,s=!1;for(let i=0;i<e.length;++i){const o=e[i];switch(o[0]){case"#":t+=(""===t?"":s?"\n\n":"\n")+(o.substring(1)||" "),n=!0,s=!1;break;case"%":"#"!==e[i+1]?.[0]&&(i+=1),n=!1;break;default:n||(s=!0),n=!1}}return{comment:t,afterEmptyLine:s}}class Xn{constructor(e={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(e,t,n,s)=>{const i=Hn(e);s?this.warnings.push(new In(i,t,n)):this.errors.push(new An(i,t,n))},this.directives=new xe({version:e.version||"1.2"}),this.options=e}decorate(e,t){const{comment:n,afterEmptyLine:s}=Qn(this.prelude);if(n){const i=e.contents;if(t)e.comment=e.comment?`${e.comment}\n${n}`:n;else if(s||e.directives.docStart||!i)e.commentBefore=n;else if(ge(i)&&!i.flow&&i.items.length>0){let e=i.items[0];de(e)&&(e=e.key);const t=e.commentBefore;e.commentBefore=t?`${n}\n${t}`:n}else{const e=i.commentBefore;i.commentBefore=e?`${n}\n${e}`:n}}t?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:Qn(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,t=!1,n=-1){for(const t of e)yield*this.next(t);yield*this.end(t,n)}*next(e){switch(e.type){case"directive":this.directives.add(e.source,((t,n,s)=>{const i=Hn(e);i[0]+=t,this.onError(i,"BAD_DIRECTIVE",n,s)})),this.prelude.push(e.source),this.atDirectives=!0;break;case"document":{const t=function(e,t,{offset:n,start:s,value:i,end:o},r){const a=Object.assign({_directives:t},e),c=new En(void 0,a),l={atKey:!1,atRoot:!0,directives:c.directives,options:c.options,schema:c.schema},u=xn(s,{indicator:"doc-start",next:i??o?.[0],offset:n,onError:r,parentIndent:0,startOnNewline:!0});u.found&&(c.directives.docStart=!0,!i||"block-map"!==i.type&&"block-seq"!==i.type||u.hasNewline||r(u.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),c.contents=i?Yn(l,i,u,r):Jn(l,u.end,s,null,u,r);const f=c.contents.range[2],h=Bn(o,f,!1,r);return h.comment&&(c.comment=h.comment),c.range=[n,f,h.offset],c}(this.options,this.directives,e,this.onError);this.atDirectives&&!t.directives.docStart&&this.onError(e,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(t,!1),this.doc&&(yield this.doc),this.doc=t,this.atDirectives=!1;break}case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(e.source);break;case"error":{const t=e.source?`${e.message}: ${JSON.stringify(e.source)}`:e.message,n=new An(Hn(e),"UNEXPECTED_TOKEN",t);this.atDirectives||!this.doc?this.errors.push(n):this.doc.errors.push(n);break}case"doc-end":{if(!this.doc){const t="Unexpected doc-end without preceding document";this.errors.push(new An(Hn(e),"UNEXPECTED_TOKEN",t));break}this.doc.directives.docEnd=!0;const t=Bn(e.end,e.offset+e.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,!0),t.comment){const e=this.doc.comment;this.doc.comment=e?`${e}\n${t.comment}`:t.comment}this.doc.range[2]=t.offset;break}default:this.errors.push(new An(Hn(e),"UNEXPECTED_TOKEN",`Unsupported token ${e.type}`))}}*end(e=!1,t=-1){if(this.doc)this.decorate(this.doc,!0),yield this.doc,this.doc=null;else if(e){const e=Object.assign({_directives:this.directives},this.options),n=new En(void 0,e);this.atDirectives&&this.onError(t,"MISSING_CHAR","Missing directives-end indicator line"),n.range=[0,t,t],this.decorate(n,!1),yield n}}}function zn(e,t){if(t)for(const n of t)switch(n.type){case"space":case"comment":e.push(n);break;case"newline":return e.push(n),!0}return!1}function Zn(e,t,n){switch(e.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":e.type=n,e.source=t;break;case"block-scalar":{const s=e.props.slice(1);let i=t.length;"block-scalar-header"===e.props[0].type&&(i-=e.props[0].source.length);for(const e of s)e.offset+=i;delete e.props,Object.assign(e,{type:n,source:t,end:s});break}case"block-map":case"block-seq":{const s={type:"newline",offset:e.offset+t.length,indent:e.indent,source:"\n"};delete e.items,Object.assign(e,{type:n,source:t,end:[s]});break}default:{const s="indent"in e?e.indent:-1,i="end"in e&&Array.isArray(e.end)?e.end.filter((e=>"space"===e.type||"comment"===e.type||"newline"===e.type)):[];for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:n,indent:s,source:t,end:i})}}}function es(e){switch(e.type){case"block-scalar":{let t="";for(const n of e.props)t+=es(n);return t+e.source}case"block-map":case"block-seq":{let t="";for(const n of e.items)t+=ts(n);return t}case"flow-collection":{let t=e.start.source;for(const n of e.items)t+=ts(n);for(const n of e.end)t+=n.source;return t}case"document":{let t=ts(e);if(e.end)for(const n of e.end)t+=n.source;return t}default:{let t=e.source;if("end"in e&&e.end)for(const n of e.end)t+=n.source;return t}}}function ts({start:e,key:t,sep:n,value:s}){let i="";for(const t of e)i+=t.source;if(t&&(i+=es(t)),n)for(const e of n)i+=e.source;return s&&(i+=es(s)),i}const ns=Symbol("break visit"),ss=Symbol("skip children"),is=Symbol("remove item");function os(e,t){"type"in e&&"document"===e.type&&(e={start:e.start,value:e.value}),rs(Object.freeze([]),e,t)}function rs(e,t,n){let s=n(t,e);if("symbol"==typeof s)return s;for(const i of["key","value"]){const o=t[i];if(o&&"items"in o){for(let t=0;t<o.items.length;++t){const s=rs(Object.freeze(e.concat([[i,t]])),o.items[t],n);if("number"==typeof s)t=s-1;else{if(s===ns)return ns;s===is&&(o.items.splice(t,1),t-=1)}}"function"==typeof s&&"key"===i&&(s=s(t,e))}}return"function"==typeof s?s(t,e):s}os.BREAK=ns,os.SKIP=ss,os.REMOVE=is,os.itemAtPath=(e,t)=>{let n=e;for(const[e,s]of t){const t=n?.[e];if(!t||!("items"in t))return;n=t.items[s]}return n},os.parentCollection=(e,t)=>{const n=os.itemAtPath(e,t.slice(0,-1)),s=t[t.length-1][0],i=n?.[s];if(i&&"items"in i)return i;throw new Error("Parent collection not found")};const as="\ufeff",cs="",ls="",us="";function fs(e){switch(e){case as:return"byte-order-mark";case cs:return"doc-mode";case ls:return"flow-error-end";case us:return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(e[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}var hs=Object.freeze({__proto__:null,BOM:as,DOCUMENT:cs,FLOW_END:ls,SCALAR:us,createScalarToken:function(e,t){const{implicitKey:n=!1,indent:s,inFlow:i=!1,offset:o=-1,type:r="PLAIN"}=t,a=ot({type:r,value:e},{implicitKey:n,indent:s>0?" ".repeat(s):"",inFlow:i,options:{blockQuote:!0,lineWidth:-1}}),c=t.end??[{type:"newline",offset:-1,indent:s,source:"\n"}];switch(a[0]){case"|":case">":{const e=a.indexOf("\n"),t=a.substring(0,e),n=a.substring(e+1)+"\n",i=[{type:"block-scalar-header",offset:o,indent:s,source:t}];return zn(i,c)||i.push({type:"newline",offset:-1,indent:s,source:"\n"}),{type:"block-scalar",offset:o,indent:s,props:i,source:n}}case'"':return{type:"double-quoted-scalar",offset:o,indent:s,source:a,end:c};case"'":return{type:"single-quoted-scalar",offset:o,indent:s,source:a,end:c};default:return{type:"scalar",offset:o,indent:s,source:a,end:c}}},isCollection:e=>!!e&&"items"in e,isScalar:e=>!!e&&("scalar"===e.type||"single-quoted-scalar"===e.type||"double-quoted-scalar"===e.type||"block-scalar"===e.type),prettyToken:function(e){switch(e){case as:return"<BOM>";case cs:return"<DOC>";case ls:return"<FLOW_END>";case us:return"<SCALAR>";default:return JSON.stringify(e)}},resolveAsScalar:function(e,t=!0,n){if(e){const s=(e,t,s)=>{const i="number"==typeof e?e:Array.isArray(e)?e[0]:e.offset;if(!n)throw new An([i,i+1],t,s);n(i,t,s)};switch(e.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return Dn(e,t,s);case"block-scalar":return Pn({options:{strict:t}},e,s)}}return null},setScalarValue:function(e,t,n={}){let{afterKey:s=!1,implicitKey:i=!1,inFlow:o=!1,type:r}=n,a="indent"in e?e.indent:null;if(s&&"number"==typeof a&&(a+=2),!r)switch(e.type){case"single-quoted-scalar":r="QUOTE_SINGLE";break;case"double-quoted-scalar":r="QUOTE_DOUBLE";break;case"block-scalar":{const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");r=">"===t.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:r="PLAIN"}const c=ot({type:r,value:t},{implicitKey:i||null===a,indent:null!==a&&a>0?" ".repeat(a):"",inFlow:o,options:{blockQuote:!0,lineWidth:-1}});switch(c[0]){case"|":case">":!function(e,t){const n=t.indexOf("\n"),s=t.substring(0,n),i=t.substring(n+1)+"\n";if("block-scalar"===e.type){const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");t.source=s,e.source=i}else{const{offset:t}=e,n="indent"in e?e.indent:-1,o=[{type:"block-scalar-header",offset:t,indent:n,source:s}];zn(o,"end"in e?e.end:void 0)||o.push({type:"newline",offset:-1,indent:n,source:"\n"});for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:"block-scalar",indent:n,props:o,source:i})}}(e,c);break;case'"':Zn(e,c,"double-quoted-scalar");break;case"'":Zn(e,c,"single-quoted-scalar");break;default:Zn(e,c,"scalar")}},stringify:e=>"type"in e?es(e):ts(e),tokenType:fs,visit:os});function ds(e){switch(e){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}const ps=new Set("0123456789ABCDEFabcdef"),ms=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),gs=new Set(",[]{}"),ys=new Set(" ,[]{}\n\r\t"),bs=e=>!e||ys.has(e);class ws{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(e,t=!1){if(e){if("string"!=typeof e)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null}this.atEnd=!t;let n=this.next??"stream";for(;n&&(t||this.hasChars(1));)n=yield*this.parseNext(n)}atLineEnd(){let e=this.pos,t=this.buffer[e];for(;" "===t||"\t"===t;)t=this.buffer[++e];return!t||"#"===t||"\n"===t||"\r"===t&&"\n"===this.buffer[e+1]}charAt(e){return this.buffer[this.pos+e]}continueScalar(e){let t=this.buffer[e];if(this.indentNext>0){let n=0;for(;" "===t;)t=this.buffer[++n+e];if("\r"===t){const t=this.buffer[n+e+1];if("\n"===t||!t&&!this.atEnd)return e+n+1}return"\n"===t||n>=this.indentNext||!t&&!this.atEnd?e+n:-1}if("-"===t||"."===t){const t=this.buffer.substr(e,3);if(("---"===t||"..."===t)&&ds(this.buffer[e+3]))return-1}return e}getLine(){let e=this.lineEndPos;return("number"!=typeof e||-1!==e&&e<this.pos)&&(e=this.buffer.indexOf("\n",this.pos),this.lineEndPos=e),-1===e?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[e-1]&&(e-=1),this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let e=this.getLine();if(null===e)return this.setNext("stream");if(e[0]===as&&(yield*this.pushCount(1),e=e.substring(1)),"%"===e[0]){let t=e.length,n=e.indexOf("#");for(;-1!==n;){const s=e[n-1];if(" "===s||"\t"===s){t=n-1;break}n=e.indexOf("#",n+1)}for(;;){const n=e[t-1];if(" "!==n&&"\t"!==n)break;t-=1}const s=(yield*this.pushCount(t))+(yield*this.pushSpaces(!0));return yield*this.pushCount(e.length-s),this.pushNewline(),"stream"}if(this.atLineEnd()){const t=yield*this.pushSpaces(!0);return yield*this.pushCount(e.length-t),yield*this.pushNewline(),"stream"}return yield cs,yield*this.parseLineStart()}*parseLineStart(){const e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if("-"===e||"."===e){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");const e=this.peek(3);if(("---"===e||"..."===e)&&ds(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===e?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!ds(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){const[e,t]=this.peek(2);if(!t&&!this.atEnd)return this.setNext("block-start");if(("-"===e||"?"===e||":"===e)&&ds(t)){const e=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0));return this.indentNext=this.indentValue+1,this.indentValue+=e,yield*this.parseBlockStart()}return"doc"}*parseDocument(){yield*this.pushSpaces(!0);const e=this.getLine();if(null===e)return this.setNext("doc");let t=yield*this.pushIndicators();switch(e[t]){case"#":yield*this.pushCount(e.length-t);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(bs),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return t+=(yield*this.parseBlockScalarHeader()),t+=(yield*this.pushSpaces(!0)),yield*this.pushCount(e.length-t),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,t,n=-1;do{e=yield*this.pushNewline(),e>0?(t=yield*this.pushSpaces(!1),this.indentValue=n=t):t=0,t+=(yield*this.pushSpaces(!0))}while(e+t>0);const s=this.getLine();if(null===s)return this.setNext("flow");if(-1!==n&&n<this.indentNext&&"#"!==s[0]||0===n&&(s.startsWith("---")||s.startsWith("..."))&&ds(s[3])){if(!(n===this.indentNext-1&&1===this.flowLevel&&("]"===s[0]||"}"===s[0])))return this.flowLevel=0,yield ls,yield*this.parseLineStart()}let i=0;for(;","===s[i];)i+=(yield*this.pushCount(1)),i+=(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(i+=(yield*this.pushIndicators()),s[i]){case void 0:return"flow";case"#":return yield*this.pushCount(s.length-i),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,this.flowLevel-=1,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(bs),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":{const e=this.charAt(1);if(this.flowKey||ds(e)||","===e)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow"}default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){const e=this.charAt(0);let t=this.buffer.indexOf(e,this.pos+1);if("'"===e)for(;-1!==t&&"'"===this.buffer[t+1];)t=this.buffer.indexOf("'",t+2);else for(;-1!==t;){let e=0;for(;"\\"===this.buffer[t-1-e];)e+=1;if(e%2==0)break;t=this.buffer.indexOf('"',t+1)}const n=this.buffer.substring(0,t);let s=n.indexOf("\n",this.pos);if(-1!==s){for(;-1!==s;){const e=this.continueScalar(s+1);if(-1===e)break;s=n.indexOf("\n",e)}-1!==s&&(t=s-("\r"===n[s-1]?2:1))}if(-1===t){if(!this.atEnd)return this.setNext("quoted-scalar");t=this.buffer.length}return yield*this.pushToIndex(t+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let e=this.pos;for(;;){const t=this.buffer[++e];if("+"===t)this.blockScalarKeep=!0;else if(t>"0"&&t<="9")this.blockScalarIndent=Number(t)-1;else if("-"!==t)break}return yield*this.pushUntil((e=>ds(e)||"#"===e))}*parseBlockScalar(){let e,t=this.pos-1,n=0;e:for(let s=this.pos;e=this.buffer[s];++s)switch(e){case" ":n+=1;break;case"\n":t=s,n=0;break;case"\r":{const e=this.buffer[s+1];if(!e&&!this.atEnd)return this.setNext("block-scalar");if("\n"===e)break}default:break e}if(!e&&!this.atEnd)return this.setNext("block-scalar");if(n>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=n:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{const e=this.continueScalar(t+1);if(-1===e)break;t=this.buffer.indexOf("\n",e)}while(-1!==t);if(-1===t){if(!this.atEnd)return this.setNext("block-scalar");t=this.buffer.length}}let s=t+1;for(e=this.buffer[s];" "===e;)e=this.buffer[++s];if("\t"===e){for(;"\t"===e||" "===e||"\r"===e||"\n"===e;)e=this.buffer[++s];t=s-1}else if(!this.blockScalarKeep)for(;;){let e=t-1,s=this.buffer[e];"\r"===s&&(s=this.buffer[--e]);const i=e;for(;" "===s;)s=this.buffer[--e];if(!("\n"===s&&e>=this.pos&&e+1+n>i))break;t=e}return yield us,yield*this.pushToIndex(t+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){const e=this.flowLevel>0;let t,n=this.pos-1,s=this.pos-1;for(;t=this.buffer[++s];)if(":"===t){const t=this.buffer[s+1];if(ds(t)||e&&gs.has(t))break;n=s}else if(ds(t)){let i=this.buffer[s+1];if("\r"===t&&("\n"===i?(s+=1,t="\n",i=this.buffer[s+1]):n=s),"#"===i||e&&gs.has(i))break;if("\n"===t){const e=this.continueScalar(s+1);if(-1===e)break;s=Math.max(s,e-2)}}else{if(e&&gs.has(t))break;n=s}return t||this.atEnd?(yield us,yield*this.pushToIndex(n+1,!0),e?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(e){return e>0?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,t){const n=this.buffer.slice(this.pos,e);return n?(yield n,this.pos+=n.length,n.length):(t&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(bs))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":{const e=this.flowLevel>0,t=this.charAt(1);if(ds(t)||e&&gs.has(t))return e?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}}return 0}*pushTag(){if("<"===this.charAt(1)){let e=this.pos+2,t=this.buffer[e];for(;!ds(t)&&">"!==t;)t=this.buffer[++e];return yield*this.pushToIndex(">"===t?e+1:e,!1)}{let e=this.pos+1,t=this.buffer[e];for(;t;)if(ms.has(t))t=this.buffer[++e];else{if("%"!==t||!ps.has(this.buffer[e+1])||!ps.has(this.buffer[e+2]))break;t=this.buffer[e+=3]}return yield*this.pushToIndex(e,!1)}}*pushNewline(){const e=this.buffer[this.pos];return"\n"===e?yield*this.pushCount(1):"\r"===e&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(e){let t,n=this.pos-1;do{t=this.buffer[++n]}while(" "===t||e&&"\t"===t);const s=n-this.pos;return s>0&&(yield this.buffer.substr(this.pos,s),this.pos=n),s}*pushUntil(e){let t=this.pos,n=this.buffer[t];for(;!e(n);)n=this.buffer[++t];return yield*this.pushToIndex(t,!1)}}class ks{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let t=0,n=this.lineStarts.length;for(;t<n;){const s=t+n>>1;this.lineStarts[s]<e?t=s+1:n=s}if(this.lineStarts[t]===e)return{line:t+1,col:1};if(0===t)return{line:0,col:e};return{line:t,col:e-this.lineStarts[t-1]+1}}}}function vs(e,t){for(let n=0;n<e.length;++n)if(e[n].type===t)return!0;return!1}function Ss(e){for(let t=0;t<e.length;++t)switch(e[t].type){case"space":case"comment":case"newline":break;default:return t}return-1}function Es(e){switch(e?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return!0;default:return!1}}function Ns(e){switch(e.type){case"document":return e.start;case"block-map":{const t=e.items[e.items.length-1];return t.sep??t.start}case"block-seq":return e.items[e.items.length-1].start;default:return[]}}function Os(e){if(0===e.length)return[];let t=e.length;e:for(;--t>=0;)switch(e[t].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break e}for(;"space"===e[++t]?.type;);return e.splice(t,e.length)}function As(e){if("flow-seq-start"===e.start.type)for(const t of e.items)!t.sep||t.value||vs(t.start,"explicit-key-ind")||vs(t.sep,"map-value-ind")||(t.key&&(t.value=t.key),delete t.key,Es(t.value)?t.value.end?Array.prototype.push.apply(t.value.end,t.sep):t.value.end=t.sep:Array.prototype.push.apply(t.start,t.sep),delete t.sep)}class Is{constructor(e){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new ws,this.onNewLine=e}*parse(e,t=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(const n of this.lexer.lex(e,t))yield*this.next(n);t||(yield*this.end())}*next(e){if(this.source=e,this.atScalar)return this.atScalar=!1,yield*this.step(),void(this.offset+=e.length);const t=fs(e);if(t)if("scalar"===t)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=t,yield*this.step(),t){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case"space":this.atNewLine&&" "===e[0]&&(this.indent+=e.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=e.length}else{const t=`Not a YAML token: ${e}`;yield*this.pop({type:"error",offset:this.offset,message:t,source:e}),this.offset+=e.length}}*end(){for(;this.stack.length>0;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){const e=this.peek(1);if("doc-end"!==this.type||e&&"doc-end"===e.type){if(!e)return yield*this.stream();switch(e.type){case"document":return yield*this.document(e);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(e);case"block-scalar":return yield*this.blockScalar(e);case"block-map":return yield*this.blockMap(e);case"block-seq":return yield*this.blockSequence(e);case"flow-collection":return yield*this.flowCollection(e);case"doc-end":return yield*this.documentEnd(e)}yield*this.pop()}else{for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(e){return this.stack[this.stack.length-e]}*pop(e){const t=e??this.stack.pop();if(t)if(0===this.stack.length)yield t;else{const e=this.peek(1);switch("block-scalar"===t.type?t.indent="indent"in e?e.indent:0:"flow-collection"===t.type&&"document"===e.type&&(t.indent=0),"flow-collection"===t.type&&As(t),e.type){case"document":e.value=t;break;case"block-scalar":e.props.push(t);break;case"block-map":{const n=e.items[e.items.length-1];if(n.value)return e.items.push({start:[],key:t,sep:[]}),void(this.onKeyLine=!0);if(!n.sep)return Object.assign(n,{key:t,sep:[]}),void(this.onKeyLine=!n.explicitKey);n.value=t;break}case"block-seq":{const n=e.items[e.items.length-1];n.value?e.items.push({start:[],value:t}):n.value=t;break}case"flow-collection":{const n=e.items[e.items.length-1];return void(!n||n.value?e.items.push({start:[],key:t,sep:[]}):n.sep?n.value=t:Object.assign(n,{key:t,sep:[]}))}default:yield*this.pop(),yield*this.pop(t)}if(!("document"!==e.type&&"block-map"!==e.type&&"block-seq"!==e.type||"block-map"!==t.type&&"block-seq"!==t.type)){const n=t.items[t.items.length-1];n&&!n.sep&&!n.value&&n.start.length>0&&-1===Ss(n.start)&&(0===t.indent||n.start.every((e=>"comment"!==e.type||e.indent<t.indent)))&&("document"===e.type?e.end=n.start:e.items.push({start:n.start}),t.items.splice(-1,1))}}else{const e="Tried to pop an empty stack";yield{type:"error",offset:this.offset,source:"",message:e}}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":{const e={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&e.start.push(this.sourceToken),void this.stack.push(e)}}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case"doc-start":return void(-1!==Ss(e.start)?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void e.start.push(this.sourceToken)}const t=this.startBlockValue(e);t?this.stack.push(t):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(e){if("map-value-ind"===this.type){const t=Os(Ns(this.peek(2)));let n;e.end?(n=e.end,n.push(this.sourceToken),delete e.end):n=[this.sourceToken];const s={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:t,key:e,sep:n}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=s}else yield*this.lineEnd(e)}*blockScalar(e){switch(this.type){case"space":case"comment":case"newline":return void e.props.push(this.sourceToken);case"scalar":if(e.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(this.onKeyLine=!1,t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else if(t.sep)t.sep.push(this.sourceToken);else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return}if(this.indent>=e.indent){const n=!this.onKeyLine&&this.indent===e.indent,s=n&&(t.sep||t.explicitKey)&&"seq-item-ind"!==this.type;let i=[];if(s&&t.sep&&!t.value){const n=[];for(let s=0;s<t.sep.length;++s){const i=t.sep[s];switch(i.type){case"newline":n.push(s);break;case"space":break;case"comment":i.indent>e.indent&&(n.length=0);break;default:n.length=0}}n.length>=2&&(i=t.sep.splice(n[1]))}switch(this.type){case"anchor":case"tag":return void(s||t.value?(i.push(this.sourceToken),e.items.push({start:i}),this.onKeyLine=!0):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"explicit-key-ind":return t.sep||t.explicitKey?s||t.value?(i.push(this.sourceToken),e.items.push({start:i,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(t.start.push(this.sourceToken),t.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":if(t.explicitKey)if(t.sep)if(t.value)e.items.push({start:[],key:null,sep:[this.sourceToken]});else if(vs(t.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:i,key:null,sep:[this.sourceToken]}]});else if(Es(t.key)&&!vs(t.sep,"newline")){const e=Os(t.start),n=t.key,s=t.sep;s.push(this.sourceToken),delete t.key,delete t.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:n,sep:s}]})}else i.length>0?t.sep=t.sep.concat(i,this.sourceToken):t.sep.push(this.sourceToken);else if(vs(t.start,"newline"))Object.assign(t,{key:null,sep:[this.sourceToken]});else{const e=Os(t.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]})}else t.sep?t.value||s?e.items.push({start:i,key:null,sep:[this.sourceToken]}):vs(t.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]});return void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(s||t.value?(e.items.push({start:i,key:n,sep:[]}),this.onKeyLine=!0):t.sep?this.stack.push(n):(Object.assign(t,{key:n,sep:[]}),this.onKeyLine=!0))}default:{const s=this.startBlockValue(e);if(s){if("block-seq"===s.type){if(!t.explicitKey&&t.sep&&!vs(t.sep,"newline"))return void(yield*this.pop({type:"error",offset:this.offset,message:"Unexpected block-seq-ind on same line with key",source:this.source}))}else n&&e.items.push({start:i});return void this.stack.push(s)}}}}yield*this.pop(),yield*this.step()}*blockSequence(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return;case"anchor":case"tag":if(t.value||this.indent<=e.indent)break;return void t.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==e.indent)break;return void(t.value||vs(t.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken))}if(this.indent>e.indent){const t=this.startBlockValue(e);if(t)return void this.stack.push(t)}yield*this.pop(),yield*this.step()}*flowCollection(e){const t=e.items[e.items.length-1];if("flow-error-end"===this.type){let e;do{yield*this.pop(),e=this.peek(1)}while(e&&"flow-collection"===e.type)}else if(0===e.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!t||t.sep?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken));case"map-value-ind":return void(!t||t.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!t||t.value?e.items.push({start:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(!t||t.value?e.items.push({start:[],key:n,sep:[]}):t.sep?this.stack.push(n):Object.assign(t,{key:n,sep:[]}))}case"flow-map-end":case"flow-seq-end":return void e.end.push(this.sourceToken)}const n=this.startBlockValue(e);n?this.stack.push(n):(yield*this.pop(),yield*this.step())}else{const t=this.peek(2);if("block-map"===t.type&&("map-value-ind"===this.type&&t.indent===e.indent||"newline"===this.type&&!t.items[t.items.length-1].sep))yield*this.pop(),yield*this.step();else if("map-value-ind"===this.type&&"flow-collection"!==t.type){const n=Os(Ns(t));As(e);const s=e.end.splice(1,e.end.length);s.push(this.sourceToken);const i={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:n,key:e,sep:s}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=i}else yield*this.lineEnd(e)}}flowScalar(e){if(this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}return{type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":{this.onKeyLine=!0;const t=Os(Ns(e));return t.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,explicitKey:!0}]}}case"map-value-ind":{this.onKeyLine=!0;const t=Os(Ns(e));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(e,t){return"comment"===this.type&&(!(this.indent<=t)&&e.every((e=>"newline"===e.type||"space"===e.type)))}*documentEnd(e){"doc-mode"!==this.type&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop()))}*lineEnd(e){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function Ts(e){const t=!1!==e.prettyErrors;return{lineCounter:e.lineCounter||t&&new ks||null,prettyErrors:t}}function xs(e,t={}){const{lineCounter:n,prettyErrors:s}=Ts(t),i=new Is(n?.addNewLine),o=new Xn(t);let r=null;for(const t of o.compose(i.parse(e),!0,e.length))if(r){if("silent"!==r.options.logLevel){r.errors.push(new An(t.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else r=t;return s&&n&&(r.errors.forEach(Tn(e,n)),r.warnings.forEach(Tn(e,n))),r}var $s=Object.freeze({__proto__:null,Alias:Ke,CST:hs,Composer:Xn,Document:En,Lexer:ws,LineCounter:ks,Pair:mt,Parser:Is,Scalar:De,Schema:Sn,YAMLError:On,YAMLMap:vt,YAMLParseError:An,YAMLSeq:Et,YAMLWarning:In,isAlias:ue,isCollection:ge,isDocument:fe,isMap:he,isNode:ye,isPair:de,isScalar:pe,isSeq:me,parse:function(e,t,n){let s;"function"==typeof t?s=t:void 0===n&&t&&"object"==typeof t&&(n=t);const i=xs(e,n);if(!i)return null;if(i.warnings.forEach((e=>ct(i.options.logLevel,e))),i.errors.length>0){if("silent"!==i.options.logLevel)throw i.errors[0];i.errors=[]}return i.toJS(Object.assign({reviver:s},n))},parseAllDocuments:function(e,t={}){const{lineCounter:n,prettyErrors:s}=Ts(t),i=new Is(n?.addNewLine),o=new Xn(t),r=Array.from(o.compose(i.parse(e)));if(s&&n)for(const t of r)t.errors.forEach(Tn(e,n)),t.warnings.forEach(Tn(e,n));return r.length>0?r:Object.assign([],{empty:!0},o.streamInfo())},parseDocument:xs,stringify:function(e,t,n){let s=null;if("function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t),"string"==typeof n&&(n=n.length),"number"==typeof n){const e=Math.round(n);n=e<1?void 0:e>8?{indent:8}:{indent:e}}if(void 0===e){const{keepUndefined:e}=n??t??{};if(!e)return}return fe(e)&&!s?e.toString(n):new En(e,s,n).toString(n)},visit:ve,visitAsync:Ee});const Ls=["gpt-","o1","o3","o4"];function Cs(e){if(!e)return[];const t=[];let n="",s=!1,i=!1;for(let o=0;o<e.length;o++){const r=e[o];'"'!==r||i?"'"!==r||s?" "!==r||s||i?n+=r:n&&(t.push(n),n=""):i=!i:s=!s}return n&&t.push(n),t}const _s="--model gemini/gemini-2.5-pro-preview-05-06 --edit-format diff-fenced --chat-language English",Bs='--compress --remove-empty-lines --include "src/**/*.{ts,tsx},**/*.md"';async function Ms(e,n,s){const{ignoreExitStatus:i,...o}=s??{};console.info(c.green(`$ ${e} ${n}`)),console.info("stdout: ---------------------");const r=await async function(e,n,s){return new Promise(((i,o)=>{try{const r=t(e,n??[],s);r.stdout?.setEncoding?.("utf8"),r.stderr?.setEncoding?.("utf8");let a="",c="";r.stdout?.on("data",(e=>{process.stdout.write(e),a+=e})),r.stderr?.on("data",(e=>{c+=e})),r.on("error",(e=>{o(e)})),r.on("close",((e,t)=>{void 0===r.pid?o(new Error("Process has no pid.")):i({pid:r.pid,stdout:a,stderr:c,status:e,signal:t})}))}catch(e){o(e)}}))}(e,n,o),a=r.stderr.trim();return a&&(console.info("stderr: ---------------------"),console.info(c.yellow(a))),console.info("-----------------------------"),console.info(c.magenta(`Exit code: ${r.status}\n`)),i||0===r.status||null===r.status||process.exit(r.status),r.stdout}const Ks="repomix.result";async function js(e,t,s,i,o){const{url:r,apiKey:a}=function(e){let t,n;return e.startsWith("gemini-")?(t="https://generativelanguage.googleapis.com/v1beta/openai/chat/completions",n=process.env.GEMINI_API_KEY||""):Ls.some((t=>e.startsWith(t)))?(t="https://api.openai.com/v1/chat/completions",n=process.env.OPENAI_API_KEY||""):(console.error(`Unknown model: ${e}`),process.exit(1)),{url:t,apiKey:n}}(e),c=["--yes","repomix@latest","--output",Ks];c.push(...Cs(o||Bs)),await Ms("npx",c);const l=n.readFileSync(Ks,"utf8");n.promises.rm(Ks,{force:!0});const u=s?"# Plan to Resolve the Issue\n\n1. <Description of step 1>\n2. <Description of step 2>\n3. ...\n\n":"",f=`\nReview the following GitHub issue and the following list of available file paths and their contents.\nBased on this information, please perform the following tasks:\n\n- Create a step-by-step plan outlining how to address the GitHub issue. The plan must focus on writing code excluding tests.\n${s?"\n- Identify the files from the provided list that will need to be modified to implement the plan and resolve the issue.":""}\n\nGitHub Issue:\n\`\`\`\`yml\n${$s.stringify(t).trim()}\n\`\`\`\`\n\nAvailable files: The user will provide this as a separate message.\n\nPlease format your response as follows:\n\`\`\`\n${u}# File Paths to be Modified\n\n- \`<filePath1>\`\n- \`<filePath2>\`\n- ...\n\`\`\`\n\nEnsure that the file paths are exactly as provided in the input.\n`.trim();console.info(`Generating plan with ${e} (reasoning effort: ${i}) ...`);const h=await async function(e,t,n,s,i){t||(console.error(`API key for ${n} is not set.`),process.exit(1));const o={model:n,messages:s};void 0!==i&&(o.reasoning_effort=i);const r=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(o)});if(!r.ok){const e=await r.text();console.error(`LLM API error: ${r.statusText} (${r.status}): ${e}`),process.exit(1)}return(await r.json()).choices[0].message.content}(r,a,e,[{role:"system",content:f},{role:"user",content:l}],i);console.info("Planning complete!");const d="# Plan to Resolve the Issue",p="# File Paths to be Modified";let m,g=[];const y=h.indexOf(d),b=h.indexOf(p);if(-1!==y){const e=y+27,t=-1!==b?b:h.length;m=h.slice(e,t).trim()}if(-1!==b){const e=b+27,t=/\B-\s*`?([^`\n]+)`?/g;g=[...h.slice(e).trim().matchAll(t)].map((e=>e[1].trim()))}return{plan:m,filePaths:g}}async function Ps({aiderExtraArgs:t,detailedPlan:n,dryRun:s,issueNumber:i,planningModel:o,reasoningEffort:r,repomixExtraArgs:a}){s?console.info(c.yellow("Running in dry-run mode. No branches or PRs will be created.")):await async function(){if(!(await Ms("git",["config","user.name"],{ignoreExitStatus:!0})).trim()){const e=(await Ms("gh",["api","user","--jq",".name"])).trim();if(e&&"null"!==e){const t=e.replace(/^"|"$/g,"");await Ms("git",["config","user.name",t])}else console.warn(c.yellow('Could not retrieve user name from GitHub profile (it might be "null" or not set).'))}if(!(await Ms("git",["config","user.email"],{ignoreExitStatus:!0})).trim()){const e=(await Ms("gh",["api","user","--jq",".email"])).trim();if(e&&"null"!==e){const t=e.replace(/^"|"$/g,"");await Ms("git",["config","user.email",t])}else console.warn(c.yellow('Could not retrieve user email from GitHub profile (it might be "null", private, or not set).'))}}(),await Ms("python",["-m","pip","install","aider-install"]),await Ms("uv",["tool","uninstall","aider-chat"],{ignoreExitStatus:!0}),await Ms("aider-install",[]),await Ms("uv",["tool","run","--from","aider-chat","pip","install","boto3"]);const l=await Ms("gh",["issue","view",i.toString(),"--json","author,title,body,labels,comments"]),u=JSON.parse(l),f=u.body.replace(/<!--[\s\S]*?-->/g,"");const h={author:u.author.login,title:u.title,description:f,comments:u.comments.map((e=>({author:e.author.login,body:e.body})))},d=$s.stringify(h).trim(),p=o&&await js(o,d,n,r,a),m=p&&"plan"in p&&p.plan?`\n# Plan\n\n${p.plan}\n`.trim():"",g=`\nModify the code to resolve the following GitHub issue:\n\`\`\`\`yml\n${d}\n\`\`\`\`\n\n${m}\n`.trim(),y=new Date,b=`ai-pr-${i}-${y.getFullYear()}_${Ds(y.getMonth()+1)}${Ds(y.getDate())}_${Ds(y.getHours())}${Ds(y.getMinutes())}${Ds(y.getSeconds())}`;s?console.info(c.yellow(`Would create branch: ${b}`)):await Ms("git",["switch","-C",b]);const w=["--yes-always","--no-check-update","--no-gitignore","--no-show-model-warnings","--no-show-release-notes"];w.push(...Cs(t||_s)),s&&w.push("--dry-run"),w.push("--message",g),p&&"filePaths"in p&&w.push(...p.filePaths);const k=(await Ms("aider",w,{env:{...process.env,FORCE_COLOR:""}})).trim();await Ms("git",["commit","-m",`fix: close #${i}`,"--no-verify"],{ignoreExitStatus:!0}),s?console.info(c.yellow(`Would push branch: ${b} to origin`)):await Ms("git",["push","origin",b,"--no-verify"]);const v=e.spawnSync("git",["log","main..HEAD","--reverse","--pretty=%s"],{encoding:"utf8",stdio:"pipe"}).stdout.trim().split("\n")[0];let S=`Closes #${i}\n\n${m}\n`;if(S+=`\n# Aider Log\n\n\`\`\`\`\n${k.slice(0,65e3-S.length)}\n\`\`\`\``,S=S.replaceAll(/(?:\s*\n){2,}/g,"\n\n").trim(),s)console.info(c.yellow(`Would create PR with title: ${v}`)),console.info(c.yellow(`PR body would include the aider response and close issue #${i}`));else{const t=function(){const t=e.spawnSync("git",["remote","get-url","origin"],{encoding:"utf8",stdio:"pipe"}),n=t.stdout.trim().match(/github\.com[\/:]([\w-]+\/[\w-]+)(\.git)?$/);return n?n[1]:""}();await Ms("gh",["pr","create","--title",v,"--body",S,"--repo",t])}console.info(`\nIssue #${i} processed successfully.`),console.info("AWS_REGION_NAME:",process.env.AWS_REGION_NAME)}function Ds(e){return String(e).padStart(2,"0")}export{_s as D,Bs as a,s as c,i as g,Ps as m};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1CbHpaTDhlOC5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2Fuc2lzL2luZGV4LmNqcyIsIi4uL25vZGVfbW9kdWxlcy9hbnNpcy9pbmRleC5tanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvaWRlbnRpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvdmlzaXQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2RpcmVjdGl2ZXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FuY2hvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FwcGx5UmV2aXZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy90b0pTLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL05vZGUuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvQWxpYXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvU2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9jcmVhdGVOb2RlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL0NvbGxlY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeUNvbW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L2ZvbGRGbG93TGluZXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2xvZy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvYWRkUGFpclRvSlNNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvUGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9ZQU1MTWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb21tb24vbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL1lBTUxTZXEuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zZXEuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9udWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb3JlL2Jvb2wuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9mbG9hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9pbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvcmUvc2NoZW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9qc29uL3NjaGVtYS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYmluYXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9wYWlycy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvb21hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYm9vbC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvZmxvYXQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL2ludC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS90aW1lc3RhbXAuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3NjaGVtYS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvdGFncy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvU2NoZW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9Eb2N1bWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5RG9jdW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1wcm9wcy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLW1hcC1pbmNsdWRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1lbmQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2UtY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stc2VxLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1zY2FsYXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2Utbm9kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1kb2MuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvY3N0LXNjYWxhci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3Qtc3RyaW5naWZ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC12aXNpdC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3QuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGV4ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGluZS1jb3VudGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL3BhcnNlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wdWJsaWMtYXBpLmpzIiwiLi4vc3JjL2xsbS50cyIsIi4uL3NyYy91dGlscy50cyIsIi4uL3NyYy9kZWZhdWx0T3B0aW9ucy50cyIsIi4uL3NyYy9zcGF3bi50cyIsIi4uL3NyYy9wbGFuLnRzIiwiLi4vc3JjL21haW4udHMiLCIuLi9zcmMvcHJvZmlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZSx0LHIse2RlZmluZVByb3BlcnR5Om4sc2V0UHJvdG90eXBlT2Y6bCxjcmVhdGU6byxrZXlzOnN9PU9iamVjdCxpPVwiXCIse3JvdW5kOmMsbWF4OmF9PU1hdGgscD1lPT57bGV0IHQ9LyhbYS1mXFxkXXszLDZ9KS9pLmV4ZWMoZSk/LlsxXSxyPXQ/Lmxlbmd0aCxuPXBhcnNlSW50KDZecj8zXnI/XCIwXCI6dFswXSt0WzBdK3RbMV0rdFsxXSt0WzJdK3RbMl06dCwxNik7cmV0dXJuW24+PjE2JjI1NSxuPj44JjI1NSwyNTUmbl19LHU9KGUsdCxyKT0+ZV50fHx0XnI/MTYrMzYqYyhlLzUxKSs2KmModC81MSkrYyhyLzUxKTo4PmU/MTY6ZT4yNDg/MjMxOmMoMjQqKGUtOCkvMjQ3KSsyMzIsZD1lPT57bGV0IHQscixuLGwsbztyZXR1cm4gOD5lPzMwK2U6MTY+ZT9lLTgrOTA6KDIzMj5lPyhvPShlLT0xNiklMzYsdD0oZS8zNnwwKS81LHI9KG8vNnwwKS81LG49byU2LzUpOnQ9cj1uPSgxMCooZS0yMzIpKzgpLzI1NSxsPTIqYSh0LHIsbiksbD8zMCsoYyhuKTw8MnxjKHIpPDwxfGModCkpKygyXmw/MDo2MCk6MzApfSxnPSgoKT0+e2xldCByPWU9Pm8uc29tZSgodD0+ZS50ZXN0KHQpKSksbj1nbG9iYWxUaGlzLGw9bi5wcm9jZXNzPz97fSxvPWwuYXJndj8/W10saT1sLmVudj8/e30sYz0tMTt0cnl7ZT1cIixcIitzKGkpLmpvaW4oXCIsXCIpfWNhdGNoKGUpe2k9e30sYz0wfWxldCBhPVwiRk9SQ0VfQ09MT1JcIixwPXtmYWxzZTowLDA6MCwxOjEsMjoyLDM6M31baVthXV0/Py0xLHU9YSBpbiBpJiZwfHxyKC9eLS1jb2xvcj0/KHRydWV8YWx3YXlzKT8kLyk7cmV0dXJuIHUmJihjPXApLH5jfHwoYz0oKHIsbixsKT0+KHQ9ci5URVJNLHtcIjI0Yml0XCI6Myx0cnVlY29sb3I6MyxhbnNpMjU2OjIsYW5zaToxfVtyLkNPTE9SVEVSTV18fChyLkNJPy8sR0lUSFVCLy50ZXN0KGUpPzM6MTpuJiZcImR1bWJcIiE9PXQ/bD8zOi8tMjU2Ly50ZXN0KHQpPzI6MTowKSkpKGksISFpLlBNMl9IT01FfHxpLk5FWFRfUlVOVElNRT8uaW5jbHVkZXMoXCJlZGdlXCIpfHwhIWwuc3Rkb3V0Py5pc1RUWSxcIndpbjMyXCI9PT1sLnBsYXRmb3JtKSksIXB8fGkuTk9fQ09MT1J8fHIoL14tLShuby1jb2xvcnxjb2xvcj0oZmFsc2V8bmV2ZXIpKSQvKT8wOm4ud2luZG93Py5jaHJvbWV8fHUmJiFjPzM6Y30pKCksZj17b3BlbjppLGNsb3NlOml9LGg9MzksYj00OSxPPXt9LG09KHtwOmV9LHtvcGVuOnQsY2xvc2U6bn0pPT57bGV0IG89KGUsLi4ucik9PntpZighZSl7aWYodCYmdD09PW4pcmV0dXJuIHQ7aWYoKGU/P2kpPT09aSlyZXR1cm4gaX1sZXQgbCxzPWUucmF3P1N0cmluZy5yYXcoe3JhdzplfSwuLi5yKTppK2UsYz1vLnAsYT1jLm8scD1jLmM7aWYocy5pbmNsdWRlcyhcIlx1MDAxYlwiKSlmb3IoO2M7Yz1jLnApe2xldHtvcGVuOmUsY2xvc2U6dH09YyxyPXQubGVuZ3RoLG49aSxvPTA7aWYocilmb3IoO34obD1zLmluZGV4T2YodCxvKSk7bz1sK3Ipbis9cy5zbGljZShvLGwpK2U7cz1uK3Muc2xpY2Uobyl9cmV0dXJuIGErKHMuaW5jbHVkZXMoXCJcXG5cIik/cy5yZXBsYWNlKC8oXFxyP1xcbikvZyxwK1wiJDFcIithKTpzKStwfSxzPXQsYz1uO3JldHVybiBlJiYocz1lLm8rdCxjPW4rZS5jKSxsKG8sciksby5wPXtvcGVuOnQsY2xvc2U6bixvOnMsYyxwOmV9LG8ub3Blbj1zLG8uY2xvc2U9YyxvfTtjb25zdCB3PWZ1bmN0aW9uKGU9Zyl7bGV0IHQ9e0Fuc2lzOncsaXNTdXBwb3J0ZWQ6KCk9PnMsc3RyaXA6ZT0+ZS5yZXBsYWNlKC9bXHUwMDFiwptdW1soKSM7P10qKD86WzAtOV17MSw0fSg/OjtbMC05XXswLDR9KSopP1swLTlBLU9SWmNmLW5xcnk9PjxdL2csaSksZXh0ZW5kKGUpe2ZvcihsZXQgdCBpbiBlKXtsZXQgcj1lW3RdLGw9KHR5cGVvZiByKVswXSxvPVwic1wiPT09bD94KC4uLnAocikpOnI7T1t0XT1cImZcIj09PWw/e2dldCgpe3JldHVybiguLi5lKT0+bSh0aGlzLHIoLi4uZSkpfX06e2dldCgpe2xldCBlPW0odGhpcyxvKTtyZXR1cm4gbih0aGlzLHQse3ZhbHVlOmV9KSxlfX19cmV0dXJuIHI9byh7fSxPKSxsKHQsciksdH19LHM9ZT4wLGM9KGUsdCk9PnM/e29wZW46YFx1MDAxYlske2V9bWAsY2xvc2U6YFx1MDAxYlske3R9bWB9OmYsYT1lPT50PT5lKC4uLnAodCkpLHk9KGUsdCk9PihyLG4sbCk9PmMoYCR7ZX04OzI7JHtyfTske259OyR7bH1gLHQpLFI9KGUsdCk9PihyLG4sbCk9PmMoKChlLHQscik9PmQodShlLHQscikpKShyLG4sbCkrZSx0KSwkPWU9Pih0LHIsbik9PmUodSh0LHIsbikpLHg9eSgzLGgpLFQ9eSg0LGIpLHY9ZT0+YyhcIjM4OzU7XCIrZSxoKSxDPWU9PmMoXCI0ODs1O1wiK2UsYik7Mj09PWU/KHg9JCh2KSxUPSQoQykpOjE9PT1lJiYoeD1SKDAsaCksVD1SKDEwLGIpLHY9ZT0+YyhkKGUpLGgpLEM9ZT0+YyhkKGUpKzEwLGIpKTtsZXQgRSxNPXtmZzp2LGJnOkMscmdiOngsYmdSZ2I6VCxoZXg6YSh4KSxiZ0hleDphKFQpLHZpc2libGU6ZixyZXNldDpjKDAsMCksYm9sZDpjKDEsMjIpLGRpbTpjKDIsMjIpLGl0YWxpYzpjKDMsMjMpLHVuZGVybGluZTpjKDQsMjQpLGludmVyc2U6Yyg3LDI3KSxoaWRkZW46Yyg4LDI4KSxzdHJpa2V0aHJvdWdoOmMoOSwyOSl9LEk9XCJCcmlnaHRcIjtyZXR1cm5cImJsYWNrLHJlZCxncmVlbix5ZWxsb3csYmx1ZSxtYWdlbnRhLGN5YW4sd2hpdGUsZ3JheVwiLnNwbGl0KFwiLFwiKS5tYXAoKChlLHQpPT57RT1cImJnXCIrZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksOD50PyhNW2UrSV09Yyg5MCt0LGgpLE1bRStJXT1jKDEwMCt0LGIpKTp0PTYwLE1bZV09YygzMCt0LGgpLE1bRV09Yyg0MCt0LGIpfSkpLHQuZXh0ZW5kKE0pfSx5PW5ldyB3O21vZHVsZS5leHBvcnRzPXkseS5kZWZhdWx0PXk7XG4iLCJpbXBvcnQgYSBmcm9tXCIuL2luZGV4LmNqc1wiO2V4cG9ydCBkZWZhdWx0IGE7ZXhwb3J0IGNvbnN0e0Fuc2lzLGZnLGJnLHJnYixiZ1JnYixoZXgsYmdIZXgscmVzZXQsaW52ZXJzZSxoaWRkZW4sdmlzaWJsZSxib2xkLGRpbSxpdGFsaWMsdW5kZXJsaW5lLHN0cmlrZXRocm91Z2gsYmxhY2sscmVkLGdyZWVuLHllbGxvdyxibHVlLG1hZ2VudGEsY3lhbix3aGl0ZSxncmF5LHJlZEJyaWdodCxncmVlbkJyaWdodCx5ZWxsb3dCcmlnaHQsYmx1ZUJyaWdodCxtYWdlbnRhQnJpZ2h0LGN5YW5CcmlnaHQsd2hpdGVCcmlnaHQsYmdCbGFjayxiZ1JlZCxiZ0dyZWVuLGJnWWVsbG93LGJnQmx1ZSxiZ01hZ2VudGEsYmdDeWFuLGJnV2hpdGUsYmdHcmF5LGJnUmVkQnJpZ2h0LGJnR3JlZW5CcmlnaHQsYmdZZWxsb3dCcmlnaHQsYmdCbHVlQnJpZ2h0LGJnTWFnZW50YUJyaWdodCxiZ0N5YW5CcmlnaHQsYmdXaGl0ZUJyaWdodH09YTsiLCJjb25zdCBBTElBUyA9IFN5bWJvbC5mb3IoJ3lhbWwuYWxpYXMnKTtcbmNvbnN0IERPQyA9IFN5bWJvbC5mb3IoJ3lhbWwuZG9jdW1lbnQnKTtcbmNvbnN0IE1BUCA9IFN5bWJvbC5mb3IoJ3lhbWwubWFwJyk7XG5jb25zdCBQQUlSID0gU3ltYm9sLmZvcigneWFtbC5wYWlyJyk7XG5jb25zdCBTQ0FMQVIgPSBTeW1ib2wuZm9yKCd5YW1sLnNjYWxhcicpO1xuY29uc3QgU0VRID0gU3ltYm9sLmZvcigneWFtbC5zZXEnKTtcbmNvbnN0IE5PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3lhbWwubm9kZS50eXBlJyk7XG5jb25zdCBpc0FsaWFzID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBBTElBUztcbmNvbnN0IGlzRG9jdW1lbnQgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IERPQztcbmNvbnN0IGlzTWFwID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBNQVA7XG5jb25zdCBpc1BhaXIgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFBBSVI7XG5jb25zdCBpc1NjYWxhciA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0NBTEFSO1xuY29uc3QgaXNTZXEgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFNFUTtcbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBBTElBUzpcbiAgICAgICAgICAgIGNhc2UgTUFQOlxuICAgICAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IGhhc0FuY2hvciA9IChub2RlKSA9PiAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiAhIW5vZGUuYW5jaG9yO1xuXG5leHBvcnQgeyBBTElBUywgRE9DLCBNQVAsIE5PREVfVFlQRSwgUEFJUiwgU0NBTEFSLCBTRVEsIGhhc0FuY2hvciwgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc0RvY3VtZW50LCBpc01hcCwgaXNOb2RlLCBpc1BhaXIsIGlzU2NhbGFyLCBpc1NlcSB9O1xuIiwiaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNNYXAsIGlzU2VxLCBpc1NjYWxhciwgaXNBbGlhcyB9IGZyb20gJy4vbm9kZXMvaWRlbnRpdHkuanMnO1xuXG5jb25zdCBCUkVBSyA9IFN5bWJvbCgnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGRyZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIG5vZGUnKTtcbi8qKlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGFuIEFTVCBub2RlIG9yIGRvY3VtZW50LlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIGBub2RlYCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYGtleWA6IEZvciBzZXF1ZW5jZSB2YWx1ZXMgYW5kIG1hcCBgUGFpcmAsIHRoZSBub2RlJ3MgaW5kZXggaW4gdGhlXG4gKiAgICAgY29sbGVjdGlvbi4gV2l0aGluIGEgYFBhaXJgLCBgJ2tleSdgIG9yIGAndmFsdWUnYCwgY29ycmVzcG9uZGluZ2x5LlxuICogICAgIGBudWxsYCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAqICAgLSBgbm9kZWA6IFRoZSBjdXJyZW50IG5vZGUuXG4gKiAgIC0gYHBhdGhgOiBUaGUgYW5jZXN0cnkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgY29udGludWUgd2l0aCBuZXh0XG4gKiAgICAgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBOb2RlYDogUmVwbGFjZSB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIGJ5IHZpc2l0aW5nIGl0XG4gKiAgIC0gYG51bWJlcmA6IFdoaWxlIGl0ZXJhdGluZyB0aGUgaXRlbXMgb2YgYSBzZXF1ZW5jZSBvciBtYXAsIHNldCB0aGUgaW5kZXhcbiAqICAgICBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudFxuICogICAgIG5vZGUgaGFzIGNoYW5nZWQuXG4gKlxuICogSWYgYHZpc2l0b3JgIGlzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB2YWx1ZXNcbiAqIGVuY291bnRlcmVkIGluIHRoZSB0cmVlLCBpbmNsdWRpbmcgZS5nLiBgbnVsbGAgdmFsdWVzLiBBbHRlcm5hdGl2ZWx5LFxuICogc2VwYXJhdGUgdmlzaXRvciBmdW5jdGlvbnMgbWF5IGJlIGRlZmluZWQgZm9yIGVhY2ggYE1hcGAsIGBQYWlyYCwgYFNlcWAsXG4gKiBgQWxpYXNgIGFuZCBgU2NhbGFyYCBub2RlLiBUbyBkZWZpbmUgdGhlIHNhbWUgdmlzaXRvciBmdW5jdGlvbiBmb3IgbW9yZSB0aGFuXG4gKiBvbmUgbm9kZSB0eXBlLCB1c2UgdGhlIGBDb2xsZWN0aW9uYCAobWFwIGFuZCBzZXEpLCBgVmFsdWVgIChtYXAsIHNlcSAmIHNjYWxhcilcbiAqIGFuZCBgTm9kZWAgKGFsaWFzLCBtYXAsIHNlcSAmIHNjYWxhcikgdGFyZ2V0cy4gT2YgYWxsIHRoZXNlLCBvbmx5IHRoZSBtb3N0XG4gKiBzcGVjaWZpYyBkZWZpbmVkIG9uZSB3aWxsIGJlIHVzZWQgZm9yIGVhY2ggbm9kZS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSB2aXNpdF8obnVsbCwgbm9kZS5jb250ZW50cywgdmlzaXRvcl8sIE9iamVjdC5mcmVlemUoW25vZGVdKSk7XG4gICAgICAgIGlmIChjZCA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgbm9kZS5jb250ZW50cyA9IG51bGw7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgdmlzaXRfKG51bGwsIG5vZGUsIHZpc2l0b3JfLCBPYmplY3QuZnJlZXplKFtdKSk7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuZnVuY3Rpb24gdmlzaXRfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdF8oa2V5LCBjdHJsLCB2aXNpdG9yLCBwYXRoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjdHJsICE9PSAnc3ltYm9sJykge1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXRoID0gT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChub2RlKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaSA9IHZpc2l0XyhpLCBub2RlLml0ZW1zW2ldLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgY29uc3QgY2sgPSB2aXNpdF8oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IHZpc2l0XygndmFsdWUnLCBub2RlLnZhbHVlLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjdiA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY3YgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3RybDtcbn1cbi8qKlxuICogQXBwbHkgYW4gYXN5bmMgdmlzaXRvciB0byBhbiBBU1Qgbm9kZSBvciBkb2N1bWVudC5cbiAqXG4gKiBXYWxrcyB0aHJvdWdoIHRoZSB0cmVlIChkZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSBgbm9kZWAsIGNhbGxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogICAtIGBrZXlgOiBGb3Igc2VxdWVuY2UgdmFsdWVzIGFuZCBtYXAgYFBhaXJgLCB0aGUgbm9kZSdzIGluZGV4IGluIHRoZVxuICogICAgIGNvbGxlY3Rpb24uIFdpdGhpbiBhIGBQYWlyYCwgYCdrZXknYCBvciBgJ3ZhbHVlJ2AsIGNvcnJlc3BvbmRpbmdseS5cbiAqICAgICBgbnVsbGAgZm9yIHRoZSByb290IG5vZGUuXG4gKiAgIC0gYG5vZGVgOiBUaGUgY3VycmVudCBub2RlLlxuICogICAtIGBwYXRoYDogVGhlIGFuY2VzdHJ5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0cmF2ZXJzYWw6XG4gKiAgIC0gYFByb21pc2VgOiBNdXN0IHJlc29sdmUgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzXG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQYDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsIGNvbnRpbnVlIHdpdGggbmV4dFxuICogICAgIHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQUtgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQuUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUsIHRoZW4gY29udGludWUgd2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgTm9kZWA6IFJlcGxhY2UgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSBieSB2aXNpdGluZyBpdFxuICogICAtIGBudW1iZXJgOiBXaGlsZSBpdGVyYXRpbmcgdGhlIGl0ZW1zIG9mIGEgc2VxdWVuY2Ugb3IgbWFwLCBzZXQgdGhlIGluZGV4XG4gKiAgICAgb2YgdGhlIG5leHQgc3RlcC4gVGhpcyBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZiB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnRcbiAqICAgICBub2RlIGhhcyBjaGFuZ2VkLlxuICpcbiAqIElmIGB2aXNpdG9yYCBpcyBhIHNpbmdsZSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdmFsdWVzXG4gKiBlbmNvdW50ZXJlZCBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nIGUuZy4gYG51bGxgIHZhbHVlcy4gQWx0ZXJuYXRpdmVseSxcbiAqIHNlcGFyYXRlIHZpc2l0b3IgZnVuY3Rpb25zIG1heSBiZSBkZWZpbmVkIGZvciBlYWNoIGBNYXBgLCBgUGFpcmAsIGBTZXFgLFxuICogYEFsaWFzYCBhbmQgYFNjYWxhcmAgbm9kZS4gVG8gZGVmaW5lIHRoZSBzYW1lIHZpc2l0b3IgZnVuY3Rpb24gZm9yIG1vcmUgdGhhblxuICogb25lIG5vZGUgdHlwZSwgdXNlIHRoZSBgQ29sbGVjdGlvbmAgKG1hcCBhbmQgc2VxKSwgYFZhbHVlYCAobWFwLCBzZXEgJiBzY2FsYXIpXG4gKiBhbmQgYE5vZGVgIChhbGlhcywgbWFwLCBzZXEgJiBzY2FsYXIpIHRhcmdldHMuIE9mIGFsbCB0aGVzZSwgb25seSB0aGUgbW9zdFxuICogc3BlY2lmaWMgZGVmaW5lZCBvbmUgd2lsbCBiZSB1c2VkIGZvciBlYWNoIG5vZGUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmMobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLmNvbnRlbnRzLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbbm9kZV0pKTtcbiAgICAgICAgaWYgKGNkID09PSBSRU1PVkUpXG4gICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbXSkpO1xufVxuLy8gV2l0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlIGluIHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aGVuIGNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9sYCBtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNhbCBjb21wbGV0ZWx5ICovXG52aXNpdEFzeW5jLkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlJFTU9WRSA9IFJFTU9WRTtcbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmNfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBhd2FpdCBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdEFzeW5jXyhrZXksIGN0cmwsIHZpc2l0b3IsIHBhdGgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGN0cmwgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0gYXdhaXQgdmlzaXRBc3luY18oaSwgbm9kZS5pdGVtc1tpXSwgdmlzaXRvciwgcGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBjaSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGNvbnN0IGNrID0gYXdhaXQgdmlzaXRBc3luY18oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IGF3YWl0IHZpc2l0QXN5bmNfKCd2YWx1ZScsIG5vZGUudmFsdWUsIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGN2ID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjdiA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdHJsO1xufVxuZnVuY3Rpb24gaW5pdFZpc2l0b3IodmlzaXRvcikge1xuICAgIGlmICh0eXBlb2YgdmlzaXRvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgKHZpc2l0b3IuQ29sbGVjdGlvbiB8fCB2aXNpdG9yLk5vZGUgfHwgdmlzaXRvci5WYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgQWxpYXM6IHZpc2l0b3IuTm9kZSxcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5Ob2RlLFxuICAgICAgICAgICAgU2NhbGFyOiB2aXNpdG9yLk5vZGUsXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuTm9kZVxuICAgICAgICB9LCB2aXNpdG9yLlZhbHVlICYmIHtcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNjYWxhcjogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNlcTogdmlzaXRvci5WYWx1ZVxuICAgICAgICB9LCB2aXNpdG9yLkNvbGxlY3Rpb24gJiYge1xuICAgICAgICAgICAgTWFwOiB2aXNpdG9yLkNvbGxlY3Rpb24sXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuQ29sbGVjdGlvblxuICAgICAgICB9LCB2aXNpdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc2l0b3I7XG59XG5mdW5jdGlvbiBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHZpc2l0b3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aXNpdG9yKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzTWFwKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5NYXA/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1NlcShub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2VxPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNQYWlyKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5QYWlyPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNTY2FsYXIobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLlNjYWxhcj8uKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzQWxpYXMobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLkFsaWFzPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBub2RlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIGlmIChpc0NvbGxlY3Rpb24ocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuaXRlbXNba2V5XSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihwYXJlbnQpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdrZXknKVxuICAgICAgICAgICAgcGFyZW50LmtleSA9IG5vZGU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcmVudC52YWx1ZSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbnQocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuY29udGVudHMgPSBub2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcHQgPSBpc0FsaWFzKHBhcmVudCkgPyAnYWxpYXMnIDogJ3NjYWxhcic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlcGxhY2Ugbm9kZSB3aXRoICR7cHR9IHBhcmVudGApO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgdmlzaXQsIHZpc2l0QXN5bmMgfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAnLi4vdmlzaXQuanMnO1xuXG5jb25zdCBlc2NhcGVDaGFycyA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgICcsJzogJyUyQycsXG4gICAgJ1snOiAnJTVCJyxcbiAgICAnXSc6ICclNUQnLFxuICAgICd7JzogJyU3QicsXG4gICAgJ30nOiAnJTdEJ1xufTtcbmNvbnN0IGVzY2FwZVRhZ05hbWUgPSAodG4pID0+IHRuLnJlcGxhY2UoL1shLFtcXF17fV0vZywgY2ggPT4gZXNjYXBlQ2hhcnNbY2hdKTtcbmNsYXNzIERpcmVjdGl2ZXMge1xuICAgIGNvbnN0cnVjdG9yKHlhbWwsIHRhZ3MpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkaXJlY3RpdmVzLWVuZC9kb2Mtc3RhcnQgbWFya2VyIGAtLS1gLiBJZiBgbnVsbGAsIGEgbWFya2VyIG1heSBzdGlsbCBiZVxuICAgICAgICAgKiBpbmNsdWRlZCBpbiB0aGUgZG9jdW1lbnQncyBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZG9jU3RhcnQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIGRvYy1lbmQgbWFya2VyIGAuLi5gLiAgKi9cbiAgICAgICAgdGhpcy5kb2NFbmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55YW1sID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0WWFtbCwgeWFtbCk7XG4gICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MsIHRhZ3MpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgY29weS5kb2NTdGFydCA9IHRoaXMuZG9jU3RhcnQ7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEdXJpbmcgcGFyc2luZywgZ2V0IGEgRGlyZWN0aXZlcyBpbnN0YW5jZSBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kXG4gICAgICogdXBkYXRlIHRoZSBzdHJlYW0gc3RhdGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHZlcnNpb24ncyBzcGVjLlxuICAgICAqL1xuICAgIGF0RG9jdW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnlhbWwudmVyc2lvbikge1xuICAgICAgICAgICAgY2FzZSAnMS4xJzpcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMueWFtbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXQ6IERpcmVjdGl2ZXMuZGVmYXVsdFlhbWwuZXhwbGljaXQsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBEaXJlY3RpdmVzLmRlZmF1bHRUYWdzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25FcnJvciAtIE1heSBiZSBjYWxsZWQgZXZlbiBpZiB0aGUgYWN0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBhZGQobGluZSwgb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5hdE5leHREb2N1bWVudCkge1xuICAgICAgICAgICAgdGhpcy55YW1sID0geyBleHBsaWNpdDogRGlyZWN0aXZlcy5kZWZhdWx0WWFtbC5leHBsaWNpdCwgdmVyc2lvbjogJzEuMScgfTtcbiAgICAgICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MpO1xuICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gbGluZS50cmltKCkuc3BsaXQoL1sgXFx0XSsvKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnJVRBRyc6IHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoMCwgJyVUQUcgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgdHdvIHBhcnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbaGFuZGxlLCBwcmVmaXhdID0gcGFydHM7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzW2hhbmRsZV0gPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICclWUFNTCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnlhbWwuZXhwbGljaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcigwLCAnJVlBTUwgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHBhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbdmVyc2lvbl0gPSBwYXJ0cztcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gJzEuMScgfHwgdmVyc2lvbiA9PT0gJzEuMicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55YW1sLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSAvXlxcZCtcXC5cXGQrJC8udGVzdCh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcig2LCBgVW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uICR7dmVyc2lvbn1gLCBpc1ZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb25FcnJvcigwLCBgVW5rbm93biBkaXJlY3RpdmUgJHtuYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyBhIHRhZywgbWF0Y2hpbmcgaGFuZGxlcyB0byB0aG9zZSBkZWZpbmVkIGluICVUQUcgZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVkIHRhZywgd2hpY2ggbWF5IGFsc28gYmUgdGhlIG5vbi1zcGVjaWZpYyB0YWcgYCchJ2Agb3IgYVxuICAgICAqICAgYCchbG9jYWwnYCB0YWcsIG9yIGBudWxsYCBpZiB1bnJlc29sdmFibGUuXG4gICAgICovXG4gICAgdGFnTmFtZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuICchJzsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgICAgICBpZiAoc291cmNlWzBdICE9PSAnIScpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoYE5vdCBhIHZhbGlkIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlWzFdID09PSAnPCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHZlcmJhdGltID0gc291cmNlLnNsaWNlKDIsIC0xKTtcbiAgICAgICAgICAgIGlmICh2ZXJiYXRpbSA9PT0gJyEnIHx8IHZlcmJhdGltID09PSAnISEnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihgVmVyYmF0aW0gdGFncyBhcmVuJ3QgcmVzb2x2ZWQsIHNvICR7c291cmNlfSBpcyBpbnZhbGlkLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICc+JylcbiAgICAgICAgICAgICAgICBvbkVycm9yKCdWZXJiYXRpbSB0YWdzIG11c3QgZW5kIHdpdGggYSA+Jyk7XG4gICAgICAgICAgICByZXR1cm4gdmVyYmF0aW07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgWywgaGFuZGxlLCBzdWZmaXhdID0gc291cmNlLm1hdGNoKC9eKC4qISkoW14hXSopJC9zKTtcbiAgICAgICAgaWYgKCFzdWZmaXgpXG4gICAgICAgICAgICBvbkVycm9yKGBUaGUgJHtzb3VyY2V9IHRhZyBoYXMgbm8gc3VmZml4YCk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMudGFnc1toYW5kbGVdO1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBkZWNvZGVVUklDb21wb25lbnQoc3VmZml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTsgLy8gbG9jYWwgdGFnXG4gICAgICAgIG9uRXJyb3IoYENvdWxkIG5vdCByZXNvbHZlIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGZ1bGx5IHJlc29sdmVkIHRhZywgcmV0dXJucyBpdHMgcHJpbnRhYmxlIHN0cmluZyBmb3JtLFxuICAgICAqIHRha2luZyBpbnRvIGFjY291bnQgY3VycmVudCB0YWcgcHJlZml4ZXMgYW5kIGRlZmF1bHRzLlxuICAgICAqL1xuICAgIHRhZ1N0cmluZyh0YWcpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaGFuZGxlLCBwcmVmaXhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMudGFncykpIHtcbiAgICAgICAgICAgIGlmICh0YWcuc3RhcnRzV2l0aChwcmVmaXgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUgKyBlc2NhcGVUYWdOYW1lKHRhZy5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdbMF0gPT09ICchJyA/IHRhZyA6IGAhPCR7dGFnfT5gO1xuICAgIH1cbiAgICB0b1N0cmluZyhkb2MpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLnlhbWwuZXhwbGljaXRcbiAgICAgICAgICAgID8gW2AlWUFNTCAke3RoaXMueWFtbC52ZXJzaW9uIHx8ICcxLjInfWBdXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICBjb25zdCB0YWdFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy50YWdzKTtcbiAgICAgICAgbGV0IHRhZ05hbWVzO1xuICAgICAgICBpZiAoZG9jICYmIHRhZ0VudHJpZXMubGVuZ3RoID4gMCAmJiBpc05vZGUoZG9jLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgY29uc3QgdGFncyA9IHt9O1xuICAgICAgICAgICAgdmlzaXQoZG9jLmNvbnRlbnRzLCAoX2tleSwgbm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUobm9kZSkgJiYgbm9kZS50YWcpXG4gICAgICAgICAgICAgICAgICAgIHRhZ3Nbbm9kZS50YWddID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnTmFtZXMgPSBPYmplY3Qua2V5cyh0YWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0YWdOYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtoYW5kbGUsIHByZWZpeF0gb2YgdGFnRW50cmllcykge1xuICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEhJyAmJiBwcmVmaXggPT09ICd0YWc6eWFtbC5vcmcsMjAwMjonKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFkb2MgfHwgdGFnTmFtZXMuc29tZSh0biA9PiB0bi5zdGFydHNXaXRoKHByZWZpeCkpKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYCVUQUcgJHtoYW5kbGV9ICR7cHJlZml4fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICB9XG59XG5EaXJlY3RpdmVzLmRlZmF1bHRZYW1sID0geyBleHBsaWNpdDogZmFsc2UsIHZlcnNpb246ICcxLjInIH07XG5EaXJlY3RpdmVzLmRlZmF1bHRUYWdzID0geyAnISEnOiAndGFnOnlhbWwub3JnLDIwMDI6JyB9O1xuXG5leHBvcnQgeyBEaXJlY3RpdmVzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkIGFuY2hvci5cbiAqXG4gKiBXaWxsIHRocm93IG9uIGVycm9ycy5cbiAqL1xuZnVuY3Rpb24gYW5jaG9ySXNWYWxpZChhbmNob3IpIHtcbiAgICBpZiAoL1tcXHgwMC1cXHgxOVxccyxbXFxde31dLy50ZXN0KGFuY2hvcikpIHtcbiAgICAgICAgY29uc3Qgc2EgPSBKU09OLnN0cmluZ2lmeShhbmNob3IpO1xuICAgICAgICBjb25zdCBtc2cgPSBgQW5jaG9yIG11c3Qgbm90IGNvbnRhaW4gd2hpdGVzcGFjZSBvciBjb250cm9sIGNoYXJhY3RlcnM6ICR7c2F9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYW5jaG9yTmFtZXMocm9vdCkge1xuICAgIGNvbnN0IGFuY2hvcnMgPSBuZXcgU2V0KCk7XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBWYWx1ZShfa2V5LCBub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5hbmNob3IpXG4gICAgICAgICAgICAgICAgYW5jaG9ycy5hZGQobm9kZS5hbmNob3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuY2hvcnM7XG59XG4vKiogRmluZCBhIG5ldyBhbmNob3IgbmFtZSB3aXRoIHRoZSBnaXZlbiBgcHJlZml4YCBhbmQgYSBvbmUtaW5kZXhlZCBzdWZmaXguICovXG5mdW5jdGlvbiBmaW5kTmV3QW5jaG9yKHByZWZpeCwgZXhjbHVkZSkge1xuICAgIGZvciAobGV0IGkgPSAxOyB0cnVlOyArK2kpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke3ByZWZpeH0ke2l9YDtcbiAgICAgICAgaWYgKCFleGNsdWRlLmhhcyhuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVBbmNob3JzKGRvYywgcHJlZml4KSB7XG4gICAgY29uc3QgYWxpYXNPYmplY3RzID0gW107XG4gICAgY29uc3Qgc291cmNlT2JqZWN0cyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcHJldkFuY2hvcnMgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uQW5jaG9yOiAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBhbGlhc09iamVjdHMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCFwcmV2QW5jaG9ycylcbiAgICAgICAgICAgICAgICBwcmV2QW5jaG9ycyA9IGFuY2hvck5hbWVzKGRvYyk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBmaW5kTmV3QW5jaG9yKHByZWZpeCwgcHJldkFuY2hvcnMpO1xuICAgICAgICAgICAgcHJldkFuY2hvcnMuYWRkKGFuY2hvcik7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogV2l0aCBjaXJjdWxhciByZWZlcmVuY2VzLCB0aGUgc291cmNlIG5vZGUgaXMgb25seSByZXNvbHZlZCBhZnRlciBhbGxcbiAgICAgICAgICogb2YgaXRzIGNoaWxkIG5vZGVzIGFyZS4gVGhpcyBpcyB3aHkgYW5jaG9ycyBhcmUgc2V0IG9ubHkgYWZ0ZXIgYWxsIG9mXG4gICAgICAgICAqIHRoZSBub2RlcyBoYXZlIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNldEFuY2hvcnM6ICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIGFsaWFzT2JqZWN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNvdXJjZU9iamVjdHMuZ2V0KHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZi5hbmNob3IgJiZcbiAgICAgICAgICAgICAgICAgICAgKGlzU2NhbGFyKHJlZi5ub2RlKSB8fCBpc0NvbGxlY3Rpb24ocmVmLm5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZWYubm9kZS5hbmNob3IgPSByZWYuYW5jaG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXNvbHZlIHJlcGVhdGVkIG9iamVjdCAodGhpcyBzaG91bGQgbm90IGhhcHBlbiknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmNob3JJc1ZhbGlkLCBhbmNob3JOYW1lcywgY3JlYXRlTm9kZUFuY2hvcnMsIGZpbmROZXdBbmNob3IgfTtcbiIsIi8qKlxuICogQXBwbGllcyB0aGUgSlNPTi5wYXJzZSByZXZpdmVyIGFsZ29yaXRobSBhcyBkZWZpbmVkIGluIHRoZSBFQ01BLTI2MiBzcGVjLFxuICogaW4gc2VjdGlvbiAyNC41LjEuMSBcIlJ1bnRpbWUgU2VtYW50aWNzOiBJbnRlcm5hbGl6ZUpTT05Qcm9wZXJ0eVwiIG9mIHRoZVxuICogMjAyMSBlZGl0aW9uOiBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24ucGFyc2VcbiAqXG4gKiBJbmNsdWRlcyBleHRlbnNpb25zIGZvciBoYW5kbGluZyBNYXAgYW5kIFNldCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBhcHBseVJldml2ZXIocmV2aXZlciwgb2JqLCBrZXksIHZhbCkge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgU3RyaW5nKGkpLCB2MCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1hcnJheS1kZWxldGVcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFtpXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbFtpXSA9IHYxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrIG9mIEFycmF5LmZyb20odmFsLmtleXMoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MCA9IHZhbC5nZXQoayk7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbC5kZWxldGUoayk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWwuc2V0KGssIHYxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdjAgb2YgQXJyYXkuZnJvbSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCB2MCwgdjApO1xuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB2YWwuZGVsZXRlKHYwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZSh2MCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbC5hZGQodjEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHYwXSBvZiBPYmplY3QuZW50cmllcyh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWxba107XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWxba10gPSB2MTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKG9iaiwga2V5LCB2YWwpO1xufVxuXG5leHBvcnQgeyBhcHBseVJldml2ZXIgfTtcbiIsImltcG9ydCB7IGhhc0FuY2hvciB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgYW55IG5vZGUgb3IgaXRzIGNvbnRlbnRzIHRvIG5hdGl2ZSBKYXZhU2NyaXB0XG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGlucHV0IHZhbHVlXG4gKiBAcGFyYW0gYXJnIC0gSWYgYHZhbHVlYCBkZWZpbmVzIGEgYHRvSlNPTigpYCBtZXRob2QsIHVzZSB0aGlzXG4gKiAgIGFzIGl0cyBmaXJzdCBhcmd1bWVudFxuICogQHBhcmFtIGN0eCAtIENvbnZlcnNpb24gY29udGV4dCwgb3JpZ2luYWxseSBzZXQgaW4gRG9jdW1lbnQjdG9KUygpLiBJZlxuICogICBgeyBrZWVwOiB0cnVlIH1gIGlzIG5vdCBzZXQsIG91dHB1dCBzaG91bGQgYmUgc3VpdGFibGUgZm9yIEpTT05cbiAqICAgc3RyaW5naWZpY2F0aW9uLlxuICovXG5mdW5jdGlvbiB0b0pTKHZhbHVlLCBhcmcsIGN0eCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgodiwgaSkgPT4gdG9KUyh2LCBTdHJpbmcoaSksIGN0eCkpO1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICAgICAgaWYgKCFjdHggfHwgIWhhc0FuY2hvcih2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9KU09OKGFyZywgY3R4KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHsgYWxpYXNDb3VudDogMCwgY291bnQ6IDEsIHJlczogdW5kZWZpbmVkIH07XG4gICAgICAgIGN0eC5hbmNob3JzLnNldCh2YWx1ZSwgZGF0YSk7XG4gICAgICAgIGN0eC5vbkNyZWF0ZSA9IHJlcyA9PiB7XG4gICAgICAgICAgICBkYXRhLnJlcyA9IHJlcztcbiAgICAgICAgICAgIGRlbGV0ZSBjdHgub25DcmVhdGU7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHZhbHVlLnRvSlNPTihhcmcsIGN0eCk7XG4gICAgICAgIGlmIChjdHgub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUocmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgJiYgIWN0eD8ua2VlcClcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgeyB0b0pTIH07XG4iLCJpbXBvcnQgeyBhcHBseVJldml2ZXIgfSBmcm9tICcuLi9kb2MvYXBwbHlSZXZpdmVyLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgaXNEb2N1bWVudCB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IHR5cGUgfSk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgbm9kZS4gICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKiogQSBwbGFpbiBKYXZhU2NyaXB0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgbm9kZS4gKi9cbiAgICB0b0pTKGRvYywgeyBtYXBBc01hcCwgbWF4QWxpYXNDb3VudCwgb25BbmNob3IsIHJldml2ZXIgfSA9IHt9KSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudChkb2MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBkb2N1bWVudCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbmNob3JzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkb2MsXG4gICAgICAgICAgICBrZWVwOiB0cnVlLFxuICAgICAgICAgICAgbWFwQXNNYXA6IG1hcEFzTWFwID09PSB0cnVlLFxuICAgICAgICAgICAgbWFwS2V5V2FybmVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heEFsaWFzQ291bnQ6IHR5cGVvZiBtYXhBbGlhc0NvdW50ID09PSAnbnVtYmVyJyA/IG1heEFsaWFzQ291bnQgOiAxMDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdG9KUyh0aGlzLCAnJywgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFuY2hvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjb3VudCwgcmVzIH0gb2YgY3R4LmFuY2hvcnMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgb25BbmNob3IocmVzLCBjb3VudCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBhcHBseVJldml2ZXIocmV2aXZlciwgeyAnJzogcmVzIH0sICcnLCByZXMpXG4gICAgICAgICAgICA6IHJlcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IE5vZGVCYXNlIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5pbXBvcnQgeyBBTElBUywgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc1BhaXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jbGFzcyBBbGlhcyBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoQUxJQVMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0YWcnLCB7XG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbGlhcyBub2RlcyBjYW5ub3QgaGF2ZSB0YWdzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIHRoZSB2YWx1ZSBvZiB0aGlzIGFsaWFzIHdpdGhpbiBgZG9jYCwgZmluZGluZyB0aGUgbGFzdFxuICAgICAqIGluc3RhbmNlIG9mIHRoZSBgc291cmNlYCBhbmNob3IgYmVmb3JlIHRoaXMgbm9kZS5cbiAgICAgKi9cbiAgICByZXNvbHZlKGRvYykge1xuICAgICAgICBsZXQgZm91bmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZpc2l0KGRvYywge1xuICAgICAgICAgICAgTm9kZTogKF9rZXksIG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0LkJSRUFLO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmFuY2hvciA9PT0gdGhpcy5zb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG4gICAgdG9KU09OKF9hcmcsIGN0eCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiB7IHNvdXJjZTogdGhpcy5zb3VyY2UgfTtcbiAgICAgICAgY29uc3QgeyBhbmNob3JzLCBkb2MsIG1heEFsaWFzQ291bnQgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5yZXNvbHZlKGRvYyk7XG4gICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgVW5yZXNvbHZlZCBhbGlhcyAodGhlIGFuY2hvciBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIGFsaWFzKTogJHt0aGlzLnNvdXJjZX1gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgYW5jaG9ycyBmb3IgTm9kZS5wcm90b3R5cGUudG9KUygpXG4gICAgICAgICAgICB0b0pTKHNvdXJjZSwgbnVsbCwgY3R4KTtcbiAgICAgICAgICAgIGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWRhdGEgfHwgZGF0YS5yZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1RoaXMgc2hvdWxkIG5vdCBoYXBwZW46IEFsaWFzIGFuY2hvciB3YXMgbm90IHJlc29sdmVkPyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4QWxpYXNDb3VudCA+PSAwKSB7XG4gICAgICAgICAgICBkYXRhLmNvdW50ICs9IDE7XG4gICAgICAgICAgICBpZiAoZGF0YS5hbGlhc0NvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGRhdGEuYWxpYXNDb3VudCA9IGdldEFsaWFzQ291bnQoZG9jLCBzb3VyY2UsIGFuY2hvcnMpO1xuICAgICAgICAgICAgaWYgKGRhdGEuY291bnQgKiBkYXRhLmFsaWFzQ291bnQgPiBtYXhBbGlhc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ0V4Y2Vzc2l2ZSBhbGlhcyBjb3VudCBpbmRpY2F0ZXMgYSByZXNvdXJjZSBleGhhdXN0aW9uIGF0dGFjayc7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGEucmVzO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIF9vbkNvbW1lbnQsIF9vbkNob21wS2VlcCkge1xuICAgICAgICBjb25zdCBzcmMgPSBgKiR7dGhpcy5zb3VyY2V9YDtcbiAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgYW5jaG9ySXNWYWxpZCh0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMudmVyaWZ5QWxpYXNPcmRlciAmJiAhY3R4LmFuY2hvcnMuaGFzKHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBVbnJlc29sdmVkIGFsaWFzICh0aGUgYW5jaG9yIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgYWxpYXMpOiAke3RoaXMuc291cmNlfWA7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3R4LmltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzcmN9IGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRBbGlhc0NvdW50KGRvYywgbm9kZSwgYW5jaG9ycykge1xuICAgIGlmIChpc0FsaWFzKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGUucmVzb2x2ZShkb2MpO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBhbmNob3JzICYmIHNvdXJjZSAmJiBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICByZXR1cm4gYW5jaG9yID8gYW5jaG9yLmNvdW50ICogYW5jaG9yLmFsaWFzQ291bnQgOiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG5vZGUuaXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBnZXRBbGlhc0NvdW50KGRvYywgaXRlbSwgYW5jaG9ycyk7XG4gICAgICAgICAgICBpZiAoYyA+IGNvdW50KVxuICAgICAgICAgICAgICAgIGNvdW50ID0gYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICBjb25zdCBrYyA9IGdldEFsaWFzQ291bnQoZG9jLCBub2RlLmtleSwgYW5jaG9ycyk7XG4gICAgICAgIGNvbnN0IHZjID0gZ2V0QWxpYXNDb3VudChkb2MsIG5vZGUudmFsdWUsIGFuY2hvcnMpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoa2MsIHZjKTtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCB7IEFsaWFzIH07XG4iLCJpbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jb25zdCBpc1NjYWxhclZhbHVlID0gKHZhbHVlKSA9PiAhdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbmNsYXNzIFNjYWxhciBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcihTQ0FMQVIpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTihhcmcsIGN0eCkge1xuICAgICAgICByZXR1cm4gY3R4Py5rZWVwID8gdGhpcy52YWx1ZSA6IHRvSlModGhpcy52YWx1ZSwgYXJnLCBjdHgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5TY2FsYXIuQkxPQ0tfRk9MREVEID0gJ0JMT0NLX0ZPTERFRCc7XG5TY2FsYXIuQkxPQ0tfTElURVJBTCA9ICdCTE9DS19MSVRFUkFMJztcblNjYWxhci5QTEFJTiA9ICdQTEFJTic7XG5TY2FsYXIuUVVPVEVfRE9VQkxFID0gJ1FVT1RFX0RPVUJMRSc7XG5TY2FsYXIuUVVPVEVfU0lOR0xFID0gJ1FVT1RFX1NJTkdMRSc7XG5cbmV4cG9ydCB7IFNjYWxhciwgaXNTY2FsYXJWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc05vZGUsIGlzUGFpciwgTUFQLCBTRVEsIGlzRG9jdW1lbnQgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBkZWZhdWx0VGFnUHJlZml4ID0gJ3RhZzp5YW1sLm9yZywyMDAyOic7XG5mdW5jdGlvbiBmaW5kVGFnT2JqZWN0KHZhbHVlLCB0YWdOYW1lLCB0YWdzKSB7XG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID0+IHQudGFnID09PSB0YWdOYW1lKTtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gbWF0Y2guZmluZCh0ID0+ICF0LmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgICAgIGlmICghdGFnT2JqKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgJHt0YWdOYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgcmV0dXJuIHRhZ09iajtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3MuZmluZCh0ID0+IHQuaWRlbnRpZnk/Lih2YWx1ZSkgJiYgIXQuZm9ybWF0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGUodmFsdWUsIHRhZ05hbWUsIGN0eCkge1xuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5jb250ZW50cztcbiAgICBpZiAoaXNOb2RlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmIChpc1BhaXIodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGN0eC5zY2hlbWFbTUFQXS5jcmVhdGVOb2RlPy4oY3R4LnNjaGVtYSwgbnVsbCwgY3R4KTtcbiAgICAgICAgbWFwLml0ZW1zLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuIHx8XG4gICAgICAgICh0eXBlb2YgQmlnSW50ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJpZ0ludCkgLy8gbm90IHN1cHBvcnRlZCBldmVyeXdoZXJlXG4gICAgKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2VyaWFsaXplanNvbnByb3BlcnR5XG4gICAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIH1cbiAgICBjb25zdCB7IGFsaWFzRHVwbGljYXRlT2JqZWN0cywgb25BbmNob3IsIG9uVGFnT2JqLCBzY2hlbWEsIHNvdXJjZU9iamVjdHMgfSA9IGN0eDtcbiAgICAvLyBEZXRlY3QgZHVwbGljYXRlIHJlZmVyZW5jZXMgdG8gdGhlIHNhbWUgb2JqZWN0ICYgdXNlIEFsaWFzIG5vZGVzIGZvciBhbGxcbiAgICAvLyBhZnRlciBmaXJzdC4gVGhlIGByZWZgIHdyYXBwZXIgYWxsb3dzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIHRvIHJlc29sdmUuXG4gICAgbGV0IHJlZiA9IHVuZGVmaW5lZDtcbiAgICBpZiAoYWxpYXNEdXBsaWNhdGVPYmplY3RzICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVmID0gc291cmNlT2JqZWN0cy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgICBpZiAoIXJlZi5hbmNob3IpXG4gICAgICAgICAgICAgICAgcmVmLmFuY2hvciA9IG9uQW5jaG9yKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWxpYXMocmVmLmFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYgPSB7IGFuY2hvcjogbnVsbCwgbm9kZTogbnVsbCB9O1xuICAgICAgICAgICAgc291cmNlT2JqZWN0cy5zZXQodmFsdWUsIHJlZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRhZ05hbWU/LnN0YXJ0c1dpdGgoJyEhJykpXG4gICAgICAgIHRhZ05hbWUgPSBkZWZhdWx0VGFnUHJlZml4ICsgdGFnTmFtZS5zbGljZSgyKTtcbiAgICBsZXQgdGFnT2JqID0gZmluZFRhZ09iamVjdCh2YWx1ZSwgdGFnTmFtZSwgc2NoZW1hLnRhZ3MpO1xuICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlZilcbiAgICAgICAgICAgICAgICByZWYubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0YWdPYmogPVxuICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBNYXBcbiAgICAgICAgICAgICAgICA/IHNjaGVtYVtNQVBdXG4gICAgICAgICAgICAgICAgOiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IHNjaGVtYVtTRVFdXG4gICAgICAgICAgICAgICAgICAgIDogc2NoZW1hW01BUF07XG4gICAgfVxuICAgIGlmIChvblRhZ09iaikge1xuICAgICAgICBvblRhZ09iaih0YWdPYmopO1xuICAgICAgICBkZWxldGUgY3R4Lm9uVGFnT2JqO1xuICAgIH1cbiAgICBjb25zdCBub2RlID0gdGFnT2JqPy5jcmVhdGVOb2RlXG4gICAgICAgID8gdGFnT2JqLmNyZWF0ZU5vZGUoY3R4LnNjaGVtYSwgdmFsdWUsIGN0eClcbiAgICAgICAgOiB0eXBlb2YgdGFnT2JqPy5ub2RlQ2xhc3M/LmZyb20gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGFnT2JqLm5vZGVDbGFzcy5mcm9tKGN0eC5zY2hlbWEsIHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgZWxzZSBpZiAoIXRhZ09iai5kZWZhdWx0KVxuICAgICAgICBub2RlLnRhZyA9IHRhZ09iai50YWc7XG4gICAgaWYgKHJlZilcbiAgICAgICAgcmVmLm5vZGUgPSBub2RlO1xuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgeyBjcmVhdGVOb2RlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSAnLi4vZG9jL2NyZWF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcblxuZnVuY3Rpb24gY29sbGVjdGlvbkZyb21QYXRoKHNjaGVtYSwgcGF0aCwgdmFsdWUpIHtcbiAgICBsZXQgdiA9IHZhbHVlO1xuICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGsgPSBwYXRoW2ldO1xuICAgICAgICBpZiAodHlwZW9mIGsgPT09ICdudW1iZXInICYmIE51bWJlci5pc0ludGVnZXIoaykgJiYgayA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gW107XG4gICAgICAgICAgICBhW2tdID0gdjtcbiAgICAgICAgICAgIHYgPSBhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdiA9IG5ldyBNYXAoW1trLCB2XV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVOb2RlKHYsIHVuZGVmaW5lZCwge1xuICAgICAgICBhbGlhc0R1cGxpY2F0ZU9iamVjdHM6IGZhbHNlLFxuICAgICAgICBrZWVwVW5kZWZpbmVkOiBmYWxzZSxcbiAgICAgICAgb25BbmNob3I6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgcGxlYXNlIHJlcG9ydCBhIGJ1Zy4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBzb3VyY2VPYmplY3RzOiBuZXcgTWFwKClcbiAgICB9KTtcbn1cbi8vIFR5cGUgZ3VhcmQgaXMgaW50ZW50aW9uYWxseSBhIGxpdHRsZSB3cm9uZyBzbyBhcyB0byBiZSBtb3JlIHVzZWZ1bCxcbi8vIGFzIGl0IGRvZXMgbm90IGNvdmVyIHVudHlwYWJsZSBlbXB0eSBub24tc3RyaW5nIGl0ZXJhYmxlcyAoZS5nLiBbXSkuXG5jb25zdCBpc0VtcHR5UGF0aCA9IChwYXRoKSA9PiBwYXRoID09IG51bGwgfHxcbiAgICAodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmICEhcGF0aFtTeW1ib2wuaXRlcmF0b3JdKCkubmV4dCgpLmRvbmUpO1xuY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NoZW1hJywge1xuICAgICAgICAgICAgdmFsdWU6IHNjaGVtYSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtYSAtIElmIGRlZmluZWQsIG92ZXJ3cml0ZXMgdGhlIG9yaWdpbmFsJ3Mgc2NoZW1hXG4gICAgICovXG4gICAgY2xvbmUoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAoc2NoZW1hKVxuICAgICAgICAgICAgY29weS5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIGNvcHkuaXRlbXMgPSBjb3B5Lml0ZW1zLm1hcChpdCA9PiBpc05vZGUoaXQpIHx8IGlzUGFpcihpdCkgPyBpdC5jbG9uZShzY2hlbWEpIDogaXQpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGNvbGxlY3Rpb24uIEZvciBgISFtYXBgIGFuZCBgISFvbWFwYCB0aGUgdmFsdWUgbXVzdFxuICAgICAqIGJlIGEgUGFpciBpbnN0YW5jZSBvciBhIGB7IGtleSwgdmFsdWUgfWAgb2JqZWN0LCB3aGljaCBtYXkgbm90IGhhdmUgYSBrZXlcbiAgICAgKiB0aGF0IGFscmVhZHkgZXhpc3RzIGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgYWRkSW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgdGhpcy5hZGQodmFsdWUpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgICAgICBub2RlLmFkZEluKHJlc3QsIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnNjaGVtYSlcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgcmVzdCwgdmFsdWUpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFlBTUwgY29sbGVjdGlvbiBhdCAke2tleX0uIFJlbWFpbmluZyBwYXRoOiAke3Jlc3R9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGVJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGVsZXRlSW4ocmVzdCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgWUFNTCBjb2xsZWN0aW9uIGF0ICR7a2V5fS4gUmVtYWluaW5nIHBhdGg6ICR7cmVzdH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBrZXlgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXRJbihwYXRoLCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiAha2VlcFNjYWxhciAmJiBpc1NjYWxhcihub2RlKSA/IG5vZGUudmFsdWUgOiBub2RlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5nZXRJbihyZXN0LCBrZWVwU2NhbGFyKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzQWxsTnVsbFZhbHVlcyhhbGxvd1NjYWxhcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5ldmVyeShub2RlID0+IHtcbiAgICAgICAgICAgIGlmICghaXNQYWlyKG5vZGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIChuID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAoYWxsb3dTY2FsYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNTY2FsYXIobikgJiZcbiAgICAgICAgICAgICAgICAgICAgbi52YWx1ZSA9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICFuLmNvbW1lbnRCZWZvcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgIW4uY29tbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAhbi50YWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29sbGVjdGlvbiBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKi9cbiAgICBoYXNJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5oYXNJbihyZXN0KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBjb2xsZWN0aW9uLiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICAgICAgbm9kZS5zZXRJbihyZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIHJlc3QsIHZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBZQU1MIGNvbGxlY3Rpb24gYXQgJHtrZXl9LiBSZW1haW5pbmcgcGF0aDogJHtyZXN0fWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBDb2xsZWN0aW9uLCBjb2xsZWN0aW9uRnJvbVBhdGgsIGlzRW1wdHlQYXRoIH07XG4iLCIvKipcbiAqIFN0cmluZ2lmaWVzIGEgY29tbWVudC5cbiAqXG4gKiBFbXB0eSBjb21tZW50IGxpbmVzIGFyZSBsZWZ0IGVtcHR5LFxuICogbGluZXMgY29uc2lzdGluZyBvZiBhIHNpbmdsZSBzcGFjZSBhcmUgcmVwbGFjZWQgYnkgYCNgLFxuICogYW5kIGFsbCBvdGhlciBsaW5lcyBhcmUgcHJlZml4ZWQgd2l0aCBhIGAjYC5cbiAqL1xuY29uc3Qgc3RyaW5naWZ5Q29tbWVudCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9eKD8hJCkoPzogJCk/L2dtLCAnIycpO1xuZnVuY3Rpb24gaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpIHtcbiAgICBpZiAoL15cXG4rJC8udGVzdChjb21tZW50KSlcbiAgICAgICAgcmV0dXJuIGNvbW1lbnQuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiBpbmRlbnQgPyBjb21tZW50LnJlcGxhY2UoL14oPyEgKiQpL2dtLCBpbmRlbnQpIDogY29tbWVudDtcbn1cbmNvbnN0IGxpbmVDb21tZW50ID0gKHN0ciwgaW5kZW50LCBjb21tZW50KSA9PiBzdHIuZW5kc1dpdGgoJ1xcbicpXG4gICAgPyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICA6IGNvbW1lbnQuaW5jbHVkZXMoJ1xcbicpXG4gICAgICAgID8gJ1xcbicgKyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICAgICAgOiAoc3RyLmVuZHNXaXRoKCcgJykgPyAnJyA6ICcgJykgKyBjb21tZW50O1xuXG5leHBvcnQgeyBpbmRlbnRDb21tZW50LCBsaW5lQ29tbWVudCwgc3RyaW5naWZ5Q29tbWVudCB9O1xuIiwiY29uc3QgRk9MRF9GTE9XID0gJ2Zsb3cnO1xuY29uc3QgRk9MRF9CTE9DSyA9ICdibG9jayc7XG5jb25zdCBGT0xEX1FVT1RFRCA9ICdxdW90ZWQnO1xuLyoqXG4gKiBUcmllcyB0byBrZWVwIGlucHV0IGF0IHVwIHRvIGBsaW5lV2lkdGhgIGNoYXJhY3RlcnMsIHNwbGl0dGluZyBvbmx5IG9uIHNwYWNlc1xuICogbm90IGZvbGxvd2VkIGJ5IG5ld2xpbmVzIG9yIHNwYWNlcyB1bmxlc3MgYG1vZGVgIGlzIGAncXVvdGVkJ2AuIExpbmVzIGFyZVxuICogdGVybWluYXRlZCB3aXRoIGBcXG5gIGFuZCBzdGFydGVkIHdpdGggYGluZGVudGAuXG4gKi9cbmZ1bmN0aW9uIGZvbGRGbG93TGluZXModGV4dCwgaW5kZW50LCBtb2RlID0gJ2Zsb3cnLCB7IGluZGVudEF0U3RhcnQsIGxpbmVXaWR0aCA9IDgwLCBtaW5Db250ZW50V2lkdGggPSAyMCwgb25Gb2xkLCBvbk92ZXJmbG93IH0gPSB7fSkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGlmIChsaW5lV2lkdGggPCBtaW5Db250ZW50V2lkdGgpXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aCA9IDA7XG4gICAgY29uc3QgZW5kU3RlcCA9IE1hdGgubWF4KDEgKyBtaW5Db250ZW50V2lkdGgsIDEgKyBsaW5lV2lkdGggLSBpbmRlbnQubGVuZ3RoKTtcbiAgICBpZiAodGV4dC5sZW5ndGggPD0gZW5kU3RlcClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgY29uc3QgZm9sZHMgPSBbXTtcbiAgICBjb25zdCBlc2NhcGVkRm9sZHMgPSB7fTtcbiAgICBsZXQgZW5kID0gbGluZVdpZHRoIC0gaW5kZW50Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGluZGVudEF0U3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChpbmRlbnRBdFN0YXJ0ID4gbGluZVdpZHRoIC0gTWF0aC5tYXgoMiwgbWluQ29udGVudFdpZHRoKSlcbiAgICAgICAgICAgIGZvbGRzLnB1c2goMCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGVuZCA9IGxpbmVXaWR0aCAtIGluZGVudEF0U3RhcnQ7XG4gICAgfVxuICAgIGxldCBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcHJldiA9IHVuZGVmaW5lZDtcbiAgICBsZXQgb3ZlcmZsb3cgPSBmYWxzZTtcbiAgICBsZXQgaSA9IC0xO1xuICAgIGxldCBlc2NTdGFydCA9IC0xO1xuICAgIGxldCBlc2NFbmQgPSAtMTtcbiAgICBpZiAobW9kZSA9PT0gRk9MRF9CTE9DSykge1xuICAgICAgICBpID0gY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzKHRleHQsIGksIGluZGVudC5sZW5ndGgpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpXG4gICAgICAgICAgICBlbmQgPSBpICsgZW5kU3RlcDtcbiAgICB9XG4gICAgZm9yIChsZXQgY2g7IChjaCA9IHRleHRbKGkgKz0gMSldKTspIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGVzY1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIHN3aXRjaCAodGV4dFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA1O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlc2NFbmQgPSBpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBGT0xEX0JMT0NLKVxuICAgICAgICAgICAgICAgIGkgPSBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICBlbmQgPSBpICsgaW5kZW50Lmxlbmd0aCArIGVuZFN0ZXA7XG4gICAgICAgICAgICBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJyAnICYmXG4gICAgICAgICAgICAgICAgcHJldiAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICcgJyAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICdcXG4nICYmXG4gICAgICAgICAgICAgICAgcHJldiAhPT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGFjZSBzdXJyb3VuZGVkIGJ5IG5vbi1zcGFjZSBjYW4gYmUgcmVwbGFjZWQgd2l0aCBuZXdsaW5lICsgaW5kZW50XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRleHRbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09ICcgJyAmJiBuZXh0ICE9PSAnXFxuJyAmJiBuZXh0ICE9PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRzLnB1c2goc3BsaXQpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzcGxpdCArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSBGT0xEX1FVT1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGl0ZS1zcGFjZSBjb2xsZWN0ZWQgYXQgZW5kIG1heSBzdHJldGNoIHBhc3QgbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2ID09PSAnICcgfHwgcHJldiA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gdGV4dFsoaSArPSAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3VudCBmb3IgbmV3bGluZSBlc2NhcGUsIGJ1dCBkb24ndCBicmVhayBwcmVjZWRpbmcgZXNjYXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGogPSBpID4gZXNjRW5kICsgMSA/IGkgLSAyIDogZXNjU3RhcnQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIG91dCBpZiBsaW5lV2lkdGggJiBtaW5Db250ZW50V2lkdGggYXJlIHNob3J0ZXIgdGhhbiBhbiBlc2NhcGUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkRm9sZHNbal0pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgZm9sZHMucHVzaChqKTtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZEZvbGRzW2pdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaiArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY2g7XG4gICAgfVxuICAgIGlmIChvdmVyZmxvdyAmJiBvbk92ZXJmbG93KVxuICAgICAgICBvbk92ZXJmbG93KCk7XG4gICAgaWYgKGZvbGRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgaWYgKG9uRm9sZClcbiAgICAgICAgb25Gb2xkKCk7XG4gICAgbGV0IHJlcyA9IHRleHQuc2xpY2UoMCwgZm9sZHNbMF0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9sZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZm9sZCA9IGZvbGRzW2ldO1xuICAgICAgICBjb25zdCBlbmQgPSBmb2xkc1tpICsgMV0gfHwgdGV4dC5sZW5ndGg7XG4gICAgICAgIGlmIChmb2xkID09PSAwKVxuICAgICAgICAgICAgcmVzID0gYFxcbiR7aW5kZW50fSR7dGV4dC5zbGljZSgwLCBlbmQpfWA7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGVzY2FwZWRGb2xkc1tmb2xkXSlcbiAgICAgICAgICAgICAgICByZXMgKz0gYCR7dGV4dFtmb2xkXX1cXFxcYDtcbiAgICAgICAgICAgIHJlcyArPSBgXFxuJHtpbmRlbnR9JHt0ZXh0LnNsaWNlKGZvbGQgKyAxLCBlbmQpfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogUHJlc3VtZXMgYGkgKyAxYCBpcyBhdCB0aGUgc3RhcnQgb2YgYSBsaW5lXG4gKiBAcmV0dXJucyBpbmRleCBvZiBsYXN0IG5ld2xpbmUgaW4gbW9yZS1pbmRlbnRlZCBibG9ja1xuICovXG5mdW5jdGlvbiBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50KSB7XG4gICAgbGV0IGVuZCA9IGk7XG4gICAgbGV0IHN0YXJ0ID0gaSArIDE7XG4gICAgbGV0IGNoID0gdGV4dFtzdGFydF07XG4gICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgIGlmIChpIDwgc3RhcnQgKyBpbmRlbnQpIHtcbiAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICAgICAgfSB3aGlsZSAoY2ggJiYgY2ggIT09ICdcXG4nKTtcbiAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgY2ggPSB0ZXh0W3N0YXJ0XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuXG5leHBvcnQgeyBGT0xEX0JMT0NLLCBGT0xEX0ZMT1csIEZPTERfUVVPVEVELCBmb2xkRmxvd0xpbmVzIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgZm9sZEZsb3dMaW5lcywgRk9MRF9RVU9URUQsIEZPTERfRkxPVywgRk9MRF9CTE9DSyB9IGZyb20gJy4vZm9sZEZsb3dMaW5lcy5qcyc7XG5cbmNvbnN0IGdldEZvbGRPcHRpb25zID0gKGN0eCwgaXNCbG9jaykgPT4gKHtcbiAgICBpbmRlbnRBdFN0YXJ0OiBpc0Jsb2NrID8gY3R4LmluZGVudC5sZW5ndGggOiBjdHguaW5kZW50QXRTdGFydCxcbiAgICBsaW5lV2lkdGg6IGN0eC5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICBtaW5Db250ZW50V2lkdGg6IGN0eC5vcHRpb25zLm1pbkNvbnRlbnRXaWR0aFxufSk7XG4vLyBBbHNvIGNoZWNrcyBmb3IgbGluZXMgc3RhcnRpbmcgd2l0aCAlLCBhcyBwYXJzaW5nIHRoZSBvdXRwdXQgYXMgWUFNTCAxLjEgd2lsbFxuLy8gcHJlc3VtZSB0aGF0J3Mgc3RhcnRpbmcgYSBuZXcgZG9jdW1lbnQuXG5jb25zdCBjb250YWluc0RvY3VtZW50TWFya2VyID0gKHN0cikgPT4gL14oJXwtLS18XFwuXFwuXFwuKS9tLnRlc3Qoc3RyKTtcbmZ1bmN0aW9uIGxpbmVMZW5ndGhPdmVyTGltaXQoc3RyLCBsaW5lV2lkdGgsIGluZGVudExlbmd0aCkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBsaW1pdCA9IGxpbmVXaWR0aCAtIGluZGVudExlbmd0aDtcbiAgICBjb25zdCBzdHJMZW4gPSBzdHIubGVuZ3RoO1xuICAgIGlmIChzdHJMZW4gPD0gbGltaXQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgc3RhcnQgPSAwOyBpIDwgc3RyTGVuOyArK2kpIHtcbiAgICAgICAgaWYgKHN0cltpXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChpIC0gc3RhcnQgPiBsaW1pdClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICBpZiAoc3RyTGVuIC0gc3RhcnQgPD0gbGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZG91YmxlUXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGlmIChjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRBc0pTT04pXG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIGNvbnN0IHsgaW1wbGljaXRLZXkgfSA9IGN0eDtcbiAgICBjb25zdCBtaW5NdWx0aUxpbmVMZW5ndGggPSBjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg7XG4gICAgY29uc3QgaW5kZW50ID0gY3R4LmluZGVudCB8fCAoY29udGFpbnNEb2N1bWVudE1hcmtlcih2YWx1ZSkgPyAnICAnIDogJycpO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBjaCA9IGpzb25baV07IGNoOyBjaCA9IGpzb25bKytpXSkge1xuICAgICAgICBpZiAoY2ggPT09ICcgJyAmJiBqc29uW2kgKyAxXSA9PT0gJ1xcXFwnICYmIGpzb25baSArIDJdID09PSAnbicpIHtcbiAgICAgICAgICAgIC8vIHNwYWNlIGJlZm9yZSBuZXdsaW5lIG5lZWRzIHRvIGJlIGVzY2FwZWQgdG8gbm90IGJlIGZvbGRlZFxuICAgICAgICAgICAgc3RyICs9IGpzb24uc2xpY2Uoc3RhcnQsIGkpICsgJ1xcXFwgJztcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGNoID0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgc3dpdGNoIChqc29uW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0ganNvbi5zbGljZShzdGFydCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0ganNvbi5zdWJzdHIoaSArIDIsIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAwMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXDAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDA3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcYSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwMGInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAxYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDg1JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcTic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwYTAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxfJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMjAyOCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXEwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyMDI5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcUCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlLnN1YnN0cigwLCAyKSA9PT0gJzAwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXHgnICsgY29kZS5zdWJzdHIoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnN1YnN0cihpLCA2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgMl0gPT09ICdcIicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubGVuZ3RoIDwgbWluTXVsdGlMaW5lTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb2xkaW5nIHdpbGwgZWF0IGZpcnN0IG5ld2xpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnNsaWNlKHN0YXJ0LCBpKSArICdcXG5cXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGpzb25baSArIDJdID09PSAnXFxcXCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uW2kgKyAzXSA9PT0gJ24nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgNF0gIT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGluZGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwYWNlIGFmdGVyIG5ld2xpbmUgbmVlZHMgdG8gYmUgZXNjYXBlZCB0byBub3QgYmUgZm9sZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbltpICsgMl0gPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIHN0ciA9IHN0YXJ0ID8gc3RyICsganNvbi5zbGljZShzdGFydCkgOiBqc29uO1xuICAgIHJldHVybiBpbXBsaWNpdEtleVxuICAgICAgICA/IHN0clxuICAgICAgICA6IGZvbGRGbG93TGluZXMoc3RyLCBpbmRlbnQsIEZPTERfUVVPVEVELCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBzaW5nbGVRdW90ZWRTdHJpbmcodmFsdWUsIGN0eCkge1xuICAgIGlmIChjdHgub3B0aW9ucy5zaW5nbGVRdW90ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGN0eC5pbXBsaWNpdEtleSAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHx8XG4gICAgICAgIC9bIFxcdF1cXG58XFxuWyBcXHRdLy50ZXN0KHZhbHVlKSAvLyBzaW5nbGUgcXVvdGVkIHN0cmluZyBjYW4ndCBoYXZlIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcm91bmQgbmV3bGluZVxuICAgIClcbiAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICBjb25zdCBpbmRlbnQgPSBjdHguaW5kZW50IHx8IChjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSA/ICcgICcgOiAnJyk7XG4gICAgY29uc3QgcmVzID0gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKC8nL2csIFwiJydcIikucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKSArIFwiJ1wiO1xuICAgIHJldHVybiBjdHguaW1wbGljaXRLZXlcbiAgICAgICAgPyByZXNcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHJlcywgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QgeyBzaW5nbGVRdW90ZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgbGV0IHFzO1xuICAgIGlmIChzaW5nbGVRdW90ZSA9PT0gZmFsc2UpXG4gICAgICAgIHFzID0gZG91YmxlUXVvdGVkU3RyaW5nO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBoYXNEb3VibGUgPSB2YWx1ZS5pbmNsdWRlcygnXCInKTtcbiAgICAgICAgY29uc3QgaGFzU2luZ2xlID0gdmFsdWUuaW5jbHVkZXMoXCInXCIpO1xuICAgICAgICBpZiAoaGFzRG91YmxlICYmICFoYXNTaW5nbGUpXG4gICAgICAgICAgICBxcyA9IHNpbmdsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZSBpZiAoaGFzU2luZ2xlICYmICFoYXNEb3VibGUpXG4gICAgICAgICAgICBxcyA9IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcXMgPSBzaW5nbGVRdW90ZSA/IHNpbmdsZVF1b3RlZFN0cmluZyA6IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIHFzKHZhbHVlLCBjdHgpO1xufVxuLy8gVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgYXZvaWRzIGEgcG9seW5vbWlhbCBzZWFyY2gsXG4vLyBidXQgaXNuJ3Qgc3VwcG9ydGVkIHlldCBvbiBTYWZhcmk6IGh0dHBzOi8vY2FuaXVzZS5jb20vanMtcmVnZXhwLWxvb2tiZWhpbmRcbmxldCBibG9ja0VuZE5ld2xpbmVzO1xudHJ5IHtcbiAgICBibG9ja0VuZE5ld2xpbmVzID0gbmV3IFJlZ0V4cCgnKF58KD88IVxcbikpXFxuKyg/IVxcbnwkKScsICdnJyk7XG59XG5jYXRjaCB7XG4gICAgYmxvY2tFbmROZXdsaW5lcyA9IC9cXG4rKD8hXFxufCQpL2c7XG59XG5mdW5jdGlvbiBibG9ja1N0cmluZyh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGNvbnN0IHsgYmxvY2tRdW90ZSwgY29tbWVudFN0cmluZywgbGluZVdpZHRoIH0gPSBjdHgub3B0aW9ucztcbiAgICAvLyAxLiBCbG9jayBjYW4ndCBlbmQgaW4gd2hpdGVzcGFjZSB1bmxlc3MgdGhlIGxhc3QgbGluZSBpcyBub24tZW1wdHkuXG4gICAgLy8gMi4gU3RyaW5ncyBjb25zaXN0aW5nIG9mIG9ubHkgd2hpdGVzcGFjZSBhcmUgYmVzdCByZW5kZXJlZCBleHBsaWNpdGx5LlxuICAgIGlmICghYmxvY2tRdW90ZSB8fCAvXFxuW1xcdCBdKyQvLnRlc3QodmFsdWUpIHx8IC9eXFxzKiQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudCA9IGN0eC5pbmRlbnQgfHxcbiAgICAgICAgKGN0eC5mb3JjZUJsb2NrSW5kZW50IHx8IGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpID8gJyAgJyA6ICcnKTtcbiAgICBjb25zdCBsaXRlcmFsID0gYmxvY2tRdW90ZSA9PT0gJ2xpdGVyYWwnXG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IGJsb2NrUXVvdGUgPT09ICdmb2xkZWQnIHx8IHR5cGUgPT09IFNjYWxhci5CTE9DS19GT0xERURcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUxcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6ICFsaW5lTGVuZ3RoT3ZlckxpbWl0KHZhbHVlLCBsaW5lV2lkdGgsIGluZGVudC5sZW5ndGgpO1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBsaXRlcmFsID8gJ3xcXG4nIDogJz5cXG4nO1xuICAgIC8vIGRldGVybWluZSBjaG9tcGluZyBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgZW5kXG4gICAgbGV0IGNob21wO1xuICAgIGxldCBlbmRTdGFydDtcbiAgICBmb3IgKGVuZFN0YXJ0ID0gdmFsdWUubGVuZ3RoOyBlbmRTdGFydCA+IDA7IC0tZW5kU3RhcnQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtlbmRTdGFydCAtIDFdO1xuICAgICAgICBpZiAoY2ggIT09ICdcXG4nICYmIGNoICE9PSAnXFx0JyAmJiBjaCAhPT0gJyAnKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCBlbmQgPSB2YWx1ZS5zdWJzdHJpbmcoZW5kU3RhcnQpO1xuICAgIGNvbnN0IGVuZE5sUG9zID0gZW5kLmluZGV4T2YoJ1xcbicpO1xuICAgIGlmIChlbmRObFBvcyA9PT0gLTEpIHtcbiAgICAgICAgY2hvbXAgPSAnLSc7IC8vIHN0cmlwXG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlID09PSBlbmQgfHwgZW5kTmxQb3MgIT09IGVuZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNob21wID0gJysnOyAvLyBrZWVwXG4gICAgICAgIGlmIChvbkNob21wS2VlcClcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaG9tcCA9ICcnOyAvLyBjbGlwXG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtZW5kLmxlbmd0aCk7XG4gICAgICAgIGlmIChlbmRbZW5kLmxlbmd0aCAtIDFdID09PSAnXFxuJylcbiAgICAgICAgICAgIGVuZCA9IGVuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIGVuZCA9IGVuZC5yZXBsYWNlKGJsb2NrRW5kTmV3bGluZXMsIGAkJiR7aW5kZW50fWApO1xuICAgIH1cbiAgICAvLyBkZXRlcm1pbmUgaW5kZW50IGluZGljYXRvciBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgc3RhcnRcbiAgICBsZXQgc3RhcnRXaXRoU3BhY2UgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRFbmQ7XG4gICAgbGV0IHN0YXJ0TmxQb3MgPSAtMTtcbiAgICBmb3IgKHN0YXJ0RW5kID0gMDsgc3RhcnRFbmQgPCB2YWx1ZS5sZW5ndGg7ICsrc3RhcnRFbmQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtzdGFydEVuZF07XG4gICAgICAgIGlmIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgc3RhcnRXaXRoU3BhY2UgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICBzdGFydE5sUG9zID0gc3RhcnRFbmQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnRObFBvcyA8IHN0YXJ0RW5kID8gc3RhcnRObFBvcyArIDEgOiBzdGFydEVuZCk7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKHN0YXJ0Lmxlbmd0aCk7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQucmVwbGFjZSgvXFxuKy9nLCBgJCYke2luZGVudH1gKTtcbiAgICB9XG4gICAgY29uc3QgaW5kZW50U2l6ZSA9IGluZGVudCA/ICcyJyA6ICcxJzsgLy8gcm9vdCBpcyBhdCAtMVxuICAgIC8vIExlYWRpbmcgfCBvciA+IGlzIGFkZGVkIGxhdGVyXG4gICAgbGV0IGhlYWRlciA9IChzdGFydFdpdGhTcGFjZSA/IGluZGVudFNpemUgOiAnJykgKyBjaG9tcDtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBoZWFkZXIgKz0gJyAnICsgY29tbWVudFN0cmluZyhjb21tZW50LnJlcGxhY2UoLyA/W1xcclxcbl0rL2csICcgJykpO1xuICAgICAgICBpZiAob25Db21tZW50KVxuICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgfVxuICAgIGlmICghbGl0ZXJhbCkge1xuICAgICAgICBjb25zdCBmb2xkZWRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuKy9nLCAnXFxuJCYnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyg/Ol58XFxuKShbXFx0IF0uKikoPzooW1xcblxcdCBdKilcXG4oPyFbXFxuXFx0IF0pKT8vZywgJyQxJDInKSAvLyBtb3JlLWluZGVudGVkIGxpbmVzIGFyZW4ndCBmb2xkZWRcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIF4gbW9yZS1pbmQuIF4gZW1wdHkgICAgIF4gY2FwdHVyZSBuZXh0IGVtcHR5IGxpbmVzIG9ubHkgYXQgZW5kIG9mIGluZGVudFxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgICAgIGxldCBsaXRlcmFsRmFsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZm9sZE9wdGlvbnMgPSBnZXRGb2xkT3B0aW9ucyhjdHgsIHRydWUpO1xuICAgICAgICBpZiAoYmxvY2tRdW90ZSAhPT0gJ2ZvbGRlZCcgJiYgdHlwZSAhPT0gU2NhbGFyLkJMT0NLX0ZPTERFRCkge1xuICAgICAgICAgICAgZm9sZE9wdGlvbnMub25PdmVyZmxvdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsaXRlcmFsRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib2R5ID0gZm9sZEZsb3dMaW5lcyhgJHtzdGFydH0ke2ZvbGRlZFZhbHVlfSR7ZW5kfWAsIGluZGVudCwgRk9MRF9CTE9DSywgZm9sZE9wdGlvbnMpO1xuICAgICAgICBpZiAoIWxpdGVyYWxGYWxsYmFjaylcbiAgICAgICAgICAgIHJldHVybiBgPiR7aGVhZGVyfVxcbiR7aW5kZW50fSR7Ym9keX1gO1xuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgcmV0dXJuIGB8JHtoZWFkZXJ9XFxuJHtpbmRlbnR9JHtzdGFydH0ke3ZhbHVlfSR7ZW5kfWA7XG59XG5mdW5jdGlvbiBwbGFpblN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBpdGVtO1xuICAgIGNvbnN0IHsgYWN0dWFsU3RyaW5nLCBpbXBsaWNpdEtleSwgaW5kZW50LCBpbmRlbnRTdGVwLCBpbkZsb3cgfSA9IGN0eDtcbiAgICBpZiAoKGltcGxpY2l0S2V5ICYmIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkgfHxcbiAgICAgICAgKGluRmxvdyAmJiAvW1tcXF17fSxdLy50ZXN0KHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZSB8fFxuICAgICAgICAvXltcXG5cXHQgLFtcXF17fSMmKiF8PidcIiVAYF18Xls/LV0kfF5bPy1dWyBcXHRdfFtcXG46XVsgXFx0XXxbIFxcdF1cXG58W1xcblxcdCBdI3xbXFxuXFx0IDpdJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gbm90IGFsbG93ZWQ6XG4gICAgICAgIC8vIC0gZW1wdHkgc3RyaW5nLCAnLScgb3IgJz8nXG4gICAgICAgIC8vIC0gc3RhcnQgd2l0aCBhbiBpbmRpY2F0b3IgY2hhcmFjdGVyIChleGNlcHQgWz86LV0pIG9yIC9bPy1dIC9cbiAgICAgICAgLy8gLSAnXFxuICcsICc6ICcgb3IgJyBcXG4nIGFueXdoZXJlXG4gICAgICAgIC8vIC0gJyMnIG5vdCBwcmVjZWRlZCBieSBhIG5vbi1zcGFjZSBjaGFyXG4gICAgICAgIC8vIC0gZW5kIHdpdGggJyAnIG9yICc6J1xuICAgICAgICByZXR1cm4gaW1wbGljaXRLZXkgfHwgaW5GbG93IHx8ICF2YWx1ZS5pbmNsdWRlcygnXFxuJylcbiAgICAgICAgICAgID8gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxuICAgIGlmICghaW1wbGljaXRLZXkgJiZcbiAgICAgICAgIWluRmxvdyAmJlxuICAgICAgICB0eXBlICE9PSBTY2FsYXIuUExBSU4gJiZcbiAgICAgICAgdmFsdWUuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgIC8vIFdoZXJlIGFsbG93ZWQgJiB0eXBlIG5vdCBzZXQgZXhwbGljaXRseSwgcHJlZmVyIGJsb2NrIHN0eWxlIGZvciBtdWx0aWxpbmUgc3RyaW5nc1xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpKSB7XG4gICAgICAgIGlmIChpbmRlbnQgPT09ICcnKSB7XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbXBsaWNpdEtleSAmJiBpbmRlbnQgPT09IGluZGVudFN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3RyID0gdmFsdWUucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKTtcbiAgICAvLyBWZXJpZnkgdGhhdCBvdXRwdXQgd2lsbCBiZSBwYXJzZWQgYXMgYSBzdHJpbmcsIGFzIGUuZy4gcGxhaW4gbnVtYmVycyBhbmRcbiAgICAvLyBib29sZWFucyBnZXQgcGFyc2VkIHdpdGggdGhvc2UgdHlwZXMgaW4gdjEuMiAoZS5nLiAnNDInLCAndHJ1ZScgJiAnMC45ZS0zJyksXG4gICAgLy8gYW5kIG90aGVycyBpbiB2MS4xLlxuICAgIGlmIChhY3R1YWxTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgdGVzdCA9ICh0YWcpID0+IHRhZy5kZWZhdWx0ICYmIHRhZy50YWcgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInICYmIHRhZy50ZXN0Py50ZXN0KHN0cik7XG4gICAgICAgIGNvbnN0IHsgY29tcGF0LCB0YWdzIH0gPSBjdHguZG9jLnNjaGVtYTtcbiAgICAgICAgaWYgKHRhZ3Muc29tZSh0ZXN0KSB8fCBjb21wYXQ/LnNvbWUodGVzdCkpXG4gICAgICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgIH1cbiAgICByZXR1cm4gaW1wbGljaXRLZXlcbiAgICAgICAgPyBzdHJcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHN0ciwgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IGltcGxpY2l0S2V5LCBpbkZsb3cgfSA9IGN0eDtcbiAgICBjb25zdCBzcyA9IHR5cGVvZiBpdGVtLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGl0ZW1cbiAgICAgICAgOiBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7IHZhbHVlOiBTdHJpbmcoaXRlbS52YWx1ZSkgfSk7XG4gICAgbGV0IHsgdHlwZSB9ID0gaXRlbTtcbiAgICBpZiAodHlwZSAhPT0gU2NhbGFyLlFVT1RFX0RPVUJMRSkge1xuICAgICAgICAvLyBmb3JjZSBkb3VibGUgcXVvdGVzIG9uIGNvbnRyb2wgY2hhcmFjdGVycyAmIHVucGFpcmVkIHN1cnJvZ2F0ZXNcbiAgICAgICAgaWYgKC9bXFx4MDAtXFx4MDhcXHgwYi1cXHgxZlxceDdmLVxceDlmXFx1e0Q4MDB9LVxcdXtERkZGfV0vdS50ZXN0KHNzLnZhbHVlKSlcbiAgICAgICAgICAgIHR5cGUgPSBTY2FsYXIuUVVPVEVfRE9VQkxFO1xuICAgIH1cbiAgICBjb25zdCBfc3RyaW5naWZ5ID0gKF90eXBlKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0ZPTERFRDpcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0xJVEVSQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGltcGxpY2l0S2V5IHx8IGluRmxvd1xuICAgICAgICAgICAgICAgICAgICA/IHF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KSAvLyBibG9ja3MgYXJlIG5vdCB2YWxpZCBpbnNpZGUgZmxvdyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIDogYmxvY2tTdHJpbmcoc3MsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5RVU9URV9ET1VCTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLlFVT1RFX1NJTkdMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2luZ2xlUXVvdGVkU3RyaW5nKHNzLnZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXIuUExBSU46XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWluU3RyaW5nKHNzLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcyA9IF9zdHJpbmdpZnkodHlwZSk7XG4gICAgaWYgKHJlcyA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCB7IGRlZmF1bHRLZXlUeXBlLCBkZWZhdWx0U3RyaW5nVHlwZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHQgPSAoaW1wbGljaXRLZXkgJiYgZGVmYXVsdEtleVR5cGUpIHx8IGRlZmF1bHRTdHJpbmdUeXBlO1xuICAgICAgICByZXMgPSBfc3RyaW5naWZ5KHQpO1xuICAgICAgICBpZiAocmVzID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWZhdWx0IHN0cmluZyB0eXBlICR7dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgaXNQYWlyLCBpc0FsaWFzLCBpc05vZGUsIGlzU2NhbGFyLCBpc0NvbGxlY3Rpb24gfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4vc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5naWZ5Q29udGV4dChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYmxvY2tRdW90ZTogdHJ1ZSxcbiAgICAgICAgY29tbWVudFN0cmluZzogc3RyaW5naWZ5Q29tbWVudCxcbiAgICAgICAgZGVmYXVsdEtleVR5cGU6IG51bGwsXG4gICAgICAgIGRlZmF1bHRTdHJpbmdUeXBlOiAnUExBSU4nLFxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgICAgICBkb3VibGVRdW90ZWRBc0pTT046IGZhbHNlLFxuICAgICAgICBkb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg6IDQwLFxuICAgICAgICBmYWxzZVN0cjogJ2ZhbHNlJyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiB0cnVlLFxuICAgICAgICBpbmRlbnRTZXE6IHRydWUsXG4gICAgICAgIGxpbmVXaWR0aDogODAsXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aDogMjAsXG4gICAgICAgIG51bGxTdHI6ICdudWxsJyxcbiAgICAgICAgc2ltcGxlS2V5czogZmFsc2UsXG4gICAgICAgIHNpbmdsZVF1b3RlOiBudWxsLFxuICAgICAgICB0cnVlU3RyOiAndHJ1ZScsXG4gICAgICAgIHZlcmlmeUFsaWFzT3JkZXI6IHRydWVcbiAgICB9LCBkb2Muc2NoZW1hLnRvU3RyaW5nT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgbGV0IGluRmxvdztcbiAgICBzd2l0Y2ggKG9wdC5jb2xsZWN0aW9uU3R5bGUpIHtcbiAgICAgICAgY2FzZSAnYmxvY2snOlxuICAgICAgICAgICAgaW5GbG93ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmxvdyc6XG4gICAgICAgICAgICBpbkZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpbkZsb3cgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmNob3JzOiBuZXcgU2V0KCksXG4gICAgICAgIGRvYyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiBvcHQuZmxvd0NvbGxlY3Rpb25QYWRkaW5nID8gJyAnIDogJycsXG4gICAgICAgIGluZGVudDogJycsXG4gICAgICAgIGluZGVudFN0ZXA6IHR5cGVvZiBvcHQuaW5kZW50ID09PSAnbnVtYmVyJyA/ICcgJy5yZXBlYXQob3B0LmluZGVudCkgOiAnICAnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IG9wdFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRUYWdPYmplY3QodGFncywgaXRlbSkge1xuICAgIGlmIChpdGVtLnRhZykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHRhZ3MuZmlsdGVyKHQgPT4gdC50YWcgPT09IGl0ZW0udGFnKTtcbiAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2guZmluZCh0ID0+IHQuZm9ybWF0ID09PSBpdGVtLmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9iajtcbiAgICBpZiAoaXNTY2FsYXIoaXRlbSkpIHtcbiAgICAgICAgb2JqID0gaXRlbS52YWx1ZTtcbiAgICAgICAgbGV0IG1hdGNoID0gdGFncy5maWx0ZXIodCA9PiB0LmlkZW50aWZ5Py4ob2JqKSk7XG4gICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXN0TWF0Y2ggPSBtYXRjaC5maWx0ZXIodCA9PiB0LnRlc3QpO1xuICAgICAgICAgICAgaWYgKHRlc3RNYXRjaC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVzdE1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIHRhZ09iaiA9XG4gICAgICAgICAgICBtYXRjaC5maW5kKHQgPT4gdC5mb3JtYXQgPT09IGl0ZW0uZm9ybWF0KSA/PyBtYXRjaC5maW5kKHQgPT4gIXQuZm9ybWF0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9iaiA9IGl0ZW07XG4gICAgICAgIHRhZ09iaiA9IHRhZ3MuZmluZCh0ID0+IHQubm9kZUNsYXNzICYmIG9iaiBpbnN0YW5jZW9mIHQubm9kZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0YWdPYmopIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IG9iaj8uY29uc3RydWN0b3I/Lm5hbWUgPz8gdHlwZW9mIG9iajtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgbm90IHJlc29sdmVkIGZvciAke25hbWV9IHZhbHVlYCk7XG4gICAgfVxuICAgIHJldHVybiB0YWdPYmo7XG59XG4vLyBuZWVkcyB0byBiZSBjYWxsZWQgYmVmb3JlIHZhbHVlIHN0cmluZ2lmaWVyIHRvIGFsbG93IGZvciBjaXJjdWxhciBhbmNob3IgcmVmc1xuZnVuY3Rpb24gc3RyaW5naWZ5UHJvcHMobm9kZSwgdGFnT2JqLCB7IGFuY2hvcnMsIGRvYyB9KSB7XG4gICAgaWYgKCFkb2MuZGlyZWN0aXZlcylcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IHByb3BzID0gW107XG4gICAgY29uc3QgYW5jaG9yID0gKGlzU2NhbGFyKG5vZGUpIHx8IGlzQ29sbGVjdGlvbihub2RlKSkgJiYgbm9kZS5hbmNob3I7XG4gICAgaWYgKGFuY2hvciAmJiBhbmNob3JJc1ZhbGlkKGFuY2hvcikpIHtcbiAgICAgICAgYW5jaG9ycy5hZGQoYW5jaG9yKTtcbiAgICAgICAgcHJvcHMucHVzaChgJiR7YW5jaG9yfWApO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBub2RlLnRhZyA/IG5vZGUudGFnIDogdGFnT2JqLmRlZmF1bHQgPyBudWxsIDogdGFnT2JqLnRhZztcbiAgICBpZiAodGFnKVxuICAgICAgICBwcm9wcy5wdXNoKGRvYy5kaXJlY3RpdmVzLnRhZ1N0cmluZyh0YWcpKTtcbiAgICByZXR1cm4gcHJvcHMuam9pbignICcpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGlmIChpc1BhaXIoaXRlbSkpXG4gICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgaWYgKGlzQWxpYXMoaXRlbSkpIHtcbiAgICAgICAgaWYgKGN0eC5kb2MuZGlyZWN0aXZlcylcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKGN0eCk7XG4gICAgICAgIGlmIChjdHgucmVzb2x2ZWRBbGlhc2VzPy5oYXMoaXRlbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBzdHJpbmdpZnkgY2lyY3VsYXIgc3RydWN0dXJlIHdpdGhvdXQgYWxpYXMgbm9kZXNgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdHgucmVzb2x2ZWRBbGlhc2VzKVxuICAgICAgICAgICAgICAgIGN0eC5yZXNvbHZlZEFsaWFzZXMuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGN0eC5yZXNvbHZlZEFsaWFzZXMgPSBuZXcgU2V0KFtpdGVtXSk7XG4gICAgICAgICAgICBpdGVtID0gaXRlbS5yZXNvbHZlKGN0eC5kb2MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgbm9kZSA9IGlzTm9kZShpdGVtKVxuICAgICAgICA/IGl0ZW1cbiAgICAgICAgOiBjdHguZG9jLmNyZWF0ZU5vZGUoaXRlbSwgeyBvblRhZ09iajogbyA9PiAodGFnT2JqID0gbykgfSk7XG4gICAgaWYgKCF0YWdPYmopXG4gICAgICAgIHRhZ09iaiA9IGdldFRhZ09iamVjdChjdHguZG9jLnNjaGVtYS50YWdzLCBub2RlKTtcbiAgICBjb25zdCBwcm9wcyA9IHN0cmluZ2lmeVByb3BzKG5vZGUsIHRhZ09iaiwgY3R4KTtcbiAgICBpZiAocHJvcHMubGVuZ3RoID4gMClcbiAgICAgICAgY3R4LmluZGVudEF0U3RhcnQgPSAoY3R4LmluZGVudEF0U3RhcnQgPz8gMCkgKyBwcm9wcy5sZW5ndGggKyAxO1xuICAgIGNvbnN0IHN0ciA9IHR5cGVvZiB0YWdPYmouc3RyaW5naWZ5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdGFnT2JqLnN0cmluZ2lmeShub2RlLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApXG4gICAgICAgIDogaXNTY2FsYXIobm9kZSlcbiAgICAgICAgICAgID8gc3RyaW5naWZ5U3RyaW5nKG5vZGUsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogbm9kZS50b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIGlmICghcHJvcHMpXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgcmV0dXJuIGlzU2NhbGFyKG5vZGUpIHx8IHN0clswXSA9PT0gJ3snIHx8IHN0clswXSA9PT0gJ1snXG4gICAgICAgID8gYCR7cHJvcHN9ICR7c3RyfWBcbiAgICAgICAgOiBgJHtwcm9wc31cXG4ke2N0eC5pbmRlbnR9JHtzdHJ9YDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH07XG4iLCJmdW5jdGlvbiBkZWJ1Zyhsb2dMZXZlbCwgLi4ubWVzc2FnZXMpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycpXG4gICAgICAgIGNvbnNvbGUubG9nKC4uLm1lc3NhZ2VzKTtcbn1cbmZ1bmN0aW9uIHdhcm4obG9nTGV2ZWwsIHdhcm5pbmcpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycgfHwgbG9nTGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkZWJ1Zywgd2FybiB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIGlzQWxpYXMsIGlzU2VxLCBpc01hcCB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbi8vIElmIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggYSBtZXJnZSBrZXkgaXMgYSBzaW5nbGUgbWFwcGluZyBub2RlLCBlYWNoIG9mXG4vLyBpdHMga2V5L3ZhbHVlIHBhaXJzIGlzIGluc2VydGVkIGludG8gdGhlIGN1cnJlbnQgbWFwcGluZywgdW5sZXNzIHRoZSBrZXlcbi8vIGFscmVhZHkgZXhpc3RzIGluIGl0LiBJZiB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXJnZSBrZXkgaXMgYVxuLy8gc2VxdWVuY2UsIHRoZW4gdGhpcyBzZXF1ZW5jZSBpcyBleHBlY3RlZCB0byBjb250YWluIG1hcHBpbmcgbm9kZXMgYW5kIGVhY2hcbi8vIG9mIHRoZXNlIG5vZGVzIGlzIG1lcmdlZCBpbiB0dXJuIGFjY29yZGluZyB0byBpdHMgb3JkZXIgaW4gdGhlIHNlcXVlbmNlLlxuLy8gS2V5cyBpbiBtYXBwaW5nIG5vZGVzIGVhcmxpZXIgaW4gdGhlIHNlcXVlbmNlIG92ZXJyaWRlIGtleXMgc3BlY2lmaWVkIGluXG4vLyBsYXRlciBtYXBwaW5nIG5vZGVzLiAtLSBodHRwOi8veWFtbC5vcmcvdHlwZS9tZXJnZS5odG1sXG5jb25zdCBNRVJHRV9LRVkgPSAnPDwnO1xuY29uc3QgbWVyZ2UgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSBNRVJHRV9LRVkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgJiYgdmFsdWUuZGVzY3JpcHRpb24gPT09IE1FUkdFX0tFWSksXG4gICAgZGVmYXVsdDogJ2tleScsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLFxuICAgIHRlc3Q6IC9ePDwkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBPYmplY3QuYXNzaWduKG5ldyBTY2FsYXIoU3ltYm9sKE1FUkdFX0tFWSkpLCB7XG4gICAgICAgIGFkZFRvSlNNYXA6IGFkZE1lcmdlVG9KU01hcFxuICAgIH0pLFxuICAgIHN0cmluZ2lmeTogKCkgPT4gTUVSR0VfS0VZXG59O1xuY29uc3QgaXNNZXJnZUtleSA9IChjdHgsIGtleSkgPT4gKG1lcmdlLmlkZW50aWZ5KGtleSkgfHxcbiAgICAoaXNTY2FsYXIoa2V5KSAmJlxuICAgICAgICAoIWtleS50eXBlIHx8IGtleS50eXBlID09PSBTY2FsYXIuUExBSU4pICYmXG4gICAgICAgIG1lcmdlLmlkZW50aWZ5KGtleS52YWx1ZSkpKSAmJlxuICAgIGN0eD8uZG9jLnNjaGVtYS50YWdzLnNvbWUodGFnID0+IHRhZy50YWcgPT09IG1lcmdlLnRhZyAmJiB0YWcuZGVmYXVsdCk7XG5mdW5jdGlvbiBhZGRNZXJnZVRvSlNNYXAoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSBjdHggJiYgaXNBbGlhcyh2YWx1ZSkgPyB2YWx1ZS5yZXNvbHZlKGN0eC5kb2MpIDogdmFsdWU7XG4gICAgaWYgKGlzU2VxKHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZS5pdGVtcylcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZSlcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlXG4gICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgY29uc3Qgc291cmNlID0gY3R4ICYmIGlzQWxpYXModmFsdWUpID8gdmFsdWUucmVzb2x2ZShjdHguZG9jKSA6IHZhbHVlO1xuICAgIGlmICghaXNNYXAoc291cmNlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXJnZSBzb3VyY2VzIG11c3QgYmUgbWFwcyBvciBtYXAgYWxpYXNlcycpO1xuICAgIGNvbnN0IHNyY01hcCA9IHNvdXJjZS50b0pTT04obnVsbCwgY3R4LCBNYXApO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNyY01hcCkge1xuICAgICAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBrZXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBrZXksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IHsgYWRkTWVyZ2VUb0pTTWFwLCBpc01lcmdlS2V5LCBtZXJnZSB9O1xuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL2xvZy5qcyc7XG5pbXBvcnQgeyBpc01lcmdlS2V5LCBhZGRNZXJnZVRvSlNNYXAgfSBmcm9tICcuLi9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuZnVuY3Rpb24gYWRkUGFpclRvSlNNYXAoY3R4LCBtYXAsIHsga2V5LCB2YWx1ZSB9KSB7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGtleS5hZGRUb0pTTWFwKVxuICAgICAgICBrZXkuYWRkVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIC8vIFRPRE86IFNob3VsZCBkcm9wIHRoaXMgc3BlY2lhbCBjYXNlIGZvciBiYXJlIDw8IGhhbmRsaW5nXG4gICAgZWxzZSBpZiAoaXNNZXJnZUtleShjdHgsIGtleSkpXG4gICAgICAgIGFkZE1lcmdlVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBqc0tleSA9IHRvSlMoa2V5LCAnJywgY3R4KTtcbiAgICAgICAgaWYgKG1hcCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgbWFwLnNldChqc0tleSwgdG9KUyh2YWx1ZSwganNLZXksIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChqc0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdLZXkgPSBzdHJpbmdpZnlLZXkoa2V5LCBqc0tleSwgY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IGpzVmFsdWUgPSB0b0pTKHZhbHVlLCBzdHJpbmdLZXksIGN0eCk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nS2V5IGluIG1hcClcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBzdHJpbmdLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGpzVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtYXBbc3RyaW5nS2V5XSA9IGpzVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUtleShrZXksIGpzS2V5LCBjdHgpIHtcbiAgICBpZiAoanNLZXkgPT09IG51bGwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAodHlwZW9mIGpzS2V5ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIFN0cmluZyhqc0tleSk7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGN0eD8uZG9jKSB7XG4gICAgICAgIGNvbnN0IHN0ckN0eCA9IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoY3R4LmRvYywge30pO1xuICAgICAgICBzdHJDdHguYW5jaG9ycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGN0eC5hbmNob3JzLmtleXMoKSlcbiAgICAgICAgICAgIHN0ckN0eC5hbmNob3JzLmFkZChub2RlLmFuY2hvcik7XG4gICAgICAgIHN0ckN0eC5pbkZsb3cgPSB0cnVlO1xuICAgICAgICBzdHJDdHguaW5TdHJpbmdpZnlLZXkgPSB0cnVlO1xuICAgICAgICBjb25zdCBzdHJLZXkgPSBrZXkudG9TdHJpbmcoc3RyQ3R4KTtcbiAgICAgICAgaWYgKCFjdHgubWFwS2V5V2FybmVkKSB7XG4gICAgICAgICAgICBsZXQganNvblN0ciA9IEpTT04uc3RyaW5naWZ5KHN0cktleSk7XG4gICAgICAgICAgICBpZiAoanNvblN0ci5sZW5ndGggPiA0MClcbiAgICAgICAgICAgICAgICBqc29uU3RyID0ganNvblN0ci5zdWJzdHJpbmcoMCwgMzYpICsgJy4uLlwiJztcbiAgICAgICAgICAgIHdhcm4oY3R4LmRvYy5vcHRpb25zLmxvZ0xldmVsLCBgS2V5cyB3aXRoIGNvbGxlY3Rpb24gdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQgZHVlIHRvIEpTIE9iamVjdCByZXN0cmljdGlvbnM6ICR7anNvblN0cn0uIFNldCBtYXBBc01hcDogdHJ1ZSB0byB1c2Ugb2JqZWN0IGtleXMuYCk7XG4gICAgICAgICAgICBjdHgubWFwS2V5V2FybmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyS2V5O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoanNLZXkpO1xufVxuXG5leHBvcnQgeyBhZGRQYWlyVG9KU01hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVBhaXIgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyc7XG5pbXBvcnQgeyBhZGRQYWlyVG9KU01hcCB9IGZyb20gJy4vYWRkUGFpclRvSlNNYXAuanMnO1xuaW1wb3J0IHsgTk9ERV9UWVBFLCBQQUlSLCBpc05vZGUgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuZnVuY3Rpb24gY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBrID0gY3JlYXRlTm9kZShrZXksIHVuZGVmaW5lZCwgY3R4KTtcbiAgICBjb25zdCB2ID0gY3JlYXRlTm9kZSh2YWx1ZSwgdW5kZWZpbmVkLCBjdHgpO1xuICAgIHJldHVybiBuZXcgUGFpcihrLCB2KTtcbn1cbmNsYXNzIFBhaXIge1xuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUgPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IFBBSVIgfSk7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNsb25lKHNjaGVtYSkge1xuICAgICAgICBsZXQgeyBrZXksIHZhbHVlIH0gPSB0aGlzO1xuICAgICAgICBpZiAoaXNOb2RlKGtleSkpXG4gICAgICAgICAgICBrZXkgPSBrZXkuY2xvbmUoc2NoZW1hKTtcbiAgICAgICAgaWYgKGlzTm9kZSh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNsb25lKHNjaGVtYSk7XG4gICAgICAgIHJldHVybiBuZXcgUGFpcihrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBwYWlyID0gY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICByZXR1cm4gYWRkUGFpclRvSlNNYXAoY3R4LCBwYWlyLCB0aGlzKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIHJldHVybiBjdHg/LmRvY1xuICAgICAgICAgICAgPyBzdHJpbmdpZnlQYWlyKHRoaXMsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH07XG4iLCJpbXBvcnQgeyBpc0NvbGxlY3Rpb24sIGlzTm9kZSwgaXNTY2FsYXIsIGlzU2VxIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGxpbmVDb21tZW50LCBpbmRlbnRDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcblxuZnVuY3Rpb24gc3RyaW5naWZ5UGFpcih7IGtleSwgdmFsdWUgfSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyBhbGxOdWxsVmFsdWVzLCBkb2MsIGluZGVudCwgaW5kZW50U3RlcCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nLCBpbmRlbnRTZXEsIHNpbXBsZUtleXMgfSB9ID0gY3R4O1xuICAgIGxldCBrZXlDb21tZW50ID0gKGlzTm9kZShrZXkpICYmIGtleS5jb21tZW50KSB8fCBudWxsO1xuICAgIGlmIChzaW1wbGVLZXlzKSB7XG4gICAgICAgIGlmIChrZXlDb21tZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpdGggc2ltcGxlIGtleXMsIGtleSBub2RlcyBjYW5ub3QgaGF2ZSBjb21tZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24oa2V5KSB8fCAoIWlzTm9kZShrZXkpICYmIHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1dpdGggc2ltcGxlIGtleXMsIGNvbGxlY3Rpb24gY2Fubm90IGJlIHVzZWQgYXMgYSBrZXkgdmFsdWUnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGV4cGxpY2l0S2V5ID0gIXNpbXBsZUtleXMgJiZcbiAgICAgICAgKCFrZXkgfHxcbiAgICAgICAgICAgIChrZXlDb21tZW50ICYmIHZhbHVlID09IG51bGwgJiYgIWN0eC5pbkZsb3cpIHx8XG4gICAgICAgICAgICBpc0NvbGxlY3Rpb24oa2V5KSB8fFxuICAgICAgICAgICAgKGlzU2NhbGFyKGtleSlcbiAgICAgICAgICAgICAgICA/IGtleS50eXBlID09PSBTY2FsYXIuQkxPQ0tfRk9MREVEIHx8IGtleS50eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpKTtcbiAgICBjdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHtcbiAgICAgICAgYWxsTnVsbFZhbHVlczogZmFsc2UsXG4gICAgICAgIGltcGxpY2l0S2V5OiAhZXhwbGljaXRLZXkgJiYgKHNpbXBsZUtleXMgfHwgIWFsbE51bGxWYWx1ZXMpLFxuICAgICAgICBpbmRlbnQ6IGluZGVudCArIGluZGVudFN0ZXBcbiAgICB9KTtcbiAgICBsZXQga2V5Q29tbWVudERvbmUgPSBmYWxzZTtcbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgbGV0IHN0ciA9IHN0cmluZ2lmeShrZXksIGN0eCwgKCkgPT4gKGtleUNvbW1lbnREb25lID0gdHJ1ZSksICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKSk7XG4gICAgaWYgKCFleHBsaWNpdEtleSAmJiAhY3R4LmluRmxvdyAmJiBzdHIubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICBpZiAoc2ltcGxlS2V5cylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2l0aCBzaW1wbGUga2V5cywgc2luZ2xlIGxpbmUgc2NhbGFyIG11c3Qgbm90IHNwYW4gbW9yZSB0aGFuIDEwMjQgY2hhcmFjdGVycycpO1xuICAgICAgICBleHBsaWNpdEtleSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjdHguaW5GbG93KSB7XG4gICAgICAgIGlmIChhbGxOdWxsVmFsdWVzIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChrZXlDb21tZW50RG9uZSAmJiBvbkNvbW1lbnQpXG4gICAgICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyID09PSAnJyA/ICc/JyA6IGV4cGxpY2l0S2V5ID8gYD8gJHtzdHJ9YCA6IHN0cjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgoYWxsTnVsbFZhbHVlcyAmJiAhc2ltcGxlS2V5cykgfHwgKHZhbHVlID09IG51bGwgJiYgZXhwbGljaXRLZXkpKSB7XG4gICAgICAgIHN0ciA9IGA/ICR7c3RyfWA7XG4gICAgICAgIGlmIChrZXlDb21tZW50ICYmICFrZXlDb21tZW50RG9uZSkge1xuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKVxuICAgICAgICAgICAgb25DaG9tcEtlZXAoKTtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgaWYgKGtleUNvbW1lbnREb25lKVxuICAgICAgICBrZXlDb21tZW50ID0gbnVsbDtcbiAgICBpZiAoZXhwbGljaXRLZXkpIHtcbiAgICAgICAgaWYgKGtleUNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBjdHguaW5kZW50LCBjb21tZW50U3RyaW5nKGtleUNvbW1lbnQpKTtcbiAgICAgICAgc3RyID0gYD8gJHtzdHJ9XFxuJHtpbmRlbnR9OmA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBgJHtzdHJ9OmA7XG4gICAgICAgIGlmIChrZXlDb21tZW50KVxuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgfVxuICAgIGxldCB2c2IsIHZjYiwgdmFsdWVDb21tZW50O1xuICAgIGlmIChpc05vZGUodmFsdWUpKSB7XG4gICAgICAgIHZzYiA9ICEhdmFsdWUuc3BhY2VCZWZvcmU7XG4gICAgICAgIHZjYiA9IHZhbHVlLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgIHZhbHVlQ29tbWVudCA9IHZhbHVlLmNvbW1lbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2c2IgPSBmYWxzZTtcbiAgICAgICAgdmNiID0gbnVsbDtcbiAgICAgICAgdmFsdWVDb21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICB2YWx1ZSA9IGRvYy5jcmVhdGVOb2RlKHZhbHVlKTtcbiAgICB9XG4gICAgY3R4LmltcGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgaWYgKCFleHBsaWNpdEtleSAmJiAha2V5Q29tbWVudCAmJiBpc1NjYWxhcih2YWx1ZSkpXG4gICAgICAgIGN0eC5pbmRlbnRBdFN0YXJ0ID0gc3RyLmxlbmd0aCArIDE7XG4gICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgaWYgKCFpbmRlbnRTZXEgJiZcbiAgICAgICAgaW5kZW50U3RlcC5sZW5ndGggPj0gMiAmJlxuICAgICAgICAhY3R4LmluRmxvdyAmJlxuICAgICAgICAhZXhwbGljaXRLZXkgJiZcbiAgICAgICAgaXNTZXEodmFsdWUpICYmXG4gICAgICAgICF2YWx1ZS5mbG93ICYmXG4gICAgICAgICF2YWx1ZS50YWcgJiZcbiAgICAgICAgIXZhbHVlLmFuY2hvcikge1xuICAgICAgICAvLyBJZiBpbmRlbnRTZXEgPT09IGZhbHNlLCBjb25zaWRlciAnLSAnIGFzIHBhcnQgb2YgaW5kZW50YXRpb24gd2hlcmUgcG9zc2libGVcbiAgICAgICAgY3R4LmluZGVudCA9IGN0eC5pbmRlbnQuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICBsZXQgdmFsdWVDb21tZW50RG9uZSA9IGZhbHNlO1xuICAgIGNvbnN0IHZhbHVlU3RyID0gc3RyaW5naWZ5KHZhbHVlLCBjdHgsICgpID0+ICh2YWx1ZUNvbW1lbnREb25lID0gdHJ1ZSksICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKSk7XG4gICAgbGV0IHdzID0gJyAnO1xuICAgIGlmIChrZXlDb21tZW50IHx8IHZzYiB8fCB2Y2IpIHtcbiAgICAgICAgd3MgPSB2c2IgPyAnXFxuJyA6ICcnO1xuICAgICAgICBpZiAodmNiKSB7XG4gICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcodmNiKTtcbiAgICAgICAgICAgIHdzICs9IGBcXG4ke2luZGVudENvbW1lbnQoY3MsIGN0eC5pbmRlbnQpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlU3RyID09PSAnJyAmJiAhY3R4LmluRmxvdykge1xuICAgICAgICAgICAgaWYgKHdzID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICB3cyA9ICdcXG5cXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd3MgKz0gYFxcbiR7Y3R4LmluZGVudH1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCFleHBsaWNpdEtleSAmJiBpc0NvbGxlY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHZzMCA9IHZhbHVlU3RyWzBdO1xuICAgICAgICBjb25zdCBubDAgPSB2YWx1ZVN0ci5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgY29uc3QgaGFzTmV3bGluZSA9IG5sMCAhPT0gLTE7XG4gICAgICAgIGNvbnN0IGZsb3cgPSBjdHguaW5GbG93ID8/IHZhbHVlLmZsb3cgPz8gdmFsdWUuaXRlbXMubGVuZ3RoID09PSAwO1xuICAgICAgICBpZiAoaGFzTmV3bGluZSB8fCAhZmxvdykge1xuICAgICAgICAgICAgbGV0IGhhc1Byb3BzTGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGhhc05ld2xpbmUgJiYgKHZzMCA9PT0gJyYnIHx8IHZzMCA9PT0gJyEnKSkge1xuICAgICAgICAgICAgICAgIGxldCBzcDAgPSB2YWx1ZVN0ci5pbmRleE9mKCcgJyk7XG4gICAgICAgICAgICAgICAgaWYgKHZzMCA9PT0gJyYnICYmXG4gICAgICAgICAgICAgICAgICAgIHNwMCAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgc3AwIDwgbmwwICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlU3RyW3NwMCArIDFdID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3AwID0gdmFsdWVTdHIuaW5kZXhPZignICcsIHNwMCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3AwID09PSAtMSB8fCBubDAgPCBzcDApXG4gICAgICAgICAgICAgICAgICAgIGhhc1Byb3BzTGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3BzTGluZSlcbiAgICAgICAgICAgICAgICB3cyA9IGBcXG4ke2N0eC5pbmRlbnR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZVN0ciA9PT0gJycgfHwgdmFsdWVTdHJbMF0gPT09ICdcXG4nKSB7XG4gICAgICAgIHdzID0gJyc7XG4gICAgfVxuICAgIHN0ciArPSB3cyArIHZhbHVlU3RyO1xuICAgIGlmIChjdHguaW5GbG93KSB7XG4gICAgICAgIGlmICh2YWx1ZUNvbW1lbnREb25lICYmIG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZUNvbW1lbnQgJiYgIXZhbHVlQ29tbWVudERvbmUpIHtcbiAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyh2YWx1ZUNvbW1lbnQpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeVBhaXIgfTtcbiIsImltcG9ydCB7IGlzTm9kZSwgaXNQYWlyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgbGluZUNvbW1lbnQsIGluZGVudENvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlDb2xsZWN0aW9uKGNvbGxlY3Rpb24sIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZsb3cgPSBjdHguaW5GbG93ID8/IGNvbGxlY3Rpb24uZmxvdztcbiAgICBjb25zdCBzdHJpbmdpZnkgPSBmbG93ID8gc3RyaW5naWZ5Rmxvd0NvbGxlY3Rpb24gOiBzdHJpbmdpZnlCbG9ja0NvbGxlY3Rpb247XG4gICAgcmV0dXJuIHN0cmluZ2lmeShjb2xsZWN0aW9uLCBjdHgsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uKHsgY29tbWVudCwgaXRlbXMgfSwgY3R4LCB7IGJsb2NrSXRlbVByZWZpeCwgZmxvd0NoYXJzLCBpdGVtSW5kZW50LCBvbkNob21wS2VlcCwgb25Db21tZW50IH0pIHtcbiAgICBjb25zdCB7IGluZGVudCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nIH0gfSA9IGN0eDtcbiAgICBjb25zdCBpdGVtQ3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGluZGVudDogaXRlbUluZGVudCwgdHlwZTogbnVsbCB9KTtcbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7IC8vIGZsYWcgZm9yIHRoZSBwcmVjZWRpbmcgbm9kZSdzIHN0YXR1c1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGxldCBjb21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKGlzTm9kZShpdGVtKSkge1xuICAgICAgICAgICAgaWYgKCFjaG9tcEtlZXAgJiYgaXRlbS5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaXRlbS5jb21tZW50QmVmb3JlLCBjaG9tcEtlZXApO1xuICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudClcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaXRlbS5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihpdGVtKSkge1xuICAgICAgICAgICAgY29uc3QgaWsgPSBpc05vZGUoaXRlbS5rZXkpID8gaXRlbS5rZXkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGlrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaG9tcEtlZXAgJiYgaWsuc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaWsuY29tbWVudEJlZm9yZSwgY2hvbXBLZWVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN0ciA9IHN0cmluZ2lmeShpdGVtLCBpdGVtQ3R4LCAoKSA9PiAoY29tbWVudCA9IG51bGwpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGl0ZW1JbmRlbnQsIGNvbW1lbnRTdHJpbmcoY29tbWVudCkpO1xuICAgICAgICBpZiAoY2hvbXBLZWVwICYmIGNvbW1lbnQpXG4gICAgICAgICAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICAgICAgbGluZXMucHVzaChibG9ja0l0ZW1QcmVmaXggKyBzdHIpO1xuICAgIH1cbiAgICBsZXQgc3RyO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3RyID0gZmxvd0NoYXJzLnN0YXJ0ICsgZmxvd0NoYXJzLmVuZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0ciA9IGxpbmVzWzBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICBzdHIgKz0gbGluZSA/IGBcXG4ke2luZGVudH0ke2xpbmV9YCA6ICdcXG4nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIHN0ciArPSAnXFxuJyArIGluZGVudENvbW1lbnQoY29tbWVudFN0cmluZyhjb21tZW50KSwgaW5kZW50KTtcbiAgICAgICAgaWYgKG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaG9tcEtlZXAgJiYgb25DaG9tcEtlZXApXG4gICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uKHsgaXRlbXMgfSwgY3R4LCB7IGZsb3dDaGFycywgaXRlbUluZGVudCB9KSB7XG4gICAgY29uc3QgeyBpbmRlbnQsIGluZGVudFN0ZXAsIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogZmNQYWRkaW5nLCBvcHRpb25zOiB7IGNvbW1lbnRTdHJpbmcgfSB9ID0gY3R4O1xuICAgIGl0ZW1JbmRlbnQgKz0gaW5kZW50U3RlcDtcbiAgICBjb25zdCBpdGVtQ3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7XG4gICAgICAgIGluZGVudDogaXRlbUluZGVudCxcbiAgICAgICAgaW5GbG93OiB0cnVlLFxuICAgICAgICB0eXBlOiBudWxsXG4gICAgfSk7XG4gICAgbGV0IHJlcU5ld2xpbmUgPSBmYWxzZTtcbiAgICBsZXQgbGluZXNBdFZhbHVlID0gMDtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBsZXQgY29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChpc05vZGUoaXRlbSkpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpdGVtLmNvbW1lbnRCZWZvcmUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGl0ZW0uY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIoaXRlbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlrID0gaXNOb2RlKGl0ZW0ua2V5KSA/IGl0ZW0ua2V5IDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpaykge1xuICAgICAgICAgICAgICAgIGlmIChpay5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpay5jb21tZW50QmVmb3JlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlrLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXYgPSBpc05vZGUoaXRlbS52YWx1ZSkgPyBpdGVtLnZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpdikge1xuICAgICAgICAgICAgICAgIGlmIChpdi5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gaXYuY29tbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoaXYuY29tbWVudEJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgcmVxTmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLnZhbHVlID09IG51bGwgJiYgaWs/LmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaWsuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICBsZXQgc3RyID0gc3RyaW5naWZ5KGl0ZW0sIGl0ZW1DdHgsICgpID0+IChjb21tZW50ID0gbnVsbCkpO1xuICAgICAgICBpZiAoaSA8IGl0ZW1zLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBzdHIgKz0gJywnO1xuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGl0ZW1JbmRlbnQsIGNvbW1lbnRTdHJpbmcoY29tbWVudCkpO1xuICAgICAgICBpZiAoIXJlcU5ld2xpbmUgJiYgKGxpbmVzLmxlbmd0aCA+IGxpbmVzQXRWYWx1ZSB8fCBzdHIuaW5jbHVkZXMoJ1xcbicpKSlcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICBsaW5lcy5wdXNoKHN0cik7XG4gICAgICAgIGxpbmVzQXRWYWx1ZSA9IGxpbmVzLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBmbG93Q2hhcnM7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBlbmQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXJlcU5ld2xpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGxpbmVzLnJlZHVjZSgoc3VtLCBsaW5lKSA9PiBzdW0gKyBsaW5lLmxlbmd0aCArIDIsIDIpO1xuICAgICAgICAgICAgcmVxTmV3bGluZSA9IGN0eC5vcHRpb25zLmxpbmVXaWR0aCA+IDAgJiYgbGVuID4gY3R4Lm9wdGlvbnMubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXFOZXdsaW5lKSB7XG4gICAgICAgICAgICBsZXQgc3RyID0gc3RhcnQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpXG4gICAgICAgICAgICAgICAgc3RyICs9IGxpbmUgPyBgXFxuJHtpbmRlbnRTdGVwfSR7aW5kZW50fSR7bGluZX1gIDogJ1xcbic7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RyfVxcbiR7aW5kZW50fSR7ZW5kfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RhcnR9JHtmY1BhZGRpbmd9JHtsaW5lcy5qb2luKCcgJyl9JHtmY1BhZGRpbmd9JHtlbmR9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZENvbW1lbnRCZWZvcmUoeyBpbmRlbnQsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZyB9IH0sIGxpbmVzLCBjb21tZW50LCBjaG9tcEtlZXApIHtcbiAgICBpZiAoY29tbWVudCAmJiBjaG9tcEtlZXApXG4gICAgICAgIGNvbW1lbnQgPSBjb21tZW50LnJlcGxhY2UoL15cXG4rLywgJycpO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IGljID0gaW5kZW50Q29tbWVudChjb21tZW50U3RyaW5nKGNvbW1lbnQpLCBpbmRlbnQpO1xuICAgICAgICBsaW5lcy5wdXNoKGljLnRyaW1TdGFydCgpKTsgLy8gQXZvaWQgZG91YmxlIGluZGVudCBvbiBmaXJzdCBsaW5lXG4gICAgfVxufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeUNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkUGFpclRvSlNNYXAgfSBmcm9tICcuL2FkZFBhaXJUb0pTTWFwLmpzJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuL0NvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNQYWlyLCBpc1NjYWxhciwgTUFQIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi9QYWlyLmpzJztcbmltcG9ydCB7IGlzU2NhbGFyVmFsdWUgfSBmcm9tICcuL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGZpbmRQYWlyKGl0ZW1zLCBrZXkpIHtcbiAgICBjb25zdCBrID0gaXNTY2FsYXIoa2V5KSA/IGtleS52YWx1ZSA6IGtleTtcbiAgICBmb3IgKGNvbnN0IGl0IG9mIGl0ZW1zKSB7XG4gICAgICAgIGlmIChpc1BhaXIoaXQpKSB7XG4gICAgICAgICAgICBpZiAoaXQua2V5ID09PSBrZXkgfHwgaXQua2V5ID09PSBrKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihpdC5rZXkpICYmIGl0LmtleS52YWx1ZSA9PT0gaylcbiAgICAgICAgICAgICAgICByZXR1cm4gaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNsYXNzIFlBTUxNYXAgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcbiAgICBzdGF0aWMgZ2V0IHRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiAndGFnOnlhbWwub3JnLDIwMDI6bWFwJztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKE1BUCwgc2NoZW1hKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIGdlbmVyaWMgY29sbGVjdGlvbiBwYXJzaW5nIG1ldGhvZCB0aGF0IGNhbiBiZSBleHRlbmRlZFxuICAgICAqIHRvIG90aGVyIG5vZGUgY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbSBZQU1MTWFwXG4gICAgICovXG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBvYmosIGN0eCkge1xuICAgICAgICBjb25zdCB7IGtlZXBVbmRlZmluZWQsIHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGFkZCA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChvYmosIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlcikgJiYgIXJlcGxhY2VyLmluY2x1ZGVzKGtleSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwga2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChjcmVhdGVQYWlyKGtleSwgdmFsdWUsIGN0eCkpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBvYmopXG4gICAgICAgICAgICAgICAgYWRkKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSlcbiAgICAgICAgICAgICAgICBhZGQoa2V5LCBvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuc29ydE1hcEVudHJpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5zb3J0KHNjaGVtYS5zb3J0TWFwRW50cmllcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHZhbHVlIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG92ZXJ3cml0ZSAtIElmIG5vdCBzZXQgYHRydWVgLCB1c2luZyBhIGtleSB0aGF0IGlzIGFscmVhZHkgaW4gdGhlXG4gICAgICogICBjb2xsZWN0aW9uIHdpbGwgdGhyb3cuIE90aGVyd2lzZSwgb3ZlcndyaXRlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAgICovXG4gICAgYWRkKHBhaXIsIG92ZXJ3cml0ZSkge1xuICAgICAgICBsZXQgX3BhaXI7XG4gICAgICAgIGlmIChpc1BhaXIocGFpcikpXG4gICAgICAgICAgICBfcGFpciA9IHBhaXI7XG4gICAgICAgIGVsc2UgaWYgKCFwYWlyIHx8IHR5cGVvZiBwYWlyICE9PSAnb2JqZWN0JyB8fCAhKCdrZXknIGluIHBhaXIpKSB7XG4gICAgICAgICAgICAvLyBJbiBUeXBlU2NyaXB0LCB0aGlzIG5ldmVyIGhhcHBlbnMuXG4gICAgICAgICAgICBfcGFpciA9IG5ldyBQYWlyKHBhaXIsIHBhaXI/LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBfcGFpciA9IG5ldyBQYWlyKHBhaXIua2V5LCBwYWlyLnZhbHVlKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIF9wYWlyLmtleSk7XG4gICAgICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdGhpcy5zY2hlbWE/LnNvcnRNYXBFbnRyaWVzO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgaWYgKCFvdmVyd3JpdGUpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBLZXkgJHtfcGFpci5rZXl9IGFscmVhZHkgc2V0YCk7XG4gICAgICAgICAgICAvLyBGb3Igc2NhbGFycywga2VlcCB0aGUgb2xkIG5vZGUgJiBpdHMgY29tbWVudHMgYW5kIGFuY2hvcnNcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihwcmV2LnZhbHVlKSAmJiBpc1NjYWxhclZhbHVlKF9wYWlyLnZhbHVlKSlcbiAgICAgICAgICAgICAgICBwcmV2LnZhbHVlLnZhbHVlID0gX3BhaXIudmFsdWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJldi52YWx1ZSA9IF9wYWlyLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNvcnRFbnRyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBzb3J0RW50cmllcyhfcGFpciwgaXRlbSkgPCAwKTtcbiAgICAgICAgICAgIGlmIChpID09PSAtMSlcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goX3BhaXIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGksIDAsIF9wYWlyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChfcGFpcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCBpdCA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIGtleSk7XG4gICAgICAgIGlmICghaXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlbCA9IHRoaXMuaXRlbXMuc3BsaWNlKHRoaXMuaXRlbXMuaW5kZXhPZihpdCksIDEpO1xuICAgICAgICByZXR1cm4gZGVsLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIGdldChrZXksIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBjb25zdCBub2RlID0gaXQ/LnZhbHVlO1xuICAgICAgICByZXR1cm4gKCFrZWVwU2NhbGFyICYmIGlzU2NhbGFyKG5vZGUpID8gbm9kZS52YWx1ZSA6IG5vZGUpID8/IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZChuZXcgUGFpcihrZXksIHZhbHVlKSwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjdHggLSBDb252ZXJzaW9uIGNvbnRleHQsIG9yaWdpbmFsbHkgc2V0IGluIERvY3VtZW50I3RvSlMoKVxuICAgICAqIEBwYXJhbSB7Q2xhc3N9IFR5cGUgLSBJZiBzZXQsIGZvcmNlcyB0aGUgcmV0dXJuZWQgY29sbGVjdGlvbiB0eXBlXG4gICAgICogQHJldHVybnMgSW5zdGFuY2Ugb2YgVHlwZSwgTWFwLCBvciBPYmplY3RcbiAgICAgKi9cbiAgICB0b0pTT04oXywgY3R4LCBUeXBlKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IFR5cGUgPyBuZXcgVHlwZSgpIDogY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICBpZiAoY3R4Py5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShtYXApO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcbiAgICAgICAgICAgIGFkZFBhaXJUb0pTTWFwKGN0eCwgbWFwLCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpc1BhaXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYXAgaXRlbXMgbXVzdCBhbGwgYmUgcGFpcnM7IGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoaXRlbSl9IGluc3RlYWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN0eC5hbGxOdWxsVmFsdWVzICYmIHRoaXMuaGFzQWxsTnVsbFZhbHVlcyhmYWxzZSkpXG4gICAgICAgICAgICBjdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHsgYWxsTnVsbFZhbHVlczogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUNvbGxlY3Rpb24odGhpcywgY3R4LCB7XG4gICAgICAgICAgICBibG9ja0l0ZW1QcmVmaXg6ICcnLFxuICAgICAgICAgICAgZmxvd0NoYXJzOiB7IHN0YXJ0OiAneycsIGVuZDogJ30nIH0sXG4gICAgICAgICAgICBpdGVtSW5kZW50OiBjdHguaW5kZW50IHx8ICcnLFxuICAgICAgICAgICAgb25DaG9tcEtlZXAsXG4gICAgICAgICAgICBvbkNvbW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBZQU1MTWFwLCBmaW5kUGFpciB9O1xuIiwiaW1wb3J0IHsgaXNNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5cbmNvbnN0IG1hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnbWFwJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIG5vZGVDbGFzczogWUFNTE1hcCxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLFxuICAgIHJlc29sdmUobWFwLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghaXNNYXAobWFwKSlcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgbWFwcGluZyBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIG9iaiwgY3R4KSA9PiBZQU1MTWFwLmZyb20oc2NoZW1hLCBvYmosIGN0eClcbn07XG5cbmV4cG9ydCB7IG1hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeUNvbGxlY3Rpb24gfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IFNFUSwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGlzU2NhbGFyVmFsdWUgfSBmcm9tICcuL1NjYWxhci5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuY2xhc3MgWUFNTFNlcSBleHRlbmRzIENvbGxlY3Rpb24ge1xuICAgIHN0YXRpYyBnZXQgdGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoU0VRLCBzY2hlbWEpO1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgfVxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIGBrZXlgIG11c3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIgZm9yIHRoaXMgdG8gc3VjY2VlZC5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZGVsID0gdGhpcy5pdGVtcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgcmV0dXJuIGRlbC5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGl0ID0gdGhpcy5pdGVtc1tpZHhdO1xuICAgICAgICByZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIoaXQpID8gaXQudmFsdWUgOiBpdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjb2xsZWN0aW9uIGluY2x1ZGVzIGEgdmFsdWUgd2l0aCB0aGUga2V5IGBrZXlgLlxuICAgICAqXG4gICAgICogYGtleWAgbXVzdCBjb250YWluIGEgcmVwcmVzZW50YXRpb24gb2YgYW4gaW50ZWdlciBmb3IgdGhpcyB0byBzdWNjZWVkLlxuICAgICAqIEl0IG1heSBiZSB3cmFwcGVkIGluIGEgYFNjYWxhcmAuXG4gICAgICovXG4gICAgaGFzKGtleSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlkeCA9PT0gJ251bWJlcicgJiYgaWR4IDwgdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGNvbGxlY3Rpb24uIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqXG4gICAgICogSWYgYGtleWAgZG9lcyBub3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIsIHRoaXMgd2lsbCB0aHJvdy5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYSB2YWxpZCBpbmRleCwgbm90ICR7a2V5fS5gKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgICAgaWYgKGlzU2NhbGFyKHByZXYpICYmIGlzU2NhbGFyVmFsdWUodmFsdWUpKVxuICAgICAgICAgICAgcHJldi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2lkeF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBzZXEgPSBbXTtcbiAgICAgICAgaWYgKGN0eD8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUoc2VxKTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcbiAgICAgICAgICAgIHNlcS5wdXNoKHRvSlMoaXRlbSwgU3RyaW5nKGkrKyksIGN0eCkpO1xuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlDb2xsZWN0aW9uKHRoaXMsIGN0eCwge1xuICAgICAgICAgICAgYmxvY2tJdGVtUHJlZml4OiAnLSAnLFxuICAgICAgICAgICAgZmxvd0NoYXJzOiB7IHN0YXJ0OiAnWycsIGVuZDogJ10nIH0sXG4gICAgICAgICAgICBpdGVtSW5kZW50OiAoY3R4LmluZGVudCB8fCAnJykgKyAnICAnLFxuICAgICAgICAgICAgb25DaG9tcEtlZXAsXG4gICAgICAgICAgICBvbkNvbW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgb2JqLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBzZXEgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBpZiAob2JqICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3Qob2JqKSkge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaXQgb2Ygb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBvYmogaW5zdGFuY2VvZiBTZXQgPyBpdCA6IFN0cmluZyhpKyspO1xuICAgICAgICAgICAgICAgICAgICBpdCA9IHJlcGxhY2VyLmNhbGwob2JqLCBrZXksIGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goY3JlYXRlTm9kZShpdCwgdW5kZWZpbmVkLCBjdHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzSXRlbUluZGV4KGtleSkge1xuICAgIGxldCBpZHggPSBpc1NjYWxhcihrZXkpID8ga2V5LnZhbHVlIDoga2V5O1xuICAgIGlmIChpZHggJiYgdHlwZW9mIGlkeCA9PT0gJ3N0cmluZycpXG4gICAgICAgIGlkeCA9IE51bWJlcihpZHgpO1xuICAgIHJldHVybiB0eXBlb2YgaWR4ID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKGlkeCkgJiYgaWR4ID49IDBcbiAgICAgICAgPyBpZHhcbiAgICAgICAgOiBudWxsO1xufVxuXG5leHBvcnQgeyBZQU1MU2VxIH07XG4iLCJpbXBvcnQgeyBpc1NlcSB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcblxuY29uc3Qgc2VxID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgbm9kZUNsYXNzOiBZQU1MU2VxLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnNlcScsXG4gICAgcmVzb2x2ZShzZXEsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKCFpc1NlcShzZXEpKVxuICAgICAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBzZXF1ZW5jZSBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIG9iaiwgY3R4KSA9PiBZQU1MU2VxLmZyb20oc2NoZW1hLCBvYmosIGN0eClcbn07XG5cbmV4cG9ydCB7IHNlcSB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmNvbnN0IHN0cmluZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsXG4gICAgcmVzb2x2ZTogc3RyID0+IHN0cixcbiAgICBzdHJpbmdpZnkoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGN0eCA9IE9iamVjdC5hc3NpZ24oeyBhY3R1YWxTdHJpbmc6IHRydWUgfSwgY3R4KTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IHN0cmluZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuY29uc3QgbnVsbFRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT0gbnVsbCxcbiAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsXG4gICAgdGVzdDogL14oPzp+fFtObl11bGx8TlVMTCk/JC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICBzdHJpbmdpZnk6ICh7IHNvdXJjZSB9LCBjdHgpID0+IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnICYmIG51bGxUYWcudGVzdC50ZXN0KHNvdXJjZSlcbiAgICAgICAgPyBzb3VyY2VcbiAgICAgICAgOiBjdHgub3B0aW9ucy5udWxsU3RyXG59O1xuXG5leHBvcnQgeyBudWxsVGFnIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBib29sVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86W1R0XXJ1ZXxUUlVFfFtGZl1hbHNlfEZBTFNFKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBuZXcgU2NhbGFyKHN0clswXSA9PT0gJ3QnIHx8IHN0clswXSA9PT0gJ1QnKSxcbiAgICBzdHJpbmdpZnkoeyBzb3VyY2UsIHZhbHVlIH0sIGN0eCkge1xuICAgICAgICBpZiAoc291cmNlICYmIGJvb2xUYWcudGVzdC50ZXN0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN2ID0gc291cmNlWzBdID09PSAndCcgfHwgc291cmNlWzBdID09PSAnVCc7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHN2KVxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlID8gY3R4Lm9wdGlvbnMudHJ1ZVN0ciA6IGN0eC5vcHRpb25zLmZhbHNlU3RyO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGJvb2xUYWcgfTtcbiIsImZ1bmN0aW9uIHN0cmluZ2lmeU51bWJlcih7IGZvcm1hdCwgbWluRnJhY3Rpb25EaWdpdHMsIHRhZywgdmFsdWUgfSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICBjb25zdCBudW0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBOdW1iZXIodmFsdWUpO1xuICAgIGlmICghaXNGaW5pdGUobnVtKSlcbiAgICAgICAgcmV0dXJuIGlzTmFOKG51bSkgPyAnLm5hbicgOiBudW0gPCAwID8gJy0uaW5mJyA6ICcuaW5mJztcbiAgICBsZXQgbiA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICBpZiAoIWZvcm1hdCAmJlxuICAgICAgICBtaW5GcmFjdGlvbkRpZ2l0cyAmJlxuICAgICAgICAoIXRhZyB8fCB0YWcgPT09ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcpICYmXG4gICAgICAgIC9eXFxkLy50ZXN0KG4pKSB7XG4gICAgICAgIGxldCBpID0gbi5pbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgaSA9IG4ubGVuZ3RoO1xuICAgICAgICAgICAgbiArPSAnLic7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGQgPSBtaW5GcmFjdGlvbkRpZ2l0cyAtIChuLmxlbmd0aCAtIGkgLSAxKTtcbiAgICAgICAgd2hpbGUgKGQtLSA+IDApXG4gICAgICAgICAgICBuICs9ICcwJztcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeU51bWJlciB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBmbG9hdE5hTiA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXig/OlstK10/XFwuKD86aW5mfEluZnxJTkYpfFxcLm5hbnxcXC5OYU58XFwuTkFOKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBzdHIuc2xpY2UoLTMpLnRvTG93ZXJDYXNlKCkgPT09ICduYW4nXG4gICAgICAgID8gTmFOXG4gICAgICAgIDogc3RyWzBdID09PSAnLSdcbiAgICAgICAgICAgID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcbmNvbnN0IGZsb2F0RXhwID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIGZvcm1hdDogJ0VYUCcsXG4gICAgdGVzdDogL15bLStdPyg/OlxcLlswLTldK3xbMC05XSsoPzpcXC5bMC05XSopPylbZUVdWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gcGFyc2VGbG9hdChzdHIpLFxuICAgIHN0cmluZ2lmeShub2RlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihub2RlLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBudW0udG9FeHBvbmVudGlhbCgpIDogc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIH1cbn07XG5jb25zdCBmbG9hdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXlstK10/KD86XFwuWzAtOV0rfFswLTldK1xcLlswLTldKikkLyxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IFNjYWxhcihwYXJzZUZsb2F0KHN0cikpO1xuICAgICAgICBjb25zdCBkb3QgPSBzdHIuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZG90ICE9PSAtMSAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnMCcpXG4gICAgICAgICAgICBub2RlLm1pbkZyYWN0aW9uRGlnaXRzID0gc3RyLmxlbmd0aCAtIGRvdCAtIDE7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5cbmV4cG9ydCB7IGZsb2F0LCBmbG9hdEV4cCwgZmxvYXROYU4gfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBpbnRJZGVudGlmeSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcbmNvbnN0IGludFJlc29sdmUgPSAoc3RyLCBvZmZzZXQsIHJhZGl4LCB7IGludEFzQmlnSW50IH0pID0+IChpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhvZmZzZXQpLCByYWRpeCkpO1xuZnVuY3Rpb24gaW50U3RyaW5naWZ5KG5vZGUsIHJhZGl4LCBwcmVmaXgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBub2RlO1xuICAgIGlmIChpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMClcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlLnRvU3RyaW5nKHJhZGl4KTtcbiAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50T2N0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnT0NUJyxcbiAgICB0ZXN0OiAvXjBvWzAtN10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMG8nKVxufTtcbmNvbnN0IGludCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMCwgMTAsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBpbnRIZXggPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IGludElkZW50aWZ5KHZhbHVlKSAmJiB2YWx1ZSA+PSAwLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdIRVgnLFxuICAgIHRlc3Q6IC9eMHhbMC05YS1mQS1GXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMTYsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAxNiwgJzB4Jylcbn07XG5cbmV4cG9ydCB7IGludCwgaW50SGV4LCBpbnRPY3QgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgbnVsbFRhZyB9IGZyb20gJy4uL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBib29sVGFnIH0gZnJvbSAnLi9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0TmFOLCBmbG9hdEV4cCwgZmxvYXQgfSBmcm9tICcuL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludE9jdCwgaW50LCBpbnRIZXggfSBmcm9tICcuL2ludC5qcyc7XG5cbmNvbnN0IHNjaGVtYSA9IFtcbiAgICBtYXAsXG4gICAgc2VxLFxuICAgIHN0cmluZyxcbiAgICBudWxsVGFnLFxuICAgIGJvb2xUYWcsXG4gICAgaW50T2N0LFxuICAgIGludCxcbiAgICBpbnRIZXgsXG4gICAgZmxvYXROYU4sXG4gICAgZmxvYXRFeHAsXG4gICAgZmxvYXRcbl07XG5cbmV4cG9ydCB7IHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi4vY29tbW9uL3NlcS5qcyc7XG5cbmZ1bmN0aW9uIGludElkZW50aWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG59XG5jb25zdCBzdHJpbmdpZnlKU09OID0gKHsgdmFsdWUgfSkgPT4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuY29uc3QganNvblNjYWxhcnMgPSBbXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyxcbiAgICAgICAgcmVzb2x2ZTogc3RyID0+IHN0cixcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU09OXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PSBudWxsLFxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJyxcbiAgICAgICAgdGVzdDogL15udWxsJC8sXG4gICAgICAgIHJlc29sdmU6ICgpID0+IG51bGwsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgICAgICB0ZXN0OiAvXnRydWUkfF5mYWxzZSQvLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4gc3RyID09PSAndHJ1ZScsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgICAgIHRlc3Q6IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvLFxuICAgICAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0ludCB9KSA9PiBpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLCAxMCksXG4gICAgICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gaW50SWRlbnRpZnkodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgICAgICB0ZXN0OiAvXi0/KD86MHxbMS05XVswLTldKikoPzpcXC5bMC05XSopPyg/OltlRV1bLStdP1swLTldKyk/JC8sXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZUZsb2F0KHN0ciksXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH1cbl07XG5jb25zdCBqc29uRXJyb3IgPSB7XG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICcnLFxuICAgIHRlc3Q6IC9eLyxcbiAgICByZXNvbHZlKHN0ciwgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGBVbnJlc29sdmVkIHBsYWluIHNjYWxhciAke0pTT04uc3RyaW5naWZ5KHN0cil9YCk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbmNvbnN0IHNjaGVtYSA9IFttYXAsIHNlcV0uY29uY2F0KGpzb25TY2FsYXJzLCBqc29uRXJyb3IpO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuY29uc3QgYmluYXJ5ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksIC8vIEJ1ZmZlciBpbmhlcml0cyBmcm9tIFVpbnQ4QXJyYXlcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgaW4gbm9kZSBhbmQgYW4gVWludDhBcnJheSBpbiBicm93c2Vyc1xuICAgICAqXG4gICAgICogVG8gdXNlIHRoZSByZXN1bHRpbmcgYnVmZmVyIGFzIGFuIGltYWdlLCB5b3UnbGwgd2FudCB0byBkbyBzb21ldGhpbmcgbGlrZTpcbiAgICAgKlxuICAgICAqICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KVxuICAgICAqICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Bob3RvJykuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuICAgICAqL1xuICAgIHJlc29sdmUoc3JjLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gT24gSUUgMTEsIGF0b2IoKSBjYW4ndCBoYW5kbGUgbmV3bGluZXNcbiAgICAgICAgICAgIGNvbnN0IHN0ciA9IGF0b2Ioc3JjLnJlcGxhY2UoL1tcXG5cXHJdL2csICcnKSk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCByZWFkaW5nIGJpbmFyeSB0YWdzOyBlaXRoZXIgQnVmZmVyIG9yIGF0b2IgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHN0cmluZ2lmeSh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICBjb25zdCBidWYgPSB2YWx1ZTsgLy8gY2hlY2tlZCBlYXJsaWVyIGJ5IGJpbmFyeS5pZGVudGlmeSgpXG4gICAgICAgIGxldCBzdHI7XG4gICAgICAgIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGV0IHMgPSAnJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pO1xuICAgICAgICAgICAgc3RyID0gYnRvYShzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IHdyaXRpbmcgYmluYXJ5IHRhZ3M7IGVpdGhlciBCdWZmZXIgb3IgYnRvYSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdHlwZSlcbiAgICAgICAgICAgIHR5cGUgPSBTY2FsYXIuQkxPQ0tfTElURVJBTDtcbiAgICAgICAgaWYgKHR5cGUgIT09IFNjYWxhci5RVU9URV9ET1VCTEUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IE1hdGgubWF4KGN0eC5vcHRpb25zLmxpbmVXaWR0aCAtIGN0eC5pbmRlbnQubGVuZ3RoLCBjdHgub3B0aW9ucy5taW5Db250ZW50V2lkdGgpO1xuICAgICAgICAgICAgY29uc3QgbiA9IE1hdGguY2VpbChzdHIubGVuZ3RoIC8gbGluZVdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIG8gPSAwOyBpIDwgbjsgKytpLCBvICs9IGxpbmVXaWR0aCkge1xuICAgICAgICAgICAgICAgIGxpbmVzW2ldID0gc3RyLnN1YnN0cihvLCBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyID0gbGluZXMuam9pbih0eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTCA/ICdcXG4nIDogJyAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5U3RyaW5nKHsgY29tbWVudCwgdHlwZSwgdmFsdWU6IHN0ciB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGJpbmFyeSB9O1xuIiwiaW1wb3J0IHsgaXNTZXEsIGlzUGFpciwgaXNNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxTZXEuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlUGFpcnMoc2VxLCBvbkVycm9yKSB7XG4gICAgaWYgKGlzU2VxKHNlcSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXEuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gc2VxLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGlzUGFpcihpdGVtKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTWFwKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbXMubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcignRWFjaCBwYWlyIG11c3QgaGF2ZSBpdHMgb3duIHNlcXVlbmNlIGluZGljYXRvcicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBpdGVtLml0ZW1zWzBdIHx8IG5ldyBQYWlyKG5ldyBTY2FsYXIobnVsbCkpO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnRCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIHBhaXIua2V5LmNvbW1lbnRCZWZvcmUgPSBwYWlyLmtleS5jb21tZW50QmVmb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGAke2l0ZW0uY29tbWVudEJlZm9yZX1cXG4ke3BhaXIua2V5LmNvbW1lbnRCZWZvcmV9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbiA9IHBhaXIudmFsdWUgPz8gcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNuLmNvbW1lbnQgPSBjbi5jb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGAke2l0ZW0uY29tbWVudH1cXG4ke2NuLmNvbW1lbnR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGl0ZW0gPSBwYWlyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VxLml0ZW1zW2ldID0gaXNQYWlyKGl0ZW0pID8gaXRlbSA6IG5ldyBQYWlyKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBzZXF1ZW5jZSBmb3IgdGhpcyB0YWcnKTtcbiAgICByZXR1cm4gc2VxO1xufVxuZnVuY3Rpb24gY3JlYXRlUGFpcnMoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSB7XG4gICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgIGNvbnN0IHBhaXJzID0gbmV3IFlBTUxTZXEoc2NoZW1hKTtcbiAgICBwYWlycy50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnO1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAoaXRlcmFibGUgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyYWJsZSkpXG4gICAgICAgIGZvciAobGV0IGl0IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIGl0ID0gcmVwbGFjZXIuY2FsbChpdGVyYWJsZSwgU3RyaW5nKGkrKyksIGl0KTtcbiAgICAgICAgICAgIGxldCBrZXksIHZhbHVlO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBpdFswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpdFsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBba2V5LCB2YWx1ZV0gdHVwbGU6ICR7aXR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdCAmJiBpdCBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhpdCk7XG4gICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXRba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHR1cGxlIHdpdGggb25lIGtleSwgbm90ICR7a2V5cy5sZW5ndGh9IGtleXNgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBpdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhaXJzLml0ZW1zLnB1c2goY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpKTtcbiAgICAgICAgfVxuICAgIHJldHVybiBwYWlycztcbn1cbmNvbnN0IHBhaXJzID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJyxcbiAgICByZXNvbHZlOiByZXNvbHZlUGFpcnMsXG4gICAgY3JlYXRlTm9kZTogY3JlYXRlUGFpcnNcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVBhaXJzLCBwYWlycywgcmVzb2x2ZVBhaXJzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4uLy4uL25vZGVzL3RvSlMuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVBhaXJzLCBjcmVhdGVQYWlycyB9IGZyb20gJy4vcGFpcnMuanMnO1xuXG5jbGFzcyBZQU1MT01hcCBleHRlbmRzIFlBTUxTZXEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFkZCA9IFlBTUxNYXAucHJvdG90eXBlLmFkZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlbGV0ZSA9IFlBTUxNYXAucHJvdG90eXBlLmRlbGV0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmdldCA9IFlBTUxNYXAucHJvdG90eXBlLmdldC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhcyA9IFlBTUxNYXAucHJvdG90eXBlLmhhcy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNldCA9IFlBTUxNYXAucHJvdG90eXBlLnNldC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRhZyA9IFlBTUxPTWFwLnRhZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgYGN0eGAgaXMgZ2l2ZW4sIHRoZSByZXR1cm4gdHlwZSBpcyBhY3R1YWxseSBgTWFwPHVua25vd24sIHVua25vd24+YCxcbiAgICAgKiBidXQgVHlwZVNjcmlwdCB3b24ndCBhbGxvdyB3aWRlbmluZyB0aGUgc2lnbmF0dXJlIG9mIGEgY2hpbGQgbWV0aG9kLlxuICAgICAqL1xuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudG9KU09OKF8pO1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChjdHg/Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKG1hcCk7XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBsZXQga2V5LCB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChpc1BhaXIocGFpcikpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSB0b0pTKHBhaXIua2V5LCAnJywgY3R4KTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSlMocGFpci52YWx1ZSwga2V5LCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdG9KUyhwYWlyLCAnJywgY3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXAuaGFzKGtleSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcmRlcmVkIG1hcHMgbXVzdCBub3QgaW5jbHVkZSBkdXBsaWNhdGUga2V5cycpO1xuICAgICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpIHtcbiAgICAgICAgY29uc3QgcGFpcnMgPSBjcmVhdGVQYWlycyhzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpO1xuICAgICAgICBjb25zdCBvbWFwID0gbmV3IHRoaXMoKTtcbiAgICAgICAgb21hcC5pdGVtcyA9IHBhaXJzLml0ZW1zO1xuICAgICAgICByZXR1cm4gb21hcDtcbiAgICB9XG59XG5ZQU1MT01hcC50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6b21hcCc7XG5jb25zdCBvbWFwID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIE1hcCxcbiAgICBub2RlQ2xhc3M6IFlBTUxPTWFwLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnLFxuICAgIHJlc29sdmUoc2VxLCBvbkVycm9yKSB7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gcmVzb2x2ZVBhaXJzKHNlcSwgb25FcnJvcik7XG4gICAgICAgIGNvbnN0IHNlZW5LZXlzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgeyBrZXkgfSBvZiBwYWlycy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKGlzU2NhbGFyKGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VlbktleXMuaW5jbHVkZXMoa2V5LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGBPcmRlcmVkIG1hcHMgbXVzdCBub3QgaW5jbHVkZSBkdXBsaWNhdGUga2V5czogJHtrZXkudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWVuS2V5cy5wdXNoKGtleS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBZQU1MT01hcCgpLCBwYWlycyk7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSA9PiBZQU1MT01hcC5mcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eClcbn07XG5cbmV4cG9ydCB7IFlBTUxPTWFwLCBvbWFwIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5mdW5jdGlvbiBib29sU3RyaW5naWZ5KHsgdmFsdWUsIHNvdXJjZSB9LCBjdHgpIHtcbiAgICBjb25zdCBib29sT2JqID0gdmFsdWUgPyB0cnVlVGFnIDogZmFsc2VUYWc7XG4gICAgaWYgKHNvdXJjZSAmJiBib29sT2JqLnRlc3QudGVzdChzb3VyY2UpKVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIHJldHVybiB2YWx1ZSA/IGN0eC5vcHRpb25zLnRydWVTdHIgOiBjdHgub3B0aW9ucy5mYWxzZVN0cjtcbn1cbmNvbnN0IHRydWVUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSB0cnVlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgdGVzdDogL14oPzpZfHl8W1l5XWVzfFlFU3xbVHRdcnVlfFRSVUV8W09vXW58T04pJC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcih0cnVlKSxcbiAgICBzdHJpbmdpZnk6IGJvb2xTdHJpbmdpZnlcbn07XG5jb25zdCBmYWxzZVRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT09IGZhbHNlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgdGVzdDogL14oPzpOfG58W05uXW98Tk98W0ZmXWFsc2V8RkFMU0V8W09vXWZmfE9GRikkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBuZXcgU2NhbGFyKGZhbHNlKSxcbiAgICBzdHJpbmdpZnk6IGJvb2xTdHJpbmdpZnlcbn07XG5cbmV4cG9ydCB7IGZhbHNlVGFnLCB0cnVlVGFnIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbmNvbnN0IGZsb2F0TmFOID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIHRlc3Q6IC9eKD86Wy0rXT9cXC4oPzppbmZ8SW5mfElORil8XFwubmFufFxcLk5hTnxcXC5OQU4pJC8sXG4gICAgcmVzb2x2ZTogKHN0cikgPT4gc3RyLnNsaWNlKC0zKS50b0xvd2VyQ2FzZSgpID09PSAnbmFuJ1xuICAgICAgICA/IE5hTlxuICAgICAgICA6IHN0clswXSA9PT0gJy0nXG4gICAgICAgICAgICA/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBmbG9hdEV4cCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdFWFAnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpbMC05XVswLTlfXSopPyg/OlxcLlswLTlfXSopP1tlRV1bLStdP1swLTldKyQvLFxuICAgIHJlc29sdmU6IChzdHIpID0+IHBhcnNlRmxvYXQoc3RyLnJlcGxhY2UoL18vZywgJycpKSxcbiAgICBzdHJpbmdpZnkobm9kZSkge1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIobm9kZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pID8gbnVtLnRvRXhwb25lbnRpYWwoKSA6IHN0cmluZ2lmeU51bWJlcihub2RlKTtcbiAgICB9XG59O1xuY29uc3QgZmxvYXQgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL15bLStdPyg/OlswLTldWzAtOV9dKik/XFwuWzAtOV9dKiQvLFxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgU2NhbGFyKHBhcnNlRmxvYXQoc3RyLnJlcGxhY2UoL18vZywgJycpKSk7XG4gICAgICAgIGNvbnN0IGRvdCA9IHN0ci5pbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChkb3QgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gc3RyLnN1YnN0cmluZyhkb3QgKyAxKS5yZXBsYWNlKC9fL2csICcnKTtcbiAgICAgICAgICAgIGlmIChmW2YubGVuZ3RoIC0gMV0gPT09ICcwJylcbiAgICAgICAgICAgICAgICBub2RlLm1pbkZyYWN0aW9uRGlnaXRzID0gZi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcblxuZXhwb3J0IHsgZmxvYXQsIGZsb2F0RXhwLCBmbG9hdE5hTiB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbmNvbnN0IGludElkZW50aWZ5ID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuZnVuY3Rpb24gaW50UmVzb2x2ZShzdHIsIG9mZnNldCwgcmFkaXgsIHsgaW50QXNCaWdJbnQgfSkge1xuICAgIGNvbnN0IHNpZ24gPSBzdHJbMF07XG4gICAgaWYgKHNpZ24gPT09ICctJyB8fCBzaWduID09PSAnKycpXG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcob2Zmc2V0KS5yZXBsYWNlKC9fL2csICcnKTtcbiAgICBpZiAoaW50QXNCaWdJbnQpIHtcbiAgICAgICAgc3dpdGNoIChyYWRpeCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHN0ciA9IGAwYiR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgc3RyID0gYDBvJHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgc3RyID0gYDB4JHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuID0gQmlnSW50KHN0cik7XG4gICAgICAgIHJldHVybiBzaWduID09PSAnLScgPyBCaWdJbnQoLTEpICogbiA6IG47XG4gICAgfVxuICAgIGNvbnN0IG4gPSBwYXJzZUludChzdHIsIHJhZGl4KTtcbiAgICByZXR1cm4gc2lnbiA9PT0gJy0nID8gLTEgKiBuIDogbjtcbn1cbmZ1bmN0aW9uIGludFN0cmluZ2lmeShub2RlLCByYWRpeCwgcHJlZml4KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBpZiAoaW50SWRlbnRpZnkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHZhbHVlLnRvU3RyaW5nKHJhZGl4KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/ICctJyArIHByZWZpeCArIHN0ci5zdWJzdHIoMSkgOiBwcmVmaXggKyBzdHI7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdpZnlOdW1iZXIobm9kZSk7XG59XG5jb25zdCBpbnRCaW4gPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdCSU4nLFxuICAgIHRlc3Q6IC9eWy0rXT8wYlswLTFfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMiwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsIDIsICcwYicpXG59O1xuY29uc3QgaW50T2N0ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnT0NUJyxcbiAgICB0ZXN0OiAvXlstK10/MFswLTdfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMSwgOCwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsIDgsICcwJylcbn07XG5jb25zdCBpbnQgPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDAsIDEwLCBvcHQpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgaW50SGV4ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnSEVYJyxcbiAgICB0ZXN0OiAvXlstK10/MHhbMC05YS1mQS1GX10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDE2LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgMTYsICcweCcpXG59O1xuXG5leHBvcnQgeyBpbnQsIGludEJpbiwgaW50SGV4LCBpbnRPY3QgfTtcbiIsImltcG9ydCB7IGlzTWFwLCBpc1BhaXIsIGlzU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCwgZmluZFBhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MTWFwLmpzJztcblxuY2xhc3MgWUFNTFNldCBleHRlbmRzIFlBTUxNYXAge1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICBzdXBlcihzY2hlbWEpO1xuICAgICAgICB0aGlzLnRhZyA9IFlBTUxTZXQudGFnO1xuICAgIH1cbiAgICBhZGQoa2V5KSB7XG4gICAgICAgIGxldCBwYWlyO1xuICAgICAgICBpZiAoaXNQYWlyKGtleSkpXG4gICAgICAgICAgICBwYWlyID0ga2V5O1xuICAgICAgICBlbHNlIGlmIChrZXkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBrZXkgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAna2V5JyBpbiBrZXkgJiZcbiAgICAgICAgICAgICd2YWx1ZScgaW4ga2V5ICYmXG4gICAgICAgICAgICBrZXkudmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICBwYWlyID0gbmV3IFBhaXIoa2V5LmtleSwgbnVsbCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhaXIgPSBuZXcgUGFpcihrZXksIG51bGwpO1xuICAgICAgICBjb25zdCBwcmV2ID0gZmluZFBhaXIodGhpcy5pdGVtcywgcGFpci5rZXkpO1xuICAgICAgICBpZiAoIXByZXYpXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gocGFpcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIGBrZWVwUGFpcmAgaXMgYHRydWVgLCByZXR1cm5zIHRoZSBQYWlyIG1hdGNoaW5nIGBrZXlgLlxuICAgICAqIE90aGVyd2lzZSwgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhhdCBQYWlyJ3Mga2V5LlxuICAgICAqL1xuICAgIGdldChrZXksIGtlZXBQYWlyKSB7XG4gICAgICAgIGNvbnN0IHBhaXIgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICByZXR1cm4gIWtlZXBQYWlyICYmIGlzUGFpcihwYWlyKVxuICAgICAgICAgICAgPyBpc1NjYWxhcihwYWlyLmtleSlcbiAgICAgICAgICAgICAgICA/IHBhaXIua2V5LnZhbHVlXG4gICAgICAgICAgICAgICAgOiBwYWlyLmtleVxuICAgICAgICAgICAgOiBwYWlyO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGJvb2xlYW4gdmFsdWUgZm9yIHNldChrZXksIHZhbHVlKSBpbiBhIFlBTUwgc2V0LCBub3QgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBpZiAocHJldiAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKHRoaXMuaXRlbXMuaW5kZXhPZihwcmV2KSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXByZXYgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChuZXcgUGFpcihrZXkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pTT04oXywgY3R4KSB7XG4gICAgICAgIHJldHVybiBzdXBlci50b0pTT04oXywgY3R4LCBTZXQpO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmhhc0FsbE51bGxWYWx1ZXModHJ1ZSkpXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcoT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGFsbE51bGxWYWx1ZXM6IHRydWUgfSksIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NldCBpdGVtcyBtdXN0IGFsbCBoYXZlIG51bGwgdmFsdWVzJyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgICAgICBjb25zdCB7IHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXJhYmxlKSlcbiAgICAgICAgICAgIGZvciAobGV0IHZhbHVlIG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXBsYWNlci5jYWxsKGl0ZXJhYmxlLCB2YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHNldC5pdGVtcy5wdXNoKGNyZWF0ZVBhaXIodmFsdWUsIG51bGwsIGN0eCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbn1cbllBTUxTZXQudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOnNldCc7XG5jb25zdCBzZXQgPSB7XG4gICAgY29sbGVjdGlvbjogJ21hcCcsXG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgU2V0LFxuICAgIG5vZGVDbGFzczogWUFNTFNldCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpzZXQnLFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpID0+IFlBTUxTZXQuZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpLFxuICAgIHJlc29sdmUobWFwLCBvbkVycm9yKSB7XG4gICAgICAgIGlmIChpc01hcChtYXApKSB7XG4gICAgICAgICAgICBpZiAobWFwLmhhc0FsbE51bGxWYWx1ZXModHJ1ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFlBTUxTZXQoKSwgbWFwKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvbkVycm9yKCdTZXQgaXRlbXMgbXVzdCBhbGwgaGF2ZSBudWxsIHZhbHVlcycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgbWFwcGluZyBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBZQU1MU2V0LCBzZXQgfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG4vKiogSW50ZXJuYWwgdHlwZXMgaGFuZGxlIGJpZ2ludCBhcyBudW1iZXIsIGJlY2F1c2UgVFMgY2FuJ3QgZmlndXJlIGl0IG91dC4gKi9cbmZ1bmN0aW9uIHBhcnNlU2V4YWdlc2ltYWwoc3RyLCBhc0JpZ0ludCkge1xuICAgIGNvbnN0IHNpZ24gPSBzdHJbMF07XG4gICAgY29uc3QgcGFydHMgPSBzaWduID09PSAnLScgfHwgc2lnbiA9PT0gJysnID8gc3RyLnN1YnN0cmluZygxKSA6IHN0cjtcbiAgICBjb25zdCBudW0gPSAobikgPT4gYXNCaWdJbnQgPyBCaWdJbnQobikgOiBOdW1iZXIobik7XG4gICAgY29uc3QgcmVzID0gcGFydHNcbiAgICAgICAgLnJlcGxhY2UoL18vZywgJycpXG4gICAgICAgIC5zcGxpdCgnOicpXG4gICAgICAgIC5yZWR1Y2UoKHJlcywgcCkgPT4gcmVzICogbnVtKDYwKSArIG51bShwKSwgbnVtKDApKTtcbiAgICByZXR1cm4gKHNpZ24gPT09ICctJyA/IG51bSgtMSkgKiByZXMgOiByZXMpO1xufVxuLyoqXG4gKiBoaGhoOm1tOnNzLnNzc1xuICpcbiAqIEludGVybmFsIHR5cGVzIGhhbmRsZSBiaWdpbnQgYXMgbnVtYmVyLCBiZWNhdXNlIFRTIGNhbid0IGZpZ3VyZSBpdCBvdXQuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNleGFnZXNpbWFsKG5vZGUpIHtcbiAgICBsZXQgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBsZXQgbnVtID0gKG4pID0+IG47XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpXG4gICAgICAgIG51bSA9IG4gPT4gQmlnSW50KG4pO1xuICAgIGVsc2UgaWYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIGxldCBzaWduID0gJyc7XG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICB2YWx1ZSAqPSBudW0oLTEpO1xuICAgIH1cbiAgICBjb25zdCBfNjAgPSBudW0oNjApO1xuICAgIGNvbnN0IHBhcnRzID0gW3ZhbHVlICUgXzYwXTsgLy8gc2Vjb25kcywgaW5jbHVkaW5nIG1zXG4gICAgaWYgKHZhbHVlIDwgNjApIHtcbiAgICAgICAgcGFydHMudW5zaGlmdCgwKTsgLy8gYXQgbGVhc3Qgb25lIDogaXMgcmVxdWlyZWRcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIC0gcGFydHNbMF0pIC8gXzYwO1xuICAgICAgICBwYXJ0cy51bnNoaWZ0KHZhbHVlICUgXzYwKTsgLy8gbWludXRlc1xuICAgICAgICBpZiAodmFsdWUgPj0gNjApIHtcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIC0gcGFydHNbMF0pIC8gXzYwO1xuICAgICAgICAgICAgcGFydHMudW5zaGlmdCh2YWx1ZSk7IC8vIGhvdXJzXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChzaWduICtcbiAgICAgICAgcGFydHNcbiAgICAgICAgICAgIC5tYXAobiA9PiBTdHJpbmcobikucGFkU3RhcnQoMiwgJzAnKSlcbiAgICAgICAgICAgIC5qb2luKCc6JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8wMDAwMDBcXGQqJC8sICcnKSAvLyAlIDYwIG1heSBpbnRyb2R1Y2UgZXJyb3JcbiAgICApO1xufVxuY29uc3QgaW50VGltZSA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnVElNRScsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKig/OjpbMC01XT9bMC05XSkrJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIHsgaW50QXNCaWdJbnQgfSkgPT4gcGFyc2VTZXhhZ2VzaW1hbChzdHIsIGludEFzQmlnSW50KSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVNleGFnZXNpbWFsXG59O1xuY29uc3QgZmxvYXRUaW1lID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIGZvcm1hdDogJ1RJTUUnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XVswLTlfXSooPzo6WzAtNV0/WzAtOV0pK1xcLlswLTlfXSokLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gcGFyc2VTZXhhZ2VzaW1hbChzdHIsIGZhbHNlKSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVNleGFnZXNpbWFsXG59O1xuY29uc3QgdGltZXN0YW1wID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLFxuICAgIC8vIElmIHRoZSB0aW1lIHpvbmUgaXMgb21pdHRlZCwgdGhlIHRpbWVzdGFtcCBpcyBhc3N1bWVkIHRvIGJlIHNwZWNpZmllZCBpbiBVVEMuIFRoZSB0aW1lIHBhcnRcbiAgICAvLyBtYXkgYmUgb21pdHRlZCBhbHRvZ2V0aGVyLCByZXN1bHRpbmcgaW4gYSBkYXRlIGZvcm1hdC4gSW4gc3VjaCBhIGNhc2UsIHRoZSB0aW1lIHBhcnQgaXNcbiAgICAvLyBhc3N1bWVkIHRvIGJlIDAwOjAwOjAwWiAoc3RhcnQgb2YgZGF5LCBVVEMpLlxuICAgIHRlc3Q6IFJlZ0V4cCgnXihbMC05XXs0fSktKFswLTldezEsMn0pLShbMC05XXsxLDJ9KScgKyAvLyBZWVlZLU1tLURkXG4gICAgICAgICcoPzonICsgLy8gdGltZSBpcyBvcHRpb25hbFxuICAgICAgICAnKD86dHxUfFsgXFxcXHRdKyknICsgLy8gdCB8IFQgfCB3aGl0ZXNwYWNlXG4gICAgICAgICcoWzAtOV17MSwyfSk6KFswLTldezEsMn0pOihbMC05XXsxLDJ9KFxcXFwuWzAtOV0rKT8pJyArIC8vIEhoOk1tOlNzKC5zcyk/XG4gICAgICAgICcoPzpbIFxcXFx0XSooWnxbLStdWzAxMl0/WzAtOV0oPzo6WzAtOV17Mn0pPykpPycgKyAvLyBaIHwgKzUgfCAtMDM6MzBcbiAgICAgICAgJyk/JCcpLFxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gc3RyLm1hdGNoKHRpbWVzdGFtcC50ZXN0KTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignISF0aW1lc3RhbXAgZXhwZWN0cyBhIGRhdGUsIHN0YXJ0aW5nIHdpdGggeXl5eS1tbS1kZCcpO1xuICAgICAgICBjb25zdCBbLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZF0gPSBtYXRjaC5tYXAoTnVtYmVyKTtcbiAgICAgICAgY29uc3QgbWlsbGlzZWMgPSBtYXRjaFs3XSA/IE51bWJlcigobWF0Y2hbN10gKyAnMDAnKS5zdWJzdHIoMSwgMykpIDogMDtcbiAgICAgICAgbGV0IGRhdGUgPSBEYXRlLlVUQyh5ZWFyLCBtb250aCAtIDEsIGRheSwgaG91ciB8fCAwLCBtaW51dGUgfHwgMCwgc2Vjb25kIHx8IDAsIG1pbGxpc2VjKTtcbiAgICAgICAgY29uc3QgdHogPSBtYXRjaFs4XTtcbiAgICAgICAgaWYgKHR6ICYmIHR6ICE9PSAnWicpIHtcbiAgICAgICAgICAgIGxldCBkID0gcGFyc2VTZXhhZ2VzaW1hbCh0eiwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGQpIDwgMzApXG4gICAgICAgICAgICAgICAgZCAqPSA2MDtcbiAgICAgICAgICAgIGRhdGUgLT0gNjAwMDAgKiBkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gdmFsdWU/LnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvKFQwMDowMDowMCk/XFwuMDAwWiQvLCAnJykgPz8gJydcbn07XG5cbmV4cG9ydCB7IGZsb2F0VGltZSwgaW50VGltZSwgdGltZXN0YW1wIH07XG4iLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IG51bGxUYWcgfSBmcm9tICcuLi9jb21tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4uL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgYmluYXJ5IH0gZnJvbSAnLi9iaW5hcnkuanMnO1xuaW1wb3J0IHsgdHJ1ZVRhZywgZmFsc2VUYWcgfSBmcm9tICcuL2Jvb2wuanMnO1xuaW1wb3J0IHsgZmxvYXROYU4sIGZsb2F0RXhwLCBmbG9hdCB9IGZyb20gJy4vZmxvYXQuanMnO1xuaW1wb3J0IHsgaW50QmluLCBpbnRPY3QsIGludCwgaW50SGV4IH0gZnJvbSAnLi9pbnQuanMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuL21lcmdlLmpzJztcbmltcG9ydCB7IG9tYXAgfSBmcm9tICcuL29tYXAuanMnO1xuaW1wb3J0IHsgcGFpcnMgfSBmcm9tICcuL3BhaXJzLmpzJztcbmltcG9ydCB7IHNldCB9IGZyb20gJy4vc2V0LmpzJztcbmltcG9ydCB7IGludFRpbWUsIGZsb2F0VGltZSwgdGltZXN0YW1wIH0gZnJvbSAnLi90aW1lc3RhbXAuanMnO1xuXG5jb25zdCBzY2hlbWEgPSBbXG4gICAgbWFwLFxuICAgIHNlcSxcbiAgICBzdHJpbmcsXG4gICAgbnVsbFRhZyxcbiAgICB0cnVlVGFnLFxuICAgIGZhbHNlVGFnLFxuICAgIGludEJpbixcbiAgICBpbnRPY3QsXG4gICAgaW50LFxuICAgIGludEhleCxcbiAgICBmbG9hdE5hTixcbiAgICBmbG9hdEV4cCxcbiAgICBmbG9hdCxcbiAgICBiaW5hcnksXG4gICAgbWVyZ2UsXG4gICAgb21hcCxcbiAgICBwYWlycyxcbiAgICBzZXQsXG4gICAgaW50VGltZSxcbiAgICBmbG9hdFRpbWUsXG4gICAgdGltZXN0YW1wXG5dO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBudWxsVGFnIH0gZnJvbSAnLi9jb21tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGJvb2xUYWcgfSBmcm9tICcuL2NvcmUvYm9vbC5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH0gZnJvbSAnLi9jb3JlL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludCwgaW50SGV4LCBpbnRPY3QgfSBmcm9tICcuL2NvcmUvaW50LmpzJztcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vY29yZS9zY2hlbWEuanMnO1xuaW1wb3J0IHsgc2NoZW1hIGFzIHNjaGVtYSQxIH0gZnJvbSAnLi9qc29uL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBiaW5hcnkgfSBmcm9tICcuL3lhbWwtMS4xL2JpbmFyeS5qcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4veWFtbC0xLjEvbWVyZ2UuanMnO1xuaW1wb3J0IHsgb21hcCB9IGZyb20gJy4veWFtbC0xLjEvb21hcC5qcyc7XG5pbXBvcnQgeyBwYWlycyB9IGZyb20gJy4veWFtbC0xLjEvcGFpcnMuanMnO1xuaW1wb3J0IHsgc2NoZW1hIGFzIHNjaGVtYSQyIH0gZnJvbSAnLi95YW1sLTEuMS9zY2hlbWEuanMnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi95YW1sLTEuMS9zZXQuanMnO1xuaW1wb3J0IHsgdGltZXN0YW1wLCBmbG9hdFRpbWUsIGludFRpbWUgfSBmcm9tICcuL3lhbWwtMS4xL3RpbWVzdGFtcC5qcyc7XG5cbmNvbnN0IHNjaGVtYXMgPSBuZXcgTWFwKFtcbiAgICBbJ2NvcmUnLCBzY2hlbWFdLFxuICAgIFsnZmFpbHNhZmUnLCBbbWFwLCBzZXEsIHN0cmluZ11dLFxuICAgIFsnanNvbicsIHNjaGVtYSQxXSxcbiAgICBbJ3lhbWwxMScsIHNjaGVtYSQyXSxcbiAgICBbJ3lhbWwtMS4xJywgc2NoZW1hJDJdXG5dKTtcbmNvbnN0IHRhZ3NCeU5hbWUgPSB7XG4gICAgYmluYXJ5LFxuICAgIGJvb2w6IGJvb2xUYWcsXG4gICAgZmxvYXQsXG4gICAgZmxvYXRFeHAsXG4gICAgZmxvYXROYU4sXG4gICAgZmxvYXRUaW1lLFxuICAgIGludCxcbiAgICBpbnRIZXgsXG4gICAgaW50T2N0LFxuICAgIGludFRpbWUsXG4gICAgbWFwLFxuICAgIG1lcmdlLFxuICAgIG51bGw6IG51bGxUYWcsXG4gICAgb21hcCxcbiAgICBwYWlycyxcbiAgICBzZXEsXG4gICAgc2V0LFxuICAgIHRpbWVzdGFtcFxufTtcbmNvbnN0IGNvcmVLbm93blRhZ3MgPSB7XG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOmJpbmFyeSc6IGJpbmFyeSxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnOiBtZXJnZSxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6b21hcCc6IG9tYXAsXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJzogcGFpcnMsXG4gICAgJ3RhZzp5YW1sLm9yZywyMDAyOnNldCc6IHNldCxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJzogdGltZXN0YW1wXG59O1xuZnVuY3Rpb24gZ2V0VGFncyhjdXN0b21UYWdzLCBzY2hlbWFOYW1lLCBhZGRNZXJnZVRhZykge1xuICAgIGNvbnN0IHNjaGVtYVRhZ3MgPSBzY2hlbWFzLmdldChzY2hlbWFOYW1lKTtcbiAgICBpZiAoc2NoZW1hVGFncyAmJiAhY3VzdG9tVGFncykge1xuICAgICAgICByZXR1cm4gYWRkTWVyZ2VUYWcgJiYgIXNjaGVtYVRhZ3MuaW5jbHVkZXMobWVyZ2UpXG4gICAgICAgICAgICA/IHNjaGVtYVRhZ3MuY29uY2F0KG1lcmdlKVxuICAgICAgICAgICAgOiBzY2hlbWFUYWdzLnNsaWNlKCk7XG4gICAgfVxuICAgIGxldCB0YWdzID0gc2NoZW1hVGFncztcbiAgICBpZiAoIXRhZ3MpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VzdG9tVGFncykpXG4gICAgICAgICAgICB0YWdzID0gW107XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IEFycmF5LmZyb20oc2NoZW1hcy5rZXlzKCkpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAneWFtbDExJylcbiAgICAgICAgICAgICAgICAubWFwKGtleSA9PiBKU09OLnN0cmluZ2lmeShrZXkpKVxuICAgICAgICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIjsgdXNlIG9uZSBvZiAke2tleXN9IG9yIGRlZmluZSBjdXN0b21UYWdzIGFycmF5YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY3VzdG9tVGFncykpIHtcbiAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgY3VzdG9tVGFncylcbiAgICAgICAgICAgIHRhZ3MgPSB0YWdzLmNvbmNhdCh0YWcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY3VzdG9tVGFncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0YWdzID0gY3VzdG9tVGFncyh0YWdzLnNsaWNlKCkpO1xuICAgIH1cbiAgICBpZiAoYWRkTWVyZ2VUYWcpXG4gICAgICAgIHRhZ3MgPSB0YWdzLmNvbmNhdChtZXJnZSk7XG4gICAgcmV0dXJuIHRhZ3MucmVkdWNlKCh0YWdzLCB0YWcpID0+IHtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyB0YWdzQnlOYW1lW3RhZ10gOiB0YWc7XG4gICAgICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdOYW1lID0gSlNPTi5zdHJpbmdpZnkodGFnKTtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0YWdzQnlOYW1lKVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IEpTT04uc3RyaW5naWZ5KGtleSkpXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY3VzdG9tIHRhZyAke3RhZ05hbWV9OyB1c2Ugb25lIG9mICR7a2V5c31gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRhZ3MuaW5jbHVkZXModGFnT2JqKSlcbiAgICAgICAgICAgIHRhZ3MucHVzaCh0YWdPYmopO1xuICAgICAgICByZXR1cm4gdGFncztcbiAgICB9LCBbXSk7XG59XG5cbmV4cG9ydCB7IGNvcmVLbm93blRhZ3MsIGdldFRhZ3MgfTtcbiIsImltcG9ydCB7IE1BUCwgU0NBTEFSLCBTRVEgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBnZXRUYWdzLCBjb3JlS25vd25UYWdzIH0gZnJvbSAnLi90YWdzLmpzJztcblxuY29uc3Qgc29ydE1hcEVudHJpZXNCeUtleSA9IChhLCBiKSA9PiBhLmtleSA8IGIua2V5ID8gLTEgOiBhLmtleSA+IGIua2V5ID8gMSA6IDA7XG5jbGFzcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKHsgY29tcGF0LCBjdXN0b21UYWdzLCBtZXJnZSwgcmVzb2x2ZUtub3duVGFncywgc2NoZW1hLCBzb3J0TWFwRW50cmllcywgdG9TdHJpbmdEZWZhdWx0cyB9KSB7XG4gICAgICAgIHRoaXMuY29tcGF0ID0gQXJyYXkuaXNBcnJheShjb21wYXQpXG4gICAgICAgICAgICA/IGdldFRhZ3MoY29tcGF0LCAnY29tcGF0JylcbiAgICAgICAgICAgIDogY29tcGF0XG4gICAgICAgICAgICAgICAgPyBnZXRUYWdzKG51bGwsIGNvbXBhdClcbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHRoaXMubmFtZSA9ICh0eXBlb2Ygc2NoZW1hID09PSAnc3RyaW5nJyAmJiBzY2hlbWEpIHx8ICdjb3JlJztcbiAgICAgICAgdGhpcy5rbm93blRhZ3MgPSByZXNvbHZlS25vd25UYWdzID8gY29yZUtub3duVGFncyA6IHt9O1xuICAgICAgICB0aGlzLnRhZ3MgPSBnZXRUYWdzKGN1c3RvbVRhZ3MsIHRoaXMubmFtZSwgbWVyZ2UpO1xuICAgICAgICB0aGlzLnRvU3RyaW5nT3B0aW9ucyA9IHRvU3RyaW5nRGVmYXVsdHMgPz8gbnVsbDtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE1BUCwgeyB2YWx1ZTogbWFwIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgU0NBTEFSLCB7IHZhbHVlOiBzdHJpbmcgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBTRVEsIHsgdmFsdWU6IHNlcSB9KTtcbiAgICAgICAgLy8gVXNlZCBieSBjcmVhdGVNYXAoKVxuICAgICAgICB0aGlzLnNvcnRNYXBFbnRyaWVzID1cbiAgICAgICAgICAgIHR5cGVvZiBzb3J0TWFwRW50cmllcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gc29ydE1hcEVudHJpZXNcbiAgICAgICAgICAgICAgICA6IHNvcnRNYXBFbnRyaWVzID09PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgID8gc29ydE1hcEVudHJpZXNCeUtleVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShTY2hlbWEucHJvdG90eXBlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0aGlzKSk7XG4gICAgICAgIGNvcHkudGFncyA9IHRoaXMudGFncy5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc0VtcHR5UGF0aCwgY29sbGVjdGlvbkZyb21QYXRoIH0gZnJvbSAnLi4vbm9kZXMvQ29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBOT0RFX1RZUEUsIERPQywgaXNOb2RlLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciB9IGZyb20gJy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4uL25vZGVzL3RvSlMuanMnO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vc2NoZW1hL1NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlEb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBhbmNob3JOYW1lcywgZmluZE5ld0FuY2hvciwgY3JlYXRlTm9kZUFuY2hvcnMgfSBmcm9tICcuL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgYXBwbHlSZXZpdmVyIH0gZnJvbSAnLi9hcHBseVJldml2ZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4vY3JlYXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcblxuY2xhc3MgRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgICAgICAvKiogQSBjb21tZW50IGJlZm9yZSB0aGlzIERvY3VtZW50ICovXG4gICAgICAgIHRoaXMuY29tbWVudEJlZm9yZSA9IG51bGw7XG4gICAgICAgIC8qKiBBIGNvbW1lbnQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhpcyBEb2N1bWVudCAqL1xuICAgICAgICB0aGlzLmNvbW1lbnQgPSBudWxsO1xuICAgICAgICAvKiogRXJyb3JzIGVuY291bnRlcmVkIGR1cmluZyBwYXJzaW5nLiAqL1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICAvKiogV2FybmluZ3MgZW5jb3VudGVyZWQgZHVyaW5nIHBhcnNpbmcuICovXG4gICAgICAgIHRoaXMud2FybmluZ3MgPSBbXTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE5PREVfVFlQRSwgeyB2YWx1ZTogRE9DIH0pO1xuICAgICAgICBsZXQgX3JlcGxhY2VyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJyB8fCBBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuICAgICAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkICYmIHJlcGxhY2VyKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgICAgICAgICByZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGludEFzQmlnSW50OiBmYWxzZSxcbiAgICAgICAgICAgIGtlZXBTb3VyY2VUb2tlbnM6IGZhbHNlLFxuICAgICAgICAgICAgbG9nTGV2ZWw6ICd3YXJuJyxcbiAgICAgICAgICAgIHByZXR0eUVycm9yczogdHJ1ZSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHN0cmluZ0tleXM6IGZhbHNlLFxuICAgICAgICAgICAgdW5pcXVlS2V5czogdHJ1ZSxcbiAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHQ7XG4gICAgICAgIGxldCB7IHZlcnNpb24gfSA9IG9wdDtcbiAgICAgICAgaWYgKG9wdGlvbnM/Ll9kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBvcHRpb25zLl9kaXJlY3RpdmVzLmF0RG9jdW1lbnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMueWFtbC5leHBsaWNpdClcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdGhpcy5kaXJlY3RpdmVzLnlhbWwudmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZWN0aXZlcyh7IHZlcnNpb24gfSk7XG4gICAgICAgIHRoaXMuc2V0U2NoZW1hKHZlcnNpb24sIG9wdGlvbnMpO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICB0aGlzLmNvbnRlbnRzID1cbiAgICAgICAgICAgIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdGhpcy5jcmVhdGVOb2RlKHZhbHVlLCBfcmVwbGFjZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgdGhpcyBEb2N1bWVudCBhbmQgaXRzIGNvbnRlbnRzLlxuICAgICAqXG4gICAgICogQ3VzdG9tIE5vZGUgdmFsdWVzIHRoYXQgaW5oZXJpdCBmcm9tIGBPYmplY3RgIHN0aWxsIHJlZmVyIHRvIHRoZWlyIG9yaWdpbmFsIGluc3RhbmNlcy5cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5jcmVhdGUoRG9jdW1lbnQucHJvdG90eXBlLCB7XG4gICAgICAgICAgICBbTk9ERV9UWVBFXTogeyB2YWx1ZTogRE9DIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvcHkuY29tbWVudEJlZm9yZSA9IHRoaXMuY29tbWVudEJlZm9yZTtcbiAgICAgICAgY29weS5jb21tZW50ID0gdGhpcy5jb21tZW50O1xuICAgICAgICBjb3B5LmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKCk7XG4gICAgICAgIGNvcHkud2FybmluZ3MgPSB0aGlzLndhcm5pbmdzLnNsaWNlKCk7XG4gICAgICAgIGNvcHkub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICBjb3B5LmRpcmVjdGl2ZXMgPSB0aGlzLmRpcmVjdGl2ZXMuY2xvbmUoKTtcbiAgICAgICAgY29weS5zY2hlbWEgPSB0aGlzLnNjaGVtYS5jbG9uZSgpO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICBjb3B5LmNvbnRlbnRzID0gaXNOb2RlKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuY2xvbmUoY29weS5zY2hlbWEpXG4gICAgICAgICAgICA6IHRoaXMuY29udGVudHM7XG4gICAgICAgIGlmICh0aGlzLnJhbmdlKVxuICAgICAgICAgICAgY29weS5yYW5nZSA9IHRoaXMucmFuZ2Uuc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuICAgIC8qKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGRvY3VtZW50LiAqL1xuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSlcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuYWRkKHZhbHVlKTtcbiAgICB9XG4gICAgLyoqIEFkZHMgYSB2YWx1ZSB0byB0aGUgZG9jdW1lbnQuICovXG4gICAgYWRkSW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzLmFkZEluKHBhdGgsIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBbGlhc2Agbm9kZSwgZW5zdXJpbmcgdGhhdCB0aGUgdGFyZ2V0IGBub2RlYCBoYXMgdGhlIHJlcXVpcmVkIGFuY2hvci5cbiAgICAgKlxuICAgICAqIElmIGBub2RlYCBhbHJlYWR5IGhhcyBhbiBhbmNob3IsIGBuYW1lYCBpcyBpZ25vcmVkLlxuICAgICAqIE90aGVyd2lzZSwgdGhlIGBub2RlLmFuY2hvcmAgdmFsdWUgd2lsbCBiZSBzZXQgdG8gYG5hbWVgLFxuICAgICAqIG9yIGlmIGFuIGFuY2hvciB3aXRoIHRoYXQgbmFtZSBpcyBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGRvY3VtZW50LFxuICAgICAqIGBuYW1lYCB3aWxsIGJlIHVzZWQgYXMgYSBwcmVmaXggZm9yIGEgbmV3IHVuaXF1ZSBhbmNob3IuXG4gICAgICogSWYgYG5hbWVgIGlzIHVuZGVmaW5lZCwgdGhlIGdlbmVyYXRlZCBhbmNob3Igd2lsbCB1c2UgJ2EnIGFzIGEgcHJlZml4LlxuICAgICAqL1xuICAgIGNyZWF0ZUFsaWFzKG5vZGUsIG5hbWUpIHtcbiAgICAgICAgaWYgKCFub2RlLmFuY2hvcikge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGFuY2hvck5hbWVzKHRoaXMpO1xuICAgICAgICAgICAgbm9kZS5hbmNob3IgPVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgICAgICAgICAgICAgICFuYW1lIHx8IHByZXYuaGFzKG5hbWUpID8gZmluZE5ld0FuY2hvcihuYW1lIHx8ICdhJywgcHJldikgOiBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWxpYXMobm9kZS5hbmNob3IpO1xuICAgIH1cbiAgICBjcmVhdGVOb2RlKHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgICAgICBsZXQgX3JlcGxhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyLmNhbGwoeyAnJzogdmFsdWUgfSwgJycsIHZhbHVlKTtcbiAgICAgICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlUb1N0ciA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicgfHwgdiBpbnN0YW5jZW9mIFN0cmluZyB8fCB2IGluc3RhbmNlb2YgTnVtYmVyO1xuICAgICAgICAgICAgY29uc3QgYXNTdHIgPSByZXBsYWNlci5maWx0ZXIoa2V5VG9TdHIpLm1hcChTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKGFzU3RyLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgcmVwbGFjZXIgPSByZXBsYWNlci5jb25jYXQoYXNTdHIpO1xuICAgICAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkICYmIHJlcGxhY2VyKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgICAgICAgICByZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFsaWFzRHVwbGljYXRlT2JqZWN0cywgYW5jaG9yUHJlZml4LCBmbG93LCBrZWVwVW5kZWZpbmVkLCBvblRhZ09iaiwgdGFnIH0gPSBvcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCB7IG9uQW5jaG9yLCBzZXRBbmNob3JzLCBzb3VyY2VPYmplY3RzIH0gPSBjcmVhdGVOb2RlQW5jaG9ycyh0aGlzLCBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgIGFuY2hvclByZWZpeCB8fCAnYScpO1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbGlhc0R1cGxpY2F0ZU9iamVjdHM6IGFsaWFzRHVwbGljYXRlT2JqZWN0cyA/PyB0cnVlLFxuICAgICAgICAgICAga2VlcFVuZGVmaW5lZDoga2VlcFVuZGVmaW5lZCA/PyBmYWxzZSxcbiAgICAgICAgICAgIG9uQW5jaG9yLFxuICAgICAgICAgICAgb25UYWdPYmosXG4gICAgICAgICAgICByZXBsYWNlcjogX3JlcGxhY2VyLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGNyZWF0ZU5vZGUodmFsdWUsIHRhZywgY3R4KTtcbiAgICAgICAgaWYgKGZsb3cgJiYgaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgbm9kZS5mbG93ID0gdHJ1ZTtcbiAgICAgICAgc2V0QW5jaG9ycygpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhIGtleSBhbmQgYSB2YWx1ZSBpbnRvIGEgYFBhaXJgIHVzaW5nIHRoZSBjdXJyZW50IHNjaGVtYSxcbiAgICAgKiByZWN1cnNpdmVseSB3cmFwcGluZyBhbGwgdmFsdWVzIGFzIGBTY2FsYXJgIG9yIGBDb2xsZWN0aW9uYCBub2Rlcy5cbiAgICAgKi9cbiAgICBjcmVhdGVQYWlyKGtleSwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBrID0gdGhpcy5jcmVhdGVOb2RlKGtleSwgbnVsbCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmNyZWF0ZU5vZGUodmFsdWUsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IFBhaXIoaywgdik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGl0ZW0gd2FzIGZvdW5kIGFuZCByZW1vdmVkLlxuICAgICAqL1xuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykgPyB0aGlzLmNvbnRlbnRzLmRlbGV0ZShrZXkpIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGl0ZW0gd2FzIGZvdW5kIGFuZCByZW1vdmVkLlxuICAgICAqL1xuICAgIGRlbGV0ZUluKHBhdGgpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50cyA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgUHJlc3VtZWQgaW1wb3NzaWJsZSBpZiBTdHJpY3QgZXh0ZW5kcyBmYWxzZVxuICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmRlbGV0ZUluKHBhdGgpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGl0ZW0gYXQgYGtleWAsIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZC4gQnkgZGVmYXVsdCB1bndyYXBzXG4gICAgICogc2NhbGFyIHZhbHVlcyBmcm9tIHRoZWlyIHN1cnJvdW5kaW5nIG5vZGU7IHRvIGRpc2FibGUgc2V0IGBrZWVwU2NhbGFyYCB0b1xuICAgICAqIGB0cnVlYCAoY29sbGVjdGlvbnMgYXJlIGFsd2F5cyByZXR1cm5lZCBpbnRhY3QpLlxuICAgICAqL1xuICAgIGdldChrZXksIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmdldChrZXksIGtlZXBTY2FsYXIpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBwYXRoYCwgb3IgYHVuZGVmaW5lZGAgaWYgbm90IGZvdW5kLiBCeSBkZWZhdWx0IHVud3JhcHNcbiAgICAgKiBzY2FsYXIgdmFsdWVzIGZyb20gdGhlaXIgc3Vycm91bmRpbmcgbm9kZTsgdG8gZGlzYWJsZSBzZXQgYGtlZXBTY2FsYXJgIHRvXG4gICAgICogYHRydWVgIChjb2xsZWN0aW9ucyBhcmUgYWx3YXlzIHJldHVybmVkIGludGFjdCkuXG4gICAgICovXG4gICAgZ2V0SW4ocGF0aCwga2VlcFNjYWxhcikge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpXG4gICAgICAgICAgICByZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIodGhpcy5jb250ZW50cylcbiAgICAgICAgICAgICAgICA/IHRoaXMuY29udGVudHMudmFsdWVcbiAgICAgICAgICAgICAgICA6IHRoaXMuY29udGVudHM7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy5nZXRJbihwYXRoLCBrZWVwU2NhbGFyKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZG9jdW1lbnQgaW5jbHVkZXMgYSB2YWx1ZSB3aXRoIHRoZSBrZXkgYGtleWAuXG4gICAgICovXG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpID8gdGhpcy5jb250ZW50cy5oYXMoa2V5KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGRvY3VtZW50IGluY2x1ZGVzIGEgdmFsdWUgYXQgYHBhdGhgLlxuICAgICAqL1xuICAgIGhhc0luKHBhdGgpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSA/IHRoaXMuY29udGVudHMuaGFzSW4ocGF0aCkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgZG9jdW1lbnQuIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gY29sbGVjdGlvbkZyb21QYXRoKHRoaXMuc2NoZW1hLCBba2V5XSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGRvY3VtZW50LiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZW50cyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGNhbid0IHJlYWxseSBrbm93IHRoYXQgdGhpcyBtYXRjaGVzIENvbnRlbnRzLlxuICAgICAgICAgICAgdGhpcy5jb250ZW50cyA9IGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgQXJyYXkuZnJvbShwYXRoKSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFzc2VydENvbGxlY3Rpb24odGhpcy5jb250ZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuc2V0SW4ocGF0aCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgWUFNTCB2ZXJzaW9uIGFuZCBzY2hlbWEgdXNlZCBieSB0aGUgZG9jdW1lbnQuXG4gICAgICogQSBgbnVsbGAgdmVyc2lvbiBkaXNhYmxlcyBzdXBwb3J0IGZvciBkaXJlY3RpdmVzLCBleHBsaWNpdCB0YWdzLCBhbmNob3JzLCBhbmQgYWxpYXNlcy5cbiAgICAgKiBJdCBhbHNvIHJlcXVpcmVzIHRoZSBgc2NoZW1hYCBvcHRpb24gdG8gYmUgZ2l2ZW4gYXMgYSBgU2NoZW1hYCBpbnN0YW5jZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIE92ZXJyaWRlcyBhbGwgcHJldmlvdXNseSBzZXQgc2NoZW1hIG9wdGlvbnMuXG4gICAgICovXG4gICAgc2V0U2NoZW1hKHZlcnNpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIHZlcnNpb24gPT09ICdudW1iZXInKVxuICAgICAgICAgICAgdmVyc2lvbiA9IFN0cmluZyh2ZXJzaW9uKTtcbiAgICAgICAgbGV0IG9wdDtcbiAgICAgICAgc3dpdGNoICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICBjYXNlICcxLjEnOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcy55YW1sLnZlcnNpb24gPSAnMS4xJztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbjogJzEuMScgfSk7XG4gICAgICAgICAgICAgICAgb3B0ID0geyByZXNvbHZlS25vd25UYWdzOiBmYWxzZSwgc2NoZW1hOiAneWFtbC0xLjEnIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcxLjInOlxuICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLnlhbWwudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZWN0aXZlcyh7IHZlcnNpb24gfSk7XG4gICAgICAgICAgICAgICAgb3B0ID0geyByZXNvbHZlS25vd25UYWdzOiB0cnVlLCBzY2hlbWE6ICdjb3JlJyB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRpcmVjdGl2ZXM7XG4gICAgICAgICAgICAgICAgb3B0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdiA9IEpTT04uc3RyaW5naWZ5KHZlcnNpb24pO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJzEuMScsICcxLjInIG9yIG51bGwgYXMgZmlyc3QgYXJndW1lbnQsIGJ1dCBmb3VuZDogJHtzdn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3QgdXNpbmcgYGluc3RhbmNlb2YgU2NoZW1hYCB0byBhbGxvdyBmb3IgZHVjayB0eXBpbmdcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NoZW1hIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBvcHRpb25zLnNjaGVtYTtcbiAgICAgICAgZWxzZSBpZiAob3B0KVxuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBuZXcgU2NoZW1hKE9iamVjdC5hc3NpZ24ob3B0LCBvcHRpb25zKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2l0aCBhIG51bGwgWUFNTCB2ZXJzaW9uLCB0aGUgeyBzY2hlbWE6IFNjaGVtYSB9IG9wdGlvbiBpcyByZXF1aXJlZGApO1xuICAgIH1cbiAgICAvLyBqc29uICYganNvbkFyZyBhcmUgb25seSB1c2VkIGZyb20gdG9KU09OKClcbiAgICB0b0pTKHsganNvbiwganNvbkFyZywgbWFwQXNNYXAsIG1heEFsaWFzQ291bnQsIG9uQW5jaG9yLCByZXZpdmVyIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbmNob3JzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkb2M6IHRoaXMsXG4gICAgICAgICAgICBrZWVwOiAhanNvbixcbiAgICAgICAgICAgIG1hcEFzTWFwOiBtYXBBc01hcCA9PT0gdHJ1ZSxcbiAgICAgICAgICAgIG1hcEtleVdhcm5lZDogZmFsc2UsXG4gICAgICAgICAgICBtYXhBbGlhc0NvdW50OiB0eXBlb2YgbWF4QWxpYXNDb3VudCA9PT0gJ251bWJlcicgPyBtYXhBbGlhc0NvdW50IDogMTAwXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHRvSlModGhpcy5jb250ZW50cywganNvbkFyZyA/PyAnJywgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFuY2hvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjb3VudCwgcmVzIH0gb2YgY3R4LmFuY2hvcnMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgb25BbmNob3IocmVzLCBjb3VudCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBhcHBseVJldml2ZXIocmV2aXZlciwgeyAnJzogcmVzIH0sICcnLCByZXMpXG4gICAgICAgICAgICA6IHJlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkb2N1bWVudCBgY29udGVudHNgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGpzb25BcmcgVXNlZCBieSBgSlNPTi5zdHJpbmdpZnlgIHRvIGluZGljYXRlIHRoZSBhcnJheSBpbmRleCBvclxuICAgICAqICAgcHJvcGVydHkgbmFtZS5cbiAgICAgKi9cbiAgICB0b0pTT04oanNvbkFyZywgb25BbmNob3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9KUyh7IGpzb246IHRydWUsIGpzb25BcmcsIG1hcEFzTWFwOiBmYWxzZSwgb25BbmNob3IgfSk7XG4gICAgfVxuICAgIC8qKiBBIFlBTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRvY3VtZW50LiAqL1xuICAgIHRvU3RyaW5nKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5lcnJvcnMubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRG9jdW1lbnQgd2l0aCBlcnJvcnMgY2Fubm90IGJlIHN0cmluZ2lmaWVkJyk7XG4gICAgICAgIGlmICgnaW5kZW50JyBpbiBvcHRpb25zICYmXG4gICAgICAgICAgICAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5pbmRlbnQpIHx8IE51bWJlcihvcHRpb25zLmluZGVudCkgPD0gMCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmluZGVudCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiaW5kZW50XCIgb3B0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBub3QgJHtzfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlEb2N1bWVudCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnRDb2xsZWN0aW9uKGNvbnRlbnRzKSB7XG4gICAgaWYgKGlzQ29sbGVjdGlvbihjb250ZW50cykpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYSBZQU1MIGNvbGxlY3Rpb24gYXMgZG9jdW1lbnQgY29udGVudHMnKTtcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnQgfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQsIHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGluZGVudENvbW1lbnQsIGxpbmVDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcblxuZnVuY3Rpb24gc3RyaW5naWZ5RG9jdW1lbnQoZG9jLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGluZXMgPSBbXTtcbiAgICBsZXQgaGFzRGlyZWN0aXZlcyA9IG9wdGlvbnMuZGlyZWN0aXZlcyA9PT0gdHJ1ZTtcbiAgICBpZiAob3B0aW9ucy5kaXJlY3RpdmVzICE9PSBmYWxzZSAmJiBkb2MuZGlyZWN0aXZlcykge1xuICAgICAgICBjb25zdCBkaXIgPSBkb2MuZGlyZWN0aXZlcy50b1N0cmluZyhkb2MpO1xuICAgICAgICBpZiAoZGlyKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGRpcik7XG4gICAgICAgICAgICBoYXNEaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkb2MuZGlyZWN0aXZlcy5kb2NTdGFydClcbiAgICAgICAgICAgIGhhc0RpcmVjdGl2ZXMgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaGFzRGlyZWN0aXZlcylcbiAgICAgICAgbGluZXMucHVzaCgnLS0tJyk7XG4gICAgY29uc3QgY3R4ID0gY3JlYXRlU3RyaW5naWZ5Q29udGV4dChkb2MsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHsgY29tbWVudFN0cmluZyB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgaWYgKGRvYy5jb21tZW50QmVmb3JlKSB7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggIT09IDEpXG4gICAgICAgICAgICBsaW5lcy51bnNoaWZ0KCcnKTtcbiAgICAgICAgY29uc3QgY3MgPSBjb21tZW50U3RyaW5nKGRvYy5jb21tZW50QmVmb3JlKTtcbiAgICAgICAgbGluZXMudW5zaGlmdChpbmRlbnRDb21tZW50KGNzLCAnJykpO1xuICAgIH1cbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgbGV0IGNvbnRlbnRDb21tZW50ID0gbnVsbDtcbiAgICBpZiAoZG9jLmNvbnRlbnRzKSB7XG4gICAgICAgIGlmIChpc05vZGUoZG9jLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgaWYgKGRvYy5jb250ZW50cy5zcGFjZUJlZm9yZSAmJiBoYXNEaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgaWYgKGRvYy5jb250ZW50cy5jb21tZW50QmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3MgPSBjb21tZW50U3RyaW5nKGRvYy5jb250ZW50cy5jb21tZW50QmVmb3JlKTtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGluZGVudENvbW1lbnQoY3MsICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0b3AtbGV2ZWwgYmxvY2sgc2NhbGFycyBuZWVkIHRvIGJlIGluZGVudGVkIGlmIGZvbGxvd2VkIGJ5IGEgY29tbWVudFxuICAgICAgICAgICAgY3R4LmZvcmNlQmxvY2tJbmRlbnQgPSAhIWRvYy5jb21tZW50O1xuICAgICAgICAgICAgY29udGVudENvbW1lbnQgPSBkb2MuY29udGVudHMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbkNob21wS2VlcCA9IGNvbnRlbnRDb21tZW50ID8gdW5kZWZpbmVkIDogKCkgPT4gKGNob21wS2VlcCA9IHRydWUpO1xuICAgICAgICBsZXQgYm9keSA9IHN0cmluZ2lmeShkb2MuY29udGVudHMsIGN0eCwgKCkgPT4gKGNvbnRlbnRDb21tZW50ID0gbnVsbCksIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgaWYgKGNvbnRlbnRDb21tZW50KVxuICAgICAgICAgICAgYm9keSArPSBsaW5lQ29tbWVudChib2R5LCAnJywgY29tbWVudFN0cmluZyhjb250ZW50Q29tbWVudCkpO1xuICAgICAgICBpZiAoKGJvZHlbMF0gPT09ICd8JyB8fCBib2R5WzBdID09PSAnPicpICYmXG4gICAgICAgICAgICBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXSA9PT0gJy0tLScpIHtcbiAgICAgICAgICAgIC8vIFRvcC1sZXZlbCBibG9jayBzY2FsYXJzIHdpdGggYSBwcmVjZWRpbmcgZG9jIG1hcmtlciBvdWdodCB0byB1c2UgdGhlXG4gICAgICAgICAgICAvLyBzYW1lIGxpbmUgZm9yIHRoZWlyIGhlYWRlci5cbiAgICAgICAgICAgIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID0gYC0tLSAke2JvZHl9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBsaW5lcy5wdXNoKGJvZHkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGluZXMucHVzaChzdHJpbmdpZnkoZG9jLmNvbnRlbnRzLCBjdHgpKTtcbiAgICB9XG4gICAgaWYgKGRvYy5kaXJlY3RpdmVzPy5kb2NFbmQpIHtcbiAgICAgICAgaWYgKGRvYy5jb21tZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbW1lbnQpO1xuICAgICAgICAgICAgaWYgKGNzLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJy4uLicpO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50Q29tbWVudChjcywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYC4uLiAke2NzfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGluZXMucHVzaCgnLi4uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBkYyA9IGRvYy5jb21tZW50O1xuICAgICAgICBpZiAoZGMgJiYgY2hvbXBLZWVwKVxuICAgICAgICAgICAgZGMgPSBkYy5yZXBsYWNlKC9eXFxuKy8sICcnKTtcbiAgICAgICAgaWYgKGRjKSB7XG4gICAgICAgICAgICBpZiAoKCFjaG9tcEtlZXAgfHwgY29udGVudENvbW1lbnQpICYmIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdICE9PSAnJylcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50Q29tbWVudChjb21tZW50U3RyaW5nKGRjKSwgJycpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZXMuam9pbignXFxuJykgKyAnXFxuJztcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5RG9jdW1lbnQgfTtcbiIsImNsYXNzIFlBTUxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgfVxufVxuY2xhc3MgWUFNTFBhcnNlRXJyb3IgZXh0ZW5kcyBZQU1MRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHBvcywgY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcignWUFNTFBhcnNlRXJyb3InLCBwb3MsIGNvZGUsIG1lc3NhZ2UpO1xuICAgIH1cbn1cbmNsYXNzIFlBTUxXYXJuaW5nIGV4dGVuZHMgWUFNTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ1lBTUxXYXJuaW5nJywgcG9zLCBjb2RlLCBtZXNzYWdlKTtcbiAgICB9XG59XG5jb25zdCBwcmV0dGlmeUVycm9yID0gKHNyYywgbGMpID0+IChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvci5wb3NbMF0gPT09IC0xKVxuICAgICAgICByZXR1cm47XG4gICAgZXJyb3IubGluZVBvcyA9IGVycm9yLnBvcy5tYXAocG9zID0+IGxjLmxpbmVQb3MocG9zKSk7XG4gICAgY29uc3QgeyBsaW5lLCBjb2wgfSA9IGVycm9yLmxpbmVQb3NbMF07XG4gICAgZXJyb3IubWVzc2FnZSArPSBgIGF0IGxpbmUgJHtsaW5lfSwgY29sdW1uICR7Y29sfWA7XG4gICAgbGV0IGNpID0gY29sIC0gMTtcbiAgICBsZXQgbGluZVN0ciA9IHNyY1xuICAgICAgICAuc3Vic3RyaW5nKGxjLmxpbmVTdGFydHNbbGluZSAtIDFdLCBsYy5saW5lU3RhcnRzW2xpbmVdKVxuICAgICAgICAucmVwbGFjZSgvW1xcblxccl0rJC8sICcnKTtcbiAgICAvLyBUcmltIHRvIG1heCA4MCBjaGFycywga2VlcGluZyBjb2wgcG9zaXRpb24gbmVhciB0aGUgbWlkZGxlXG4gICAgaWYgKGNpID49IDYwICYmIGxpbmVTdHIubGVuZ3RoID4gODApIHtcbiAgICAgICAgY29uc3QgdHJpbVN0YXJ0ID0gTWF0aC5taW4oY2kgLSAzOSwgbGluZVN0ci5sZW5ndGggLSA3OSk7XG4gICAgICAgIGxpbmVTdHIgPSAn4oCmJyArIGxpbmVTdHIuc3Vic3RyaW5nKHRyaW1TdGFydCk7XG4gICAgICAgIGNpIC09IHRyaW1TdGFydCAtIDE7XG4gICAgfVxuICAgIGlmIChsaW5lU3RyLmxlbmd0aCA+IDgwKVxuICAgICAgICBsaW5lU3RyID0gbGluZVN0ci5zdWJzdHJpbmcoMCwgNzkpICsgJ+KApic7XG4gICAgLy8gSW5jbHVkZSBwcmV2aW91cyBsaW5lIGluIGNvbnRleHQgaWYgcG9pbnRpbmcgYXQgbGluZSBzdGFydFxuICAgIGlmIChsaW5lID4gMSAmJiAvXiAqJC8udGVzdChsaW5lU3RyLnN1YnN0cmluZygwLCBjaSkpKSB7XG4gICAgICAgIC8vIFJlZ2V4cCB3b24ndCBtYXRjaCBpZiBzdGFydCBpcyB0cmltbWVkXG4gICAgICAgIGxldCBwcmV2ID0gc3JjLnN1YnN0cmluZyhsYy5saW5lU3RhcnRzW2xpbmUgLSAyXSwgbGMubGluZVN0YXJ0c1tsaW5lIC0gMV0pO1xuICAgICAgICBpZiAocHJldi5sZW5ndGggPiA4MClcbiAgICAgICAgICAgIHByZXYgPSBwcmV2LnN1YnN0cmluZygwLCA3OSkgKyAn4oCmXFxuJztcbiAgICAgICAgbGluZVN0ciA9IHByZXYgKyBsaW5lU3RyO1xuICAgIH1cbiAgICBpZiAoL1teIF0vLnRlc3QobGluZVN0cikpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMTtcbiAgICAgICAgY29uc3QgZW5kID0gZXJyb3IubGluZVBvc1sxXTtcbiAgICAgICAgaWYgKGVuZCAmJiBlbmQubGluZSA9PT0gbGluZSAmJiBlbmQuY29sID4gY29sKSB7XG4gICAgICAgICAgICBjb3VudCA9IE1hdGgubWF4KDEsIE1hdGgubWluKGVuZC5jb2wgLSBjb2wsIDgwIC0gY2kpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb2ludGVyID0gJyAnLnJlcGVhdChjaSkgKyAnXicucmVwZWF0KGNvdW50KTtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSBgOlxcblxcbiR7bGluZVN0cn1cXG4ke3BvaW50ZXJ9XFxuYDtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBZQU1MRXJyb3IsIFlBTUxQYXJzZUVycm9yLCBZQU1MV2FybmluZywgcHJldHRpZnlFcnJvciB9O1xuIiwiZnVuY3Rpb24gcmVzb2x2ZVByb3BzKHRva2VucywgeyBmbG93LCBpbmRpY2F0b3IsIG5leHQsIG9mZnNldCwgb25FcnJvciwgcGFyZW50SW5kZW50LCBzdGFydE9uTmV3bGluZSB9KSB7XG4gICAgbGV0IHNwYWNlQmVmb3JlID0gZmFsc2U7XG4gICAgbGV0IGF0TmV3bGluZSA9IHN0YXJ0T25OZXdsaW5lO1xuICAgIGxldCBoYXNTcGFjZSA9IHN0YXJ0T25OZXdsaW5lO1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAgbGV0IGNvbW1lbnRTZXAgPSAnJztcbiAgICBsZXQgaGFzTmV3bGluZSA9IGZhbHNlO1xuICAgIGxldCByZXFTcGFjZSA9IGZhbHNlO1xuICAgIGxldCB0YWIgPSBudWxsO1xuICAgIGxldCBhbmNob3IgPSBudWxsO1xuICAgIGxldCB0YWcgPSBudWxsO1xuICAgIGxldCBuZXdsaW5lQWZ0ZXJQcm9wID0gbnVsbDtcbiAgICBsZXQgY29tbWEgPSBudWxsO1xuICAgIGxldCBmb3VuZCA9IG51bGw7XG4gICAgbGV0IHN0YXJ0ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgICBpZiAocmVxU3BhY2UpIHtcbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnc3BhY2UnICYmXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSAhPT0gJ25ld2xpbmUnICYmXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSAhPT0gJ2NvbW1hJylcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLm9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdUYWdzIGFuZCBhbmNob3JzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gdGhlIG5leHQgdG9rZW4gYnkgd2hpdGUgc3BhY2UnKTtcbiAgICAgICAgICAgIHJlcVNwYWNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhYikge1xuICAgICAgICAgICAgaWYgKGF0TmV3bGluZSAmJiB0b2tlbi50eXBlICE9PSAnY29tbWVudCcgJiYgdG9rZW4udHlwZSAhPT0gJ25ld2xpbmUnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0YWIsICdUQUJfQVNfSU5ERU5UJywgJ1RhYnMgYXJlIG5vdCBhbGxvd2VkIGFzIGluZGVudGF0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIC8vIEF0IHRoZSBkb2MgbGV2ZWwsIHRhYnMgYXQgbGluZSBzdGFydCBtYXkgYmUgcGFyc2VkXG4gICAgICAgICAgICAgICAgLy8gYXMgbGVhZGluZyB3aGl0ZSBzcGFjZSByYXRoZXIgdGhhbiBpbmRlbnRhdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBJbiBhIGZsb3cgY29sbGVjdGlvbiwgb25seSB0aGUgcGFyc2VyIGhhbmRsZXMgaW5kZW50LlxuICAgICAgICAgICAgICAgIGlmICghZmxvdyAmJlxuICAgICAgICAgICAgICAgICAgICAoaW5kaWNhdG9yICE9PSAnZG9jLXN0YXJ0JyB8fCBuZXh0Py50eXBlICE9PSAnZmxvdy1jb2xsZWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uc291cmNlLmluY2x1ZGVzKCdcXHQnKSkge1xuICAgICAgICAgICAgICAgICAgICB0YWIgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1NwYWNlKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTUlTU0lOR19DSEFSJywgJ0NvbW1lbnRzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gb3RoZXIgdG9rZW5zIGJ5IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IHRva2VuLnNvdXJjZS5zdWJzdHJpbmcoMSkgfHwgJyAnO1xuICAgICAgICAgICAgICAgIGlmICghY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGNiO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSBjb21tZW50U2VwICsgY2I7XG4gICAgICAgICAgICAgICAgY29tbWVudFNlcCA9ICcnO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgaWYgKGF0TmV3bGluZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghZm91bmQgfHwgaW5kaWNhdG9yICE9PSAnc2VxLWl0ZW0taW5kJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmVmb3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50U2VwICs9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhhc05ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChhbmNob3IgfHwgdGFnKVxuICAgICAgICAgICAgICAgICAgICBuZXdsaW5lQWZ0ZXJQcm9wID0gdG9rZW47XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTVVMVElQTEVfQU5DSE9SUycsICdBIG5vZGUgY2FuIGhhdmUgYXQgbW9zdCBvbmUgYW5jaG9yJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnNvdXJjZS5lbmRzV2l0aCgnOicpKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLm9mZnNldCArIHRva2VuLnNvdXJjZS5sZW5ndGggLSAxLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBlbmRpbmcgaW4gOiBpcyBhbWJpZ3VvdXMnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBhbmNob3IgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdG9rZW4ub2Zmc2V0O1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVxU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFnJzoge1xuICAgICAgICAgICAgICAgIGlmICh0YWcpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNVUxUSVBMRV9UQUdTJywgJ0Egbm9kZSBjYW4gaGF2ZSBhdCBtb3N0IG9uZSB0YWcnKTtcbiAgICAgICAgICAgICAgICB0YWcgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdG9rZW4ub2Zmc2V0O1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVxU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBpbmRpY2F0b3I6XG4gICAgICAgICAgICAgICAgLy8gQ291bGQgaGVyZSBoYW5kbGUgcHJlY2VkaW5nIGNvbW1lbnRzIGRpZmZlcmVudGx5XG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvciB8fCB0YWcpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdCQURfUFJPUF9PUkRFUicsIGBBbmNob3JzIGFuZCB0YWdzIG11c3QgYmUgYWZ0ZXIgdGhlICR7dG9rZW4uc291cmNlfSBpbmRpY2F0b3JgKTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmQpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgJHt0b2tlbi5zb3VyY2V9IGluICR7ZmxvdyA/PyAnY29sbGVjdGlvbid9YCk7XG4gICAgICAgICAgICAgICAgZm91bmQgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPVxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3IgPT09ICdzZXEtaXRlbS1pbmQnIHx8IGluZGljYXRvciA9PT0gJ2V4cGxpY2l0LWtleS1pbmQnO1xuICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tYSc6XG4gICAgICAgICAgICAgICAgaWYgKGZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hKVxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAsIGluICR7Zmxvd31gKTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWEgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVsc2UgZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAke3Rva2VuLnR5cGV9IHRva2VuYCk7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYXN0ID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBlbmQgPSBsYXN0ID8gbGFzdC5vZmZzZXQgKyBsYXN0LnNvdXJjZS5sZW5ndGggOiBvZmZzZXQ7XG4gICAgaWYgKHJlcVNwYWNlICYmXG4gICAgICAgIG5leHQgJiZcbiAgICAgICAgbmV4dC50eXBlICE9PSAnc3BhY2UnICYmXG4gICAgICAgIG5leHQudHlwZSAhPT0gJ25ld2xpbmUnICYmXG4gICAgICAgIG5leHQudHlwZSAhPT0gJ2NvbW1hJyAmJlxuICAgICAgICAobmV4dC50eXBlICE9PSAnc2NhbGFyJyB8fCBuZXh0LnNvdXJjZSAhPT0gJycpKSB7XG4gICAgICAgIG9uRXJyb3IobmV4dC5vZmZzZXQsICdNSVNTSU5HX0NIQVInLCAnVGFncyBhbmQgYW5jaG9ycyBtdXN0IGJlIHNlcGFyYXRlZCBmcm9tIHRoZSBuZXh0IHRva2VuIGJ5IHdoaXRlIHNwYWNlJyk7XG4gICAgfVxuICAgIGlmICh0YWIgJiZcbiAgICAgICAgKChhdE5ld2xpbmUgJiYgdGFiLmluZGVudCA8PSBwYXJlbnRJbmRlbnQpIHx8XG4gICAgICAgICAgICBuZXh0Py50eXBlID09PSAnYmxvY2stbWFwJyB8fFxuICAgICAgICAgICAgbmV4dD8udHlwZSA9PT0gJ2Jsb2NrLXNlcScpKVxuICAgICAgICBvbkVycm9yKHRhYiwgJ1RBQl9BU19JTkRFTlQnLCAnVGFicyBhcmUgbm90IGFsbG93ZWQgYXMgaW5kZW50YXRpb24nKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb21tYSxcbiAgICAgICAgZm91bmQsXG4gICAgICAgIHNwYWNlQmVmb3JlLFxuICAgICAgICBjb21tZW50LFxuICAgICAgICBoYXNOZXdsaW5lLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHRhZyxcbiAgICAgICAgbmV3bGluZUFmdGVyUHJvcCxcbiAgICAgICAgZW5kLFxuICAgICAgICBzdGFydDogc3RhcnQgPz8gZW5kXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZVByb3BzIH07XG4iLCJmdW5jdGlvbiBjb250YWluc05ld2xpbmUoa2V5KSB7XG4gICAgaWYgKCFrZXkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHN3aXRjaCAoa2V5LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIGlmIChrZXkuc291cmNlLmluY2x1ZGVzKCdcXG4nKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChrZXkuZW5kKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2Yga2V5LmVuZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOlxuICAgICAgICAgICAgZm9yIChjb25zdCBpdCBvZiBrZXkuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGl0LnN0YXJ0KVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3QudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluc05ld2xpbmUoaXQua2V5KSB8fCBjb250YWluc05ld2xpbmUoaXQudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgY29udGFpbnNOZXdsaW5lIH07XG4iLCJpbXBvcnQgeyBjb250YWluc05ld2xpbmUgfSBmcm9tICcuL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyc7XG5cbmZ1bmN0aW9uIGZsb3dJbmRlbnRDaGVjayhpbmRlbnQsIGZjLCBvbkVycm9yKSB7XG4gICAgaWYgKGZjPy50eXBlID09PSAnZmxvdy1jb2xsZWN0aW9uJykge1xuICAgICAgICBjb25zdCBlbmQgPSBmYy5lbmRbMF07XG4gICAgICAgIGlmIChlbmQuaW5kZW50ID09PSBpbmRlbnQgJiZcbiAgICAgICAgICAgIChlbmQuc291cmNlID09PSAnXScgfHwgZW5kLnNvdXJjZSA9PT0gJ30nKSAmJlxuICAgICAgICAgICAgY29udGFpbnNOZXdsaW5lKGZjKSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ0Zsb3cgZW5kIGluZGljYXRvciBzaG91bGQgYmUgbW9yZSBpbmRlbnRlZCB0aGFuIHBhcmVudCc7XG4gICAgICAgICAgICBvbkVycm9yKGVuZCwgJ0JBRF9JTkRFTlQnLCBtc2csIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBmbG93SW5kZW50Q2hlY2sgfTtcbiIsImltcG9ydCB7IGlzU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuXG5mdW5jdGlvbiBtYXBJbmNsdWRlcyhjdHgsIGl0ZW1zLCBzZWFyY2gpIHtcbiAgICBjb25zdCB7IHVuaXF1ZUtleXMgfSA9IGN0eC5vcHRpb25zO1xuICAgIGlmICh1bmlxdWVLZXlzID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGlzRXF1YWwgPSB0eXBlb2YgdW5pcXVlS2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHVuaXF1ZUtleXNcbiAgICAgICAgOiAoYSwgYikgPT4gYSA9PT0gYiB8fCAoaXNTY2FsYXIoYSkgJiYgaXNTY2FsYXIoYikgJiYgYS52YWx1ZSA9PT0gYi52YWx1ZSk7XG4gICAgcmV0dXJuIGl0ZW1zLnNvbWUocGFpciA9PiBpc0VxdWFsKHBhaXIua2V5LCBzZWFyY2gpKTtcbn1cblxuZXhwb3J0IHsgbWFwSW5jbHVkZXMgfTtcbiIsImltcG9ydCB7IFBhaXIgfSBmcm9tICcuLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFlBTUxNYXAgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MTWFwLmpzJztcbmltcG9ydCB7IHJlc29sdmVQcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS1wcm9wcy5qcyc7XG5pbXBvcnQgeyBjb250YWluc05ld2xpbmUgfSBmcm9tICcuL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyc7XG5pbXBvcnQgeyBmbG93SW5kZW50Q2hlY2sgfSBmcm9tICcuL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMnO1xuaW1wb3J0IHsgbWFwSW5jbHVkZXMgfSBmcm9tICcuL3V0aWwtbWFwLWluY2x1ZGVzLmpzJztcblxuY29uc3Qgc3RhcnRDb2xNc2cgPSAnQWxsIG1hcHBpbmcgaXRlbXMgbXVzdCBzdGFydCBhdCB0aGUgc2FtZSBjb2x1bW4nO1xuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrTWFwKHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSwgY3R4LCBibSwgb25FcnJvciwgdGFnKSB7XG4gICAgY29uc3QgTm9kZUNsYXNzID0gdGFnPy5ub2RlQ2xhc3MgPz8gWUFNTE1hcDtcbiAgICBjb25zdCBtYXAgPSBuZXcgTm9kZUNsYXNzKGN0eC5zY2hlbWEpO1xuICAgIGlmIChjdHguYXRSb290KVxuICAgICAgICBjdHguYXRSb290ID0gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9IGJtLm9mZnNldDtcbiAgICBsZXQgY29tbWVudEVuZCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBjb2xsSXRlbSBvZiBibS5pdGVtcykge1xuICAgICAgICBjb25zdCB7IHN0YXJ0LCBrZXksIHNlcCwgdmFsdWUgfSA9IGNvbGxJdGVtO1xuICAgICAgICAvLyBrZXkgcHJvcGVydGllc1xuICAgICAgICBjb25zdCBrZXlQcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnZXhwbGljaXQta2V5LWluZCcsXG4gICAgICAgICAgICBuZXh0OiBrZXkgPz8gc2VwPy5bMF0sXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgcGFyZW50SW5kZW50OiBibS5pbmRlbnQsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW1wbGljaXRLZXkgPSAha2V5UHJvcHMuZm91bmQ7XG4gICAgICAgIGlmIChpbXBsaWNpdEtleSkge1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkudHlwZSA9PT0gJ2Jsb2NrLXNlcScpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkxPQ0tfQVNfSU1QTElDSVRfS0VZJywgJ0EgYmxvY2sgc2VxdWVuY2UgbWF5IG5vdCBiZSB1c2VkIGFzIGFuIGltcGxpY2l0IG1hcCBrZXknKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgnaW5kZW50JyBpbiBrZXkgJiYga2V5LmluZGVudCAhPT0gYm0uaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9JTkRFTlQnLCBzdGFydENvbE1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWtleVByb3BzLmFuY2hvciAmJiAha2V5UHJvcHMudGFnICYmICFzZXApIHtcbiAgICAgICAgICAgICAgICBjb21tZW50RW5kID0ga2V5UHJvcHMuZW5kO1xuICAgICAgICAgICAgICAgIGlmIChrZXlQcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXAuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5jb21tZW50ICs9ICdcXG4nICsga2V5UHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLmNvbW1lbnQgPSBrZXlQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXlQcm9wcy5uZXdsaW5lQWZ0ZXJQcm9wIHx8IGNvbnRhaW5zTmV3bGluZShrZXkpKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihrZXkgPz8gc3RhcnRbc3RhcnQubGVuZ3RoIC0gMV0sICdNVUxUSUxJTkVfSU1QTElDSVRfS0VZJywgJ0ltcGxpY2l0IGtleXMgbmVlZCB0byBiZSBvbiBhIHNpbmdsZSBsaW5lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5UHJvcHMuZm91bmQ/LmluZGVudCAhPT0gYm0uaW5kZW50KSB7XG4gICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9JTkRFTlQnLCBzdGFydENvbE1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8ga2V5IHZhbHVlXG4gICAgICAgIGN0eC5hdEtleSA9IHRydWU7XG4gICAgICAgIGNvbnN0IGtleVN0YXJ0ID0ga2V5UHJvcHMuZW5kO1xuICAgICAgICBjb25zdCBrZXlOb2RlID0ga2V5XG4gICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwga2V5LCBrZXlQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIGtleVN0YXJ0LCBzdGFydCwgbnVsbCwga2V5UHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICBpZiAoY3R4LnNjaGVtYS5jb21wYXQpXG4gICAgICAgICAgICBmbG93SW5kZW50Q2hlY2soYm0uaW5kZW50LCBrZXksIG9uRXJyb3IpO1xuICAgICAgICBjdHguYXRLZXkgPSBmYWxzZTtcbiAgICAgICAgaWYgKG1hcEluY2x1ZGVzKGN0eCwgbWFwLml0ZW1zLCBrZXlOb2RlKSlcbiAgICAgICAgICAgIG9uRXJyb3Ioa2V5U3RhcnQsICdEVVBMSUNBVEVfS0VZJywgJ01hcCBrZXlzIG11c3QgYmUgdW5pcXVlJyk7XG4gICAgICAgIC8vIHZhbHVlIHByb3BlcnRpZXNcbiAgICAgICAgY29uc3QgdmFsdWVQcm9wcyA9IHJlc29sdmVQcm9wcyhzZXAgPz8gW10sIHtcbiAgICAgICAgICAgIGluZGljYXRvcjogJ21hcC12YWx1ZS1pbmQnLFxuICAgICAgICAgICAgbmV4dDogdmFsdWUsXG4gICAgICAgICAgICBvZmZzZXQ6IGtleU5vZGUucmFuZ2VbMl0sXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgcGFyZW50SW5kZW50OiBibS5pbmRlbnQsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogIWtleSB8fCBrZXkudHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcidcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZnNldCA9IHZhbHVlUHJvcHMuZW5kO1xuICAgICAgICBpZiAodmFsdWVQcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlPy50eXBlID09PSAnYmxvY2stbWFwJyAmJiAhdmFsdWVQcm9wcy5oYXNOZXdsaW5lKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JMT0NLX0FTX0lNUExJQ0lUX0tFWScsICdOZXN0ZWQgbWFwcGluZ3MgYXJlIG5vdCBhbGxvd2VkIGluIGNvbXBhY3QgbWFwcGluZ3MnKTtcbiAgICAgICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMuc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleVByb3BzLnN0YXJ0IDwgdmFsdWVQcm9wcy5mb3VuZC5vZmZzZXQgLSAxMDI0KVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGtleU5vZGUucmFuZ2UsICdLRVlfT1ZFUl8xMDI0X0NIQVJTJywgJ1RoZSA6IGluZGljYXRvciBtdXN0IGJlIGF0IG1vc3QgMTAyNCBjaGFycyBhZnRlciB0aGUgc3RhcnQgb2YgYW4gaW1wbGljaXQgYmxvY2sgbWFwcGluZyBrZXknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZhbHVlIHZhbHVlXG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgdmFsdWVQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBvZmZzZXQsIHNlcCwgbnVsbCwgdmFsdWVQcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoY3R4LnNjaGVtYS5jb21wYXQpXG4gICAgICAgICAgICAgICAgZmxvd0luZGVudENoZWNrKGJtLmluZGVudCwgdmFsdWUsIG9uRXJyb3IpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlLnJhbmdlWzJdO1xuICAgICAgICAgICAgY29uc3QgcGFpciA9IG5ldyBQYWlyKGtleU5vZGUsIHZhbHVlTm9kZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucylcbiAgICAgICAgICAgICAgICBwYWlyLnNyY1Rva2VuID0gY29sbEl0ZW07XG4gICAgICAgICAgICBtYXAuaXRlbXMucHVzaChwYWlyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGtleSB3aXRoIG5vIHZhbHVlXG4gICAgICAgICAgICBpZiAoaW1wbGljaXRLZXkpXG4gICAgICAgICAgICAgICAgb25FcnJvcihrZXlOb2RlLnJhbmdlLCAnTUlTU0lOR19DSEFSJywgJ0ltcGxpY2l0IG1hcCBrZXlzIG5lZWQgdG8gYmUgZm9sbG93ZWQgYnkgbWFwIHZhbHVlcycpO1xuICAgICAgICAgICAgaWYgKHZhbHVlUHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlOb2RlLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCArPSAnXFxuJyArIHZhbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCA9IHZhbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBuZXcgUGFpcihrZXlOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3JjVG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb21tZW50RW5kICYmIGNvbW1lbnRFbmQgPCBvZmZzZXQpXG4gICAgICAgIG9uRXJyb3IoY29tbWVudEVuZCwgJ0lNUE9TU0lCTEUnLCAnTWFwIGNvbW1lbnQgd2l0aCB0cmFpbGluZyBjb250ZW50Jyk7XG4gICAgbWFwLnJhbmdlID0gW2JtLm9mZnNldCwgb2Zmc2V0LCBjb21tZW50RW5kID8/IG9mZnNldF07XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUJsb2NrTWFwIH07XG4iLCJmdW5jdGlvbiByZXNvbHZlRW5kKGVuZCwgb2Zmc2V0LCByZXFTcGFjZSwgb25FcnJvcikge1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAgaWYgKGVuZCkge1xuICAgICAgICBsZXQgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNlcCA9ICcnO1xuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIGVuZCkge1xuICAgICAgICAgICAgY29uc3QgeyBzb3VyY2UsIHR5cGUgfSA9IHRva2VuO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXFTcGFjZSAmJiAhaGFzU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTUlTU0lOR19DSEFSJywgJ0NvbW1lbnRzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gb3RoZXIgdG9rZW5zIGJ5IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2IgPSBzb3VyY2Uuc3Vic3RyaW5nKDEpIHx8ICcgJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGNiO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IHNlcCArIGNiO1xuICAgICAgICAgICAgICAgICAgICBzZXAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcCArPSBzb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAke3R5cGV9IGF0IG5vZGUgZW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBjb21tZW50LCBvZmZzZXQgfTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUVuZCB9O1xuIiwiaW1wb3J0IHsgaXNQYWlyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciB9IGZyb20gJy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uL25vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZyb20gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcbmltcG9ydCB7IG1hcEluY2x1ZGVzIH0gZnJvbSAnLi91dGlsLW1hcC1pbmNsdWRlcy5qcyc7XG5cbmNvbnN0IGJsb2NrTXNnID0gJ0Jsb2NrIGNvbGxlY3Rpb25zIGFyZSBub3QgYWxsb3dlZCB3aXRoaW4gZmxvdyBjb2xsZWN0aW9ucyc7XG5jb25zdCBpc0Jsb2NrID0gKHRva2VuKSA9PiB0b2tlbiAmJiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHwgdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcScpO1xuZnVuY3Rpb24gcmVzb2x2ZUZsb3dDb2xsZWN0aW9uKHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSwgY3R4LCBmYywgb25FcnJvciwgdGFnKSB7XG4gICAgY29uc3QgaXNNYXAgPSBmYy5zdGFydC5zb3VyY2UgPT09ICd7JztcbiAgICBjb25zdCBmY05hbWUgPSBpc01hcCA/ICdmbG93IG1hcCcgOiAnZmxvdyBzZXF1ZW5jZSc7XG4gICAgY29uc3QgTm9kZUNsYXNzID0gKHRhZz8ubm9kZUNsYXNzID8/IChpc01hcCA/IFlBTUxNYXAgOiBZQU1MU2VxKSk7XG4gICAgY29uc3QgY29sbCA9IG5ldyBOb2RlQ2xhc3MoY3R4LnNjaGVtYSk7XG4gICAgY29sbC5mbG93ID0gdHJ1ZTtcbiAgICBjb25zdCBhdFJvb3QgPSBjdHguYXRSb290O1xuICAgIGlmIChhdFJvb3QpXG4gICAgICAgIGN0eC5hdFJvb3QgPSBmYWxzZTtcbiAgICBpZiAoY3R4LmF0S2V5KVxuICAgICAgICBjdHguYXRLZXkgPSBmYWxzZTtcbiAgICBsZXQgb2Zmc2V0ID0gZmMub2Zmc2V0ICsgZmMuc3RhcnQuc291cmNlLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZjLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNvbGxJdGVtID0gZmMuaXRlbXNbaV07XG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIGtleSwgc2VwLCB2YWx1ZSB9ID0gY29sbEl0ZW07XG4gICAgICAgIGNvbnN0IHByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBmbG93OiBmY05hbWUsXG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdleHBsaWNpdC1rZXktaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IGtleSA/PyBzZXA/LlswXSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGZjLmluZGVudCxcbiAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFwcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgaWYgKCFwcm9wcy5hbmNob3IgJiYgIXByb3BzLnRhZyAmJiAhc2VwICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAwICYmIHByb3BzLmNvbW1hKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLmNvbW1hLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICwgaW4gJHtmY05hbWV9YCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA8IGZjLml0ZW1zLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuc3RhcnQsICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgZW1wdHkgaXRlbSBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbC5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbC5jb21tZW50ICs9ICdcXG4nICsgcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbC5jb21tZW50ID0gcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gcHJvcHMuZW5kO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc01hcCAmJiBjdHgub3B0aW9ucy5zdHJpY3QgJiYgY29udGFpbnNOZXdsaW5lKGtleSkpXG4gICAgICAgICAgICAgICAgb25FcnJvcihrZXksIC8vIGNoZWNrZWQgYnkgY29udGFpbnNOZXdsaW5lKClcbiAgICAgICAgICAgICAgICAnTVVMVElMSU5FX0lNUExJQ0lUX0tFWScsICdJbXBsaWNpdCBrZXlzIG9mIGZsb3cgc2VxdWVuY2UgcGFpcnMgbmVlZCB0byBiZSBvbiBhIHNpbmdsZSBsaW5lJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5jb21tYSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLmNvbW1hLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICwgaW4gJHtmY05hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXByb3BzLmNvbW1hKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuc3RhcnQsICdNSVNTSU5HX0NIQVInLCBgTWlzc2luZyAsIGJldHdlZW4gJHtmY05hbWV9IGl0ZW1zYCk7XG4gICAgICAgICAgICBpZiAocHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgIGxldCBwcmV2SXRlbUNvbW1lbnQgPSAnJztcbiAgICAgICAgICAgICAgICBsb29wOiBmb3IgKGNvbnN0IHN0IG9mIHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkl0ZW1Db21tZW50ID0gc3Quc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2SXRlbUNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBjb2xsLml0ZW1zW2NvbGwuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1BhaXIocHJldikpXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gcHJldi52YWx1ZSA/PyBwcmV2LmtleTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuY29tbWVudCArPSAnXFxuJyArIHByZXZJdGVtQ29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5jb21tZW50ID0gcHJldkl0ZW1Db21tZW50O1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5jb21tZW50ID0gcHJvcHMuY29tbWVudC5zdWJzdHJpbmcocHJldkl0ZW1Db21tZW50Lmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTWFwICYmICFzZXAgJiYgIXByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICAvLyBpdGVtIGlzIGEgdmFsdWUgaW4gYSBzZXFcbiAgICAgICAgICAgIC8vIOKGkiBrZXkgJiBzZXAgYXJlIGVtcHR5LCBzdGFydCBkb2VzIG5vdCBpbmNsdWRlID8gb3IgOlxuICAgICAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gdmFsdWVcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIHByb3BzLmVuZCwgc2VwLCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBjb2xsLml0ZW1zLnB1c2godmFsdWVOb2RlKTtcbiAgICAgICAgICAgIG9mZnNldCA9IHZhbHVlTm9kZS5yYW5nZVsyXTtcbiAgICAgICAgICAgIGlmIChpc0Jsb2NrKHZhbHVlKSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlTm9kZS5yYW5nZSwgJ0JMT0NLX0lOX0ZMT1cnLCBibG9ja01zZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVtIGlzIGEga2V5K3ZhbHVlIHBhaXJcbiAgICAgICAgICAgIC8vIGtleSB2YWx1ZVxuICAgICAgICAgICAgY3R4LmF0S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGtleVN0YXJ0ID0gcHJvcHMuZW5kO1xuICAgICAgICAgICAgY29uc3Qga2V5Tm9kZSA9IGtleVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCBrZXksIHByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIGtleVN0YXJ0LCBzdGFydCwgbnVsbCwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGlzQmxvY2soa2V5KSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleU5vZGUucmFuZ2UsICdCTE9DS19JTl9GTE9XJywgYmxvY2tNc2cpO1xuICAgICAgICAgICAgY3R4LmF0S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB2YWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBjb25zdCB2YWx1ZVByb3BzID0gcmVzb2x2ZVByb3BzKHNlcCA/PyBbXSwge1xuICAgICAgICAgICAgICAgIGZsb3c6IGZjTmFtZSxcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3I6ICdtYXAtdmFsdWUtaW5kJyxcbiAgICAgICAgICAgICAgICBuZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGtleU5vZGUucmFuZ2VbMl0sXG4gICAgICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGZjLmluZGVudCxcbiAgICAgICAgICAgICAgICBzdGFydE9uTmV3bGluZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHZhbHVlUHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTWFwICYmICFwcm9wcy5mb3VuZCAmJiBjdHgub3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2Ygc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ID09PSB2YWx1ZVByb3BzLmZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3QudHlwZSA9PT0gJ25ld2xpbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioc3QsICdNVUxUSUxJTkVfSU1QTElDSVRfS0VZJywgJ0ltcGxpY2l0IGtleXMgb2YgZmxvdyBzZXF1ZW5jZSBwYWlycyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMuc3RhcnQgPCB2YWx1ZVByb3BzLmZvdW5kLm9mZnNldCAtIDEwMjQpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlUHJvcHMuZm91bmQsICdLRVlfT1ZFUl8xMDI0X0NIQVJTJywgJ1RoZSA6IGluZGljYXRvciBtdXN0IGJlIGF0IG1vc3QgMTAyNCBjaGFycyBhZnRlciB0aGUgc3RhcnQgb2YgYW4gaW1wbGljaXQgZmxvdyBzZXF1ZW5jZSBrZXknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgnc291cmNlJyBpbiB2YWx1ZSAmJiB2YWx1ZS5zb3VyY2UgJiYgdmFsdWUuc291cmNlWzBdID09PSAnOicpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWUsICdNSVNTSU5HX0NIQVInLCBgTWlzc2luZyBzcGFjZSBhZnRlciA6IGluICR7ZmNOYW1lfWApO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZVByb3BzLnN0YXJ0LCAnTUlTU0lOR19DSEFSJywgYE1pc3NpbmcgLCBvciA6IGJldHdlZW4gJHtmY05hbWV9IGl0ZW1zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2YWx1ZSB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gdmFsdWVcbiAgICAgICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHZhbHVlUHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiB2YWx1ZVByb3BzLmZvdW5kXG4gICAgICAgICAgICAgICAgICAgID8gY29tcG9zZUVtcHR5Tm9kZShjdHgsIHZhbHVlUHJvcHMuZW5kLCBzZXAsIG51bGwsIHZhbHVlUHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmICh2YWx1ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCbG9jayh2YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVOb2RlLnJhbmdlLCAnQkxPQ0tfSU5fRkxPVycsIGJsb2NrTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlUHJvcHMuY29tbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlOb2RlLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCArPSAnXFxuJyArIHZhbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGtleU5vZGUuY29tbWVudCA9IHZhbHVlUHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBuZXcgUGFpcihrZXlOb2RlLCB2YWx1ZU5vZGUpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgICAgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgaWYgKGlzTWFwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0gY29sbDtcbiAgICAgICAgICAgICAgICBpZiAobWFwSW5jbHVkZXMoY3R4LCBtYXAuaXRlbXMsIGtleU5vZGUpKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGtleVN0YXJ0LCAnRFVQTElDQVRFX0tFWScsICdNYXAga2V5cyBtdXN0IGJlIHVuaXF1ZScpO1xuICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0gbmV3IFlBTUxNYXAoY3R4LnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgbWFwLmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZFJhbmdlID0gKHZhbHVlTm9kZSA/PyBrZXlOb2RlKS5yYW5nZTtcbiAgICAgICAgICAgICAgICBtYXAucmFuZ2UgPSBba2V5Tm9kZS5yYW5nZVswXSwgZW5kUmFuZ2VbMV0sIGVuZFJhbmdlWzJdXTtcbiAgICAgICAgICAgICAgICBjb2xsLml0ZW1zLnB1c2gobWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCA9IHZhbHVlTm9kZSA/IHZhbHVlTm9kZS5yYW5nZVsyXSA6IHZhbHVlUHJvcHMuZW5kO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGV4cGVjdGVkRW5kID0gaXNNYXAgPyAnfScgOiAnXSc7XG4gICAgY29uc3QgW2NlLCAuLi5lZV0gPSBmYy5lbmQ7XG4gICAgbGV0IGNlUG9zID0gb2Zmc2V0O1xuICAgIGlmIChjZSAmJiBjZS5zb3VyY2UgPT09IGV4cGVjdGVkRW5kKVxuICAgICAgICBjZVBvcyA9IGNlLm9mZnNldCArIGNlLnNvdXJjZS5sZW5ndGg7XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBmY05hbWVbMF0udG9VcHBlckNhc2UoKSArIGZjTmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGNvbnN0IG1zZyA9IGF0Um9vdFxuICAgICAgICAgICAgPyBgJHtuYW1lfSBtdXN0IGVuZCB3aXRoIGEgJHtleHBlY3RlZEVuZH1gXG4gICAgICAgICAgICA6IGAke25hbWV9IGluIGJsb2NrIGNvbGxlY3Rpb24gbXVzdCBiZSBzdWZmaWNpZW50bHkgaW5kZW50ZWQgYW5kIGVuZCB3aXRoIGEgJHtleHBlY3RlZEVuZH1gO1xuICAgICAgICBvbkVycm9yKG9mZnNldCwgYXRSb290ID8gJ01JU1NJTkdfQ0hBUicgOiAnQkFEX0lOREVOVCcsIG1zZyk7XG4gICAgICAgIGlmIChjZSAmJiBjZS5zb3VyY2UubGVuZ3RoICE9PSAxKVxuICAgICAgICAgICAgZWUudW5zaGlmdChjZSk7XG4gICAgfVxuICAgIGlmIChlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IHJlc29sdmVFbmQoZWUsIGNlUG9zLCBjdHgub3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgICAgICBpZiAoZW5kLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChjb2xsLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgY29sbC5jb21tZW50ICs9ICdcXG4nICsgZW5kLmNvbW1lbnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY29sbC5jb21tZW50ID0gZW5kLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29sbC5yYW5nZSA9IFtmYy5vZmZzZXQsIGNlUG9zLCBlbmQub2Zmc2V0XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbGwucmFuZ2UgPSBbZmMub2Zmc2V0LCBjZVBvcywgY2VQb3NdO1xuICAgIH1cbiAgICByZXR1cm4gY29sbDtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUZsb3dDb2xsZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uL25vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUJsb2NrTWFwIH0gZnJvbSAnLi9yZXNvbHZlLWJsb2NrLW1hcC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tTZXEgfSBmcm9tICcuL3Jlc29sdmUtYmxvY2stc2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVGbG93Q29sbGVjdGlvbiB9IGZyb20gJy4vcmVzb2x2ZS1mbG93LWNvbGxlY3Rpb24uanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnTmFtZSwgdGFnKSB7XG4gICAgY29uc3QgY29sbCA9IHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnXG4gICAgICAgID8gcmVzb2x2ZUJsb2NrTWFwKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWcpXG4gICAgICAgIDogdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcSdcbiAgICAgICAgICAgID8gcmVzb2x2ZUJsb2NrU2VxKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWcpXG4gICAgICAgICAgICA6IHJlc29sdmVGbG93Q29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnKTtcbiAgICBjb25zdCBDb2xsID0gY29sbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBJZiB3ZSBnb3QgYSB0YWdOYW1lIG1hdGNoaW5nIHRoZSBjbGFzcywgb3IgdGhlIHRhZyBuYW1lIGlzICchJyxcbiAgICAvLyB0aGVuIHVzZSB0aGUgdGFnTmFtZSBmcm9tIHRoZSBub2RlIGNsYXNzIHVzZWQgdG8gY3JlYXRlIGl0LlxuICAgIGlmICh0YWdOYW1lID09PSAnIScgfHwgdGFnTmFtZSA9PT0gQ29sbC50YWdOYW1lKSB7XG4gICAgICAgIGNvbGwudGFnID0gQ29sbC50YWdOYW1lO1xuICAgICAgICByZXR1cm4gY29sbDtcbiAgICB9XG4gICAgaWYgKHRhZ05hbWUpXG4gICAgICAgIGNvbGwudGFnID0gdGFnTmFtZTtcbiAgICByZXR1cm4gY29sbDtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBwcm9wcywgb25FcnJvcikge1xuICAgIGNvbnN0IHRhZ1Rva2VuID0gcHJvcHMudGFnO1xuICAgIGNvbnN0IHRhZ05hbWUgPSAhdGFnVG9rZW5cbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogY3R4LmRpcmVjdGl2ZXMudGFnTmFtZSh0YWdUb2tlbi5zb3VyY2UsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSk7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnKSB7XG4gICAgICAgIGNvbnN0IHsgYW5jaG9yLCBuZXdsaW5lQWZ0ZXJQcm9wOiBubCB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGxhc3RQcm9wID0gYW5jaG9yICYmIHRhZ1Rva2VuXG4gICAgICAgICAgICA/IGFuY2hvci5vZmZzZXQgPiB0YWdUb2tlbi5vZmZzZXRcbiAgICAgICAgICAgICAgICA/IGFuY2hvclxuICAgICAgICAgICAgICAgIDogdGFnVG9rZW5cbiAgICAgICAgICAgIDogKGFuY2hvciA/PyB0YWdUb2tlbik7XG4gICAgICAgIGlmIChsYXN0UHJvcCAmJiAoIW5sIHx8IG5sLm9mZnNldCA8IGxhc3RQcm9wLm9mZnNldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnTWlzc2luZyBuZXdsaW5lIGFmdGVyIGJsb2NrIHNlcXVlbmNlIHByb3BzJztcbiAgICAgICAgICAgIG9uRXJyb3IobGFzdFByb3AsICdNSVNTSU5HX0NIQVInLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBleHBUeXBlID0gdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCdcbiAgICAgICAgPyAnbWFwJ1xuICAgICAgICA6IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnXG4gICAgICAgICAgICA/ICdzZXEnXG4gICAgICAgICAgICA6IHRva2VuLnN0YXJ0LnNvdXJjZSA9PT0gJ3snXG4gICAgICAgICAgICAgICAgPyAnbWFwJ1xuICAgICAgICAgICAgICAgIDogJ3NlcSc7XG4gICAgLy8gc2hvcnRjdXQ6IGNoZWNrIGlmIGl0J3MgYSBnZW5lcmljIFlBTUxNYXAgb3IgWUFNTFNlcVxuICAgIC8vIGJlZm9yZSBqdW1waW5nIGludG8gdGhlIGN1c3RvbSB0YWcgbG9naWMuXG4gICAgaWYgKCF0YWdUb2tlbiB8fFxuICAgICAgICAhdGFnTmFtZSB8fFxuICAgICAgICB0YWdOYW1lID09PSAnIScgfHxcbiAgICAgICAgKHRhZ05hbWUgPT09IFlBTUxNYXAudGFnTmFtZSAmJiBleHBUeXBlID09PSAnbWFwJykgfHxcbiAgICAgICAgKHRhZ05hbWUgPT09IFlBTUxTZXEudGFnTmFtZSAmJiBleHBUeXBlID09PSAnc2VxJykpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lKTtcbiAgICB9XG4gICAgbGV0IHRhZyA9IGN0eC5zY2hlbWEudGFncy5maW5kKHQgPT4gdC50YWcgPT09IHRhZ05hbWUgJiYgdC5jb2xsZWN0aW9uID09PSBleHBUeXBlKTtcbiAgICBpZiAoIXRhZykge1xuICAgICAgICBjb25zdCBrdCA9IGN0eC5zY2hlbWEua25vd25UYWdzW3RhZ05hbWVdO1xuICAgICAgICBpZiAoa3QgJiYga3QuY29sbGVjdGlvbiA9PT0gZXhwVHlwZSkge1xuICAgICAgICAgICAgY3R4LnNjaGVtYS50YWdzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwga3QsIHsgZGVmYXVsdDogZmFsc2UgfSkpO1xuICAgICAgICAgICAgdGFnID0ga3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoa3QpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRhZ1Rva2VuLCAnQkFEX0NPTExFQ1RJT05fVFlQRScsIGAke2t0LnRhZ30gdXNlZCBmb3IgJHtleHBUeXBlfSBjb2xsZWN0aW9uLCBidXQgZXhwZWN0cyAke2t0LmNvbGxlY3Rpb24gPz8gJ3NjYWxhcid9YCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgYFVucmVzb2x2ZWQgdGFnOiAke3RhZ05hbWV9YCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNvbGwgPSByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnTmFtZSwgdGFnKTtcbiAgICBjb25zdCByZXMgPSB0YWcucmVzb2x2ZT8uKGNvbGwsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSwgY3R4Lm9wdGlvbnMpID8/IGNvbGw7XG4gICAgY29uc3Qgbm9kZSA9IGlzTm9kZShyZXMpXG4gICAgICAgID8gcmVzXG4gICAgICAgIDogbmV3IFNjYWxhcihyZXMpO1xuICAgIG5vZGUucmFuZ2UgPSBjb2xsLnJhbmdlO1xuICAgIG5vZGUudGFnID0gdGFnTmFtZTtcbiAgICBpZiAodGFnPy5mb3JtYXQpXG4gICAgICAgIG5vZGUuZm9ybWF0ID0gdGFnLmZvcm1hdDtcbiAgICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IHsgY29tcG9zZUNvbGxlY3Rpb24gfTtcbiIsImltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi9ub2Rlcy9ZQU1MU2VxLmpzJztcbmltcG9ydCB7IHJlc29sdmVQcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS1wcm9wcy5qcyc7XG5pbXBvcnQgeyBmbG93SW5kZW50Q2hlY2sgfSBmcm9tICcuL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlQmxvY2tTZXEoeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9LCBjdHgsIGJzLCBvbkVycm9yLCB0YWcpIHtcbiAgICBjb25zdCBOb2RlQ2xhc3MgPSB0YWc/Lm5vZGVDbGFzcyA/PyBZQU1MU2VxO1xuICAgIGNvbnN0IHNlcSA9IG5ldyBOb2RlQ2xhc3MoY3R4LnNjaGVtYSk7XG4gICAgaWYgKGN0eC5hdFJvb3QpXG4gICAgICAgIGN0eC5hdFJvb3QgPSBmYWxzZTtcbiAgICBpZiAoY3R4LmF0S2V5KVxuICAgICAgICBjdHguYXRLZXkgPSBmYWxzZTtcbiAgICBsZXQgb2Zmc2V0ID0gYnMub2Zmc2V0O1xuICAgIGxldCBjb21tZW50RW5kID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHsgc3RhcnQsIHZhbHVlIH0gb2YgYnMuaXRlbXMpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgICAgIGluZGljYXRvcjogJ3NlcS1pdGVtLWluZCcsXG4gICAgICAgICAgICBuZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGJzLmluZGVudCxcbiAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICBpZiAocHJvcHMuYW5jaG9yIHx8IHByb3BzLnRhZyB8fCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50eXBlID09PSAnYmxvY2stc2VxJylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5lbmQsICdCQURfSU5ERU5UJywgJ0FsbCBzZXF1ZW5jZSBpdGVtcyBtdXN0IHN0YXJ0IGF0IHRoZSBzYW1lIGNvbHVtbicpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdNSVNTSU5HX0NIQVInLCAnU2VxdWVuY2UgaXRlbSB3aXRob3V0IC0gaW5kaWNhdG9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21tZW50RW5kID0gcHJvcHMuZW5kO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBzZXEuY29tbWVudCA9IHByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9kZSA9IHZhbHVlXG4gICAgICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgcHJvcHMuZW5kLCBzdGFydCwgbnVsbCwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICBpZiAoY3R4LnNjaGVtYS5jb21wYXQpXG4gICAgICAgICAgICBmbG93SW5kZW50Q2hlY2soYnMuaW5kZW50LCB2YWx1ZSwgb25FcnJvcik7XG4gICAgICAgIG9mZnNldCA9IG5vZGUucmFuZ2VbMl07XG4gICAgICAgIHNlcS5pdGVtcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgICBzZXEucmFuZ2UgPSBbYnMub2Zmc2V0LCBvZmZzZXQsIGNvbW1lbnRFbmQgPz8gb2Zmc2V0XTtcbiAgICByZXR1cm4gc2VxO1xufVxuXG5leHBvcnQgeyByZXNvbHZlQmxvY2tTZXEgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVCbG9ja1NjYWxhcihjdHgsIHNjYWxhciwgb25FcnJvcikge1xuICAgIGNvbnN0IHN0YXJ0ID0gc2NhbGFyLm9mZnNldDtcbiAgICBjb25zdCBoZWFkZXIgPSBwYXJzZUJsb2NrU2NhbGFySGVhZGVyKHNjYWxhciwgY3R4Lm9wdGlvbnMuc3RyaWN0LCBvbkVycm9yKTtcbiAgICBpZiAoIWhlYWRlcilcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6ICcnLCB0eXBlOiBudWxsLCBjb21tZW50OiAnJywgcmFuZ2U6IFtzdGFydCwgc3RhcnQsIHN0YXJ0XSB9O1xuICAgIGNvbnN0IHR5cGUgPSBoZWFkZXIubW9kZSA9PT0gJz4nID8gU2NhbGFyLkJMT0NLX0ZPTERFRCA6IFNjYWxhci5CTE9DS19MSVRFUkFMO1xuICAgIGNvbnN0IGxpbmVzID0gc2NhbGFyLnNvdXJjZSA/IHNwbGl0TGluZXMoc2NhbGFyLnNvdXJjZSkgOiBbXTtcbiAgICAvLyBkZXRlcm1pbmUgdGhlIGVuZCBvZiBjb250ZW50ICYgc3RhcnQgb2YgY2hvbXBpbmdcbiAgICBsZXQgY2hvbXBTdGFydCA9IGxpbmVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gbGluZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGxpbmVzW2ldWzFdO1xuICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ1xccicpXG4gICAgICAgICAgICBjaG9tcFN0YXJ0ID0gaTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIHNob3J0Y3V0IGZvciBlbXB0eSBjb250ZW50c1xuICAgIGlmIChjaG9tcFN0YXJ0ID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaGVhZGVyLmNob21wID09PSAnKycgJiYgbGluZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyAnXFxuJy5yZXBlYXQoTWF0aC5tYXgoMSwgbGluZXMubGVuZ3RoIC0gMSkpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICBsZXQgZW5kID0gc3RhcnQgKyBoZWFkZXIubGVuZ3RoO1xuICAgICAgICBpZiAoc2NhbGFyLnNvdXJjZSlcbiAgICAgICAgICAgIGVuZCArPSBzY2FsYXIuc291cmNlLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWUsIHR5cGUsIGNvbW1lbnQ6IGhlYWRlci5jb21tZW50LCByYW5nZTogW3N0YXJ0LCBlbmQsIGVuZF0gfTtcbiAgICB9XG4gICAgLy8gZmluZCB0aGUgaW5kZW50YXRpb24gbGV2ZWwgdG8gdHJpbSBmcm9tIHN0YXJ0XG4gICAgbGV0IHRyaW1JbmRlbnQgPSBzY2FsYXIuaW5kZW50ICsgaGVhZGVyLmluZGVudDtcbiAgICBsZXQgb2Zmc2V0ID0gc2NhbGFyLm9mZnNldCArIGhlYWRlci5sZW5ndGg7XG4gICAgbGV0IGNvbnRlbnRTdGFydCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaG9tcFN0YXJ0OyArK2kpIHtcbiAgICAgICAgY29uc3QgW2luZGVudCwgY29udGVudF0gPSBsaW5lc1tpXTtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09ICcnIHx8IGNvbnRlbnQgPT09ICdcXHInKSB7XG4gICAgICAgICAgICBpZiAoaGVhZGVyLmluZGVudCA9PT0gMCAmJiBpbmRlbnQubGVuZ3RoID4gdHJpbUluZGVudClcbiAgICAgICAgICAgICAgICB0cmltSW5kZW50ID0gaW5kZW50Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbmRlbnQubGVuZ3RoIDwgdHJpbUluZGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQmxvY2sgc2NhbGFycyB3aXRoIG1vcmUtaW5kZW50ZWQgbGVhZGluZyBlbXB0eSBsaW5lcyBtdXN0IHVzZSBhbiBleHBsaWNpdCBpbmRlbnRhdGlvbiBpbmRpY2F0b3InO1xuICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0ICsgaW5kZW50Lmxlbmd0aCwgJ01JU1NJTkdfQ0hBUicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhlYWRlci5pbmRlbnQgPT09IDApXG4gICAgICAgICAgICAgICAgdHJpbUluZGVudCA9IGluZGVudC5sZW5ndGg7XG4gICAgICAgICAgICBjb250ZW50U3RhcnQgPSBpO1xuICAgICAgICAgICAgaWYgKHRyaW1JbmRlbnQgPT09IDAgJiYgIWN0eC5hdFJvb3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0Jsb2NrIHNjYWxhciB2YWx1ZXMgaW4gY29sbGVjdGlvbnMgbXVzdCBiZSBpbmRlbnRlZCc7XG4gICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfSU5ERU5UJywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gaW5kZW50Lmxlbmd0aCArIGNvbnRlbnQubGVuZ3RoICsgMTtcbiAgICB9XG4gICAgLy8gaW5jbHVkZSB0cmFpbGluZyBtb3JlLWluZGVudGVkIGVtcHR5IGxpbmVzIGluIGNvbnRlbnRcbiAgICBmb3IgKGxldCBpID0gbGluZXMubGVuZ3RoIC0gMTsgaSA+PSBjaG9tcFN0YXJ0OyAtLWkpIHtcbiAgICAgICAgaWYgKGxpbmVzW2ldWzBdLmxlbmd0aCA+IHRyaW1JbmRlbnQpXG4gICAgICAgICAgICBjaG9tcFN0YXJ0ID0gaSArIDE7XG4gICAgfVxuICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgIGxldCBzZXAgPSAnJztcbiAgICBsZXQgcHJldk1vcmVJbmRlbnRlZCA9IGZhbHNlO1xuICAgIC8vIGxlYWRpbmcgd2hpdGVzcGFjZSBpcyBrZXB0IGludGFjdFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudFN0YXJ0OyArK2kpXG4gICAgICAgIHZhbHVlICs9IGxpbmVzW2ldWzBdLnNsaWNlKHRyaW1JbmRlbnQpICsgJ1xcbic7XG4gICAgZm9yIChsZXQgaSA9IGNvbnRlbnRTdGFydDsgaSA8IGNob21wU3RhcnQ7ICsraSkge1xuICAgICAgICBsZXQgW2luZGVudCwgY29udGVudF0gPSBsaW5lc1tpXTtcbiAgICAgICAgb2Zmc2V0ICs9IGluZGVudC5sZW5ndGggKyBjb250ZW50Lmxlbmd0aCArIDE7XG4gICAgICAgIGNvbnN0IGNybGYgPSBjb250ZW50W2NvbnRlbnQubGVuZ3RoIC0gMV0gPT09ICdcXHInO1xuICAgICAgICBpZiAoY3JsZilcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIGFscmVhZHkgY2F1Z2h0IGluIGxleGVyICovXG4gICAgICAgIGlmIChjb250ZW50ICYmIGluZGVudC5sZW5ndGggPCB0cmltSW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzcmMgPSBoZWFkZXIuaW5kZW50XG4gICAgICAgICAgICAgICAgPyAnZXhwbGljaXQgaW5kZW50YXRpb24gaW5kaWNhdG9yJ1xuICAgICAgICAgICAgICAgIDogJ2ZpcnN0IGxpbmUnO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBCbG9jayBzY2FsYXIgbGluZXMgbXVzdCBub3QgYmUgbGVzcyBpbmRlbnRlZCB0aGFuIHRoZWlyICR7c3JjfWA7XG4gICAgICAgICAgICBvbkVycm9yKG9mZnNldCAtIGNvbnRlbnQubGVuZ3RoIC0gKGNybGYgPyAyIDogMSksICdCQURfSU5ERU5UJywgbWVzc2FnZSk7XG4gICAgICAgICAgICBpbmRlbnQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUwpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IHNlcCArIGluZGVudC5zbGljZSh0cmltSW5kZW50KSArIGNvbnRlbnQ7XG4gICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbmRlbnQubGVuZ3RoID4gdHJpbUluZGVudCB8fCBjb250ZW50WzBdID09PSAnXFx0Jykge1xuICAgICAgICAgICAgLy8gbW9yZS1pbmRlbnRlZCBjb250ZW50IHdpdGhpbiBhIGZvbGRlZCBibG9ja1xuICAgICAgICAgICAgaWYgKHNlcCA9PT0gJyAnKVxuICAgICAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICAgICAgZWxzZSBpZiAoIXByZXZNb3JlSW5kZW50ZWQgJiYgc2VwID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuXFxuJztcbiAgICAgICAgICAgIHZhbHVlICs9IHNlcCArIGluZGVudC5zbGljZSh0cmltSW5kZW50KSArIGNvbnRlbnQ7XG4gICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgICAgIHByZXZNb3JlSW5kZW50ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbnRlbnQgPT09ICcnKSB7XG4gICAgICAgICAgICAvLyBlbXB0eSBsaW5lXG4gICAgICAgICAgICBpZiAoc2VwID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSAnXFxuJztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzZXAgPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICs9IHNlcCArIGNvbnRlbnQ7XG4gICAgICAgICAgICBzZXAgPSAnICc7XG4gICAgICAgICAgICBwcmV2TW9yZUluZGVudGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3dpdGNoIChoZWFkZXIuY2hvbXApIHtcbiAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY2hvbXBTdGFydDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nICsgbGluZXNbaV1bMF0uc2xpY2UodHJpbUluZGVudCk7XG4gICAgICAgICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gIT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YWx1ZSArPSAnXFxuJztcbiAgICB9XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBoZWFkZXIubGVuZ3RoICsgc2NhbGFyLnNvdXJjZS5sZW5ndGg7XG4gICAgcmV0dXJuIHsgdmFsdWUsIHR5cGUsIGNvbW1lbnQ6IGhlYWRlci5jb21tZW50LCByYW5nZTogW3N0YXJ0LCBlbmQsIGVuZF0gfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoeyBvZmZzZXQsIHByb3BzIH0sIHN0cmljdCwgb25FcnJvcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgIGlmIChwcm9wc1swXS50eXBlICE9PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpIHtcbiAgICAgICAgb25FcnJvcihwcm9wc1swXSwgJ0lNUE9TU0lCTEUnLCAnQmxvY2sgc2NhbGFyIGhlYWRlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgc291cmNlIH0gPSBwcm9wc1swXTtcbiAgICBjb25zdCBtb2RlID0gc291cmNlWzBdO1xuICAgIGxldCBpbmRlbnQgPSAwO1xuICAgIGxldCBjaG9tcCA9ICcnO1xuICAgIGxldCBlcnJvciA9IC0xO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNoID0gc291cmNlW2ldO1xuICAgICAgICBpZiAoIWNob21wICYmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpKVxuICAgICAgICAgICAgY2hvbXAgPSBjaDtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBuID0gTnVtYmVyKGNoKTtcbiAgICAgICAgICAgIGlmICghaW5kZW50ICYmIG4pXG4gICAgICAgICAgICAgICAgaW5kZW50ID0gbjtcbiAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yID09PSAtMSlcbiAgICAgICAgICAgICAgICBlcnJvciA9IG9mZnNldCArIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVycm9yICE9PSAtMSlcbiAgICAgICAgb25FcnJvcihlcnJvciwgJ1VORVhQRUNURURfVE9LRU4nLCBgQmxvY2sgc2NhbGFyIGhlYWRlciBpbmNsdWRlcyBleHRyYSBjaGFyYWN0ZXJzOiAke3NvdXJjZX1gKTtcbiAgICBsZXQgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICBsZXQgY29tbWVudCA9ICcnO1xuICAgIGxldCBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBwcm9wc1tpXTtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0b2tlbi5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhaGFzU3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdDb21tZW50cyBtdXN0IGJlIHNlcGFyYXRlZCBmcm9tIG90aGVyIHRva2VucyBieSB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzJztcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gdG9rZW4uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gdG9rZW4uc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIHRva2VuLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0b2tlbi5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYFVuZXhwZWN0ZWQgdG9rZW4gaW4gYmxvY2sgc2NhbGFyIGhlYWRlcjogJHt0b2tlbi50eXBlfWA7XG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cyA9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBpZiAodHMgJiYgdHlwZW9mIHRzID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBtb2RlLCBpbmRlbnQsIGNob21wLCBjb21tZW50LCBsZW5ndGggfTtcbn1cbi8qKiBAcmV0dXJucyBBcnJheSBvZiBsaW5lcyBzcGxpdCB1cCBhcyBgW2luZGVudCwgY29udGVudF1gICovXG5mdW5jdGlvbiBzcGxpdExpbmVzKHNvdXJjZSkge1xuICAgIGNvbnN0IHNwbGl0ID0gc291cmNlLnNwbGl0KC9cXG4oICopLyk7XG4gICAgY29uc3QgZmlyc3QgPSBzcGxpdFswXTtcbiAgICBjb25zdCBtID0gZmlyc3QubWF0Y2goL14oICopLyk7XG4gICAgY29uc3QgbGluZTAgPSBtPy5bMV1cbiAgICAgICAgPyBbbVsxXSwgZmlyc3Quc2xpY2UobVsxXS5sZW5ndGgpXVxuICAgICAgICA6IFsnJywgZmlyc3RdO1xuICAgIGNvbnN0IGxpbmVzID0gW2xpbmUwXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNwbGl0Lmxlbmd0aDsgaSArPSAyKVxuICAgICAgICBsaW5lcy5wdXNoKFtzcGxpdFtpXSwgc3BsaXRbaSArIDFdXSk7XG4gICAgcmV0dXJuIGxpbmVzO1xufVxuXG5leHBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVGbG93U2NhbGFyKHNjYWxhciwgc3RyaWN0LCBvbkVycm9yKSB7XG4gICAgY29uc3QgeyBvZmZzZXQsIHR5cGUsIHNvdXJjZSwgZW5kIH0gPSBzY2FsYXI7XG4gICAgbGV0IF90eXBlO1xuICAgIGxldCB2YWx1ZTtcbiAgICBjb25zdCBfb25FcnJvciA9IChyZWwsIGNvZGUsIG1zZykgPT4gb25FcnJvcihvZmZzZXQgKyByZWwsIGNvZGUsIG1zZyk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBfdHlwZSA9IFNjYWxhci5QTEFJTjtcbiAgICAgICAgICAgIHZhbHVlID0gcGxhaW5WYWx1ZShzb3VyY2UsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBfdHlwZSA9IFNjYWxhci5RVU9URV9TSU5HTEU7XG4gICAgICAgICAgICB2YWx1ZSA9IHNpbmdsZVF1b3RlZFZhbHVlKHNvdXJjZSwgX29uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIF90eXBlID0gU2NhbGFyLlFVT1RFX0RPVUJMRTtcbiAgICAgICAgICAgIHZhbHVlID0gZG91YmxlUXVvdGVkVmFsdWUoc291cmNlLCBfb25FcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG9uRXJyb3Ioc2NhbGFyLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBFeHBlY3RlZCBhIGZsb3cgc2NhbGFyIHZhbHVlLCBidXQgZm91bmQ6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgY29tbWVudDogJycsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IFtvZmZzZXQsIG9mZnNldCArIHNvdXJjZS5sZW5ndGgsIG9mZnNldCArIHNvdXJjZS5sZW5ndGhdXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZUVuZCA9IG9mZnNldCArIHNvdXJjZS5sZW5ndGg7XG4gICAgY29uc3QgcmUgPSByZXNvbHZlRW5kKGVuZCwgdmFsdWVFbmQsIHN0cmljdCwgb25FcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHR5cGU6IF90eXBlLFxuICAgICAgICBjb21tZW50OiByZS5jb21tZW50LFxuICAgICAgICByYW5nZTogW29mZnNldCwgdmFsdWVFbmQsIHJlLm9mZnNldF1cbiAgICB9O1xufVxuZnVuY3Rpb24gcGxhaW5WYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBsZXQgYmFkQ2hhciA9ICcnO1xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICAgICAgICBiYWRDaGFyID0gJ2EgdGFiIGNoYXJhY3Rlcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICBiYWRDaGFyID0gJ2Zsb3cgaW5kaWNhdG9yIGNoYXJhY3RlciAsJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIGJhZENoYXIgPSAnZGlyZWN0aXZlIGluZGljYXRvciBjaGFyYWN0ZXIgJSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGNhc2UgJz4nOiB7XG4gICAgICAgICAgICBiYWRDaGFyID0gYGJsb2NrIHNjYWxhciBpbmRpY2F0b3IgJHtzb3VyY2VbMF19YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICBjYXNlICdgJzoge1xuICAgICAgICAgICAgYmFkQ2hhciA9IGByZXNlcnZlZCBjaGFyYWN0ZXIgJHtzb3VyY2VbMF19YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChiYWRDaGFyKVxuICAgICAgICBvbkVycm9yKDAsICdCQURfU0NBTEFSX1NUQVJUJywgYFBsYWluIHZhbHVlIGNhbm5vdCBzdGFydCB3aXRoICR7YmFkQ2hhcn1gKTtcbiAgICByZXR1cm4gZm9sZExpbmVzKHNvdXJjZSk7XG59XG5mdW5jdGlvbiBzaW5nbGVRdW90ZWRWYWx1ZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICBpZiAoc291cmNlW3NvdXJjZS5sZW5ndGggLSAxXSAhPT0gXCInXCIgfHwgc291cmNlLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgb25FcnJvcihzb3VyY2UubGVuZ3RoLCAnTUlTU0lOR19DSEFSJywgXCJNaXNzaW5nIGNsb3NpbmcgJ3F1b3RlXCIpO1xuICAgIHJldHVybiBmb2xkTGluZXMoc291cmNlLnNsaWNlKDEsIC0xKSkucmVwbGFjZSgvJycvZywgXCInXCIpO1xufVxuZnVuY3Rpb24gZm9sZExpbmVzKHNvdXJjZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBuZWdhdGl2ZSBsb29rYmVoaW5kIGhlcmUgYW5kIGluIHRoZSBgcmVgIFJlZ0V4cCBpcyB0b1xuICAgICAqIHByZXZlbnQgY2F1c2luZyBhIHBvbHlub21pYWwgc2VhcmNoIHRpbWUgaW4gY2VydGFpbiBjYXNlcy5cbiAgICAgKlxuICAgICAqIFRoZSB0cnktY2F0Y2ggaXMgZm9yIFNhZmFyaSwgd2hpY2ggZG9lc24ndCBzdXBwb3J0IHRoaXMgeWV0OlxuICAgICAqIGh0dHBzOi8vY2FuaXVzZS5jb20vanMtcmVnZXhwLWxvb2tiZWhpbmRcbiAgICAgKi9cbiAgICBsZXQgZmlyc3QsIGxpbmU7XG4gICAgdHJ5IHtcbiAgICAgICAgZmlyc3QgPSBuZXcgUmVnRXhwKCcoLio/KSg/PCFbIFxcdF0pWyBcXHRdKlxccj9cXG4nLCAnc3knKTtcbiAgICAgICAgbGluZSA9IG5ldyBSZWdFeHAoJ1sgXFx0XSooLio/KSg/Oig/PCFbIFxcdF0pWyBcXHRdKik/XFxyP1xcbicsICdzeScpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIGZpcnN0ID0gLyguKj8pWyBcXHRdKlxccj9cXG4vc3k7XG4gICAgICAgIGxpbmUgPSAvWyBcXHRdKiguKj8pWyBcXHRdKlxccj9cXG4vc3k7XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IGZpcnN0LmV4ZWMoc291cmNlKTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIGxldCByZXMgPSBtYXRjaFsxXTtcbiAgICBsZXQgc2VwID0gJyAnO1xuICAgIGxldCBwb3MgPSBmaXJzdC5sYXN0SW5kZXg7XG4gICAgbGluZS5sYXN0SW5kZXggPSBwb3M7XG4gICAgd2hpbGUgKChtYXRjaCA9IGxpbmUuZXhlYyhzb3VyY2UpKSkge1xuICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICcnKSB7XG4gICAgICAgICAgICBpZiAoc2VwID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICByZXMgKz0gc2VwO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzICs9IHNlcCArIG1hdGNoWzFdO1xuICAgICAgICAgICAgc2VwID0gJyAnO1xuICAgICAgICB9XG4gICAgICAgIHBvcyA9IGxpbmUubGFzdEluZGV4O1xuICAgIH1cbiAgICBjb25zdCBsYXN0ID0gL1sgXFx0XSooLiopL3N5O1xuICAgIGxhc3QubGFzdEluZGV4ID0gcG9zO1xuICAgIG1hdGNoID0gbGFzdC5leGVjKHNvdXJjZSk7XG4gICAgcmV0dXJuIHJlcyArIHNlcCArIChtYXRjaD8uWzFdID8/ICcnKTtcbn1cbmZ1bmN0aW9uIGRvdWJsZVF1b3RlZFZhbHVlKHNvdXJjZSwgb25FcnJvcikge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNvdXJjZS5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgY29uc3QgY2ggPSBzb3VyY2VbaV07XG4gICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgc291cmNlW2kgKyAxXSA9PT0gJ1xcbicpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxuJykge1xuICAgICAgICAgICAgY29uc3QgeyBmb2xkLCBvZmZzZXQgfSA9IGZvbGROZXdsaW5lKHNvdXJjZSwgaSk7XG4gICAgICAgICAgICByZXMgKz0gZm9sZDtcbiAgICAgICAgICAgIGkgPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBzb3VyY2VbKytpXTtcbiAgICAgICAgICAgIGNvbnN0IGNjID0gZXNjYXBlQ29kZXNbbmV4dF07XG4gICAgICAgICAgICBpZiAoY2MpXG4gICAgICAgICAgICAgICAgcmVzICs9IGNjO1xuICAgICAgICAgICAgZWxzZSBpZiAobmV4dCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIGVzY2FwZWQgbmV3bGluZXMsIGJ1dCBzdGlsbCB0cmltIHRoZSBmb2xsb3dpbmcgbGluZVxuICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbaSArIDFdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0ID09PSAnICcgfHwgbmV4dCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbKytpICsgMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0ID09PSAnXFxyJyAmJiBzb3VyY2VbaSArIDFdID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgZXNjYXBlZCBDUkxGIG5ld2xpbmVzLCBidXQgc3RpbGwgdHJpbSB0aGUgZm9sbG93aW5nIGxpbmVcbiAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0ID09PSAnICcgfHwgbmV4dCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbKytpICsgMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0ID09PSAneCcgfHwgbmV4dCA9PT0gJ3UnIHx8IG5leHQgPT09ICdVJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHsgeDogMiwgdTogNCwgVTogOCB9W25leHRdO1xuICAgICAgICAgICAgICAgIHJlcyArPSBwYXJzZUNoYXJDb2RlKHNvdXJjZSwgaSArIDEsIGxlbmd0aCwgb25FcnJvcik7XG4gICAgICAgICAgICAgICAgaSArPSBsZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYXcgPSBzb3VyY2Uuc3Vic3RyKGkgLSAxLCAyKTtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGkgLSAxLCAnQkFEX0RRX0VTQ0FQRScsIGBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZSAke3Jhd31gKTtcbiAgICAgICAgICAgICAgICByZXMgKz0gcmF3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAvLyB0cmltIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgICAgICAgIGNvbnN0IHdzU3RhcnQgPSBpO1xuICAgICAgICAgICAgbGV0IG5leHQgPSBzb3VyY2VbaSArIDFdO1xuICAgICAgICAgICAgd2hpbGUgKG5leHQgPT09ICcgJyB8fCBuZXh0ID09PSAnXFx0JylcbiAgICAgICAgICAgICAgICBuZXh0ID0gc291cmNlWysraSArIDFdO1xuICAgICAgICAgICAgaWYgKG5leHQgIT09ICdcXG4nICYmICEobmV4dCA9PT0gJ1xccicgJiYgc291cmNlW2kgKyAyXSA9PT0gJ1xcbicpKVxuICAgICAgICAgICAgICAgIHJlcyArPSBpID4gd3NTdGFydCA/IHNvdXJjZS5zbGljZSh3c1N0YXJ0LCBpICsgMSkgOiBjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcyArPSBjaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc291cmNlW3NvdXJjZS5sZW5ndGggLSAxXSAhPT0gJ1wiJyB8fCBzb3VyY2UubGVuZ3RoID09PSAxKVxuICAgICAgICBvbkVycm9yKHNvdXJjZS5sZW5ndGgsICdNSVNTSU5HX0NIQVInLCAnTWlzc2luZyBjbG9zaW5nIFwicXVvdGUnKTtcbiAgICByZXR1cm4gcmVzO1xufVxuLyoqXG4gKiBGb2xkIGEgc2luZ2xlIG5ld2xpbmUgaW50byBhIHNwYWNlLCBtdWx0aXBsZSBuZXdsaW5lcyB0byBOIC0gMSBuZXdsaW5lcy5cbiAqIFByZXN1bWVzIGBzb3VyY2Vbb2Zmc2V0XSA9PT0gJ1xcbidgXG4gKi9cbmZ1bmN0aW9uIGZvbGROZXdsaW5lKHNvdXJjZSwgb2Zmc2V0KSB7XG4gICAgbGV0IGZvbGQgPSAnJztcbiAgICBsZXQgY2ggPSBzb3VyY2Vbb2Zmc2V0ICsgMV07XG4gICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnIHx8IGNoID09PSAnXFxuJyB8fCBjaCA9PT0gJ1xccicpIHtcbiAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiBzb3VyY2Vbb2Zmc2V0ICsgMl0gIT09ICdcXG4nKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICBmb2xkICs9ICdcXG4nO1xuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgY2ggPSBzb3VyY2Vbb2Zmc2V0ICsgMV07XG4gICAgfVxuICAgIGlmICghZm9sZClcbiAgICAgICAgZm9sZCA9ICcgJztcbiAgICByZXR1cm4geyBmb2xkLCBvZmZzZXQgfTtcbn1cbmNvbnN0IGVzY2FwZUNvZGVzID0ge1xuICAgICcwJzogJ1xcMCcsIC8vIG51bGwgY2hhcmFjdGVyXG4gICAgYTogJ1xceDA3JywgLy8gYmVsbCBjaGFyYWN0ZXJcbiAgICBiOiAnXFxiJywgLy8gYmFja3NwYWNlXG4gICAgZTogJ1xceDFiJywgLy8gZXNjYXBlIGNoYXJhY3RlclxuICAgIGY6ICdcXGYnLCAvLyBmb3JtIGZlZWRcbiAgICBuOiAnXFxuJywgLy8gbGluZSBmZWVkXG4gICAgcjogJ1xccicsIC8vIGNhcnJpYWdlIHJldHVyblxuICAgIHQ6ICdcXHQnLCAvLyBob3Jpem9udGFsIHRhYlxuICAgIHY6ICdcXHYnLCAvLyB2ZXJ0aWNhbCB0YWJcbiAgICBOOiAnXFx1MDA4NScsIC8vIFVuaWNvZGUgbmV4dCBsaW5lXG4gICAgXzogJ1xcdTAwYTAnLCAvLyBVbmljb2RlIG5vbi1icmVha2luZyBzcGFjZVxuICAgIEw6ICdcXHUyMDI4JywgLy8gVW5pY29kZSBsaW5lIHNlcGFyYXRvclxuICAgIFA6ICdcXHUyMDI5JywgLy8gVW5pY29kZSBwYXJhZ3JhcGggc2VwYXJhdG9yXG4gICAgJyAnOiAnICcsXG4gICAgJ1wiJzogJ1wiJyxcbiAgICAnLyc6ICcvJyxcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICAnXFx0JzogJ1xcdCdcbn07XG5mdW5jdGlvbiBwYXJzZUNoYXJDb2RlKHNvdXJjZSwgb2Zmc2V0LCBsZW5ndGgsIG9uRXJyb3IpIHtcbiAgICBjb25zdCBjYyA9IHNvdXJjZS5zdWJzdHIob2Zmc2V0LCBsZW5ndGgpO1xuICAgIGNvbnN0IG9rID0gY2MubGVuZ3RoID09PSBsZW5ndGggJiYgL15bMC05YS1mQS1GXSskLy50ZXN0KGNjKTtcbiAgICBjb25zdCBjb2RlID0gb2sgPyBwYXJzZUludChjYywgMTYpIDogTmFOO1xuICAgIGlmIChpc05hTihjb2RlKSkge1xuICAgICAgICBjb25zdCByYXcgPSBzb3VyY2Uuc3Vic3RyKG9mZnNldCAtIDIsIGxlbmd0aCArIDIpO1xuICAgICAgICBvbkVycm9yKG9mZnNldCAtIDIsICdCQURfRFFfRVNDQVBFJywgYEludmFsaWQgZXNjYXBlIHNlcXVlbmNlICR7cmF3fWApO1xuICAgICAgICByZXR1cm4gcmF3O1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSk7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVGbG93U2NhbGFyIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgU0NBTEFSIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVCbG9ja1NjYWxhciB9IGZyb20gJy4vcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZsb3dTY2FsYXIgfSBmcm9tICcuL3Jlc29sdmUtZmxvdy1zY2FsYXIuanMnO1xuXG5mdW5jdGlvbiBjb21wb3NlU2NhbGFyKGN0eCwgdG9rZW4sIHRhZ1Rva2VuLCBvbkVycm9yKSB7XG4gICAgY29uc3QgeyB2YWx1ZSwgdHlwZSwgY29tbWVudCwgcmFuZ2UgfSA9IHRva2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInXG4gICAgICAgID8gcmVzb2x2ZUJsb2NrU2NhbGFyKGN0eCwgdG9rZW4sIG9uRXJyb3IpXG4gICAgICAgIDogcmVzb2x2ZUZsb3dTY2FsYXIodG9rZW4sIGN0eC5vcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgY29uc3QgdGFnTmFtZSA9IHRhZ1Rva2VuXG4gICAgICAgID8gY3R4LmRpcmVjdGl2ZXMudGFnTmFtZSh0YWdUb2tlbi5zb3VyY2UsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSlcbiAgICAgICAgOiBudWxsO1xuICAgIGxldCB0YWc7XG4gICAgaWYgKGN0eC5vcHRpb25zLnN0cmluZ0tleXMgJiYgY3R4LmF0S2V5KSB7XG4gICAgICAgIHRhZyA9IGN0eC5zY2hlbWFbU0NBTEFSXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFnTmFtZSlcbiAgICAgICAgdGFnID0gZmluZFNjYWxhclRhZ0J5TmFtZShjdHguc2NoZW1hLCB2YWx1ZSwgdGFnTmFtZSwgdGFnVG9rZW4sIG9uRXJyb3IpO1xuICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdzY2FsYXInKVxuICAgICAgICB0YWcgPSBmaW5kU2NhbGFyVGFnQnlUZXN0KGN0eCwgdmFsdWUsIHRva2VuLCBvbkVycm9yKTtcbiAgICBlbHNlXG4gICAgICAgIHRhZyA9IGN0eC5zY2hlbWFbU0NBTEFSXTtcbiAgICBsZXQgc2NhbGFyO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRhZy5yZXNvbHZlKHZhbHVlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiA/PyB0b2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZyksIGN0eC5vcHRpb25zKTtcbiAgICAgICAgc2NhbGFyID0gaXNTY2FsYXIocmVzKSA/IHJlcyA6IG5ldyBTY2FsYXIocmVzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcbiAgICAgICAgb25FcnJvcih0YWdUb2tlbiA/PyB0b2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZyk7XG4gICAgICAgIHNjYWxhciA9IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgIH1cbiAgICBzY2FsYXIucmFuZ2UgPSByYW5nZTtcbiAgICBzY2FsYXIuc291cmNlID0gdmFsdWU7XG4gICAgaWYgKHR5cGUpXG4gICAgICAgIHNjYWxhci50eXBlID0gdHlwZTtcbiAgICBpZiAodGFnTmFtZSlcbiAgICAgICAgc2NhbGFyLnRhZyA9IHRhZ05hbWU7XG4gICAgaWYgKHRhZy5mb3JtYXQpXG4gICAgICAgIHNjYWxhci5mb3JtYXQgPSB0YWcuZm9ybWF0O1xuICAgIGlmIChjb21tZW50KVxuICAgICAgICBzY2FsYXIuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgcmV0dXJuIHNjYWxhcjtcbn1cbmZ1bmN0aW9uIGZpbmRTY2FsYXJUYWdCeU5hbWUoc2NoZW1hLCB2YWx1ZSwgdGFnTmFtZSwgdGFnVG9rZW4sIG9uRXJyb3IpIHtcbiAgICBpZiAodGFnTmFtZSA9PT0gJyEnKVxuICAgICAgICByZXR1cm4gc2NoZW1hW1NDQUxBUl07IC8vIG5vbi1zcGVjaWZpYyB0YWdcbiAgICBjb25zdCBtYXRjaFdpdGhUZXN0ID0gW107XG4gICAgZm9yIChjb25zdCB0YWcgb2Ygc2NoZW1hLnRhZ3MpIHtcbiAgICAgICAgaWYgKCF0YWcuY29sbGVjdGlvbiAmJiB0YWcudGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgICAgICBpZiAodGFnLmRlZmF1bHQgJiYgdGFnLnRlc3QpXG4gICAgICAgICAgICAgICAgbWF0Y2hXaXRoVGVzdC5wdXNoKHRhZyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBtYXRjaFdpdGhUZXN0KVxuICAgICAgICBpZiAodGFnLnRlc3Q/LnRlc3QodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICBjb25zdCBrdCA9IHNjaGVtYS5rbm93blRhZ3NbdGFnTmFtZV07XG4gICAgaWYgKGt0ICYmICFrdC5jb2xsZWN0aW9uKSB7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBrbm93biB0YWcgaXMgYXZhaWxhYmxlIGZvciBzdHJpbmdpZnlpbmcsXG4gICAgICAgIC8vIGJ1dCBkb2VzIG5vdCBnZXQgdXNlZCBieSBkZWZhdWx0LlxuICAgICAgICBzY2hlbWEudGFncy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGt0LCB7IGRlZmF1bHQ6IGZhbHNlLCB0ZXN0OiB1bmRlZmluZWQgfSkpO1xuICAgICAgICByZXR1cm4ga3Q7XG4gICAgfVxuICAgIG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBgVW5yZXNvbHZlZCB0YWc6ICR7dGFnTmFtZX1gLCB0YWdOYW1lICE9PSAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyk7XG4gICAgcmV0dXJuIHNjaGVtYVtTQ0FMQVJdO1xufVxuZnVuY3Rpb24gZmluZFNjYWxhclRhZ0J5VGVzdCh7IGF0S2V5LCBkaXJlY3RpdmVzLCBzY2hlbWEgfSwgdmFsdWUsIHRva2VuLCBvbkVycm9yKSB7XG4gICAgY29uc3QgdGFnID0gc2NoZW1hLnRhZ3MuZmluZCh0YWcgPT4gKHRhZy5kZWZhdWx0ID09PSB0cnVlIHx8IChhdEtleSAmJiB0YWcuZGVmYXVsdCA9PT0gJ2tleScpKSAmJlxuICAgICAgICB0YWcudGVzdD8udGVzdCh2YWx1ZSkpIHx8IHNjaGVtYVtTQ0FMQVJdO1xuICAgIGlmIChzY2hlbWEuY29tcGF0KSB7XG4gICAgICAgIGNvbnN0IGNvbXBhdCA9IHNjaGVtYS5jb21wYXQuZmluZCh0YWcgPT4gdGFnLmRlZmF1bHQgJiYgdGFnLnRlc3Q/LnRlc3QodmFsdWUpKSA/P1xuICAgICAgICAgICAgc2NoZW1hW1NDQUxBUl07XG4gICAgICAgIGlmICh0YWcudGFnICE9PSBjb21wYXQudGFnKSB7XG4gICAgICAgICAgICBjb25zdCB0cyA9IGRpcmVjdGl2ZXMudGFnU3RyaW5nKHRhZy50YWcpO1xuICAgICAgICAgICAgY29uc3QgY3MgPSBkaXJlY3RpdmVzLnRhZ1N0cmluZyhjb21wYXQudGFnKTtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBWYWx1ZSBtYXkgYmUgcGFyc2VkIGFzIGVpdGhlciAke3RzfSBvciAke2NzfWA7XG4gICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFnO1xufVxuXG5leHBvcnQgeyBjb21wb3NlU2NhbGFyIH07XG4iLCJmdW5jdGlvbiBlbXB0eVNjYWxhclBvc2l0aW9uKG9mZnNldCwgYmVmb3JlLCBwb3MpIHtcbiAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgIGlmIChwb3MgPT09IG51bGwpXG4gICAgICAgICAgICBwb3MgPSBiZWZvcmUubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gcG9zIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGxldCBzdCA9IGJlZm9yZVtpXTtcbiAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IC09IHN0LnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGVjaG5pY2FsbHksIGFuIGVtcHR5IHNjYWxhciBpcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgbGFzdCBub24tZW1wdHlcbiAgICAgICAgICAgIC8vIG5vZGUsIGJ1dCBpdCdzIG1vcmUgdXNlZnVsIHRvIHBsYWNlIGl0IGFmdGVyIGFueSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgc3QgPSBiZWZvcmVbKytpXTtcbiAgICAgICAgICAgIHdoaWxlIChzdD8udHlwZSA9PT0gJ3NwYWNlJykge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBzdC5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHN0ID0gYmVmb3JlWysraV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuXG5leHBvcnQgeyBlbXB0eVNjYWxhclBvc2l0aW9uIH07XG4iLCJpbXBvcnQgeyBBbGlhcyB9IGZyb20gJy4uL25vZGVzL0FsaWFzLmpzJztcbmltcG9ydCB7IGlzU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY29tcG9zZUNvbGxlY3Rpb24gfSBmcm9tICcuL2NvbXBvc2UtY29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBjb21wb3NlU2NhbGFyIH0gZnJvbSAnLi9jb21wb3NlLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyBlbXB0eVNjYWxhclBvc2l0aW9uIH0gZnJvbSAnLi91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyc7XG5cbmNvbnN0IENOID0geyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9O1xuZnVuY3Rpb24gY29tcG9zZU5vZGUoY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpIHtcbiAgICBjb25zdCBhdEtleSA9IGN0eC5hdEtleTtcbiAgICBjb25zdCB7IHNwYWNlQmVmb3JlLCBjb21tZW50LCBhbmNob3IsIHRhZyB9ID0gcHJvcHM7XG4gICAgbGV0IG5vZGU7XG4gICAgbGV0IGlzU3JjVG9rZW4gPSB0cnVlO1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZUFsaWFzKGN0eCwgdG9rZW4sIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvciB8fCB0YWcpXG4gICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ0FMSUFTX1BST1BTJywgJ0FuIGFsaWFzIG5vZGUgbXVzdCBub3Qgc3BlY2lmeSBhbnkgcHJvcGVydGllcycpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgbm9kZS5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXNlICdibG9jay1zZXEnOlxuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOlxuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yKVxuICAgICAgICAgICAgICAgIG5vZGUuYW5jaG9yID0gYW5jaG9yLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRva2VuLnR5cGUgPT09ICdlcnJvcidcbiAgICAgICAgICAgICAgICA/IHRva2VuLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6IGBVbnN1cHBvcnRlZCB0b2tlbiAodHlwZTogJHt0b2tlbi50eXBlfSlgO1xuICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlRW1wdHlOb2RlKGN0eCwgdG9rZW4ub2Zmc2V0LCB1bmRlZmluZWQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlzU3JjVG9rZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYW5jaG9yICYmIG5vZGUuYW5jaG9yID09PSAnJylcbiAgICAgICAgb25FcnJvcihhbmNob3IsICdCQURfQUxJQVMnLCAnQW5jaG9yIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICBpZiAoYXRLZXkgJiZcbiAgICAgICAgY3R4Lm9wdGlvbnMuc3RyaW5nS2V5cyAmJlxuICAgICAgICAoIWlzU2NhbGFyKG5vZGUpIHx8XG4gICAgICAgICAgICB0eXBlb2Ygbm9kZS52YWx1ZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChub2RlLnRhZyAmJiBub2RlLnRhZyAhPT0gJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicpKSkge1xuICAgICAgICBjb25zdCBtc2cgPSAnV2l0aCBzdHJpbmdLZXlzLCBhbGwga2V5cyBtdXN0IGJlIHN0cmluZ3MnO1xuICAgICAgICBvbkVycm9yKHRhZyA/PyB0b2tlbiwgJ05PTl9TVFJJTkdfS0VZJywgbXNnKTtcbiAgICB9XG4gICAgaWYgKHNwYWNlQmVmb3JlKVxuICAgICAgICBub2RlLnNwYWNlQmVmb3JlID0gdHJ1ZTtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicgJiYgdG9rZW4uc291cmNlID09PSAnJylcbiAgICAgICAgICAgIG5vZGUuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG5vZGUuY29tbWVudEJlZm9yZSA9IGNvbW1lbnQ7XG4gICAgfVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVHlwZSBjaGVja2luZyBtaXNzZXMgbWVhbmluZyBvZiBpc1NyY1Rva2VuXG4gICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMgJiYgaXNTcmNUb2tlbilcbiAgICAgICAgbm9kZS5zcmNUb2tlbiA9IHRva2VuO1xuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gY29tcG9zZUVtcHR5Tm9kZShjdHgsIG9mZnNldCwgYmVmb3JlLCBwb3MsIHsgc3BhY2VCZWZvcmUsIGNvbW1lbnQsIGFuY2hvciwgdGFnLCBlbmQgfSwgb25FcnJvcikge1xuICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnc2NhbGFyJyxcbiAgICAgICAgb2Zmc2V0OiBlbXB0eVNjYWxhclBvc2l0aW9uKG9mZnNldCwgYmVmb3JlLCBwb3MpLFxuICAgICAgICBpbmRlbnQ6IC0xLFxuICAgICAgICBzb3VyY2U6ICcnXG4gICAgfTtcbiAgICBjb25zdCBub2RlID0gY29tcG9zZVNjYWxhcihjdHgsIHRva2VuLCB0YWcsIG9uRXJyb3IpO1xuICAgIGlmIChhbmNob3IpIHtcbiAgICAgICAgbm9kZS5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgaWYgKG5vZGUuYW5jaG9yID09PSAnJylcbiAgICAgICAgICAgIG9uRXJyb3IoYW5jaG9yLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgfVxuICAgIGlmIChzcGFjZUJlZm9yZSlcbiAgICAgICAgbm9kZS5zcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgbm9kZS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgbm9kZS5yYW5nZVsyXSA9IGVuZDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBjb21wb3NlQWxpYXMoeyBvcHRpb25zIH0sIHsgb2Zmc2V0LCBzb3VyY2UsIGVuZCB9LCBvbkVycm9yKSB7XG4gICAgY29uc3QgYWxpYXMgPSBuZXcgQWxpYXMoc291cmNlLnN1YnN0cmluZygxKSk7XG4gICAgaWYgKGFsaWFzLnNvdXJjZSA9PT0gJycpXG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0FMSUFTJywgJ0FsaWFzIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICBpZiAoYWxpYXMuc291cmNlLmVuZHNXaXRoKCc6JykpXG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0ICsgc291cmNlLmxlbmd0aCAtIDEsICdCQURfQUxJQVMnLCAnQWxpYXMgZW5kaW5nIGluIDogaXMgYW1iaWd1b3VzJywgdHJ1ZSk7XG4gICAgY29uc3QgdmFsdWVFbmQgPSBvZmZzZXQgKyBzb3VyY2UubGVuZ3RoO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIHZhbHVlRW5kLCBvcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgYWxpYXMucmFuZ2UgPSBbb2Zmc2V0LCB2YWx1ZUVuZCwgcmUub2Zmc2V0XTtcbiAgICBpZiAocmUuY29tbWVudClcbiAgICAgICAgYWxpYXMuY29tbWVudCA9IHJlLmNvbW1lbnQ7XG4gICAgcmV0dXJuIGFsaWFzO1xufVxuXG5leHBvcnQgeyBjb21wb3NlRW1wdHlOb2RlLCBjb21wb3NlTm9kZSB9O1xuIiwiaW1wb3J0IHsgRGlyZWN0aXZlcyB9IGZyb20gJy4uL2RvYy9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnLi4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IFlBTUxXYXJuaW5nLCBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBpc0NvbGxlY3Rpb24sIGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNvbXBvc2VEb2MgfSBmcm9tICcuL2NvbXBvc2UtZG9jLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcblxuZnVuY3Rpb24gZ2V0RXJyb3JQb3Moc3JjKSB7XG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gW3NyYywgc3JjICsgMV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSlcbiAgICAgICAgcmV0dXJuIHNyYy5sZW5ndGggPT09IDIgPyBzcmMgOiBbc3JjWzBdLCBzcmNbMV1dO1xuICAgIGNvbnN0IHsgb2Zmc2V0LCBzb3VyY2UgfSA9IHNyYztcbiAgICByZXR1cm4gW29mZnNldCwgb2Zmc2V0ICsgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gc291cmNlLmxlbmd0aCA6IDEpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlUHJlbHVkZShwcmVsdWRlKSB7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgbGV0IGFmdGVyRW1wdHlMaW5lID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVsdWRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHByZWx1ZGVbaV07XG4gICAgICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICBjb21tZW50ICs9XG4gICAgICAgICAgICAgICAgICAgIChjb21tZW50ID09PSAnJyA/ICcnIDogYWZ0ZXJFbXB0eUxpbmUgPyAnXFxuXFxuJyA6ICdcXG4nKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc291cmNlLnN1YnN0cmluZygxKSB8fCAnICcpO1xuICAgICAgICAgICAgICAgIGF0Q29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWZ0ZXJFbXB0eUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgICAgIGlmIChwcmVsdWRlW2kgKyAxXT8uWzBdICE9PSAnIycpXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICBhdENvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBtYXkgYmUgd3JvbmcgYWZ0ZXIgZG9jLWVuZCwgYnV0IGluIHRoYXQgY2FzZSBpdCBkb2Vzbid0IG1hdHRlclxuICAgICAgICAgICAgICAgIGlmICghYXRDb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBhZnRlckVtcHR5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29tbWVudCwgYWZ0ZXJFbXB0eUxpbmUgfTtcbn1cbi8qKlxuICogQ29tcG9zZSBhIHN0cmVhbSBvZiBDU1Qgbm9kZXMgaW50byBhIHN0cmVhbSBvZiBZQU1MIERvY3VtZW50cy5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29tcG9zZXIsIFBhcnNlciB9IGZyb20gJ3lhbWwnXG4gKlxuICogY29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGNvbnN0IHRva2VucyA9IG5ldyBQYXJzZXIoKS5wYXJzZShzcmMpXG4gKiBjb25zdCBkb2NzID0gbmV3IENvbXBvc2VyKCkuY29tcG9zZSh0b2tlbnMpXG4gKiBgYGBcbiAqL1xuY2xhc3MgQ29tcG9zZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgICAgIHRoaXMub25FcnJvciA9IChzb3VyY2UsIGNvZGUsIG1lc3NhZ2UsIHdhcm5pbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHNvdXJjZSk7XG4gICAgICAgICAgICBpZiAod2FybmluZylcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2gobmV3IFlBTUxXYXJuaW5nKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKHBvcywgY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uOiBvcHRpb25zLnZlcnNpb24gfHwgJzEuMicgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGRlY29yYXRlKGRvYywgYWZ0ZXJEb2MpIHtcbiAgICAgICAgY29uc3QgeyBjb21tZW50LCBhZnRlckVtcHR5TGluZSB9ID0gcGFyc2VQcmVsdWRlKHRoaXMucHJlbHVkZSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coeyBkYzogZG9jLmNvbW1lbnQsIHByZWx1ZGUsIGNvbW1lbnQgfSlcbiAgICAgICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRjID0gZG9jLmNvbnRlbnRzO1xuICAgICAgICAgICAgaWYgKGFmdGVyRG9jKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNvbW1lbnQgPSBkb2MuY29tbWVudCA/IGAke2RvYy5jb21tZW50fVxcbiR7Y29tbWVudH1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFmdGVyRW1wdHlMaW5lIHx8IGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0IHx8ICFkYykge1xuICAgICAgICAgICAgICAgIGRvYy5jb21tZW50QmVmb3JlID0gY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQ29sbGVjdGlvbihkYykgJiYgIWRjLmZsb3cgJiYgZGMuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBpdCA9IGRjLml0ZW1zWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpc1BhaXIoaXQpKVxuICAgICAgICAgICAgICAgICAgICBpdCA9IGl0LmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IGl0LmNvbW1lbnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaXQuY29tbWVudEJlZm9yZSA9IGNiID8gYCR7Y29tbWVudH1cXG4ke2NifWAgOiBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSBkYy5jb21tZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGRjLmNvbW1lbnRCZWZvcmUgPSBjYiA/IGAke2NvbW1lbnR9XFxuJHtjYn1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWZ0ZXJEb2MpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy5lcnJvcnMsIHRoaXMuZXJyb3JzKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRvYy53YXJuaW5ncywgdGhpcy53YXJuaW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MgPSB0aGlzLndhcm5pbmdzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlbHVkZSA9IFtdO1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RyZWFtIHN0YXR1cyBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIE1vc3RseSB1c2VmdWwgYXQgdGhlIGVuZCBvZiBpbnB1dCBmb3IgYW4gZW1wdHkgc3RyZWFtLlxuICAgICAqL1xuICAgIHN0cmVhbUluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21tZW50OiBwYXJzZVByZWx1ZGUodGhpcy5wcmVsdWRlKS5jb21tZW50LFxuICAgICAgICAgICAgZGlyZWN0aXZlczogdGhpcy5kaXJlY3RpdmVzLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLmVycm9ycyxcbiAgICAgICAgICAgIHdhcm5pbmdzOiB0aGlzLndhcm5pbmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBvc2UgdG9rZW5zIGludG8gZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlRG9jIC0gSWYgdGhlIHN0cmVhbSBjb250YWlucyBubyBkb2N1bWVudCwgc3RpbGwgZW1pdCBhIGZpbmFsIGRvY3VtZW50IGluY2x1ZGluZyBhbnkgY29tbWVudHMgYW5kIGRpcmVjdGl2ZXMgdGhhdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGEgc3Vic2VxdWVudCBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0gZW5kT2Zmc2V0IC0gU2hvdWxkIGJlIHNldCBpZiBgZm9yY2VEb2NgIGlzIGFsc28gc2V0LCB0byBzZXQgdGhlIGRvY3VtZW50IHJhbmdlIGVuZCBhbmQgdG8gaW5kaWNhdGUgZXJyb3JzIGNvcnJlY3RseS5cbiAgICAgKi9cbiAgICAqY29tcG9zZSh0b2tlbnMsIGZvcmNlRG9jID0gZmFsc2UsIGVuZE9mZnNldCA9IC0xKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMubmV4dCh0b2tlbik7XG4gICAgICAgIHlpZWxkKiB0aGlzLmVuZChmb3JjZURvYywgZW5kT2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIEFkdmFuY2UgdGhlIGNvbXBvc2VyIGJ5IG9uZSBDU1QgdG9rZW4uICovXG4gICAgKm5leHQodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcy5hZGQodG9rZW4uc291cmNlLCAob2Zmc2V0LCBtZXNzYWdlLCB3YXJuaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEVycm9yUG9zKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zWzBdICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHBvcywgJ0JBRF9ESVJFQ1RJVkUnLCBtZXNzYWdlLCB3YXJuaW5nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZWx1ZGUucHVzaCh0b2tlbi5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IGNvbXBvc2VEb2ModGhpcy5vcHRpb25zLCB0aGlzLmRpcmVjdGl2ZXMsIHRva2VuLCB0aGlzLm9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0RGlyZWN0aXZlcyAmJiAhZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcih0b2tlbiwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGRpcmVjdGl2ZXMtZW5kL2RvYy1zdGFydCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRvYztcbiAgICAgICAgICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgICAgICAgICB0aGlzLmF0RGlyZWN0aXZlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYnl0ZS1vcmRlci1tYXJrJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsdWRlLnB1c2godG9rZW4uc291cmNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRva2VuLnNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/IGAke3Rva2VuLm1lc3NhZ2V9OiAke0pTT04uc3RyaW5naWZ5KHRva2VuLnNvdXJjZSl9YFxuICAgICAgICAgICAgICAgICAgICA6IHRva2VuLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1zZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzIHx8ICF0aGlzLmRvYylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzoge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ1VuZXhwZWN0ZWQgZG9jLWVuZCB3aXRob3V0IHByZWNlZGluZyBkb2N1bWVudCc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKGdldEVycm9yUG9zKHRva2VuKSwgJ1VORVhQRUNURURfVE9LRU4nLCBtc2cpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZG9jLmRpcmVjdGl2ZXMuZG9jRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSByZXNvbHZlRW5kKHRva2VuLmVuZCwgdG9rZW4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCwgdGhpcy5kb2Mub3B0aW9ucy5zdHJpY3QsIHRoaXMub25FcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZSh0aGlzLmRvYywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuZC5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRjID0gdGhpcy5kb2MuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2MuY29tbWVudCA9IGRjID8gYCR7ZGN9XFxuJHtlbmQuY29tbWVudH1gIDogZW5kLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZG9jLnJhbmdlWzJdID0gZW5kLm9mZnNldDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbnN1cHBvcnRlZCB0b2tlbiAke3Rva2VuLnR5cGV9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgYXQgZW5kIG9mIGlucHV0IHRvIHlpZWxkIGFueSByZW1haW5pbmcgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2VEb2MgLSBJZiB0aGUgc3RyZWFtIGNvbnRhaW5zIG5vIGRvY3VtZW50LCBzdGlsbCBlbWl0IGEgZmluYWwgZG9jdW1lbnQgaW5jbHVkaW5nIGFueSBjb21tZW50cyBhbmQgZGlyZWN0aXZlcyB0aGF0IHdvdWxkIGJlIGFwcGxpZWQgdG8gYSBzdWJzZXF1ZW50IGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBlbmRPZmZzZXQgLSBTaG91bGQgYmUgc2V0IGlmIGBmb3JjZURvY2AgaXMgYWxzbyBzZXQsIHRvIHNldCB0aGUgZG9jdW1lbnQgcmFuZ2UgZW5kIGFuZCB0byBpbmRpY2F0ZSBlcnJvcnMgY29ycmVjdGx5LlxuICAgICAqL1xuICAgICplbmQoZm9yY2VEb2MgPSBmYWxzZSwgZW5kT2Zmc2V0ID0gLTEpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9jKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRlKHRoaXMuZG9jLCB0cnVlKTtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZG9jO1xuICAgICAgICAgICAgdGhpcy5kb2MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZvcmNlRG9jKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IF9kaXJlY3RpdmVzOiB0aGlzLmRpcmVjdGl2ZXMgfSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IG5ldyBEb2N1bWVudCh1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlbmRPZmZzZXQsICdNSVNTSU5HX0NIQVInLCAnTWlzc2luZyBkaXJlY3RpdmVzLWVuZCBpbmRpY2F0b3IgbGluZScpO1xuICAgICAgICAgICAgZG9jLnJhbmdlID0gWzAsIGVuZE9mZnNldCwgZW5kT2Zmc2V0XTtcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoZG9jLCBmYWxzZSk7XG4gICAgICAgICAgICB5aWVsZCBkb2M7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbXBvc2VyIH07XG4iLCJpbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJy4uL2RvYy9Eb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9IGZyb20gJy4vY29tcG9zZS1ub2RlLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcbmltcG9ydCB7IHJlc29sdmVQcm9wcyB9IGZyb20gJy4vcmVzb2x2ZS1wcm9wcy5qcyc7XG5cbmZ1bmN0aW9uIGNvbXBvc2VEb2Mob3B0aW9ucywgZGlyZWN0aXZlcywgeyBvZmZzZXQsIHN0YXJ0LCB2YWx1ZSwgZW5kIH0sIG9uRXJyb3IpIHtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IF9kaXJlY3RpdmVzOiBkaXJlY3RpdmVzIH0sIG9wdGlvbnMpO1xuICAgIGNvbnN0IGRvYyA9IG5ldyBEb2N1bWVudCh1bmRlZmluZWQsIG9wdHMpO1xuICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgYXRLZXk6IGZhbHNlLFxuICAgICAgICBhdFJvb3Q6IHRydWUsXG4gICAgICAgIGRpcmVjdGl2ZXM6IGRvYy5kaXJlY3RpdmVzLFxuICAgICAgICBvcHRpb25zOiBkb2Mub3B0aW9ucyxcbiAgICAgICAgc2NoZW1hOiBkb2Muc2NoZW1hXG4gICAgfTtcbiAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICBpbmRpY2F0b3I6ICdkb2Mtc3RhcnQnLFxuICAgICAgICBuZXh0OiB2YWx1ZSA/PyBlbmQ/LlswXSxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBvbkVycm9yLFxuICAgICAgICBwYXJlbnRJbmRlbnQ6IDAsXG4gICAgICAgIHN0YXJ0T25OZXdsaW5lOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHByb3BzLmZvdW5kKSB7XG4gICAgICAgIGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICAodmFsdWUudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHwgdmFsdWUudHlwZSA9PT0gJ2Jsb2NrLXNlcScpICYmXG4gICAgICAgICAgICAhcHJvcHMuaGFzTmV3bGluZSlcbiAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuZW5kLCAnTUlTU0lOR19DSEFSJywgJ0Jsb2NrIGNvbGxlY3Rpb24gY2Fubm90IHN0YXJ0IG9uIHNhbWUgbGluZSB3aXRoIGRpcmVjdGl2ZXMtZW5kIG1hcmtlcicpO1xuICAgIH1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIElmIENvbnRlbnRzIGlzIHNldCwgbGV0J3MgdHJ1c3QgdGhlIHVzZXJcbiAgICBkb2MuY29udGVudHMgPSB2YWx1ZVxuICAgICAgICA/IGNvbXBvc2VOb2RlKGN0eCwgdmFsdWUsIHByb3BzLCBvbkVycm9yKVxuICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgY29uc3QgY29udGVudEVuZCA9IGRvYy5jb250ZW50cy5yYW5nZVsyXTtcbiAgICBjb25zdCByZSA9IHJlc29sdmVFbmQoZW5kLCBjb250ZW50RW5kLCBmYWxzZSwgb25FcnJvcik7XG4gICAgaWYgKHJlLmNvbW1lbnQpXG4gICAgICAgIGRvYy5jb21tZW50ID0gcmUuY29tbWVudDtcbiAgICBkb2MucmFuZ2UgPSBbb2Zmc2V0LCBjb250ZW50RW5kLCByZS5vZmZzZXRdO1xuICAgIHJldHVybiBkb2M7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VEb2MgfTtcbiIsImltcG9ydCB7IHJlc29sdmVCbG9ja1NjYWxhciB9IGZyb20gJy4uL2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZsb3dTY2FsYXIgfSBmcm9tICcuLi9jb21wb3NlL3Jlc29sdmUtZmxvdy1zY2FsYXIuanMnO1xuaW1wb3J0IHsgWUFNTFBhcnNlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVBc1NjYWxhcih0b2tlbiwgc3RyaWN0ID0gdHJ1ZSwgb25FcnJvcikge1xuICAgIGlmICh0b2tlbikge1xuICAgICAgICBjb25zdCBfb25FcnJvciA9IChwb3MsIGNvZGUsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHR5cGVvZiBwb3MgPT09ICdudW1iZXInID8gcG9zIDogQXJyYXkuaXNBcnJheShwb3MpID8gcG9zWzBdIDogcG9zLm9mZnNldDtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKVxuICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCBjb2RlLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWUFNTFBhcnNlRXJyb3IoW29mZnNldCwgb2Zmc2V0ICsgMV0sIGNvZGUsIG1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVGbG93U2NhbGFyKHRva2VuLCBzdHJpY3QsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVCbG9ja1NjYWxhcih7IG9wdGlvbnM6IHsgc3RyaWN0IH0gfSwgdG9rZW4sIF9vbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNjYWxhciB0b2tlbiB3aXRoIGB2YWx1ZWBcbiAqXG4gKiBWYWx1ZXMgdGhhdCByZXByZXNlbnQgYW4gYWN0dWFsIHN0cmluZyBidXQgbWF5IGJlIHBhcnNlZCBhcyBhIGRpZmZlcmVudCB0eXBlIHNob3VsZCB1c2UgYSBgdHlwZWAgb3RoZXIgdGhhbiBgJ1BMQUlOJ2AsXG4gKiBhcyB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgYW55IHNjaGVtYSBvcGVyYXRpb25zIGFuZCB3b24ndCBjaGVjayBmb3Igc3VjaCBjb25mbGljdHMuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlLCB3aGljaCB3aWxsIGhhdmUgaXRzIGNvbnRlbnQgcHJvcGVybHkgaW5kZW50ZWQuXG4gKiBAcGFyYW0gY29udGV4dC5lbmQgQ29tbWVudHMgYW5kIHdoaXRlc3BhY2UgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgdmFsdWUsIG9yIGFmdGVyIHRoZSBibG9jayBzY2FsYXIgaGVhZGVyLiBJZiB1bmRlZmluZWQsIGEgbmV3bGluZSB3aWxsIGJlIGFkZGVkLlxuICogQHBhcmFtIGNvbnRleHQuaW1wbGljaXRLZXkgQmVpbmcgd2l0aGluIGFuIGltcGxpY2l0IGtleSBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQuaW5kZW50IFRoZSBpbmRlbnQgbGV2ZWwgb2YgdGhlIHRva2VuLlxuICogQHBhcmFtIGNvbnRleHQuaW5GbG93IElzIHRoaXMgc2NhbGFyIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbj8gVGhpcyBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQub2Zmc2V0IFRoZSBvZmZzZXQgcG9zaXRpb24gb2YgdGhlIHRva2VuLlxuICogQHBhcmFtIGNvbnRleHQudHlwZSBUaGUgcHJlZmVycmVkIHR5cGUgb2YgdGhlIHNjYWxhciB0b2tlbi4gSWYgdW5kZWZpbmVkLCB0aGUgcHJldmlvdXMgdHlwZSBvZiB0aGUgYHRva2VuYCB3aWxsIGJlIHVzZWQsIGRlZmF1bHRpbmcgdG8gYCdQTEFJTidgLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTY2FsYXJUb2tlbih2YWx1ZSwgY29udGV4dCkge1xuICAgIGNvbnN0IHsgaW1wbGljaXRLZXkgPSBmYWxzZSwgaW5kZW50LCBpbkZsb3cgPSBmYWxzZSwgb2Zmc2V0ID0gLTEsIHR5cGUgPSAnUExBSU4nIH0gPSBjb250ZXh0O1xuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmluZ2lmeVN0cmluZyh7IHR5cGUsIHZhbHVlIH0sIHtcbiAgICAgICAgaW1wbGljaXRLZXksXG4gICAgICAgIGluZGVudDogaW5kZW50ID4gMCA/ICcgJy5yZXBlYXQoaW5kZW50KSA6ICcnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IHsgYmxvY2tRdW90ZTogdHJ1ZSwgbGluZVdpZHRoOiAtMSB9XG4gICAgfSk7XG4gICAgY29uc3QgZW5kID0gY29udGV4dC5lbmQgPz8gW1xuICAgICAgICB7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0OiAtMSwgaW5kZW50LCBzb3VyY2U6ICdcXG4nIH1cbiAgICBdO1xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+Jzoge1xuICAgICAgICAgICAgY29uc3QgaGUgPSBzb3VyY2UuaW5kZXhPZignXFxuJyk7XG4gICAgICAgICAgICBjb25zdCBoZWFkID0gc291cmNlLnN1YnN0cmluZygwLCBoZSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gc291cmNlLnN1YnN0cmluZyhoZSArIDEpICsgJ1xcbic7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IFtcbiAgICAgICAgICAgICAgICB7IHR5cGU6ICdibG9jay1zY2FsYXItaGVhZGVyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZTogaGVhZCB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKCFhZGRFbmR0b0Jsb2NrUHJvcHMocHJvcHMsIGVuZCkpXG4gICAgICAgICAgICAgICAgcHJvcHMucHVzaCh7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0OiAtMSwgaW5kZW50LCBzb3VyY2U6ICdcXG4nIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2Jsb2NrLXNjYWxhcicsIG9mZnNldCwgaW5kZW50LCBwcm9wcywgc291cmNlOiBib2R5IH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZSwgZW5kIH07XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnc2luZ2xlLXF1b3RlZC1zY2FsYXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlLCBlbmQgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdzY2FsYXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlLCBlbmQgfTtcbiAgICB9XG59XG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgYHRva2VuYCB0byB0aGUgZ2l2ZW4gc3RyaW5nIGB2YWx1ZWAsIG92ZXJ3cml0aW5nIGFueSBwcmV2aW91cyBjb250ZW50cyBhbmQgdHlwZSB0aGF0IGl0IG1heSBoYXZlLlxuICpcbiAqIEJlc3QgZWZmb3J0cyBhcmUgbWFkZSB0byByZXRhaW4gYW55IGNvbW1lbnRzIHByZXZpb3VzbHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBgdG9rZW5gLFxuICogdGhvdWdoIGFsbCBjb250ZW50cyB3aXRoaW4gYSBjb2xsZWN0aW9uJ3MgYGl0ZW1zYCB3aWxsIGJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIFZhbHVlcyB0aGF0IHJlcHJlc2VudCBhbiBhY3R1YWwgc3RyaW5nIGJ1dCBtYXkgYmUgcGFyc2VkIGFzIGEgZGlmZmVyZW50IHR5cGUgc2hvdWxkIHVzZSBhIGB0eXBlYCBvdGhlciB0aGFuIGAnUExBSU4nYCxcbiAqIGFzIHRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCBhbnkgc2NoZW1hIG9wZXJhdGlvbnMgYW5kIHdvbid0IGNoZWNrIGZvciBzdWNoIGNvbmZsaWN0cy5cbiAqXG4gKiBAcGFyYW0gdG9rZW4gQW55IHRva2VuLiBJZiBpdCBkb2VzIG5vdCBpbmNsdWRlIGFuIGBpbmRlbnRgIHZhbHVlLCB0aGUgdmFsdWUgd2lsbCBiZSBzdHJpbmdpZmllZCBhcyBpZiBpdCB3ZXJlIGFuIGltcGxpY2l0IGtleS5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2YWx1ZSwgd2hpY2ggd2lsbCBoYXZlIGl0cyBjb250ZW50IHByb3Blcmx5IGluZGVudGVkLlxuICogQHBhcmFtIGNvbnRleHQuYWZ0ZXJLZXkgSW4gbW9zdCBjYXNlcywgdmFsdWVzIGFmdGVyIGEga2V5IHNob3VsZCBoYXZlIGFuIGFkZGl0aW9uYWwgbGV2ZWwgb2YgaW5kZW50YXRpb24uXG4gKiBAcGFyYW0gY29udGV4dC5pbXBsaWNpdEtleSBCZWluZyB3aXRoaW4gYW4gaW1wbGljaXQga2V5IG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC5pbkZsb3cgQmVpbmcgd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uIG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC50eXBlIFRoZSBwcmVmZXJyZWQgdHlwZSBvZiB0aGUgc2NhbGFyIHRva2VuLiBJZiB1bmRlZmluZWQsIHRoZSBwcmV2aW91cyB0eXBlIG9mIHRoZSBgdG9rZW5gIHdpbGwgYmUgdXNlZCwgZGVmYXVsdGluZyB0byBgJ1BMQUlOJ2AuXG4gKi9cbmZ1bmN0aW9uIHNldFNjYWxhclZhbHVlKHRva2VuLCB2YWx1ZSwgY29udGV4dCA9IHt9KSB7XG4gICAgbGV0IHsgYWZ0ZXJLZXkgPSBmYWxzZSwgaW1wbGljaXRLZXkgPSBmYWxzZSwgaW5GbG93ID0gZmFsc2UsIHR5cGUgfSA9IGNvbnRleHQ7XG4gICAgbGV0IGluZGVudCA9ICdpbmRlbnQnIGluIHRva2VuID8gdG9rZW4uaW5kZW50IDogbnVsbDtcbiAgICBpZiAoYWZ0ZXJLZXkgJiYgdHlwZW9mIGluZGVudCA9PT0gJ251bWJlcicpXG4gICAgICAgIGluZGVudCArPSAyO1xuICAgIGlmICghdHlwZSlcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdRVU9URV9TSU5HTEUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHR5cGUgPSAnUVVPVEVfRE9VQkxFJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0b2tlbi5wcm9wc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyLnR5cGUgIT09ICdibG9jay1zY2FsYXItaGVhZGVyJylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJsb2NrIHNjYWxhciBoZWFkZXInKTtcbiAgICAgICAgICAgICAgICB0eXBlID0gaGVhZGVyLnNvdXJjZVswXSA9PT0gJz4nID8gJ0JMT0NLX0ZPTERFRCcgOiAnQkxPQ0tfTElURVJBTCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHR5cGUgPSAnUExBSU4nO1xuICAgICAgICB9XG4gICAgY29uc3Qgc291cmNlID0gc3RyaW5naWZ5U3RyaW5nKHsgdHlwZSwgdmFsdWUgfSwge1xuICAgICAgICBpbXBsaWNpdEtleTogaW1wbGljaXRLZXkgfHwgaW5kZW50ID09PSBudWxsLFxuICAgICAgICBpbmRlbnQ6IGluZGVudCAhPT0gbnVsbCAmJiBpbmRlbnQgPiAwID8gJyAnLnJlcGVhdChpbmRlbnQpIDogJycsXG4gICAgICAgIGluRmxvdyxcbiAgICAgICAgb3B0aW9uczogeyBibG9ja1F1b3RlOiB0cnVlLCBsaW5lV2lkdGg6IC0xIH1cbiAgICB9KTtcbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICBzZXRCbG9ja1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCAnZG91YmxlLXF1b3RlZC1zY2FsYXInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsICdzaW5nbGUtcXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgJ3NjYWxhcicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEJsb2NrU2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSkge1xuICAgIGNvbnN0IGhlID0gc291cmNlLmluZGV4T2YoJ1xcbicpO1xuICAgIGNvbnN0IGhlYWQgPSBzb3VyY2Uuc3Vic3RyaW5nKDAsIGhlKTtcbiAgICBjb25zdCBib2R5ID0gc291cmNlLnN1YnN0cmluZyhoZSArIDEpICsgJ1xcbic7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHRva2VuLnByb3BzWzBdO1xuICAgICAgICBpZiAoaGVhZGVyLnR5cGUgIT09ICdibG9jay1zY2FsYXItaGVhZGVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBibG9jayBzY2FsYXIgaGVhZGVyJyk7XG4gICAgICAgIGhlYWRlci5zb3VyY2UgPSBoZWFkO1xuICAgICAgICB0b2tlbi5zb3VyY2UgPSBib2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQgfSA9IHRva2VuO1xuICAgICAgICBjb25zdCBpbmRlbnQgPSAnaW5kZW50JyBpbiB0b2tlbiA/IHRva2VuLmluZGVudCA6IC0xO1xuICAgICAgICBjb25zdCBwcm9wcyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogJ2Jsb2NrLXNjYWxhci1oZWFkZXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlOiBoZWFkIH1cbiAgICAgICAgXTtcbiAgICAgICAgaWYgKCFhZGRFbmR0b0Jsb2NrUHJvcHMocHJvcHMsICdlbmQnIGluIHRva2VuID8gdG9rZW4uZW5kIDogdW5kZWZpbmVkKSlcbiAgICAgICAgICAgIHByb3BzLnB1c2goeyB0eXBlOiAnbmV3bGluZScsIG9mZnNldDogLTEsIGluZGVudCwgc291cmNlOiAnXFxuJyB9KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModG9rZW4pKVxuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3R5cGUnICYmIGtleSAhPT0gJ29mZnNldCcpXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRva2VuW2tleV07XG4gICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZTogJ2Jsb2NrLXNjYWxhcicsIGluZGVudCwgcHJvcHMsIHNvdXJjZTogYm9keSB9KTtcbiAgICB9XG59XG4vKiogQHJldHVybnMgYHRydWVgIGlmIGxhc3QgdG9rZW4gaXMgYSBuZXdsaW5lICovXG5mdW5jdGlvbiBhZGRFbmR0b0Jsb2NrUHJvcHMocHJvcHMsIGVuZCkge1xuICAgIGlmIChlbmQpXG4gICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgZW5kKVxuICAgICAgICAgICAgc3dpdGNoIChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHN0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnB1c2goc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgdHlwZSkge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgdG9rZW4uc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6IHtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHRva2VuLnByb3BzLnNsaWNlKDEpO1xuICAgICAgICAgICAgbGV0IG9hID0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICh0b2tlbi5wcm9wc1swXS50eXBlID09PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpXG4gICAgICAgICAgICAgICAgb2EgLT0gdG9rZW4ucHJvcHNbMF0uc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rIG9mIGVuZClcbiAgICAgICAgICAgICAgICB0b2sub2Zmc2V0ICs9IG9hO1xuICAgICAgICAgICAgZGVsZXRlIHRva2VuLnByb3BzO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlLCBzb3VyY2UsIGVuZCB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHRva2VuLm9mZnNldCArIHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBubCA9IHsgdHlwZTogJ25ld2xpbmUnLCBvZmZzZXQsIGluZGVudDogdG9rZW4uaW5kZW50LCBzb3VyY2U6ICdcXG4nIH07XG4gICAgICAgICAgICBkZWxldGUgdG9rZW4uaXRlbXM7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGUsIHNvdXJjZSwgZW5kOiBbbmxdIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc3QgaW5kZW50ID0gJ2luZGVudCcgaW4gdG9rZW4gPyB0b2tlbi5pbmRlbnQgOiAtMTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIHRva2VuICYmIEFycmF5LmlzQXJyYXkodG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgID8gdG9rZW4uZW5kLmZpbHRlcihzdCA9PiBzdC50eXBlID09PSAnc3BhY2UnIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0LnR5cGUgPT09ICdjb21tZW50JyB8fFxuICAgICAgICAgICAgICAgICAgICBzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRva2VuKSlcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAndHlwZScgJiYga2V5ICE9PSAnb2Zmc2V0JylcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRva2VuW2tleV07XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGUsIGluZGVudCwgc291cmNlLCBlbmQgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNjYWxhclRva2VuLCByZXNvbHZlQXNTY2FsYXIsIHNldFNjYWxhclZhbHVlIH07XG4iLCIvKipcbiAqIFN0cmluZ2lmeSBhIENTVCBkb2N1bWVudCwgdG9rZW4sIG9yIGNvbGxlY3Rpb24gaXRlbVxuICpcbiAqIEZhaXIgd2FybmluZzogVGhpcyBhcHBsaWVzIG5vIHZhbGlkYXRpb24gd2hhdHNvZXZlciwgYW5kXG4gKiBzaW1wbHkgY29uY2F0ZW5hdGVzIHRoZSBzb3VyY2VzIGluIHRoZWlyIGxvZ2ljYWwgb3JkZXIuXG4gKi9cbmNvbnN0IHN0cmluZ2lmeSA9IChjc3QpID0+ICd0eXBlJyBpbiBjc3QgPyBzdHJpbmdpZnlUb2tlbihjc3QpIDogc3RyaW5naWZ5SXRlbShjc3QpO1xuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9ICcnO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0b2sgb2YgdG9rZW4ucHJvcHMpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0cmluZ2lmeVRva2VuKHRvayk7XG4gICAgICAgICAgICByZXR1cm4gcmVzICsgdG9rZW4uc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSAnJztcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0b2tlbi5pdGVtcylcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyaW5naWZ5SXRlbShpdGVtKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHRva2VuLnN0YXJ0LnNvdXJjZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0b2tlbi5pdGVtcylcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyaW5naWZ5SXRlbShpdGVtKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RvY3VtZW50Jzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHN0cmluZ2lmeUl0ZW0odG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHRva2VuLnNvdXJjZTtcbiAgICAgICAgICAgIGlmICgnZW5kJyBpbiB0b2tlbiAmJiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc3RyaW5naWZ5SXRlbSh7IHN0YXJ0LCBrZXksIHNlcCwgdmFsdWUgfSkge1xuICAgIGxldCByZXMgPSAnJztcbiAgICBmb3IgKGNvbnN0IHN0IG9mIHN0YXJ0KVxuICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgIGlmIChrZXkpXG4gICAgICAgIHJlcyArPSBzdHJpbmdpZnlUb2tlbihrZXkpO1xuICAgIGlmIChzZXApXG4gICAgICAgIGZvciAoY29uc3Qgc3Qgb2Ygc2VwKVxuICAgICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICBpZiAodmFsdWUpXG4gICAgICAgIHJlcyArPSBzdHJpbmdpZnlUb2tlbih2YWx1ZSk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5IH07XG4iLCJjb25zdCBCUkVBSyA9IFN5bWJvbCgnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGRyZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIGl0ZW0nKTtcbi8qKlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGEgQ1NUIGRvY3VtZW50IG9yIGl0ZW0uXG4gKlxuICogV2Fsa3MgdGhyb3VnaCB0aGUgdHJlZSAoZGVwdGgtZmlyc3QpIHN0YXJ0aW5nIGZyb20gdGhlIHJvb3QsIGNhbGxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdHdvIGFyZ3VtZW50cyB3aGVuIGVudGVyaW5nIGVhY2ggaXRlbTpcbiAqICAgLSBgaXRlbWA6IFRoZSBjdXJyZW50IGl0ZW0sIHdoaWNoIGluY2x1ZGVkIHRoZSBmb2xsb3dpbmcgbWVtYmVyczpcbiAqICAgICAtIGBzdGFydDogU291cmNlVG9rZW5bXWAg4oCTIFNvdXJjZSB0b2tlbnMgYmVmb3JlIHRoZSBrZXkgb3IgdmFsdWUsXG4gKiAgICAgICBwb3NzaWJseSBpbmNsdWRpbmcgaXRzIGFuY2hvciBvciB0YWcuXG4gKiAgICAgLSBga2V5PzogVG9rZW4gfCBudWxsYCDigJMgU2V0IGZvciBwYWlyIHZhbHVlcy4gTWF5IHRoZW4gYmUgYG51bGxgLCBpZlxuICogICAgICAgdGhlIGtleSBiZWZvcmUgdGhlIGA6YCBzZXBhcmF0b3IgaXMgZW1wdHkuXG4gKiAgICAgLSBgc2VwPzogU291cmNlVG9rZW5bXWAg4oCTIFNvdXJjZSB0b2tlbnMgYmV0d2VlbiB0aGUga2V5IGFuZCB0aGUgdmFsdWUsXG4gKiAgICAgICB3aGljaCBzaG91bGQgaW5jbHVkZSB0aGUgYDpgIG1hcCB2YWx1ZSBpbmRpY2F0b3IgaWYgYHZhbHVlYCBpcyBzZXQuXG4gKiAgICAgLSBgdmFsdWU/OiBUb2tlbmAg4oCTIFRoZSB2YWx1ZSBvZiBhIHNlcXVlbmNlIGl0ZW0sIG9yIG9mIGEgbWFwIHBhaXIuXG4gKiAgIC0gYHBhdGhgOiBUaGUgc3RlcHMgZnJvbSB0aGUgcm9vdCB0byB0aGUgY3VycmVudCBub2RlLCBhcyBhbiBhcnJheSBvZlxuICogICAgIGBbJ2tleScgfCAndmFsdWUnLCBudW1iZXJdYCB0dXBsZXMuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0cmF2ZXJzYWw6XG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQYDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIHRva2VuLCBjb250aW51ZSB3aXRoXG4gKiAgICAgIG5leHQgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgaXRlbSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBudW1iZXJgOiBTZXQgdGhlIGluZGV4IG9mIHRoZSBuZXh0IHN0ZXAuIFRoaXMgaXMgdXNlZnVsIGVzcGVjaWFsbHkgaWZcbiAqICAgICB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgdG9rZW4gaGFzIGNoYW5nZWQuXG4gKiAgIC0gYGZ1bmN0aW9uYDogRGVmaW5lIHRoZSBuZXh0IHZpc2l0b3IgZm9yIHRoaXMgaXRlbS4gQWZ0ZXIgdGhlIG9yaWdpbmFsXG4gKiAgICAgdmlzaXRvciBpcyBjYWxsZWQgb24gaXRlbSBlbnRyeSwgbmV4dCB2aXNpdG9ycyBhcmUgY2FsbGVkIGFmdGVyIGhhbmRsaW5nXG4gKiAgICAgYSBub24tZW1wdHkgYGtleWAgYW5kIHdoZW4gZXhpdGluZyB0aGUgaXRlbS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQoY3N0LCB2aXNpdG9yKSB7XG4gICAgaWYgKCd0eXBlJyBpbiBjc3QgJiYgY3N0LnR5cGUgPT09ICdkb2N1bWVudCcpXG4gICAgICAgIGNzdCA9IHsgc3RhcnQ6IGNzdC5zdGFydCwgdmFsdWU6IGNzdC52YWx1ZSB9O1xuICAgIF92aXNpdChPYmplY3QuZnJlZXplKFtdKSwgY3N0LCB2aXNpdG9yKTtcbn1cbi8vIFdpdGhvdXQgdGhlIGBhcyBzeW1ib2xgIGNhc3RzLCBUUyBkZWNsYXJlcyB0aGVzZSBpbiB0aGUgYHZpc2l0YFxuLy8gbmFtZXNwYWNlIHVzaW5nIGB2YXJgLCBidXQgdGhlbiBjb21wbGFpbnMgYWJvdXQgdGhhdCBiZWNhdXNlXG4vLyBgdW5pcXVlIHN5bWJvbGAgbXVzdCBiZSBgY29uc3RgLlxuLyoqIFRlcm1pbmF0ZSB2aXNpdCB0cmF2ZXJzYWwgY29tcGxldGVseSAqL1xudmlzaXQuQlJFQUsgPSBCUkVBSztcbi8qKiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IGl0ZW0gKi9cbnZpc2l0LlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBpdGVtICovXG52aXNpdC5SRU1PVkUgPSBSRU1PVkU7XG4vKiogRmluZCB0aGUgaXRlbSBhdCBgcGF0aGAgZnJvbSBgY3N0YCBhcyB0aGUgcm9vdCAqL1xudmlzaXQuaXRlbUF0UGF0aCA9IChjc3QsIHBhdGgpID0+IHtcbiAgICBsZXQgaXRlbSA9IGNzdDtcbiAgICBmb3IgKGNvbnN0IFtmaWVsZCwgaW5kZXhdIG9mIHBhdGgpIHtcbiAgICAgICAgY29uc3QgdG9rID0gaXRlbT8uW2ZpZWxkXTtcbiAgICAgICAgaWYgKHRvayAmJiAnaXRlbXMnIGluIHRvaykge1xuICAgICAgICAgICAgaXRlbSA9IHRvay5pdGVtc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59O1xuLyoqXG4gKiBHZXQgdGhlIGltbWVkaWF0ZSBwYXJlbnQgY29sbGVjdGlvbiBvZiB0aGUgaXRlbSBhdCBgcGF0aGAgZnJvbSBgY3N0YCBhcyB0aGUgcm9vdC5cbiAqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGNvbGxlY3Rpb24gaXMgbm90IGZvdW5kLCB3aGljaCBzaG91bGQgbmV2ZXIgaGFwcGVuIGlmIHRoZSBpdGVtIGl0c2VsZiBleGlzdHMuXG4gKi9cbnZpc2l0LnBhcmVudENvbGxlY3Rpb24gPSAoY3N0LCBwYXRoKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gdmlzaXQuaXRlbUF0UGF0aChjc3QsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBjb25zdCBmaWVsZCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXVswXTtcbiAgICBjb25zdCBjb2xsID0gcGFyZW50Py5bZmllbGRdO1xuICAgIGlmIChjb2xsICYmICdpdGVtcycgaW4gY29sbClcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXJlbnQgY29sbGVjdGlvbiBub3QgZm91bmQnKTtcbn07XG5mdW5jdGlvbiBfdmlzaXQocGF0aCwgaXRlbSwgdmlzaXRvcikge1xuICAgIGxldCBjdHJsID0gdmlzaXRvcihpdGVtLCBwYXRoKTtcbiAgICBpZiAodHlwZW9mIGN0cmwgPT09ICdzeW1ib2wnKVxuICAgICAgICByZXR1cm4gY3RybDtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIFsna2V5JywgJ3ZhbHVlJ10pIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBpdGVtW2ZpZWxkXTtcbiAgICAgICAgaWYgKHRva2VuICYmICdpdGVtcycgaW4gdG9rZW4pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW4uaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaSA9IF92aXNpdChPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KFtbZmllbGQsIGldXSkpLCB0b2tlbi5pdGVtc1tpXSwgdmlzaXRvcik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBjaSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN0cmwgPT09ICdmdW5jdGlvbicgJiYgZmllbGQgPT09ICdrZXknKVxuICAgICAgICAgICAgICAgIGN0cmwgPSBjdHJsKGl0ZW0sIHBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgY3RybCA9PT0gJ2Z1bmN0aW9uJyA/IGN0cmwoaXRlbSwgcGF0aCkgOiBjdHJsO1xufVxuXG5leHBvcnQgeyB2aXNpdCB9O1xuIiwiZXhwb3J0IHsgY3JlYXRlU2NhbGFyVG9rZW4sIHJlc29sdmVBc1NjYWxhciwgc2V0U2NhbGFyVmFsdWUgfSBmcm9tICcuL2NzdC1zY2FsYXIuanMnO1xuZXhwb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9jc3Qtc3RyaW5naWZ5LmpzJztcbmV4cG9ydCB7IHZpc2l0IH0gZnJvbSAnLi9jc3QtdmlzaXQuanMnO1xuXG4vKiogVGhlIGJ5dGUgb3JkZXIgbWFyayAqL1xuY29uc3QgQk9NID0gJ1xcdXtGRUZGfSc7XG4vKiogU3RhcnQgb2YgZG9jLW1vZGUgKi9cbmNvbnN0IERPQ1VNRU5UID0gJ1xceDAyJzsgLy8gQzA6IFN0YXJ0IG9mIFRleHRcbi8qKiBVbmV4cGVjdGVkIGVuZCBvZiBmbG93LW1vZGUgKi9cbmNvbnN0IEZMT1dfRU5EID0gJ1xceDE4JzsgLy8gQzA6IENhbmNlbFxuLyoqIE5leHQgdG9rZW4gaXMgYSBzY2FsYXIgdmFsdWUgKi9cbmNvbnN0IFNDQUxBUiA9ICdcXHgxZic7IC8vIEMwOiBVbml0IFNlcGFyYXRvclxuLyoqIEByZXR1cm5zIGB0cnVlYCBpZiBgdG9rZW5gIGlzIGEgZmxvdyBvciBibG9jayBjb2xsZWN0aW9uICovXG5jb25zdCBpc0NvbGxlY3Rpb24gPSAodG9rZW4pID0+ICEhdG9rZW4gJiYgJ2l0ZW1zJyBpbiB0b2tlbjtcbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHRva2VuYCBpcyBhIGZsb3cgb3IgYmxvY2sgc2NhbGFyOyBub3QgYW4gYWxpYXMgKi9cbmNvbnN0IGlzU2NhbGFyID0gKHRva2VuKSA9PiAhIXRva2VuICYmXG4gICAgKHRva2VuLnR5cGUgPT09ICdzY2FsYXInIHx8XG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdzaW5nbGUtcXVvdGVkLXNjYWxhcicgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJyB8fFxuICAgICAgICB0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJyk7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqIEdldCBhIHByaW50YWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIGxleGVyIHRva2VuICovXG5mdW5jdGlvbiBwcmV0dHlUb2tlbih0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSBCT006XG4gICAgICAgICAgICByZXR1cm4gJzxCT00+JztcbiAgICAgICAgY2FzZSBET0NVTUVOVDpcbiAgICAgICAgICAgIHJldHVybiAnPERPQz4nO1xuICAgICAgICBjYXNlIEZMT1dfRU5EOlxuICAgICAgICAgICAgcmV0dXJuICc8RkxPV19FTkQ+JztcbiAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICByZXR1cm4gJzxTQ0FMQVI+JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0b2tlbik7XG4gICAgfVxufVxuLyoqIElkZW50aWZ5IHRoZSB0eXBlIG9mIGEgbGV4ZXIgdG9rZW4uIE1heSByZXR1cm4gYG51bGxgIGZvciB1bmtub3duIHRva2Vucy4gKi9cbmZ1bmN0aW9uIHRva2VuVHlwZShzb3VyY2UpIHtcbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICBjYXNlIEJPTTpcbiAgICAgICAgICAgIHJldHVybiAnYnl0ZS1vcmRlci1tYXJrJztcbiAgICAgICAgY2FzZSBET0NVTUVOVDpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLW1vZGUnO1xuICAgICAgICBjYXNlIEZMT1dfRU5EOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LWVycm9yLWVuZCc7XG4gICAgICAgIGNhc2UgU0NBTEFSOlxuICAgICAgICAgICAgcmV0dXJuICdzY2FsYXInO1xuICAgICAgICBjYXNlICctLS0nOlxuICAgICAgICAgICAgcmV0dXJuICdkb2Mtc3RhcnQnO1xuICAgICAgICBjYXNlICcuLi4nOlxuICAgICAgICAgICAgcmV0dXJuICdkb2MtZW5kJztcbiAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgY2FzZSAnXFxyXFxuJzpcbiAgICAgICAgICAgIHJldHVybiAnbmV3bGluZSc7XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgcmV0dXJuICdzZXEtaXRlbS1pbmQnO1xuICAgICAgICBjYXNlICc/JzpcbiAgICAgICAgICAgIHJldHVybiAnZXhwbGljaXQta2V5LWluZCc7XG4gICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgcmV0dXJuICdtYXAtdmFsdWUtaW5kJztcbiAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctbWFwLXN0YXJ0JztcbiAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctbWFwLWVuZCc7XG4gICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LXNlcS1zdGFydCc7XG4gICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LXNlcS1lbmQnO1xuICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgIHJldHVybiAnY29tbWEnO1xuICAgIH1cbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIHJldHVybiAnc3BhY2UnO1xuICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgIHJldHVybiAnY29tbWVudCc7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgcmV0dXJuICdkaXJlY3RpdmUtbGluZSc7XG4gICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgcmV0dXJuICdhbGlhcyc7XG4gICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgcmV0dXJuICdhbmNob3InO1xuICAgICAgICBjYXNlICchJzpcbiAgICAgICAgICAgIHJldHVybiAndGFnJztcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHJldHVybiAnc2luZ2xlLXF1b3RlZC1zY2FsYXInO1xuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICByZXR1cm4gJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJztcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgcmV0dXJuICdibG9jay1zY2FsYXItaGVhZGVyJztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IEJPTSwgRE9DVU1FTlQsIEZMT1dfRU5ELCBTQ0FMQVIsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIsIHByZXR0eVRva2VuLCB0b2tlblR5cGUgfTtcbiIsImltcG9ydCB7IEJPTSwgRE9DVU1FTlQsIEZMT1dfRU5ELCBTQ0FMQVIgfSBmcm9tICcuL2NzdC5qcyc7XG5cbi8qXG5TVEFSVCAtPiBzdHJlYW1cblxuc3RyZWFtXG4gIGRpcmVjdGl2ZSAtPiBsaW5lLWVuZCAtPiBzdHJlYW1cbiAgaW5kZW50ICsgbGluZS1lbmQgLT4gc3RyZWFtXG4gIFtlbHNlXSAtPiBsaW5lLXN0YXJ0XG5cbmxpbmUtZW5kXG4gIGNvbW1lbnQgLT4gbGluZS1lbmRcbiAgbmV3bGluZSAtPiAuXG4gIGlucHV0LWVuZCAtPiBFTkRcblxubGluZS1zdGFydFxuICBkb2Mtc3RhcnQgLT4gZG9jXG4gIGRvYy1lbmQgLT4gc3RyZWFtXG4gIFtlbHNlXSAtPiBpbmRlbnQgLT4gYmxvY2stc3RhcnRcblxuYmxvY2stc3RhcnRcbiAgc2VxLWl0ZW0tc3RhcnQgLT4gYmxvY2stc3RhcnRcbiAgZXhwbGljaXQta2V5LXN0YXJ0IC0+IGJsb2NrLXN0YXJ0XG4gIG1hcC12YWx1ZS1zdGFydCAtPiBibG9jay1zdGFydFxuICBbZWxzZV0gLT4gZG9jXG5cbmRvY1xuICBsaW5lLWVuZCAtPiBsaW5lLXN0YXJ0XG4gIHNwYWNlcyAtPiBkb2NcbiAgYW5jaG9yIC0+IGRvY1xuICB0YWcgLT4gZG9jXG4gIGZsb3ctc3RhcnQgLT4gZmxvdyAtPiBkb2NcbiAgZmxvdy1lbmQgLT4gZXJyb3IgLT4gZG9jXG4gIHNlcS1pdGVtLXN0YXJ0IC0+IGVycm9yIC0+IGRvY1xuICBleHBsaWNpdC1rZXktc3RhcnQgLT4gZXJyb3IgLT4gZG9jXG4gIG1hcC12YWx1ZS1zdGFydCAtPiBkb2NcbiAgYWxpYXMgLT4gZG9jXG4gIHF1b3RlLXN0YXJ0IC0+IHF1b3RlZC1zY2FsYXIgLT4gZG9jXG4gIGJsb2NrLXNjYWxhci1oZWFkZXIgLT4gbGluZS1lbmQgLT4gYmxvY2stc2NhbGFyKG1pbikgLT4gbGluZS1zdGFydFxuICBbZWxzZV0gLT4gcGxhaW4tc2NhbGFyKGZhbHNlLCBtaW4pIC0+IGRvY1xuXG5mbG93XG4gIGxpbmUtZW5kIC0+IGZsb3dcbiAgc3BhY2VzIC0+IGZsb3dcbiAgYW5jaG9yIC0+IGZsb3dcbiAgdGFnIC0+IGZsb3dcbiAgZmxvdy1zdGFydCAtPiBmbG93IC0+IGZsb3dcbiAgZmxvdy1lbmQgLT4gLlxuICBzZXEtaXRlbS1zdGFydCAtPiBlcnJvciAtPiBmbG93XG4gIGV4cGxpY2l0LWtleS1zdGFydCAtPiBmbG93XG4gIG1hcC12YWx1ZS1zdGFydCAtPiBmbG93XG4gIGFsaWFzIC0+IGZsb3dcbiAgcXVvdGUtc3RhcnQgLT4gcXVvdGVkLXNjYWxhciAtPiBmbG93XG4gIGNvbW1hIC0+IGZsb3dcbiAgW2Vsc2VdIC0+IHBsYWluLXNjYWxhcih0cnVlLCAwKSAtPiBmbG93XG5cbnF1b3RlZC1zY2FsYXJcbiAgcXVvdGUtZW5kIC0+IC5cbiAgW2Vsc2VdIC0+IHF1b3RlZC1zY2FsYXJcblxuYmxvY2stc2NhbGFyKG1pbilcbiAgbmV3bGluZSArIHBlZWsoaW5kZW50IDwgbWluKSAtPiAuXG4gIFtlbHNlXSAtPiBibG9jay1zY2FsYXIobWluKVxuXG5wbGFpbi1zY2FsYXIoaXMtZmxvdywgbWluKVxuICBzY2FsYXItZW5kKGlzLWZsb3cpIC0+IC5cbiAgcGVlayhuZXdsaW5lICsgKGluZGVudCA8IG1pbikpIC0+IC5cbiAgW2Vsc2VdIC0+IHBsYWluLXNjYWxhcihtaW4pXG4qL1xuZnVuY3Rpb24gaXNFbXB0eShjaCkge1xuICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuY29uc3QgaGV4RGlnaXRzID0gbmV3IFNldCgnMDEyMzQ1Njc4OUFCQ0RFRmFiY2RlZicpO1xuY29uc3QgdGFnQ2hhcnMgPSBuZXcgU2V0KFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotIzsvPzpAJj0rJF8uIX4qJygpXCIpO1xuY29uc3QgZmxvd0luZGljYXRvckNoYXJzID0gbmV3IFNldCgnLFtde30nKTtcbmNvbnN0IGludmFsaWRBbmNob3JDaGFycyA9IG5ldyBTZXQoJyAsW117fVxcblxcclxcdCcpO1xuY29uc3QgaXNOb3RBbmNob3JDaGFyID0gKGNoKSA9PiAhY2ggfHwgaW52YWxpZEFuY2hvckNoYXJzLmhhcyhjaCk7XG4vKipcbiAqIFNwbGl0cyBhbiBpbnB1dCBzdHJpbmcgaW50byBsZXhpY2FsIHRva2VucywgaS5lLiBzbWFsbGVyIHN0cmluZ3MgdGhhdCBhcmVcbiAqIGVhc2lseSBpZGVudGlmaWFibGUgYnkgYHRva2Vucy50b2tlblR5cGUoKWAuXG4gKlxuICogTGV4aW5nIHN0YXJ0cyBhbHdheXMgaW4gYSBcInN0cmVhbVwiIGNvbnRleHQuIEluY29tcGxldGUgaW5wdXQgbWF5IGJlIGJ1ZmZlcmVkXG4gKiB1bnRpbCBhIGNvbXBsZXRlIHRva2VuIGNhbiBiZSBlbWl0dGVkLlxuICpcbiAqIEluIGFkZGl0aW9uIHRvIHNsaWNlcyBvZiB0aGUgb3JpZ2luYWwgaW5wdXQsIHRoZSBmb2xsb3dpbmcgY29udHJvbCBjaGFyYWN0ZXJzXG4gKiBtYXkgYWxzbyBiZSBlbWl0dGVkOlxuICpcbiAqIC0gYFxceDAyYCAoU3RhcnQgb2YgVGV4dCk6IEEgZG9jdW1lbnQgc3RhcnRzIHdpdGggdGhlIG5leHQgdG9rZW5cbiAqIC0gYFxceDE4YCAoQ2FuY2VsKTogVW5leHBlY3RlZCBlbmQgb2YgZmxvdy1tb2RlIChpbmRpY2F0ZXMgYW4gZXJyb3IpXG4gKiAtIGBcXHgxZmAgKFVuaXQgU2VwYXJhdG9yKTogTmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx1ZVxuICogLSBgXFx1e0ZFRkZ9YCAoQnl0ZSBvcmRlciBtYXJrKTogRW1pdHRlZCBzZXBhcmF0ZWx5IG91dHNpZGUgZG9jdW1lbnRzXG4gKi9cbmNsYXNzIExleGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYnVmZmVyIG1hcmtzIHRoZSBlbmQgb2ZcbiAgICAgICAgICogYWxsIGlucHV0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF0RW5kID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHBsaWNpdCBpbmRlbnQgc2V0IGluIGJsb2NrIHNjYWxhciBoZWFkZXIsIGFzIGFuIG9mZnNldCBmcm9tIHRoZSBjdXJyZW50XG4gICAgICAgICAqIG1pbmltdW0gaW5kZW50LCBzbyBlLmcuIHNldCB0byAxIGZyb20gYSBoZWFkZXIgYHwyK2AuIFNldCB0byAtMSBpZiBub3RcbiAgICAgICAgICogZXhwbGljaXRseSBzZXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0gLTE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCbG9jayBzY2FsYXJzIHRoYXQgaW5jbHVkZSBhICsgKGtlZXApIGNob21waW5nIGluZGljYXRvciBpbiB0aGVpciBoZWFkZXJcbiAgICAgICAgICogaW5jbHVkZSB0cmFpbGluZyBlbXB0eSBsaW5lcywgd2hpY2ggYXJlIG90aGVyd2lzZSBleGNsdWRlZCBmcm9tIHRoZVxuICAgICAgICAgKiBzY2FsYXIncyBjb250ZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gZmFsc2U7XG4gICAgICAgIC8qKiBDdXJyZW50IGlucHV0ICovXG4gICAgICAgIHRoaXMuYnVmZmVyID0gJyc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIG5vdGluZyB3aGV0aGVyIHRoZSBtYXAgdmFsdWUgaW5kaWNhdG9yIDogY2FuIGltbWVkaWF0ZWx5IGZvbGxvdyB0aGlzXG4gICAgICAgICAqIG5vZGUgd2l0aGluIGEgZmxvdyBjb250ZXh0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgIC8qKiBDb3VudCBvZiBzdXJyb3VuZGluZyBmbG93IGNvbGxlY3Rpb24gbGV2ZWxzLiAqL1xuICAgICAgICB0aGlzLmZsb3dMZXZlbCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNaW5pbXVtIGxldmVsIG9mIGluZGVudGF0aW9uIHJlcXVpcmVkIGZvciBuZXh0IGxpbmVzIHRvIGJlIHBhcnNlZCBhcyBhXG4gICAgICAgICAqIHBhcnQgb2YgdGhlIGN1cnJlbnQgc2NhbGFyIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gMDtcbiAgICAgICAgLyoqIEluZGVudGF0aW9uIGxldmVsIG9mIHRoZSBjdXJyZW50IGxpbmUuICovXG4gICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSAwO1xuICAgICAgICAvKiogUG9zaXRpb24gb2YgdGhlIG5leHQgXFxuIGNoYXJhY3Rlci4gKi9cbiAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gbnVsbDtcbiAgICAgICAgLyoqIFN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxleGVyIGlmIHJlYWNoaW5nIHRoZSBlbmQgb2YgaW5jcG9tcGxldGUgaW5wdXQgKi9cbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICAgICAgLyoqIEEgcG9pbnRlciB0byBgYnVmZmVyYDsgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIGxleGVyLiAqL1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIFlBTUwgdG9rZW5zIGZyb20gdGhlIGBzb3VyY2VgIHN0cmluZy4gSWYgYGluY29tcGxldGVgLFxuICAgICAqIGEgcGFydCBvZiB0aGUgbGFzdCBsaW5lIG1heSBiZSBsZWZ0IGFzIGEgYnVmZmVyIGZvciB0aGUgbmV4dCBjYWxsLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBnZW5lcmF0b3Igb2YgbGV4aWNhbCB0b2tlbnNcbiAgICAgKi9cbiAgICAqbGV4KHNvdXJjZSwgaW5jb21wbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3NvdXJjZSBpcyBub3QgYSBzdHJpbmcnKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIgPyB0aGlzLmJ1ZmZlciArIHNvdXJjZSA6IHNvdXJjZTtcbiAgICAgICAgICAgIHRoaXMubGluZUVuZFBvcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdEVuZCA9ICFpbmNvbXBsZXRlO1xuICAgICAgICBsZXQgbmV4dCA9IHRoaXMubmV4dCA/PyAnc3RyZWFtJztcbiAgICAgICAgd2hpbGUgKG5leHQgJiYgKGluY29tcGxldGUgfHwgdGhpcy5oYXNDaGFycygxKSkpXG4gICAgICAgICAgICBuZXh0ID0geWllbGQqIHRoaXMucGFyc2VOZXh0KG5leHQpO1xuICAgIH1cbiAgICBhdExpbmVFbmQoKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3M7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICB3aGlsZSAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIGlmICghY2ggfHwgY2ggPT09ICcjJyB8fCBjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxyJylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcltpICsgMV0gPT09ICdcXG4nO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNoYXJBdChuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLnBvcyArIG5dO1xuICAgIH1cbiAgICBjb250aW51ZVNjYWxhcihvZmZzZXQpIHtcbiAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbb2Zmc2V0XTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50TmV4dCA+IDApIHtcbiAgICAgICAgICAgIGxldCBpbmRlbnQgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2luZGVudCArIG9mZnNldF07XG4gICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2luZGVudCArIG9mZnNldCArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnXFxuJyB8fCAoIW5leHQgJiYgIXRoaXMuYXRFbmQpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0ICsgaW5kZW50ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaCA9PT0gJ1xcbicgfHwgaW5kZW50ID49IHRoaXMuaW5kZW50TmV4dCB8fCAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgID8gb2Zmc2V0ICsgaW5kZW50XG4gICAgICAgICAgICAgICAgOiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBjb25zdCBkdCA9IHRoaXMuYnVmZmVyLnN1YnN0cihvZmZzZXQsIDMpO1xuICAgICAgICAgICAgaWYgKChkdCA9PT0gJy0tLScgfHwgZHQgPT09ICcuLi4nKSAmJiBpc0VtcHR5KHRoaXMuYnVmZmVyW29mZnNldCArIDNdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gICAgZ2V0TGluZSgpIHtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMubGluZUVuZFBvcztcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdudW1iZXInIHx8IChlbmQgIT09IC0xICYmIGVuZCA8IHRoaXMucG9zKSkge1xuICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXIuaW5kZXhPZignXFxuJywgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXRFbmQgPyB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5wb3MpIDogbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyW2VuZCAtIDFdID09PSAnXFxyJylcbiAgICAgICAgICAgIGVuZCAtPSAxO1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMucG9zLCBlbmQpO1xuICAgIH1cbiAgICBoYXNDaGFycyhuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvcyArIG4gPD0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICBzZXROZXh0KHN0YXRlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMucG9zKTtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBudWxsO1xuICAgICAgICB0aGlzLm5leHQgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHBlZWsobikge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMucG9zLCBuKTtcbiAgICB9XG4gICAgKnBhcnNlTmV4dChuZXh0KSB7XG4gICAgICAgIHN3aXRjaCAobmV4dCkge1xuICAgICAgICAgICAgY2FzZSAnc3RyZWFtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VTdHJlYW0oKTtcbiAgICAgICAgICAgIGNhc2UgJ2xpbmUtc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2RvYyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3cnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUZsb3dDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICBjYXNlICdxdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VRdW90ZWRTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ3BsYWluLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUGxhaW5TY2FsYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqcGFyc2VTdHJlYW0oKSB7XG4gICAgICAgIGxldCBsaW5lID0gdGhpcy5nZXRMaW5lKCk7XG4gICAgICAgIGlmIChsaW5lID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnc3RyZWFtJyk7XG4gICAgICAgIGlmIChsaW5lWzBdID09PSBCT00pIHtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZVswXSA9PT0gJyUnKSB7XG4gICAgICAgICAgICBsZXQgZGlyRW5kID0gbGluZS5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgY3MgPSBsaW5lLmluZGV4T2YoJyMnKTtcbiAgICAgICAgICAgIHdoaWxlIChjcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGxpbmVbY3MgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyRW5kID0gY3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNzID0gbGluZS5pbmRleE9mKCcjJywgY3MgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoID0gbGluZVtkaXJFbmQgLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgICAgIGRpckVuZCAtPSAxO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuID0gKHlpZWxkKiB0aGlzLnB1c2hDb3VudChkaXJFbmQpKSArICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pOyAvLyBwb3NzaWJsZSBjb21tZW50XG4gICAgICAgICAgICB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gJ3N0cmVhbSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXRMaW5lRW5kKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIHNwKTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gJ3N0cmVhbSc7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQgRE9DVU1FTlQ7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VMaW5lU3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGNoID0gdGhpcy5jaGFyQXQoMCk7XG4gICAgICAgIGlmICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdsaW5lLXN0YXJ0Jyk7XG4gICAgICAgIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnLicpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hdEVuZCAmJiAhdGhpcy5oYXNDaGFycyg0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdsaW5lLXN0YXJ0Jyk7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5wZWVrKDMpO1xuICAgICAgICAgICAgaWYgKChzID09PSAnLS0tJyB8fCBzID09PSAnLi4uJykgJiYgaXNFbXB0eSh0aGlzLmNoYXJBdCgzKSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcyA9PT0gJy0tLScgPyAnZG9jJyA6ICdzdHJlYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKGZhbHNlKTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50TmV4dCA+IHRoaXMuaW5kZW50VmFsdWUgJiYgIWlzRW1wdHkodGhpcy5jaGFyQXQoMSkpKVxuICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gdGhpcy5pbmRlbnRWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTdGFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VCbG9ja1N0YXJ0KCkge1xuICAgICAgICBjb25zdCBbY2gwLCBjaDFdID0gdGhpcy5wZWVrKDIpO1xuICAgICAgICBpZiAoIWNoMSAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXN0YXJ0Jyk7XG4gICAgICAgIGlmICgoY2gwID09PSAnLScgfHwgY2gwID09PSAnPycgfHwgY2gwID09PSAnOicpICYmIGlzRW1wdHkoY2gxKSkge1xuICAgICAgICAgICAgY29uc3QgbiA9ICh5aWVsZCogdGhpcy5wdXNoQ291bnQoMSkpICsgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpO1xuICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gdGhpcy5pbmRlbnRWYWx1ZSArIDE7XG4gICAgICAgICAgICB0aGlzLmluZGVudFZhbHVlICs9IG47XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1N0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdkb2MnO1xuICAgIH1cbiAgICAqcGFyc2VEb2N1bWVudCgpIHtcbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2RvYycpO1xuICAgICAgICBsZXQgbiA9IHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCk7XG4gICAgICAgIHN3aXRjaCAobGluZVtuXSkge1xuICAgICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsID0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9jJztcbiAgICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hVbnRpbChpc05vdEFuY2hvckNoYXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9jJztcbiAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUXVvdGVkU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucGFyc2VCbG9ja1NjYWxhckhlYWRlcigpO1xuICAgICAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU2NhbGFyKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBsYWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlRmxvd0NvbGxlY3Rpb24oKSB7XG4gICAgICAgIGxldCBubCwgc3A7XG4gICAgICAgIGxldCBpbmRlbnQgPSAtMTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbmwgPSB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgaWYgKG5sID4gMCkge1xuICAgICAgICAgICAgICAgIHNwID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSA9IGluZGVudCA9IHNwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3AgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3AgKz0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgfSB3aGlsZSAobmwgKyBzcCA+IDApO1xuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5nZXRMaW5lKCk7XG4gICAgICAgIGlmIChsaW5lID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnZmxvdycpO1xuICAgICAgICBpZiAoKGluZGVudCAhPT0gLTEgJiYgaW5kZW50IDwgdGhpcy5pbmRlbnROZXh0ICYmIGxpbmVbMF0gIT09ICcjJykgfHxcbiAgICAgICAgICAgIChpbmRlbnQgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAobGluZS5zdGFydHNXaXRoKCctLS0nKSB8fCBsaW5lLnN0YXJ0c1dpdGgoJy4uLicpKSAmJlxuICAgICAgICAgICAgICAgIGlzRW1wdHkobGluZVszXSkpKSB7XG4gICAgICAgICAgICAvLyBBbGxvd2luZyBmb3IgdGhlIHRlcm1pbmFsIF0gb3IgfSBhdCB0aGUgc2FtZSAocmF0aGVyIHRoYW4gZ3JlYXRlcilcbiAgICAgICAgICAgIC8vIGluZGVudCBsZXZlbCBhcyB0aGUgaW5pdGlhbCBbIG9yIHsgaXMgdGVjaG5pY2FsbHkgaW52YWxpZCwgYnV0XG4gICAgICAgICAgICAvLyBmYWlsaW5nIGhlcmUgd291bGQgYmUgc3VycHJpc2luZyB0byB1c2Vycy5cbiAgICAgICAgICAgIGNvbnN0IGF0Rmxvd0VuZE1hcmtlciA9IGluZGVudCA9PT0gdGhpcy5pbmRlbnROZXh0IC0gMSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsID09PSAxICYmXG4gICAgICAgICAgICAgICAgKGxpbmVbMF0gPT09ICddJyB8fCBsaW5lWzBdID09PSAnfScpO1xuICAgICAgICAgICAgaWYgKCFhdEZsb3dFbmRNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgPSAwO1xuICAgICAgICAgICAgICAgIHlpZWxkIEZMT1dfRU5EO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgd2hpbGUgKGxpbmVbbl0gPT09ICcsJykge1xuICAgICAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCk7XG4gICAgICAgIHN3aXRjaCAobGluZVtuXSkge1xuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCArPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsIC09IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd0xldmVsID8gJ2Zsb3cnIDogJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVF1b3RlZFNjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAnOic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5jaGFyQXQoMSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvd0tleSB8fCBpc0VtcHR5KG5leHQpIHx8IG5leHQgPT09ICcsJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBsYWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlUXVvdGVkU2NhbGFyKCkge1xuICAgICAgICBjb25zdCBxdW90ZSA9IHRoaXMuY2hhckF0KDApO1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5idWZmZXIuaW5kZXhPZihxdW90ZSwgdGhpcy5wb3MgKyAxKTtcbiAgICAgICAgaWYgKHF1b3RlID09PSBcIidcIikge1xuICAgICAgICAgICAgd2hpbGUgKGVuZCAhPT0gLTEgJiYgdGhpcy5idWZmZXJbZW5kICsgMV0gPT09IFwiJ1wiKVxuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoXCInXCIsIGVuZCArIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZG91YmxlLXF1b3RlXG4gICAgICAgICAgICB3aGlsZSAoZW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5idWZmZXJbZW5kIC0gMSAtIG5dID09PSAnXFxcXCcpXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAobiAlIDIgPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1wiJywgZW5kICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBsb29raW5nIGZvciBuZXdsaW5lcyB3aXRoaW4gdGhlIHF1b3Rlc1xuICAgICAgICBjb25zdCBxYiA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZygwLCBlbmQpO1xuICAgICAgICBsZXQgbmwgPSBxYi5pbmRleE9mKCdcXG4nLCB0aGlzLnBvcyk7XG4gICAgICAgIGlmIChubCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHdoaWxlIChubCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IHRoaXMuY29udGludWVTY2FsYXIobmwgKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY3MgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBubCA9IHFiLmluZGV4T2YoJ1xcbicsIGNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChubCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIGVycm9yIGNhdXNlZCBieSBhbiB1bmV4cGVjdGVkIHVuaW5kZW50XG4gICAgICAgICAgICAgICAgZW5kID0gbmwgLSAocWJbbmwgLSAxXSA9PT0gJ1xccicgPyAyIDogMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdxdW90ZWQtc2NhbGFyJyk7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFRvSW5kZXgoZW5kICsgMSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5mbG93TGV2ZWwgPyAnZmxvdycgOiAnZG9jJztcbiAgICB9XG4gICAgKnBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoKSB7XG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJJbmRlbnQgPSAtMTtcbiAgICAgICAgdGhpcy5ibG9ja1NjYWxhcktlZXAgPSBmYWxzZTtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcztcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJysnKVxuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoID4gJzAnICYmIGNoIDw9ICc5JylcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0gTnVtYmVyKGNoKSAtIDE7XG4gICAgICAgICAgICBlbHNlIGlmIChjaCAhPT0gJy0nKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVW50aWwoY2ggPT4gaXNFbXB0eShjaCkgfHwgY2ggPT09ICcjJyk7XG4gICAgfVxuICAgICpwYXJzZUJsb2NrU2NhbGFyKCkge1xuICAgICAgICBsZXQgbmwgPSB0aGlzLnBvcyAtIDE7IC8vIG1heSBiZSAtMSBpZiB0aGlzLnBvcyA9PT0gMFxuICAgICAgICBsZXQgaW5kZW50ID0gMDtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICBsb29wOiBmb3IgKGxldCBpID0gdGhpcy5wb3M7IChjaCA9IHRoaXMuYnVmZmVyW2ldKTsgKytpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgICAgIGluZGVudCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgICAgICAgICBubCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGluZGVudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1xccic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0ICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc2NhbGFyJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zY2FsYXInKTtcbiAgICAgICAgaWYgKGluZGVudCA+PSB0aGlzLmluZGVudE5leHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJsb2NrU2NhbGFySW5kZW50ID09PSAtMSlcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSBpbmRlbnQ7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ICsgKHRoaXMuaW5kZW50TmV4dCA9PT0gMCA/IDEgOiB0aGlzLmluZGVudE5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb250aW51ZVNjYWxhcihubCArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChjcyA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIG5sID0gdGhpcy5idWZmZXIuaW5kZXhPZignXFxuJywgY3MpO1xuICAgICAgICAgICAgfSB3aGlsZSAobmwgIT09IC0xKTtcbiAgICAgICAgICAgIGlmIChubCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXNjYWxhcicpO1xuICAgICAgICAgICAgICAgIG5sID0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRyYWlsaW5nIGluc3VmZmljaWVudGx5IGluZGVudGVkIHRhYnMgYXJlIGludmFsaWQuXG4gICAgICAgIC8vIFRvIGNhdGNoIHRoYXQgZHVyaW5nIHBhcnNpbmcsIHdlIGluY2x1ZGUgdGhlbSBpbiB0aGUgYmxvY2sgc2NhbGFyIHZhbHVlLlxuICAgICAgICBsZXQgaSA9IG5sICsgMTtcbiAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJ1xcdCcgfHwgY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIG5sID0gaSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuYmxvY2tTY2FsYXJLZWVwKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbGV0IGkgPSBubCAtIDE7XG4gICAgICAgICAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJylcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclstLWldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RDaGFyID0gaTsgLy8gRHJvcCB0aGUgbGluZSBpZiBsYXN0IGNoYXIgbm90IG1vcmUgaW5kZW50ZWRcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2ggPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclstLWldO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicgJiYgaSA+PSB0aGlzLnBvcyAmJiBpICsgMSArIGluZGVudCA+IGxhc3RDaGFyKVxuICAgICAgICAgICAgICAgICAgICBubCA9IGk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIFNDQUxBUjtcbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFRvSW5kZXgobmwgKyAxLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgfVxuICAgICpwYXJzZVBsYWluU2NhbGFyKCkge1xuICAgICAgICBjb25zdCBpbkZsb3cgPSB0aGlzLmZsb3dMZXZlbCA+IDA7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLnBvcyAtIDE7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgY2g7XG4gICAgICAgIHdoaWxlICgoY2ggPSB0aGlzLmJ1ZmZlclsrK2ldKSkge1xuICAgICAgICAgICAgaWYgKGNoID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5idWZmZXJbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KG5leHQpIHx8IChpbkZsb3cgJiYgZmxvd0luZGljYXRvckNoYXJzLmhhcyhuZXh0KSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0VtcHR5KGNoKSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5idWZmZXJbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJyMnIHx8IChpbkZsb3cgJiYgZmxvd0luZGljYXRvckNoYXJzLmhhcyhuZXh0KSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3MgPSB0aGlzLmNvbnRpbnVlU2NhbGFyKGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBpID0gTWF0aC5tYXgoaSwgY3MgLSAyKTsgLy8gdG8gYWR2YW5jZSwgYnV0IHN0aWxsIGFjY291bnQgZm9yICcgIydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMoY2gpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdwbGFpbi1zY2FsYXInKTtcbiAgICAgICAgeWllbGQgU0NBTEFSO1xuICAgICAgICB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChlbmQgKyAxLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGluRmxvdyA/ICdmbG93JyA6ICdkb2MnO1xuICAgIH1cbiAgICAqcHVzaENvdW50KG4pIHtcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5wb3MsIG4pO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gbjtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaFRvSW5kZXgoaSwgYWxsb3dFbXB0eSkge1xuICAgICAgICBjb25zdCBzID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5wb3MsIGkpO1xuICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgeWllbGQgcztcbiAgICAgICAgICAgIHRoaXMucG9zICs9IHMubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsbG93RW1wdHkpXG4gICAgICAgICAgICB5aWVsZCAnJztcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgICpwdXNoSW5kaWNhdG9ycygpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoeWllbGQqIHRoaXMucHVzaFRhZygpKSArXG4gICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKSArXG4gICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpKSk7XG4gICAgICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh5aWVsZCogdGhpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuICAgICAgICAgICAgY2FzZSAnLSc6IC8vIHRoaXMgaXMgYW4gZXJyb3JcbiAgICAgICAgICAgIGNhc2UgJz8nOiAvLyB0aGlzIGlzIGFuIGVycm9yIG91dHNpZGUgZmxvdyBjb2xsZWN0aW9uc1xuICAgICAgICAgICAgY2FzZSAnOic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbkZsb3cgPSB0aGlzLmZsb3dMZXZlbCA+IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgY2gxID0gdGhpcy5jaGFyQXQoMSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRW1wdHkoY2gxKSB8fCAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMoY2gxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbkZsb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSB0aGlzLmluZGVudFZhbHVlICsgMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5mbG93S2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaFRhZygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhckF0KDEpID09PSAnPCcpIHtcbiAgICAgICAgICAgIGxldCBpID0gdGhpcy5wb3MgKyAyO1xuICAgICAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICB3aGlsZSAoIWlzRW1wdHkoY2gpICYmIGNoICE9PSAnPicpXG4gICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGNoID09PSAnPicgPyBpICsgMSA6IGksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpID0gdGhpcy5wb3MgKyAxO1xuICAgICAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgICAgICB3aGlsZSAoY2gpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnQ2hhcnMuaGFzKGNoKSlcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnJScgJiZcbiAgICAgICAgICAgICAgICAgICAgaGV4RGlnaXRzLmhhcyh0aGlzLmJ1ZmZlcltpICsgMV0pICYmXG4gICAgICAgICAgICAgICAgICAgIGhleERpZ2l0cy5oYXModGhpcy5idWZmZXJbaSArIDJdKSkge1xuICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWyhpICs9IDMpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnB1c2hOZXdsaW5lKCkge1xuICAgICAgICBjb25zdCBjaCA9IHRoaXMuYnVmZmVyW3RoaXMucG9zXTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxuJylcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgIGVsc2UgaWYgKGNoID09PSAnXFxyJyAmJiB0aGlzLmNoYXJBdCgxKSA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaENvdW50KDIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hTcGFjZXMoYWxsb3dUYWJzKSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgY2g7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgfSB3aGlsZSAoY2ggPT09ICcgJyB8fCAoYWxsb3dUYWJzICYmIGNoID09PSAnXFx0JykpO1xuICAgICAgICBjb25zdCBuID0gaSAtIHRoaXMucG9zO1xuICAgICAgICBpZiAobiA+IDApIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnBvcywgbik7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgICpwdXNoVW50aWwodGVzdCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zO1xuICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKCF0ZXN0KGNoKSlcbiAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGksIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IExleGVyIH07XG4iLCIvKipcbiAqIFRyYWNrcyBuZXdsaW5lcyBkdXJpbmcgcGFyc2luZyBpbiBvcmRlciB0byBwcm92aWRlIGFuIGVmZmljaWVudCBBUEkgZm9yXG4gKiBkZXRlcm1pbmluZyB0aGUgb25lLWluZGV4ZWQgYHsgbGluZSwgY29sIH1gIHBvc2l0aW9uIGZvciBhbnkgb2Zmc2V0XG4gKiB3aXRoaW4gdGhlIGlucHV0LlxuICovXG5jbGFzcyBMaW5lQ291bnRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGluZVN0YXJ0cyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdWxkIGJlIGNhbGxlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgY2FsbFxuICAgICAgICAgKiBgbGluZUNvdW50ZXIubGluZVN0YXJ0cy5zb3J0KClgIGJlZm9yZSBjYWxsaW5nIGBsaW5lUG9zKClgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGROZXdMaW5lID0gKG9mZnNldCkgPT4gdGhpcy5saW5lU3RhcnRzLnB1c2gob2Zmc2V0KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBhbmQgcmV0dXJucyB0aGUgMS1pbmRleGVkIHsgbGluZSwgY29sIH1cbiAgICAgICAgICogcG9zaXRpb24gb2YgYG9mZnNldGAuIElmIGBsaW5lID09PSAwYCwgYGFkZE5ld0xpbmVgIGhhcyBuZXZlciBiZWVuXG4gICAgICAgICAqIGNhbGxlZCBvciBgb2Zmc2V0YCBpcyBiZWZvcmUgdGhlIGZpcnN0IGtub3duIG5ld2xpbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxpbmVQb3MgPSAob2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICBsZXQgbG93ID0gMDtcbiAgICAgICAgICAgIGxldCBoaWdoID0gdGhpcy5saW5lU3RhcnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWlkID0gKGxvdyArIGhpZ2gpID4+IDE7IC8vIE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMilcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5lU3RhcnRzW21pZF0gPCBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGluZVN0YXJ0c1tsb3ddID09PSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbGluZTogbG93ICsgMSwgY29sOiAxIH07XG4gICAgICAgICAgICBpZiAobG93ID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IDAsIGNvbDogb2Zmc2V0IH07XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubGluZVN0YXJ0c1tsb3cgLSAxXTtcbiAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IGxvdywgY29sOiBvZmZzZXQgLSBzdGFydCArIDEgfTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IExpbmVDb3VudGVyIH07XG4iLCJpbXBvcnQgeyB0b2tlblR5cGUgfSBmcm9tICcuL2NzdC5qcyc7XG5pbXBvcnQgeyBMZXhlciB9IGZyb20gJy4vbGV4ZXIuanMnO1xuXG5mdW5jdGlvbiBpbmNsdWRlc1Rva2VuKGxpc3QsIHR5cGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmIChsaXN0W2ldLnR5cGUgPT09IHR5cGUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBmaW5kTm9uRW1wdHlJbmRleChsaXN0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHN3aXRjaCAobGlzdFtpXS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBpc0Zsb3dUb2tlbih0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4/LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFByZXZQcm9wcyhwYXJlbnQpIHtcbiAgICBzd2l0Y2ggKHBhcmVudC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQuc3RhcnQ7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ID0gcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHJldHVybiBpdC5zZXAgPz8gaXQuc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzpcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQuaXRlbXNbcGFyZW50Lml0ZW1zLmxlbmd0aCAtIDFdLnN0YXJ0O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbi8qKiBOb3RlOiBNYXkgbW9kaWZ5IGlucHV0IGFycmF5ICovXG5mdW5jdGlvbiBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldikge1xuICAgIGlmIChwcmV2Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGxldCBpID0gcHJldi5sZW5ndGg7XG4gICAgbG9vcDogd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgIHN3aXRjaCAocHJldltpXS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZXhwbGljaXQta2V5LWluZCc6XG4gICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChwcmV2WysraV0/LnR5cGUgPT09ICdzcGFjZScpIHtcbiAgICAgICAgLyogbG9vcCAqL1xuICAgIH1cbiAgICByZXR1cm4gcHJldi5zcGxpY2UoaSwgcHJldi5sZW5ndGgpO1xufVxuZnVuY3Rpb24gZml4Rmxvd1NlcUl0ZW1zKGZjKSB7XG4gICAgaWYgKGZjLnN0YXJ0LnR5cGUgPT09ICdmbG93LXNlcS1zdGFydCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiBmYy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0LnNlcCAmJlxuICAgICAgICAgICAgICAgICFpdC52YWx1ZSAmJlxuICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnZXhwbGljaXQta2V5LWluZCcpICYmXG4gICAgICAgICAgICAgICAgIWluY2x1ZGVzVG9rZW4oaXQuc2VwLCAnbWFwLXZhbHVlLWluZCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0LmtleSlcbiAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGl0LmtleTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGbG93VG9rZW4oaXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZS5lbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpdC52YWx1ZS5lbmQsIGl0LnNlcCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlLmVuZCA9IGl0LnNlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpdC5zdGFydCwgaXQuc2VwKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgaXQuc2VwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIFlBTUwgY29uY3JldGUgc3ludGF4IHRyZWUgKENTVCkgcGFyc2VyXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHNyYzogc3RyaW5nID0gLi4uXG4gKiBmb3IgKGNvbnN0IHRva2VuIG9mIG5ldyBQYXJzZXIoKS5wYXJzZShzcmMpKSB7XG4gKiAgIC8vIHRva2VuOiBUb2tlblxuICogfVxuICogYGBgXG4gKlxuICogVG8gdXNlIHRoZSBwYXJzZXIgd2l0aCBhIHVzZXItcHJvdmlkZWQgbGV4ZXI6XG4gKlxuICogYGBgdHNcbiAqIGZ1bmN0aW9uKiBwYXJzZShzb3VyY2U6IHN0cmluZywgbGV4ZXI6IExleGVyKSB7XG4gKiAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIoKVxuICogICBmb3IgKGNvbnN0IGxleGVtZSBvZiBsZXhlci5sZXgoc291cmNlKSlcbiAqICAgICB5aWVsZCogcGFyc2VyLm5leHQobGV4ZW1lKVxuICogICB5aWVsZCogcGFyc2VyLmVuZCgpXG4gKiB9XG4gKlxuICogY29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGNvbnN0IGxleGVyID0gbmV3IExleGVyKClcbiAqIGZvciAoY29uc3QgdG9rZW4gb2YgcGFyc2Uoc3JjLCBsZXhlcikpIHtcbiAqICAgLy8gdG9rZW46IFRva2VuXG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgUGFyc2VyIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25OZXdMaW5lIC0gSWYgZGVmaW5lZCwgY2FsbGVkIHNlcGFyYXRlbHkgd2l0aCB0aGUgc3RhcnQgcG9zaXRpb24gb2ZcbiAgICAgKiAgIGVhY2ggbmV3IGxpbmUgKGluIGBwYXJzZSgpYCwgaW5jbHVkaW5nIHRoZSBzdGFydCBvZiBpbnB1dCkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob25OZXdMaW5lKSB7XG4gICAgICAgIC8qKiBJZiB0cnVlLCBzcGFjZSBhbmQgc2VxdWVuY2UgaW5kaWNhdG9ycyBjb3VudCBhcyBpbmRlbnRhdGlvbiAqL1xuICAgICAgICB0aGlzLmF0TmV3TGluZSA9IHRydWU7XG4gICAgICAgIC8qKiBJZiB0cnVlLCBuZXh0IHRva2VuIGlzIGEgc2NhbGFyIHZhbHVlICovXG4gICAgICAgIHRoaXMuYXRTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgLyoqIEN1cnJlbnQgaW5kZW50YXRpb24gbGV2ZWwgKi9cbiAgICAgICAgdGhpcy5pbmRlbnQgPSAwO1xuICAgICAgICAvKiogQ3VycmVudCBvZmZzZXQgc2luY2UgdGhlIHN0YXJ0IG9mIHBhcnNpbmcgKi9cbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICAvKiogT24gdGhlIHNhbWUgbGluZSB3aXRoIGEgYmxvY2sgbWFwIGtleSAqL1xuICAgICAgICB0aGlzLm9uS2V5TGluZSA9IGZhbHNlO1xuICAgICAgICAvKiogVG9wIGluZGljYXRlcyB0aGUgbm9kZSB0aGF0J3MgY3VycmVudGx5IGJlaW5nIGJ1aWx0ICovXG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgLyoqIFRoZSBzb3VyY2Ugb2YgdGhlIGN1cnJlbnQgdG9rZW4sIHNldCBpbiBwYXJzZSgpICovXG4gICAgICAgIHRoaXMuc291cmNlID0gJyc7XG4gICAgICAgIC8qKiBUaGUgdHlwZSBvZiB0aGUgY3VycmVudCB0b2tlbiwgc2V0IGluIHBhcnNlKCkgKi9cbiAgICAgICAgdGhpcy50eXBlID0gJyc7XG4gICAgICAgIC8vIE11c3QgYmUgZGVmaW5lZCBhZnRlciBgbmV4dCgpYFxuICAgICAgICB0aGlzLmxleGVyID0gbmV3IExleGVyKCk7XG4gICAgICAgIHRoaXMub25OZXdMaW5lID0gb25OZXdMaW5lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBgc291cmNlYCBhcyBhIFlBTUwgc3RyZWFtLlxuICAgICAqIElmIGBpbmNvbXBsZXRlYCwgYSBwYXJ0IG9mIHRoZSBsYXN0IGxpbmUgbWF5IGJlIGxlZnQgYXMgYSBidWZmZXIgZm9yIHRoZSBuZXh0IGNhbGwuXG4gICAgICpcbiAgICAgKiBFcnJvcnMgYXJlIG5vdCB0aHJvd24sIGJ1dCB5aWVsZGVkIGFzIGB7IHR5cGU6ICdlcnJvcicsIG1lc3NhZ2UgfWAgdG9rZW5zLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBnZW5lcmF0b3Igb2YgdG9rZW5zIHJlcHJlc2VudGluZyBlYWNoIGRpcmVjdGl2ZSwgZG9jdW1lbnQsIGFuZCBvdGhlciBzdHJ1Y3R1cmUuXG4gICAgICovXG4gICAgKnBhcnNlKHNvdXJjZSwgaW5jb21wbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSAmJiB0aGlzLm9mZnNldCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKDApO1xuICAgICAgICBmb3IgKGNvbnN0IGxleGVtZSBvZiB0aGlzLmxleGVyLmxleChzb3VyY2UsIGluY29tcGxldGUpKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMubmV4dChsZXhlbWUpO1xuICAgICAgICBpZiAoIWluY29tcGxldGUpXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5lbmQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWR2YW5jZSB0aGUgcGFyc2VyIGJ5IHRoZSBgc291cmNlYCBvZiBvbmUgbGV4aWNhbCB0b2tlbi5cbiAgICAgKi9cbiAgICAqbmV4dChzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIGlmICh0aGlzLmF0U2NhbGFyKSB7XG4gICAgICAgICAgICB0aGlzLmF0U2NhbGFyID0gZmFsc2U7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0b2tlblR5cGUoc291cmNlKTtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYE5vdCBhIFlBTUwgdG9rZW46ICR7c291cmNlfWA7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoeyB0eXBlOiAnZXJyb3InLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBtZXNzYWdlLCBzb3VyY2UgfSk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdzY2FsYXInKSB7XG4gICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hdFNjYWxhciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAnc2NhbGFyJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKHRoaXMub2Zmc2V0ICsgc291cmNlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXROZXdMaW5lICYmIHNvdXJjZVswXSA9PT0gJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhwbGljaXQta2V5LWluZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXROZXdMaW5lKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZG9jLW1vZGUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ctZXJyb3ItZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBDYWxsIGF0IGVuZCBvZiBpbnB1dCB0byBwdXNoIG91dCBhbnkgcmVtYWluaW5nIGNvbnN0cnVjdGlvbnMgKi9cbiAgICAqZW5kKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPiAwKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgfVxuICAgIGdldCBzb3VyY2VUb2tlbigpIHtcbiAgICAgICAgY29uc3Qgc3QgPSB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN0O1xuICAgIH1cbiAgICAqc3RlcCgpIHtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy5wZWVrKDEpO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZG9jLWVuZCcgJiYgKCF0b3AgfHwgdG9wLnR5cGUgIT09ICdkb2MtZW5kJykpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkb2MtZW5kJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdG9wKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnN0cmVhbSgpO1xuICAgICAgICBzd2l0Y2ggKHRvcC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmRvY3VtZW50KHRvcCk7XG4gICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5zY2FsYXIodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmJsb2NrU2NhbGFyKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5ibG9ja01hcCh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2VxJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuYmxvY2tTZXF1ZW5jZSh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuZmxvd0NvbGxlY3Rpb24odG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1lbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5kb2N1bWVudEVuZCh0b3ApO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgIH1cbiAgICBwZWVrKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSBuXTtcbiAgICB9XG4gICAgKnBvcChlcnJvcikge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGVycm9yID8/IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1RyaWVkIHRvIHBvcCBhbiBlbXB0eSBzdGFjayc7XG4gICAgICAgICAgICB5aWVsZCB7IHR5cGU6ICdlcnJvcicsIG9mZnNldDogdGhpcy5vZmZzZXQsIHNvdXJjZTogJycsIG1lc3NhZ2UgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgeWllbGQgdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWsoMSk7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpIHtcbiAgICAgICAgICAgICAgICAvLyBCbG9jayBzY2FsYXJzIHVzZSB0aGVpciBwYXJlbnQgcmF0aGVyIHRoYW4gaGVhZGVyIGluZGVudFxuICAgICAgICAgICAgICAgIHRva2VuLmluZGVudCA9ICdpbmRlbnQnIGluIHRvcCA/IHRvcC5pbmRlbnQgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicgJiYgdG9wLnR5cGUgPT09ICdkb2N1bWVudCcpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgYWxsIGluZGVudCBmb3IgdG9wLWxldmVsIGZsb3cgY29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICB0b2tlbi5pbmRlbnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nKVxuICAgICAgICAgICAgICAgIGZpeEZsb3dTZXFJdGVtcyh0b2tlbik7XG4gICAgICAgICAgICBzd2l0Y2ggKHRvcC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICB0b3AudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgICAgICAgICAgdG9wLnByb3BzLnB1c2godG9rZW4pOyAvLyBlcnJvclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdibG9jay1tYXAnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ID0gdG9wLml0ZW1zW3RvcC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiB0b2tlbiwgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9ICFpdC5leHBsaWNpdEtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCB2YWx1ZTogdG9rZW4gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ID0gdG9wLml0ZW1zW3RvcC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodG9wLnR5cGUgPT09ICdkb2N1bWVudCcgfHxcbiAgICAgICAgICAgICAgICB0b3AudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHxcbiAgICAgICAgICAgICAgICB0b3AudHlwZSA9PT0gJ2Jsb2NrLXNlcScpICYmXG4gICAgICAgICAgICAgICAgKHRva2VuLnR5cGUgPT09ICdibG9jay1tYXAnIHx8IHRva2VuLnR5cGUgPT09ICdibG9jay1zZXEnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB0b2tlbi5pdGVtc1t0b2tlbi5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAmJlxuICAgICAgICAgICAgICAgICAgICAhbGFzdC5zZXAgJiZcbiAgICAgICAgICAgICAgICAgICAgIWxhc3QudmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgbGFzdC5zdGFydC5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZpbmROb25FbXB0eUluZGV4KGxhc3Quc3RhcnQpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAodG9rZW4uaW5kZW50ID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0LnN0YXJ0LmV2ZXJ5KHN0ID0+IHN0LnR5cGUgIT09ICdjb21tZW50JyB8fCBzdC5pbmRlbnQgPCB0b2tlbi5pbmRlbnQpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9wLnR5cGUgPT09ICdkb2N1bWVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuZW5kID0gbGFzdC5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogbGFzdC5zdGFydCB9KTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uaXRlbXMuc3BsaWNlKC0xLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnN0cmVhbSgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RpcmVjdGl2ZS1saW5lJzpcbiAgICAgICAgICAgICAgICB5aWVsZCB7IHR5cGU6ICdkaXJlY3RpdmUnLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBzb3VyY2U6IHRoaXMuc291cmNlIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnYnl0ZS1vcmRlci1tYXJrJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5zb3VyY2VUb2tlbjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdkb2MtbW9kZSc6XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9jID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZG9jdW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdkb2Mtc3RhcnQnKVxuICAgICAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goZG9jKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQge1xuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBtZXNzYWdlOiBgVW5leHBlY3RlZCAke3RoaXMudHlwZX0gdG9rZW4gaW4gWUFNTCBzdHJlYW1gLFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAqZG9jdW1lbnQoZG9jKSB7XG4gICAgICAgIGlmIChkb2MudmFsdWUpXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMubGluZUVuZChkb2MpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0Jzoge1xuICAgICAgICAgICAgICAgIGlmIChmaW5kTm9uRW1wdHlJbmRleChkb2Muc3RhcnQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGRvYy5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShkb2MpO1xuICAgICAgICBpZiAoYnYpXG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goYnYpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYFVuZXhwZWN0ZWQgJHt0aGlzLnR5cGV9IHRva2VuIGluIFlBTUwgZG9jdW1lbnRgLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnNjYWxhcihzY2FsYXIpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJldlByb3BzKHRoaXMucGVlaygyKSk7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgIGxldCBzZXA7XG4gICAgICAgICAgICBpZiAoc2NhbGFyLmVuZCkge1xuICAgICAgICAgICAgICAgIHNlcCA9IHNjYWxhci5lbmQ7XG4gICAgICAgICAgICAgICAgc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjYWxhci5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VwID0gW3RoaXMuc291cmNlVG9rZW5dO1xuICAgICAgICAgICAgY29uc3QgbWFwID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogc2NhbGFyLm9mZnNldCxcbiAgICAgICAgICAgICAgICBpbmRlbnQ6IHNjYWxhci5pbmRlbnQsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IHNjYWxhciwgc2VwIH1dXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID0gbWFwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLmxpbmVFbmQoc2NhbGFyKTtcbiAgICB9XG4gICAgKmJsb2NrU2NhbGFyKHNjYWxhcikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBzY2FsYXIucHJvcHMucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgICAgIHNjYWxhci5zb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAvLyBibG9jay1zY2FsYXIgc291cmNlIGluY2x1ZGVzIHRyYWlsaW5nIG5ld2xpbmVcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChubCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUodGhpcy5vZmZzZXQgKyBubCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBubCA9IHRoaXMuc291cmNlLmluZGV4T2YoJ1xcbicsIG5sKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmJsb2NrTWFwKG1hcCkge1xuICAgICAgICBjb25zdCBpdCA9IG1hcC5pdGVtc1ttYXAuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIGl0LnNlcCBpcyB0cnVlLWlzaCBpZiBwYWlyIGFscmVhZHkgaGFzIGtleSBvciA6IHNlcGFyYXRvclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gJ2VuZCcgaW4gaXQudmFsdWUgPyBpdC52YWx1ZS5lbmQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBBcnJheS5pc0FycmF5KGVuZCkgPyBlbmRbZW5kLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdD8udHlwZSA9PT0gJ2NvbW1lbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kPy5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0SW5kZW50ZWRDb21tZW50KGl0LnN0YXJ0LCBtYXAuaW5kZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG1hcC5pdGVtc1ttYXAuaXRlbXMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBwcmV2Py52YWx1ZT8uZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuZCwgaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA+PSBtYXAuaW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBhdE1hcEluZGVudCA9ICF0aGlzLm9uS2V5TGluZSAmJiB0aGlzLmluZGVudCA9PT0gbWFwLmluZGVudDtcbiAgICAgICAgICAgIGNvbnN0IGF0TmV4dEl0ZW0gPSBhdE1hcEluZGVudCAmJlxuICAgICAgICAgICAgICAgIChpdC5zZXAgfHwgaXQuZXhwbGljaXRLZXkpICYmXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlICE9PSAnc2VxLWl0ZW0taW5kJztcbiAgICAgICAgICAgIC8vIEZvciBlbXB0eSBub2RlcywgYXNzaWduIG5ld2xpbmUtc2VwYXJhdGVkIG5vdCBpbmRlbnRlZCBlbXB0eSB0b2tlbnMgdG8gZm9sbG93aW5nIG5vZGVcbiAgICAgICAgICAgIGxldCBzdGFydCA9IFtdO1xuICAgICAgICAgICAgaWYgKGF0TmV4dEl0ZW0gJiYgaXQuc2VwICYmICFpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5sID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdC5zZXAubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3QgPSBpdC5zZXBbaV07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmwucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdC5pbmRlbnQgPiBtYXAuaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBubC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChubC5sZW5ndGggPj0gMilcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpdC5zZXAuc3BsaWNlKG5sWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoYXROZXh0SXRlbSB8fCBpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LnNlcCAmJiAhaXQuZXhwbGljaXRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5leHBsaWNpdEtleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXROZXh0SXRlbSB8fCBpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQsIGV4cGxpY2l0S2V5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0sIGV4cGxpY2l0S2V5OiB0cnVlIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LmV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnbmV3bGluZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluY2x1ZGVzVG9rZW4oaXQuc2VwLCAnbWFwLXZhbHVlLWluZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGbG93VG9rZW4oaXQua2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VwID0gaXQuc2VwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSBndWFyZCBpcyB3cm9uZyBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGl0LmtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgZ3VhcmQgaXMgd3JvbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5zZXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5LCBzZXAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgYWN0dWFsbHkgYXQgbmV4dCBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwID0gaXQuc2VwLmNvbmNhdChzdGFydCwgdGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQudmFsdWUgfHwgYXROZXh0SXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gdGhpcy5mbG93U2NhbGFyKHRoaXMudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdE5leHRJdGVtIHx8IGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShtYXApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidi50eXBlID09PSAnYmxvY2stc2VxJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXQuZXhwbGljaXRLZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3Aoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBibG9jay1zZXEtaW5kIG9uIHNhbWUgbGluZSB3aXRoIGtleScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXRNYXBJbmRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgIH1cbiAgICAqYmxvY2tTZXF1ZW5jZShzZXEpIHtcbiAgICAgICAgY29uc3QgaXQgPSBzZXEuaXRlbXNbc2VxLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIGl0LnZhbHVlID8gaXQudmFsdWUuZW5kIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gQXJyYXkuaXNBcnJheShlbmQpID8gZW5kW2VuZC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3Q/LnR5cGUgPT09ICdjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZD8ucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0SW5kZW50ZWRDb21tZW50KGl0LnN0YXJ0LCBzZXEuaW5kZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHNlcS5pdGVtc1tzZXEuaXRlbXMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBwcmV2Py52YWx1ZT8uZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuZCwgaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlIHx8IHRoaXMuaW5kZW50IDw9IHNlcS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRlbnQgIT09IHNlcS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSB8fCBpbmNsdWRlc1Rva2VuKGl0LnN0YXJ0LCAnc2VxLWl0ZW0taW5kJykpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA+IHNlcS5pbmRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoc2VxKTtcbiAgICAgICAgICAgIGlmIChidikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgfVxuICAgICpmbG93Q29sbGVjdGlvbihmYykge1xuICAgICAgICBjb25zdCBpdCA9IGZjLml0ZW1zW2ZjLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZmxvdy1lcnJvci1lbmQnKSB7XG4gICAgICAgICAgICBsZXQgdG9wO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHRvcCAmJiB0b3AudHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZjLmVuZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWEnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0IHx8IGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnMgPSB0aGlzLmZsb3dTY2FsYXIodGhpcy50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChmcyk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LW1hcC1lbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLWVuZCc6XG4gICAgICAgICAgICAgICAgICAgIGZjLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKGZjKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICBpZiAoYnYpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGVlaygyKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2Jsb2NrLW1hcCcgJiZcbiAgICAgICAgICAgICAgICAoKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnICYmIHBhcmVudC5pbmRlbnQgPT09IGZjLmluZGVudCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXS5zZXApKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ21hcC12YWx1ZS1pbmQnICYmXG4gICAgICAgICAgICAgICAgcGFyZW50LnR5cGUgIT09ICdmbG93LWNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyhwYXJlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpO1xuICAgICAgICAgICAgICAgIGZpeEZsb3dTZXFJdGVtcyhmYyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VwID0gZmMuZW5kLnNwbGljZSgxLCBmYy5lbmQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGZjLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiBmYy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBmYywgc2VwIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID0gbWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMubGluZUVuZChmYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmxvd1NjYWxhcih0eXBlKSB7XG4gICAgICAgIGlmICh0aGlzLm9uTmV3TGluZSkge1xuICAgICAgICAgICAgbGV0IG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJykgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKG5sICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUodGhpcy5vZmZzZXQgKyBubCk7XG4gICAgICAgICAgICAgICAgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nLCBubCkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXJ0QmxvY2tWYWx1ZShwYXJlbnQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmxvd1NjYWxhcih0aGlzLnR5cGUpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyLWhlYWRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLXNjYWxhcicsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiBbdGhpcy5zb3VyY2VUb2tlbl0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZmxvdy1zZXEtc3RhcnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmbG93LWNvbGxlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5zb3VyY2VUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLXNlcScsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICBzdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGV4cGxpY2l0S2V5OiB0cnVlIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXRJbmRlbnRlZENvbW1lbnQoc3RhcnQsIGluZGVudCkge1xuICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnY29tbWVudCcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmluZGVudCA8PSBpbmRlbnQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdGFydC5ldmVyeShzdCA9PiBzdC50eXBlID09PSAnbmV3bGluZScgfHwgc3QudHlwZSA9PT0gJ3NwYWNlJyk7XG4gICAgfVxuICAgICpkb2N1bWVudEVuZChkb2NFbmQpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ2RvYy1tb2RlJykge1xuICAgICAgICAgICAgaWYgKGRvY0VuZC5lbmQpXG4gICAgICAgICAgICAgICAgZG9jRW5kLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRvY0VuZC5lbmQgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmxpbmVFbmQodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLWVuZCc6XG4gICAgICAgICAgICBjYXNlICdmbG93LW1hcC1lbmQnOlxuICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gYWxsIG90aGVyIHZhbHVlcyBhcmUgZXJyb3JzXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZW5kLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5lbmQgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgUGFyc2VyIH07XG4iLCJpbXBvcnQgeyBDb21wb3NlciB9IGZyb20gJy4vY29tcG9zZS9jb21wb3Nlci5qcyc7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJy4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IHByZXR0aWZ5RXJyb3IsIFlBTUxQYXJzZUVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4vbG9nLmpzJztcbmltcG9ydCB7IGlzRG9jdW1lbnQgfSBmcm9tICcuL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IExpbmVDb3VudGVyIH0gZnJvbSAnLi9wYXJzZS9saW5lLWNvdW50ZXIuanMnO1xuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnLi9wYXJzZS9wYXJzZXIuanMnO1xuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHByZXR0eUVycm9ycyA9IG9wdGlvbnMucHJldHR5RXJyb3JzICE9PSBmYWxzZTtcbiAgICBjb25zdCBsaW5lQ291bnRlciA9IG9wdGlvbnMubGluZUNvdW50ZXIgfHwgKHByZXR0eUVycm9ycyAmJiBuZXcgTGluZUNvdW50ZXIoKSkgfHwgbnVsbDtcbiAgICByZXR1cm4geyBsaW5lQ291bnRlciwgcHJldHR5RXJyb3JzIH07XG59XG4vKipcbiAqIFBhcnNlIHRoZSBpbnB1dCBhcyBhIHN0cmVhbSBvZiBZQU1MIGRvY3VtZW50cy5cbiAqXG4gKiBEb2N1bWVudHMgc2hvdWxkIGJlIHNlcGFyYXRlZCBmcm9tIGVhY2ggb3RoZXIgYnkgYC4uLmAgb3IgYC0tLWAgbWFya2VyIGxpbmVzLlxuICpcbiAqIEByZXR1cm5zIElmIGFuIGVtcHR5IGBkb2NzYCBhcnJheSBpcyByZXR1cm5lZCwgaXQgd2lsbCBiZSBvZiB0eXBlXG4gKiAgIEVtcHR5U3RyZWFtIGFuZCBjb250YWluIGFkZGl0aW9uYWwgc3RyZWFtIGluZm9ybWF0aW9uLiBJblxuICogICBUeXBlU2NyaXB0LCB5b3Ugc2hvdWxkIHVzZSBgJ2VtcHR5JyBpbiBkb2NzYCBhcyBhIHR5cGUgZ3VhcmQgZm9yIGl0LlxuICovXG5mdW5jdGlvbiBwYXJzZUFsbERvY3VtZW50cyhzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyID0gbmV3IENvbXBvc2VyKG9wdGlvbnMpO1xuICAgIGNvbnN0IGRvY3MgPSBBcnJheS5mcm9tKGNvbXBvc2VyLmNvbXBvc2UocGFyc2VyLnBhcnNlKHNvdXJjZSkpKTtcbiAgICBpZiAocHJldHR5RXJyb3JzICYmIGxpbmVDb3VudGVyKVxuICAgICAgICBmb3IgKGNvbnN0IGRvYyBvZiBkb2NzKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MuZm9yRWFjaChwcmV0dGlmeUVycm9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICAgICAgfVxuICAgIGlmIChkb2NzLmxlbmd0aCA+IDApXG4gICAgICAgIHJldHVybiBkb2NzO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFtdLCB7IGVtcHR5OiB0cnVlIH0sIGNvbXBvc2VyLnN0cmVhbUluZm8oKSk7XG59XG4vKiogUGFyc2UgYW4gaW5wdXQgc3RyaW5nIGludG8gYSBzaW5nbGUgWUFNTC5Eb2N1bWVudCAqL1xuZnVuY3Rpb24gcGFyc2VEb2N1bWVudChzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyID0gbmV3IENvbXBvc2VyKG9wdGlvbnMpO1xuICAgIC8vIGBkb2NgIGlzIGFsd2F5cyBzZXQgYnkgY29tcG9zZS5lbmQodHJ1ZSkgYXQgdGhlIHZlcnkgbGF0ZXN0XG4gICAgbGV0IGRvYyA9IG51bGw7XG4gICAgZm9yIChjb25zdCBfZG9jIG9mIGNvbXBvc2VyLmNvbXBvc2UocGFyc2VyLnBhcnNlKHNvdXJjZSksIHRydWUsIHNvdXJjZS5sZW5ndGgpKSB7XG4gICAgICAgIGlmICghZG9jKVxuICAgICAgICAgICAgZG9jID0gX2RvYztcbiAgICAgICAgZWxzZSBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKF9kb2MucmFuZ2Uuc2xpY2UoMCwgMiksICdNVUxUSVBMRV9ET0NTJywgJ1NvdXJjZSBjb250YWlucyBtdWx0aXBsZSBkb2N1bWVudHM7IHBsZWFzZSB1c2UgWUFNTC5wYXJzZUFsbERvY3VtZW50cygpJykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXR0eUVycm9ycyAmJiBsaW5lQ291bnRlcikge1xuICAgICAgICBkb2MuZXJyb3JzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgIGRvYy53YXJuaW5ncy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgIH1cbiAgICByZXR1cm4gZG9jO1xufVxuZnVuY3Rpb24gcGFyc2Uoc3JjLCByZXZpdmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IF9yZXZpdmVyID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBfcmV2aXZlciA9IHJldml2ZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXZpdmVyICYmIHR5cGVvZiByZXZpdmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0gcmV2aXZlcjtcbiAgICB9XG4gICAgY29uc3QgZG9jID0gcGFyc2VEb2N1bWVudChzcmMsIG9wdGlvbnMpO1xuICAgIGlmICghZG9jKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBkb2Mud2FybmluZ3MuZm9yRWFjaCh3YXJuaW5nID0+IHdhcm4oZG9jLm9wdGlvbnMubG9nTGV2ZWwsIHdhcm5pbmcpKTtcbiAgICBpZiAoZG9jLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChkb2Mub3B0aW9ucy5sb2dMZXZlbCAhPT0gJ3NpbGVudCcpXG4gICAgICAgICAgICB0aHJvdyBkb2MuZXJyb3JzWzBdO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkb2MuZXJyb3JzID0gW107XG4gICAgfVxuICAgIHJldHVybiBkb2MudG9KUyhPYmplY3QuYXNzaWduKHsgcmV2aXZlcjogX3Jldml2ZXIgfSwgb3B0aW9ucykpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgb3B0aW9ucykge1xuICAgIGxldCBfcmVwbGFjZXIgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicgfHwgQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXBsYWNlcikge1xuICAgICAgICBvcHRpb25zID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zLmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnN0IGluZGVudCA9IE1hdGgucm91bmQob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMgPSBpbmRlbnQgPCAxID8gdW5kZWZpbmVkIDogaW5kZW50ID4gOCA/IHsgaW5kZW50OiA4IH0gOiB7IGluZGVudCB9O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB7IGtlZXBVbmRlZmluZWQgfSA9IG9wdGlvbnMgPz8gcmVwbGFjZXIgPz8ge307XG4gICAgICAgIGlmICgha2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSAmJiAhX3JlcGxhY2VyKVxuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudCh2YWx1ZSwgX3JlcGxhY2VyLCBvcHRpb25zKS50b1N0cmluZyhvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgcGFyc2UsIHBhcnNlQWxsRG9jdW1lbnRzLCBwYXJzZURvY3VtZW50LCBzdHJpbmdpZnkgfTtcbiIsImltcG9ydCB0eXBlIHsgUmVhc29uaW5nRWZmb3J0IH0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgTWVzc2FnZSA9IHsgY29udGVudDogc3RyaW5nOyByb2xlOiAnc3lzdGVtJyB8ICd1c2VyJyB8ICdhc3Npc3RhbnQnIH07XG5cbmNvbnN0IE9QRU5BSV9NT0RFTF9QUkVGSVhFUyA9IFsnZ3B0LScsICdvMScsICdvMycsICdvNCddO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBpVXJsQW5kS2V5KG1vZGVsOiBzdHJpbmcpOiB7IHVybDogc3RyaW5nOyBhcGlLZXk6IHN0cmluZyB9IHtcbiAgbGV0IHVybDogc3RyaW5nO1xuICBsZXQgYXBpS2V5OiBzdHJpbmc7XG4gIGlmIChtb2RlbC5zdGFydHNXaXRoKCdnZW1pbmktJykpIHtcbiAgICB1cmwgPSAnaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb20vdjFiZXRhL29wZW5haS9jaGF0L2NvbXBsZXRpb25zJztcbiAgICBhcGlLZXkgPSBwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWSB8fCAnJztcbiAgfSBlbHNlIGlmIChPUEVOQUlfTU9ERUxfUFJFRklYRVMuc29tZSgocCkgPT4gbW9kZWwuc3RhcnRzV2l0aChwKSkpIHtcbiAgICB1cmwgPSAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJztcbiAgICBhcGlLZXkgPSBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSB8fCAnJztcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKGBVbmtub3duIG1vZGVsOiAke21vZGVsfWApO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuICByZXR1cm4geyB1cmwsIGFwaUtleSB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FsbExsbUFwaShcbiAgdXJsOiBzdHJpbmcsXG4gIGFwaUtleTogc3RyaW5nLFxuICBtb2RlbDogc3RyaW5nLFxuICBtZXNzYWdlczogTWVzc2FnZVtdLFxuICByZWFzb25pbmdFZmZvcnQ/OiBSZWFzb25pbmdFZmZvcnRcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGlmICghYXBpS2V5KSB7XG4gICAgY29uc29sZS5lcnJvcihgQVBJIGtleSBmb3IgJHttb2RlbH0gaXMgbm90IHNldC5gKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cblxuICBjb25zdCByZXF1ZXN0Qm9keTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7XG4gICAgbW9kZWwsXG4gICAgbWVzc2FnZXMsXG4gIH07XG4gIGlmIChyZWFzb25pbmdFZmZvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJlcXVlc3RCb2R5LnJlYXNvbmluZ19lZmZvcnQgPSByZWFzb25pbmdFZmZvcnQ7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXBpS2V5fWAsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gIH0pO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgY29uc29sZS5lcnJvcihgTExNIEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXNUZXh0fSAoJHtyZXNwb25zZS5zdGF0dXN9KTogJHtlcnJvclRleHR9YCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICBjb25zb2xlLmxvZyhgJHttb2RlbH06YCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XG4gIHJldHVybiByZXN1bHQuY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnQ7XG59XG4iLCIvKipcbiAqIFBhcnNlcyBhIGNvbW1hbmQgbGluZSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBhcmd1bWVudHMsIHByZXNlcnZpbmcgcXVvdGVkIHN0cmluZ3MuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzOlxuICogLSBTcGFjZS1zZXBhcmF0ZWQgYXJndW1lbnRzXG4gKiAtIERvdWJsZS1xdW90ZWQgc3RyaW5ncyAocHJlc2VydmVzIHNwYWNlcyB3aXRoaW4pXG4gKiAtIFNpbmdsZS1xdW90ZWQgc3RyaW5ncyAocHJlc2VydmVzIHNwYWNlcyB3aXRoaW4pXG4gKlxuICogQHBhcmFtIGFyZ3NTdHJpbmcgVGhlIGNvbW1hbmQgbGluZSBzdHJpbmcgdG8gcGFyc2VcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHBhcnNlZCBhcmd1bWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29tbWFuZExpbmVBcmdzKGFyZ3NTdHJpbmc6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgaWYgKCFhcmdzU3RyaW5nKSByZXR1cm4gW107XG5cbiAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgY3VycmVudCA9ICcnO1xuICBsZXQgaW5Eb3VibGVRdW90ZSA9IGZhbHNlO1xuICBsZXQgaW5TaW5nbGVRdW90ZSA9IGZhbHNlO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJnc1N0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBhcmdzU3RyaW5nW2ldO1xuXG4gICAgLy8gSGFuZGxlIHF1b3Rlc1xuICAgIGlmIChjaGFyID09PSAnXCInICYmICFpblNpbmdsZVF1b3RlKSB7XG4gICAgICBpbkRvdWJsZVF1b3RlID0gIWluRG91YmxlUXVvdGU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoY2hhciA9PT0gXCInXCIgJiYgIWluRG91YmxlUXVvdGUpIHtcbiAgICAgIGluU2luZ2xlUXVvdGUgPSAhaW5TaW5nbGVRdW90ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBzcGFjZXMgKG9ubHkgc3BsaXQgb24gc3BhY2VzIG91dHNpZGUgb2YgcXVvdGVzKVxuICAgIGlmIChjaGFyID09PSAnICcgJiYgIWluRG91YmxlUXVvdGUgJiYgIWluU2luZ2xlUXVvdGUpIHtcbiAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gJyc7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgY2hhcmFjdGVyIHRvIGN1cnJlbnQgYXJndW1lbnRcbiAgICBjdXJyZW50ICs9IGNoYXI7XG4gIH1cblxuICAvLyBBZGQgdGhlIGxhc3QgYXJndW1lbnQgaWYgdGhlcmUgaXMgb25lXG4gIGlmIChjdXJyZW50KSB7XG4gICAgcmVzdWx0LnB1c2goY3VycmVudCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgSFRNTC1zdHlsZSBjb21tZW50cyBmcm9tIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBtYXJrZG93bkNvbnRlbnQgVGhlIHN0cmluZyBjb250YWluaW5nIG1hcmtkb3duIGNvbnRlbnRcbiAqIEByZXR1cm5zIFRoZSBzdHJpbmcgd2l0aCBIVE1MIGNvbW1lbnRzIHJlbW92ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwSHRtbENvbW1lbnRzKG1hcmtkb3duQ29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIG1hcmtkb3duQ29udGVudC5yZXBsYWNlKC88IS0tW1xcc1xcU10qPy0tPi9nLCAnJyk7XG59XG4iLCIvLyBXZSBzaG91bGQgc3BlY2lmeSB0aGUgbGFuZ3VhZ2UuIGNmLiBodHRwczovL2dpdGh1Yi5jb20vQWlkZXItQUkvYWlkZXIvaXNzdWVzLzM5NzFcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FJREVSX0VYVFJBX0FSR1MgPVxuICAnLS1tb2RlbCBnZW1pbmkvZ2VtaW5pLTIuNS1wcm8tcHJldmlldy0wNS0wNiAtLWVkaXQtZm9ybWF0IGRpZmYtZmVuY2VkIC0tY2hhdC1sYW5ndWFnZSBFbmdsaXNoJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFUE9NSVhfRVhUUkFfQVJHUyA9ICctLWNvbXByZXNzIC0tcmVtb3ZlLWVtcHR5LWxpbmVzIC0taW5jbHVkZSBcInNyYy8qKi8qLnt0cyx0c3h9LCoqLyoubWRcIic7XG4iLCJpbXBvcnQgdHlwZSB7IFNwYXduT3B0aW9uc1dpdGhvdXRTdGRpbyB9IGZyb20gJ25vZGU6Y2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgdHlwZSB7IFNwYXduU3luY1JldHVybnMgfSBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGFuc2lzIGZyb20gJ2Fuc2lzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bkNvbW1hbmQoXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgYXJnczogc3RyaW5nW10sXG4gIG9wdGlvbnM/OiBTcGF3bk9wdGlvbnNXaXRob3V0U3RkaW8gJiB7IGlnbm9yZUV4aXRTdGF0dXM/OiBib29sZWFuIH1cbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHsgaWdub3JlRXhpdFN0YXR1cywgLi4uc3Bhd25PcHRpb25zIH0gPSBvcHRpb25zID8/IHt9O1xuICBjb25zb2xlLmluZm8oYW5zaXMuZ3JlZW4oYCQgJHtjb21tYW5kfSAke2FyZ3N9YCkpO1xuICBjb25zb2xlLmluZm8oJ3N0ZG91dDogLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gIGNvbnN0IHJldCA9IGF3YWl0IHNwYXduQXN5bmMoY29tbWFuZCwgYXJncywgc3Bhd25PcHRpb25zKTtcbiAgY29uc3Qgc3RkZXJyID0gcmV0LnN0ZGVyci50cmltKCk7XG4gIGlmIChzdGRlcnIpIHtcbiAgICBjb25zb2xlLmluZm8oJ3N0ZGVycjogLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgY29uc29sZS5pbmZvKGFuc2lzLnllbGxvdyhzdGRlcnIpKTtcbiAgfVxuICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gIGNvbnNvbGUuaW5mbyhhbnNpcy5tYWdlbnRhKGBFeGl0IGNvZGU6ICR7cmV0LnN0YXR1c31cXG5gKSk7XG4gIGlmICghaWdub3JlRXhpdFN0YXR1cyAmJiByZXQuc3RhdHVzICE9PSAwICYmIHJldC5zdGF0dXMgIT09IG51bGwpIHtcbiAgICBwcm9jZXNzLmV4aXQocmV0LnN0YXR1cyk7XG4gIH1cbiAgcmV0dXJuIHJldC5zdGRvdXQ7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzcGF3bkFzeW5jKFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M/OiBSZWFkb25seUFycmF5PHN0cmluZz4sXG4gIG9wdGlvbnM/OiBTcGF3bk9wdGlvbnNXaXRob3V0U3RkaW9cbik6IFByb21pc2U8T21pdDxTcGF3blN5bmNSZXR1cm5zPHN0cmluZz4sICdvdXRwdXQnIHwgJ2Vycm9yJz4+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvYyA9IHNwYXduKGNvbW1hbmQsIGFyZ3MgPz8gW10sIG9wdGlvbnMpO1xuICAgICAgLy8gYHNldEVuY29kaW5nYCBpcyB1bmRlZmluZWQgaW4gQnVuXG4gICAgICBwcm9jLnN0ZG91dD8uc2V0RW5jb2Rpbmc/LigndXRmOCcpO1xuICAgICAgcHJvYy5zdGRlcnI/LnNldEVuY29kaW5nPy4oJ3V0ZjgnKTtcblxuICAgICAgbGV0IHN0ZG91dCA9ICcnO1xuICAgICAgbGV0IHN0ZGVyciA9ICcnO1xuICAgICAgcHJvYy5zdGRvdXQ/Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoZGF0YSk7XG4gICAgICAgIHN0ZG91dCArPSBkYXRhO1xuICAgICAgfSk7XG4gICAgICBwcm9jLnN0ZGVycj8ub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICBzdGRlcnIgKz0gZGF0YTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9jLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgICBwcm9jLm9uKCdjbG9zZScsIChjb2RlOiBudW1iZXIgfCBudWxsLCBzaWduYWw6IE5vZGVKUy5TaWduYWxzIHwgbnVsbCkgPT4ge1xuICAgICAgICBpZiAocHJvYy5waWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1Byb2Nlc3MgaGFzIG5vIHBpZC4nKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICBwaWQ6IHByb2MucGlkLFxuICAgICAgICAgICAgc3Rkb3V0LFxuICAgICAgICAgICAgc3RkZXJyLFxuICAgICAgICAgICAgc3RhdHVzOiBjb2RlLFxuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItcHJvbWlzZS1yZWplY3QtZXJyb3JzXG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQgZnMgZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQgWUFNTCBmcm9tICd5YW1sJztcbmltcG9ydCB7IGNhbGxMbG1BcGksIGdldEFwaVVybEFuZEtleSB9IGZyb20gJy4vbGxtJztcbmltcG9ydCB0eXBlIHsgUmVhc29uaW5nRWZmb3J0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBwYXJzZUNvbW1hbmRMaW5lQXJncyB9IGZyb20gJy4vdXRpbHMnO1xuXG5pbXBvcnQgeyBERUZBVUxUX1JFUE9NSVhfRVhUUkFfQVJHUyB9IGZyb20gJy4vZGVmYXVsdE9wdGlvbnMnO1xuaW1wb3J0IHsgcnVuQ29tbWFuZCB9IGZyb20gJy4vc3Bhd24nO1xuXG5jb25zdCBSRVBPTUlYX0ZJTEVfTkFNRSA9ICdyZXBvbWl4LnJlc3VsdCc7XG5cbmV4cG9ydCB0eXBlIFJlc29sdXRpb25QbGFuID0ge1xuICBwbGFuPzogc3RyaW5nO1xuICBmaWxlUGF0aHM6IHN0cmluZ1tdO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBsYW5Db2RlQ2hhbmdlcyhcbiAgbW9kZWw6IHN0cmluZyxcbiAgaXNzdWVDb250ZW50OiBzdHJpbmcsXG4gIGRldGFpbGVkUGxhbjogYm9vbGVhbixcbiAgcmVhc29uaW5nRWZmb3J0PzogUmVhc29uaW5nRWZmb3J0LFxuICByZXBvbWl4RXh0cmFBcmdzPzogc3RyaW5nXG4pOiBQcm9taXNlPFJlc29sdXRpb25QbGFuPiB7XG4gIGNvbnN0IHsgdXJsLCBhcGlLZXkgfSA9IGdldEFwaVVybEFuZEtleShtb2RlbCk7XG5cbiAgLy8gQmFzZSByZXBvbWl4IGNvbW1hbmQgYXJndW1lbnRzXG4gIGNvbnN0IHJlcG9taXhBcmdzID0gWyctLXllcycsICdyZXBvbWl4QGxhdGVzdCcsICctLW91dHB1dCcsIFJFUE9NSVhfRklMRV9OQU1FXTtcbiAgcmVwb21peEFyZ3MucHVzaCguLi5wYXJzZUNvbW1hbmRMaW5lQXJncyhyZXBvbWl4RXh0cmFBcmdzIHx8IERFRkFVTFRfUkVQT01JWF9FWFRSQV9BUkdTKSk7XG5cbiAgYXdhaXQgcnVuQ29tbWFuZCgnbnB4JywgcmVwb21peEFyZ3MpO1xuICBjb25zdCBjb250ZXh0ID0gZnMucmVhZEZpbGVTeW5jKFJFUE9NSVhfRklMRV9OQU1FLCAndXRmOCcpO1xuICB2b2lkIGZzLnByb21pc2VzLnJtKFJFUE9NSVhfRklMRV9OQU1FLCB7IGZvcmNlOiB0cnVlIH0pO1xuXG4gIGNvbnN0IHBsYW5uaW5nVGFzayA9IGRldGFpbGVkUGxhblxuICAgID8gYFxuLSBJZGVudGlmeSB0aGUgZmlsZXMgZnJvbSB0aGUgcHJvdmlkZWQgbGlzdCB0aGF0IHdpbGwgbmVlZCB0byBiZSBtb2RpZmllZCB0byBpbXBsZW1lbnQgdGhlIHBsYW4gYW5kIHJlc29sdmUgdGhlIGlzc3VlLmBcbiAgICA6ICcnO1xuICBjb25zdCBwbGFuRm9ybWF0ID0gZGV0YWlsZWRQbGFuXG4gICAgPyBgIyBQbGFuIHRvIFJlc29sdmUgdGhlIElzc3VlXG5cbjEuIDxEZXNjcmlwdGlvbiBvZiBzdGVwIDE+XG4yLiA8RGVzY3JpcHRpb24gb2Ygc3RlcCAyPlxuMy4gLi4uXG5cbmBcbiAgICA6ICcnO1xuXG4gIGNvbnN0IHByb21wdCA9IGBcblJldmlldyB0aGUgZm9sbG93aW5nIEdpdEh1YiBpc3N1ZSBhbmQgdGhlIGZvbGxvd2luZyBsaXN0IG9mIGF2YWlsYWJsZSBmaWxlIHBhdGhzIGFuZCB0aGVpciBjb250ZW50cy5cbkJhc2VkIG9uIHRoaXMgaW5mb3JtYXRpb24sIHBsZWFzZSBwZXJmb3JtIHRoZSBmb2xsb3dpbmcgdGFza3M6XG5cbi0gQ3JlYXRlIGEgc3RlcC1ieS1zdGVwIHBsYW4gb3V0bGluaW5nIGhvdyB0byBhZGRyZXNzIHRoZSBHaXRIdWIgaXNzdWUuIFRoZSBwbGFuIG11c3QgZm9jdXMgb24gd3JpdGluZyBjb2RlIGV4Y2x1ZGluZyB0ZXN0cy5cbiR7cGxhbm5pbmdUYXNrfVxuXG5HaXRIdWIgSXNzdWU6XG5cXGBcXGBcXGBcXGB5bWxcbiR7WUFNTC5zdHJpbmdpZnkoaXNzdWVDb250ZW50KS50cmltKCl9XG5cXGBcXGBcXGBcXGBcblxuQXZhaWxhYmxlIGZpbGVzOiBUaGUgdXNlciB3aWxsIHByb3ZpZGUgdGhpcyBhcyBhIHNlcGFyYXRlIG1lc3NhZ2UuXG5cblBsZWFzZSBmb3JtYXQgeW91ciByZXNwb25zZSBhcyBmb2xsb3dzOlxuXFxgXFxgXFxgXG4ke3BsYW5Gb3JtYXR9IyBGaWxlIFBhdGhzIHRvIGJlIE1vZGlmaWVkXG5cbi0gXFxgPGZpbGVQYXRoMT5cXGBcbi0gXFxgPGZpbGVQYXRoMj5cXGBcbi0gLi4uXG5cXGBcXGBcXGBcblxuRW5zdXJlIHRoYXQgdGhlIGZpbGUgcGF0aHMgYXJlIGV4YWN0bHkgYXMgcHJvdmlkZWQgaW4gdGhlIGlucHV0LlxuYC50cmltKCk7XG5cbiAgY29uc29sZS5pbmZvKGBHZW5lcmF0aW5nIHBsYW4gd2l0aCAke21vZGVsfSAocmVhc29uaW5nIGVmZm9ydDogJHtyZWFzb25pbmdFZmZvcnR9KSAuLi5gKTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWxsTGxtQXBpKFxuICAgIHVybCxcbiAgICBhcGlLZXksXG4gICAgbW9kZWwsXG4gICAgW1xuICAgICAge1xuICAgICAgICByb2xlOiAnc3lzdGVtJyxcbiAgICAgICAgY29udGVudDogcHJvbXB0LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICBjb250ZW50OiBjb250ZXh0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlYXNvbmluZ0VmZm9ydFxuICApO1xuICBjb25zb2xlLmluZm8oJ1BsYW5uaW5nIGNvbXBsZXRlIScpO1xuXG4gIGNvbnN0IHBsYW5IZWFkZXIgPSAnIyBQbGFuIHRvIFJlc29sdmUgdGhlIElzc3VlJztcbiAgY29uc3QgZmlsZXNIZWFkZXIgPSAnIyBGaWxlIFBhdGhzIHRvIGJlIE1vZGlmaWVkJztcblxuICBsZXQgcGxhbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBsZXQgZmlsZVBhdGhzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0IHBsYW5IZWFkZXJJbmRleCA9IHJlc3BvbnNlLmluZGV4T2YocGxhbkhlYWRlcik7XG4gIGNvbnN0IGZpbGVzSGVhZGVySW5kZXggPSByZXNwb25zZS5pbmRleE9mKGZpbGVzSGVhZGVyKTtcblxuICBpZiAocGxhbkhlYWRlckluZGV4ICE9PSAtMSkge1xuICAgIGNvbnN0IHBsYW5Db250ZW50U3RhcnRJbmRleCA9IHBsYW5IZWFkZXJJbmRleCArIHBsYW5IZWFkZXIubGVuZ3RoO1xuICAgIC8vIERldGVybWluZSB0aGUgZW5kIG9mIHRoZSBwbGFuIGNvbnRlbnQuIEl0J3MgZWl0aGVyIHRoZSBzdGFydCBvZiB0aGUgZmlsZXMgaGVhZGVyIG9yIGVuZCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgY29uc3QgcGxhbkNvbnRlbnRFbmRJbmRleCA9IGZpbGVzSGVhZGVySW5kZXggIT09IC0xID8gZmlsZXNIZWFkZXJJbmRleCA6IHJlc3BvbnNlLmxlbmd0aDtcbiAgICBwbGFuID0gcmVzcG9uc2Uuc2xpY2UocGxhbkNvbnRlbnRTdGFydEluZGV4LCBwbGFuQ29udGVudEVuZEluZGV4KS50cmltKCk7XG4gIH1cblxuICBpZiAoZmlsZXNIZWFkZXJJbmRleCAhPT0gLTEpIHtcbiAgICBjb25zdCBmaWxlc0NvbnRlbnRTdGFydEluZGV4ID0gZmlsZXNIZWFkZXJJbmRleCArIGZpbGVzSGVhZGVyLmxlbmd0aDtcbiAgICAvLyBUaGUgZmlsZXMgc2VjdGlvbiBnb2VzIGZyb20gYWZ0ZXIgaXRzIGhlYWRlciB0byB0aGUgZW5kIG9mIHRoZSByZXNwb25zZS5cbiAgICBjb25zdCBmaWxlc1NlY3Rpb25UZXh0ID0gcmVzcG9uc2Uuc2xpY2UoZmlsZXNDb250ZW50U3RhcnRJbmRleCkudHJpbSgpO1xuXG4gICAgY29uc3QgZmlsZVBhdGhSZWdleCA9IC9cXEItXFxzKmA/KFteYFxcbl0rKWA/L2c7XG4gICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5maWxlc1NlY3Rpb25UZXh0Lm1hdGNoQWxsKGZpbGVQYXRoUmVnZXgpXTtcbiAgICBmaWxlUGF0aHMgPSBtYXRjaGVzLm1hcCgobWF0Y2gpID0+IG1hdGNoWzFdLnRyaW0oKSk7XG4gIH1cblxuICByZXR1cm4geyBwbGFuLCBmaWxlUGF0aHMgfTtcbn1cbiIsImltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ25vZGU6Y2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgYW5zaXMgZnJvbSAnYW5zaXMnO1xuaW1wb3J0IFlBTUwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyBwbGFuQ29kZUNoYW5nZXMgfSBmcm9tICcuL3BsYW4nO1xuaW1wb3J0IHR5cGUgeyBHaXRIdWJJc3N1ZSwgUmVhc29uaW5nRWZmb3J0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBwYXJzZUNvbW1hbmRMaW5lQXJncywgc3RyaXBIdG1sQ29tbWVudHMgfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgREVGQVVMVF9BSURFUl9FWFRSQV9BUkdTIH0gZnJvbSAnLi9kZWZhdWx0T3B0aW9ucyc7XG5pbXBvcnQgeyBjb25maWd1cmVHaXRVc2VyRGV0YWlsc0lmTmVlZGVkIH0gZnJvbSAnLi9wcm9maWxlJztcbmltcG9ydCB7IHJ1bkNvbW1hbmQgfSBmcm9tICcuL3NwYXduJztcblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgbWFpbiBmdW5jdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1haW5PcHRpb25zIHtcbiAgLyoqIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGFpZGVyIGNvbW1hbmQgKi9cbiAgYWlkZXJFeHRyYUFyZ3M/OiBzdHJpbmc7XG4gIC8qKiBXaGV0aGVyIHRvIGdlbmVyYXRlIGEgZGV0YWlsZWQgcGxhbiAqL1xuICBkZXRhaWxlZFBsYW46IGJvb2xlYW47XG4gIC8qKiBSdW4gd2l0aG91dCBtYWtpbmcgYWN0dWFsIGNoYW5nZXMgKG5vIGJyYW5jaCBjcmVhdGlvbiwgbm8gUFIpICovXG4gIGRyeVJ1bjogYm9vbGVhbjtcbiAgLyoqIEdpdEh1YiBpc3N1ZSBudW1iZXIgdG8gcHJvY2VzcyAqL1xuICBpc3N1ZU51bWJlcjogbnVtYmVyO1xuICAvKiogTExNIG1vZGVsIHRvIHVzZSBmb3IgcGxhbm5pbmcgY29kZSBjaGFuZ2VzICovXG4gIHBsYW5uaW5nTW9kZWw/OiBzdHJpbmc7XG4gIC8qKiBMZXZlbCBvZiByZWFzb25pbmcgZWZmb3J0IGZvciB0aGUgTExNICovXG4gIHJlYXNvbmluZ0VmZm9ydD86IFJlYXNvbmluZ0VmZm9ydDtcbiAgLyoqIEV4dHJhIGFyZ3VtZW50cyBmb3IgcmVwb21peCB3aGVuIGdlbmVyYXRpbmcgY29udGV4dCAqL1xuICByZXBvbWl4RXh0cmFBcmdzPzogc3RyaW5nO1xufVxuXG5jb25zdCBNQVhfQU5TV0VSX0xFTkdUSCA9IDY1MDAwO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbih7XG4gIGFpZGVyRXh0cmFBcmdzLFxuICBkZXRhaWxlZFBsYW4sXG4gIGRyeVJ1bixcbiAgaXNzdWVOdW1iZXIsXG4gIHBsYW5uaW5nTW9kZWwsXG4gIHJlYXNvbmluZ0VmZm9ydCxcbiAgcmVwb21peEV4dHJhQXJncyxcbn06IE1haW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChkcnlSdW4pIHtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KCdSdW5uaW5nIGluIGRyeS1ydW4gbW9kZS4gTm8gYnJhbmNoZXMgb3IgUFJzIHdpbGwgYmUgY3JlYXRlZC4nKSk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgY29uZmlndXJlR2l0VXNlckRldGFpbHNJZk5lZWRlZCgpO1xuICB9XG5cbiAgYXdhaXQgcnVuQ29tbWFuZCgncHl0aG9uJywgWyctbScsICdwaXAnLCAnaW5zdGFsbCcsICdhaWRlci1pbnN0YWxsJ10pO1xuICBhd2FpdCBydW5Db21tYW5kKCd1dicsIFsndG9vbCcsICd1bmluc3RhbGwnLCAnYWlkZXItY2hhdCddLCB7IGlnbm9yZUV4aXRTdGF0dXM6IHRydWUgfSk7XG4gIGF3YWl0IHJ1bkNvbW1hbmQoJ2FpZGVyLWluc3RhbGwnLCBbXSk7XG4gIGF3YWl0IHJ1bkNvbW1hbmQoJ3V2JywgWyd0b29sJywgJ3J1bicsICctLWZyb20nLCAnYWlkZXItY2hhdCcsICdwaXAnLCAnaW5zdGFsbCcsICdib3RvMyddKTtcbiAgLy8gYXdhaXQgcnVuQ29tbWFuZCgnYWlkZXInLCBbJy0taW5zdGFsbC1tYWluLWJyYW5jaCcsICctLXllcy1hbHdheXMnXSk7XG5cbiAgY29uc3QgaXNzdWVSZXN1bHQgPSBhd2FpdCBydW5Db21tYW5kKCdnaCcsIFtcbiAgICAnaXNzdWUnLFxuICAgICd2aWV3JyxcbiAgICBpc3N1ZU51bWJlci50b1N0cmluZygpLFxuICAgICctLWpzb24nLFxuICAgICdhdXRob3IsdGl0bGUsYm9keSxsYWJlbHMsY29tbWVudHMnLFxuICBdKTtcbiAgY29uc3QgaXNzdWU6IEdpdEh1Yklzc3VlID0gSlNPTi5wYXJzZShpc3N1ZVJlc3VsdCk7XG5cbiAgLy8gaWYgKCFpc3N1ZS5sYWJlbHMuc29tZSgobGFiZWwpID0+IGxhYmVsLm5hbWUuaW5jbHVkZXMoJ2FpLXByJykpKSB7XG4gIC8vICAgY29uc29sZS53YXJuKGFuc2lzLnllbGxvdyhgSXNzdWUgIyR7aXNzdWVOdW1iZXJ9IGlzIG1pc3NpbmcgdGhlIHJlcXVpcmVkICdhaS1wcicgbGFiZWwuIFByb2Nlc3Npbmcgc2tpcHBlZC5gKSk7XG4gIC8vICAgcHJvY2Vzcy5leGl0KDApO1xuICAvLyB9XG5cbiAgY29uc3QgY2xlYW5lZElzc3VlQm9keSA9IHN0cmlwSHRtbENvbW1lbnRzKGlzc3VlLmJvZHkpO1xuICBjb25zdCBpc3N1ZU9iamVjdCA9IHtcbiAgICBhdXRob3I6IGlzc3VlLmF1dGhvci5sb2dpbixcbiAgICB0aXRsZTogaXNzdWUudGl0bGUsXG4gICAgZGVzY3JpcHRpb246IGNsZWFuZWRJc3N1ZUJvZHksXG4gICAgY29tbWVudHM6IGlzc3VlLmNvbW1lbnRzLm1hcCgoYykgPT4gKHtcbiAgICAgIGF1dGhvcjogYy5hdXRob3IubG9naW4sXG4gICAgICBib2R5OiBjLmJvZHksXG4gICAgfSkpLFxuICB9O1xuICBjb25zdCBpc3N1ZVRleHQgPSBZQU1MLnN0cmluZ2lmeShpc3N1ZU9iamVjdCkudHJpbSgpO1xuICBjb25zdCByZXNvbHV0aW9uUGxhbiA9XG4gICAgcGxhbm5pbmdNb2RlbCAmJiAoYXdhaXQgcGxhbkNvZGVDaGFuZ2VzKHBsYW5uaW5nTW9kZWwsIGlzc3VlVGV4dCwgZGV0YWlsZWRQbGFuLCByZWFzb25pbmdFZmZvcnQsIHJlcG9taXhFeHRyYUFyZ3MpKTtcbiAgY29uc3QgcGxhblRleHQgPVxuICAgIHJlc29sdXRpb25QbGFuICYmICdwbGFuJyBpbiByZXNvbHV0aW9uUGxhbiAmJiByZXNvbHV0aW9uUGxhbi5wbGFuXG4gICAgICA/IGBcbiMgUGxhblxuXG4ke3Jlc29sdXRpb25QbGFuLnBsYW59XG5gLnRyaW0oKVxuICAgICAgOiAnJztcbiAgY29uc3QgcHJvbXB0ID0gYFxuTW9kaWZ5IHRoZSBjb2RlIHRvIHJlc29sdmUgdGhlIGZvbGxvd2luZyBHaXRIdWIgaXNzdWU6XG5cXGBcXGBcXGBcXGB5bWxcbiR7aXNzdWVUZXh0fVxuXFxgXFxgXFxgXFxgXG5cbiR7cGxhblRleHR9XG5gLnRyaW0oKTtcbiAgY29uc29sZS5sb2coJ1Jlc29sdXRpb24gcGxhbjonLCByZXNvbHV0aW9uUGxhbik7XG5cbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblxuICBjb25zdCBicmFuY2hOYW1lID0gYGFpLXByLSR7aXNzdWVOdW1iZXJ9LSR7bm93LmdldEZ1bGxZZWFyKCl9XyR7Z2V0VHdvRGlnaXRzKG5vdy5nZXRNb250aCgpICsgMSl9JHtnZXRUd29EaWdpdHMobm93LmdldERhdGUoKSl9XyR7Z2V0VHdvRGlnaXRzKG5vdy5nZXRIb3VycygpKX0ke2dldFR3b0RpZ2l0cyhub3cuZ2V0TWludXRlcygpKX0ke2dldFR3b0RpZ2l0cyhub3cuZ2V0U2Vjb25kcygpKX1gO1xuICBpZiAoIWRyeVJ1bikge1xuICAgIGF3YWl0IHJ1bkNvbW1hbmQoJ2dpdCcsIFsnc3dpdGNoJywgJy1DJywgYnJhbmNoTmFtZV0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuaW5mbyhhbnNpcy55ZWxsb3coYFdvdWxkIGNyZWF0ZSBicmFuY2g6ICR7YnJhbmNoTmFtZX1gKSk7XG4gIH1cblxuICAvLyBCdWlsZCBhaWRlciBjb21tYW5kIGFyZ3VtZW50c1xuICBjb25zdCBhaWRlckFyZ3MgPSBbXG4gICAgJy0teWVzLWFsd2F5cycsXG4gICAgJy0tbm8tY2hlY2stdXBkYXRlJyxcbiAgICAnLS1uby1naXRpZ25vcmUnLFxuICAgICctLW5vLXNob3ctbW9kZWwtd2FybmluZ3MnLFxuICAgICctLW5vLXNob3ctcmVsZWFzZS1ub3RlcycsXG4gIF07XG4gIGFpZGVyQXJncy5wdXNoKC4uLnBhcnNlQ29tbWFuZExpbmVBcmdzKGFpZGVyRXh0cmFBcmdzIHx8IERFRkFVTFRfQUlERVJfRVhUUkFfQVJHUykpO1xuICBpZiAoZHJ5UnVuKSB7XG4gICAgYWlkZXJBcmdzLnB1c2goJy0tZHJ5LXJ1bicpO1xuICB9XG4gIGFpZGVyQXJncy5wdXNoKCctLW1lc3NhZ2UnLCBwcm9tcHQpO1xuICBpZiAocmVzb2x1dGlvblBsYW4gJiYgJ2ZpbGVQYXRocycgaW4gcmVzb2x1dGlvblBsYW4pIHtcbiAgICBhaWRlckFyZ3MucHVzaCguLi5yZXNvbHV0aW9uUGxhbi5maWxlUGF0aHMpO1xuICB9XG4gIGNvbnN0IGFpZGVyUmVzdWx0ID0gYXdhaXQgcnVuQ29tbWFuZCgnYWlkZXInLCBhaWRlckFyZ3MsIHtcbiAgICBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIEZPUkNFX0NPTE9SOiAnJyB9LFxuICB9KTtcbiAgY29uc3QgYWlkZXJBbnN3ZXIgPSBhaWRlclJlc3VsdC50cmltKCk7XG5cbiAgLy8gVHJ5IGNvbW1pdGluZyBjaGFuZ2VzIGJlY2F1c2UgYWlkZXIgbWF5IGZhaWwgdG8gY29tbWl0IGNoYW5nZXMgZHVlIHRvIHByZS1jb21taXQgaG9va3NcbiAgYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb21taXQnLCAnLW0nLCBgZml4OiBjbG9zZSAjJHtpc3N1ZU51bWJlcn1gLCAnLS1uby12ZXJpZnknXSwgeyBpZ25vcmVFeGl0U3RhdHVzOiB0cnVlIH0pO1xuICBpZiAoIWRyeVJ1bikge1xuICAgIGF3YWl0IHJ1bkNvbW1hbmQoJ2dpdCcsIFsncHVzaCcsICdvcmlnaW4nLCBicmFuY2hOYW1lLCAnLS1uby12ZXJpZnknXSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5pbmZvKGFuc2lzLnllbGxvdyhgV291bGQgcHVzaCBicmFuY2g6ICR7YnJhbmNoTmFtZX0gdG8gb3JpZ2luYCkpO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgUFIgdXNpbmcgR2l0SHViIENMSVxuICBjb25zdCBwclRpdGxlID0gZ2V0SGVhZGVyT2ZGaXJzdENvbW1pdCgpO1xuICBsZXQgcHJCb2R5ID0gYENsb3NlcyAjJHtpc3N1ZU51bWJlcn1cblxuJHtwbGFuVGV4dH1cbmA7XG4gIHByQm9keSArPSBgXG4jIEFpZGVyIExvZ1xuXG5cXGBcXGBcXGBcXGBcbiR7YWlkZXJBbnN3ZXIuc2xpY2UoMCwgTUFYX0FOU1dFUl9MRU5HVEggLSBwckJvZHkubGVuZ3RoKX1cblxcYFxcYFxcYFxcYGA7XG4gIHByQm9keSA9IHByQm9keS5yZXBsYWNlQWxsKC8oPzpcXHMqXFxuKXsyLH0vZywgJ1xcblxcbicpLnRyaW0oKTtcbiAgaWYgKCFkcnlSdW4pIHtcbiAgICBjb25zdCByZXBvTmFtZSA9IGdldEdpdFJlcG9OYW1lKCk7XG4gICAgYXdhaXQgcnVuQ29tbWFuZCgnZ2gnLCBbJ3ByJywgJ2NyZWF0ZScsICctLXRpdGxlJywgcHJUaXRsZSwgJy0tYm9keScsIHByQm9keSwgJy0tcmVwbycsIHJlcG9OYW1lXSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5pbmZvKGFuc2lzLnllbGxvdyhgV291bGQgY3JlYXRlIFBSIHdpdGggdGl0bGU6ICR7cHJUaXRsZX1gKSk7XG4gICAgY29uc29sZS5pbmZvKGFuc2lzLnllbGxvdyhgUFIgYm9keSB3b3VsZCBpbmNsdWRlIHRoZSBhaWRlciByZXNwb25zZSBhbmQgY2xvc2UgaXNzdWUgIyR7aXNzdWVOdW1iZXJ9YCkpO1xuICB9XG5cbiAgY29uc29sZS5pbmZvKGBcXG5Jc3N1ZSAjJHtpc3N1ZU51bWJlcn0gcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS5gKTtcbiAgY29uc29sZS5pbmZvKCdBV1NfUkVHSU9OX05BTUU6JywgcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTl9OQU1FKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHdvRGlnaXRzKHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5wYWRTdGFydCgyLCAnMCcpO1xufVxuXG5mdW5jdGlvbiBnZXRHaXRSZXBvTmFtZSgpOiBzdHJpbmcge1xuICBjb25zdCByZXBvVXJsUmVzdWx0ID0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoJ2dpdCcsIFsncmVtb3RlJywgJ2dldC11cmwnLCAnb3JpZ2luJ10sIHtcbiAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgIHN0ZGlvOiAncGlwZScsXG4gIH0pO1xuICBjb25zdCByZXBvVXJsID0gcmVwb1VybFJlc3VsdC5zdGRvdXQudHJpbSgpO1xuICBjb25zdCByZXBvTWF0Y2ggPSByZXBvVXJsLm1hdGNoKC9naXRodWJcXC5jb21bXFwvOl0oW1xcdy1dK1xcL1tcXHctXSspKFxcLmdpdCk/JC8pO1xuICByZXR1cm4gcmVwb01hdGNoID8gcmVwb01hdGNoWzFdIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldEhlYWRlck9mRmlyc3RDb21taXQoKTogc3RyaW5nIHtcbiAgY29uc3QgZmlyc3RDb21taXRSZXN1bHQgPSBjaGlsZF9wcm9jZXNzLnNwYXduU3luYygnZ2l0JywgWydsb2cnLCAnbWFpbi4uSEVBRCcsICctLXJldmVyc2UnLCAnLS1wcmV0dHk9JXMnXSwge1xuICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgc3RkaW86ICdwaXBlJyxcbiAgfSk7XG4gIHJldHVybiBmaXJzdENvbW1pdFJlc3VsdC5zdGRvdXQudHJpbSgpLnNwbGl0KCdcXG4nKVswXTtcbn1cbiIsImltcG9ydCBhbnNpcyBmcm9tICdhbnNpcyc7XG5pbXBvcnQgeyBydW5Db21tYW5kIH0gZnJvbSAnLi9zcGF3bic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25maWd1cmVHaXRVc2VyRGV0YWlsc0lmTmVlZGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBnaXRVc2VyTmFtZSA9IChhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ2NvbmZpZycsICd1c2VyLm5hbWUnXSwgeyBpZ25vcmVFeGl0U3RhdHVzOiB0cnVlIH0pKS50cmltKCk7XG4gIGlmICghZ2l0VXNlck5hbWUpIHtcbiAgICBjb25zb2xlLmxvZyhhbnNpcy5kaW0oJ0dpdCB1c2VyLm5hbWUgbm90IHNldC4gQXR0ZW1wdGluZyB0byBjb25maWd1cmUgZnJvbSBHaXRIdWIgcHJvZmlsZS4uLicpKTtcbiAgICBjb25zdCBnaXRodWJOYW1lT3V0cHV0ID0gKGF3YWl0IHJ1bkNvbW1hbmQoJ2doJywgWydhcGknLCAndXNlcicsICctLWpxJywgJy5uYW1lJ10pKS50cmltKCk7XG4gICAgaWYgKGdpdGh1Yk5hbWVPdXRwdXQgJiYgZ2l0aHViTmFtZU91dHB1dCAhPT0gJ251bGwnKSB7XG4gICAgICBjb25zdCBuYW1lVG9TZXQgPSBnaXRodWJOYW1lT3V0cHV0LnJlcGxhY2UoL15cInxcIiQvZywgJycpOyAvLyBSZW1vdmUgcG90ZW50aWFsIHN1cnJvdW5kaW5nIHF1b3Rlc1xuICAgICAgYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb25maWcnLCAndXNlci5uYW1lJywgbmFtZVRvU2V0XSk7XG4gICAgICBjb25zb2xlLmxvZyhhbnNpcy5ncmVlbihgU3VjY2Vzc2Z1bGx5IGNvbmZpZ3VyZWQgZ2l0IHVzZXIubmFtZSB0byBcIiR7bmFtZVRvU2V0fVwiYCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oYW5zaXMueWVsbG93KCdDb3VsZCBub3QgcmV0cmlldmUgdXNlciBuYW1lIGZyb20gR2l0SHViIHByb2ZpbGUgKGl0IG1pZ2h0IGJlIFwibnVsbFwiIG9yIG5vdCBzZXQpLicpKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBnaXRVc2VyRW1haWwgPSAoYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb25maWcnLCAndXNlci5lbWFpbCddLCB7IGlnbm9yZUV4aXRTdGF0dXM6IHRydWUgfSkpLnRyaW0oKTtcbiAgaWYgKCFnaXRVc2VyRW1haWwpIHtcbiAgICBjb25zb2xlLmxvZyhhbnNpcy5kaW0oJ0dpdCB1c2VyLmVtYWlsIG5vdCBzZXQuIEF0dGVtcHRpbmcgdG8gY29uZmlndXJlIGZyb20gR2l0SHViIHByb2ZpbGUuLi4nKSk7XG4gICAgY29uc3QgZ2l0aHViRW1haWxPdXRwdXQgPSAoYXdhaXQgcnVuQ29tbWFuZCgnZ2gnLCBbJ2FwaScsICd1c2VyJywgJy0tanEnLCAnLmVtYWlsJ10pKS50cmltKCk7XG4gICAgaWYgKGdpdGh1YkVtYWlsT3V0cHV0ICYmIGdpdGh1YkVtYWlsT3V0cHV0ICE9PSAnbnVsbCcpIHtcbiAgICAgIGNvbnN0IGVtYWlsVG9TZXQgPSBnaXRodWJFbWFpbE91dHB1dC5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKTsgLy8gUmVtb3ZlIHBvdGVudGlhbCBzdXJyb3VuZGluZyBxdW90ZXNcbiAgICAgIGF3YWl0IHJ1bkNvbW1hbmQoJ2dpdCcsIFsnY29uZmlnJywgJ3VzZXIuZW1haWwnLCBlbWFpbFRvU2V0XSk7XG4gICAgICBjb25zb2xlLmxvZyhhbnNpcy5ncmVlbihgU3VjY2Vzc2Z1bGx5IGNvbmZpZ3VyZWQgZ2l0IHVzZXIuZW1haWwgdG8gXCIke2VtYWlsVG9TZXR9XCJgKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYW5zaXMueWVsbG93KCdDb3VsZCBub3QgcmV0cmlldmUgdXNlciBlbWFpbCBmcm9tIEdpdEh1YiBwcm9maWxlIChpdCBtaWdodCBiZSBcIm51bGxcIiwgcHJpdmF0ZSwgb3Igbm90IHNldCkuJylcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiZSIsInQiLCJyIiwiZGVmaW5lUHJvcGVydHkiLCJuIiwic2V0UHJvdG90eXBlT2YiLCJsIiwiY3JlYXRlIiwibyIsImtleXMiLCJzIiwiT2JqZWN0IiwiaSIsInJvdW5kIiwiYyIsIm1heCIsImEiLCJNYXRoIiwicCIsImV4ZWMiLCJsZW5ndGgiLCJwYXJzZUludCIsInUiLCJkIiwiZyIsInNvbWUiLCJ0ZXN0IiwiZ2xvYmFsVGhpcyIsInByb2Nlc3MiLCJhcmd2IiwiZW52Iiwiam9pbiIsImZhbHNlIiwiVEVSTSIsInRydWVjb2xvciIsImFuc2kyNTYiLCJhbnNpIiwiQ09MT1JURVJNIiwiQ0kiLCJQTTJfSE9NRSIsIk5FWFRfUlVOVElNRSIsImluY2x1ZGVzIiwic3Rkb3V0IiwiaXNUVFkiLCJwbGF0Zm9ybSIsIk5PX0NPTE9SIiwid2luZG93IiwiY2hyb21lIiwiZiIsIm9wZW4iLCJjbG9zZSIsImgiLCJiIiwiTyIsIm0iLCJyYXciLCJTdHJpbmciLCJpbmRleE9mIiwic2xpY2UiLCJyZXBsYWNlIiwidyIsIkFuc2lzIiwiaXNTdXBwb3J0ZWQiLCJzdHJpcCIsImV4dGVuZCIsIngiLCJnZXQiLCJ0aGlzIiwidmFsdWUiLCJ5IiwiUiIsIiQiLCJUIiwidiIsIkMiLCJFIiwiTSIsImZnIiwiYmciLCJyZ2IiLCJiZ1JnYiIsImhleCIsImJnSGV4IiwidmlzaWJsZSIsInJlc2V0IiwiYm9sZCIsImRpbSIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJoaWRkZW4iLCJzdHJpa2V0aHJvdWdoIiwiSSIsInNwbGl0IiwibWFwIiwidG9VcHBlckNhc2UiLCJhbnNpc01vZHVsZSIsImRlZmF1bHQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwid2hpdGUiLCJncmF5IiwicmVkQnJpZ2h0IiwiZ3JlZW5CcmlnaHQiLCJ5ZWxsb3dCcmlnaHQiLCJibHVlQnJpZ2h0IiwibWFnZW50YUJyaWdodCIsImN5YW5CcmlnaHQiLCJ3aGl0ZUJyaWdodCIsImJnQmxhY2siLCJiZ1JlZCIsImJnR3JlZW4iLCJiZ1llbGxvdyIsImJnQmx1ZSIsImJnTWFnZW50YSIsImJnQ3lhbiIsImJnV2hpdGUiLCJiZ0dyYXkiLCJiZ1JlZEJyaWdodCIsImJnR3JlZW5CcmlnaHQiLCJiZ1llbGxvd0JyaWdodCIsImJnQmx1ZUJyaWdodCIsImJnTWFnZW50YUJyaWdodCIsImJnQ3lhbkJyaWdodCIsImJnV2hpdGVCcmlnaHQiLCJBTElBUyIsIlN5bWJvbCIsImZvciIsIkRPQyIsIk1BUCIsIlBBSVIiLCJTQ0FMQVIiLCJTRVEiLCJOT0RFX1RZUEUiLCJpc0FsaWFzIiwibm9kZSIsImlzRG9jdW1lbnQiLCJpc01hcCIsImlzUGFpciIsImlzU2NhbGFyIiwiaXNTZXEiLCJpc0NvbGxlY3Rpb24iLCJpc05vZGUiLCJCUkVBSyIsIlNLSVAiLCJSRU1PVkUiLCJ2aXNpdCIsInZpc2l0b3IiLCJ2aXNpdG9yXyIsImluaXRWaXNpdG9yIiwidmlzaXRfIiwiY29udGVudHMiLCJmcmVlemUiLCJrZXkiLCJwYXRoIiwiY3RybCIsImNhbGxWaXNpdG9yIiwicmVwbGFjZU5vZGUiLCJjb25jYXQiLCJpdGVtcyIsImNpIiwic3BsaWNlIiwiY2siLCJjdiIsImFzeW5jIiwidmlzaXRBc3luYyIsInZpc2l0QXN5bmNfIiwiQ29sbGVjdGlvbiIsIk5vZGUiLCJWYWx1ZSIsImFzc2lnbiIsIkFsaWFzIiwiTWFwIiwiU2NhbGFyIiwiU2VxIiwiUGFpciIsInBhcmVudCIsInB0IiwiRXJyb3IiLCJlc2NhcGVDaGFycyIsIkRpcmVjdGl2ZXMiLCJjb25zdHJ1Y3RvciIsInlhbWwiLCJ0YWdzIiwiZG9jU3RhcnQiLCJkb2NFbmQiLCJkZWZhdWx0WWFtbCIsImRlZmF1bHRUYWdzIiwiY2xvbmUiLCJjb3B5IiwiYXREb2N1bWVudCIsInJlcyIsInZlcnNpb24iLCJhdE5leHREb2N1bWVudCIsImV4cGxpY2l0IiwiYWRkIiwibGluZSIsIm9uRXJyb3IiLCJwYXJ0cyIsInRyaW0iLCJuYW1lIiwic2hpZnQiLCJoYW5kbGUiLCJwcmVmaXgiLCJ0YWdOYW1lIiwic291cmNlIiwidmVyYmF0aW0iLCJzdWZmaXgiLCJtYXRjaCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVycm9yIiwidGFnU3RyaW5nIiwidGFnIiwiZW50cmllcyIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJjaCIsInRvU3RyaW5nIiwiZG9jIiwibGluZXMiLCJ0YWdFbnRyaWVzIiwidGFnTmFtZXMiLCJfa2V5IiwidG4iLCJwdXNoIiwiYW5jaG9ySXNWYWxpZCIsImFuY2hvciIsInNhIiwiSlNPTiIsInN0cmluZ2lmeSIsImFuY2hvck5hbWVzIiwicm9vdCIsImFuY2hvcnMiLCJTZXQiLCJmaW5kTmV3QW5jaG9yIiwiZXhjbHVkZSIsImhhcyIsImFwcGx5UmV2aXZlciIsInJldml2ZXIiLCJvYmoiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJsZW4iLCJ2MCIsInYxIiwidW5kZWZpbmVkIiwiayIsImZyb20iLCJkZWxldGUiLCJzZXQiLCJjYWxsIiwidG9KUyIsImFyZyIsImN0eCIsInRvSlNPTiIsImRhdGEiLCJhbGlhc0NvdW50IiwiY291bnQiLCJvbkNyZWF0ZSIsImtlZXAiLCJOdW1iZXIiLCJOb2RlQmFzZSIsInR5cGUiLCJnZXRQcm90b3R5cGVPZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyYW5nZSIsIm1hcEFzTWFwIiwibWF4QWxpYXNDb3VudCIsIm9uQW5jaG9yIiwiVHlwZUVycm9yIiwibWFwS2V5V2FybmVkIiwidmFsdWVzIiwic3VwZXIiLCJyZXNvbHZlIiwiZm91bmQiLCJfYXJnIiwibXNnIiwiUmVmZXJlbmNlRXJyb3IiLCJnZXRBbGlhc0NvdW50IiwiX29uQ29tbWVudCIsIl9vbkNob21wS2VlcCIsInNyYyIsIm9wdGlvbnMiLCJ2ZXJpZnlBbGlhc09yZGVyIiwiaW1wbGljaXRLZXkiLCJpdGVtIiwia2MiLCJ2YyIsImlzU2NhbGFyVmFsdWUiLCJCTE9DS19GT0xERUQiLCJCTE9DS19MSVRFUkFMIiwiUExBSU4iLCJRVU9URV9ET1VCTEUiLCJRVU9URV9TSU5HTEUiLCJjcmVhdGVOb2RlIiwic2NoZW1hIiwiQm9vbGVhbiIsIkJpZ0ludCIsInZhbHVlT2YiLCJhbGlhc0R1cGxpY2F0ZU9iamVjdHMiLCJvblRhZ09iaiIsInNvdXJjZU9iamVjdHMiLCJyZWYiLCJ0YWdPYmoiLCJmaWx0ZXIiLCJmaW5kIiwiZm9ybWF0IiwiaWRlbnRpZnkiLCJmaW5kVGFnT2JqZWN0IiwiaXRlcmF0b3IiLCJub2RlQ2xhc3MiLCJjb2xsZWN0aW9uRnJvbVBhdGgiLCJpc0ludGVnZXIiLCJrZWVwVW5kZWZpbmVkIiwiaXNFbXB0eVBhdGgiLCJuZXh0IiwiZG9uZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsIml0IiwiYWRkSW4iLCJyZXN0IiwiZGVsZXRlSW4iLCJnZXRJbiIsImtlZXBTY2FsYXIiLCJoYXNBbGxOdWxsVmFsdWVzIiwiYWxsb3dTY2FsYXIiLCJldmVyeSIsImNvbW1lbnRCZWZvcmUiLCJjb21tZW50IiwiaGFzSW4iLCJzZXRJbiIsInN0cmluZ2lmeUNvbW1lbnQiLCJzdHIiLCJpbmRlbnRDb21tZW50IiwiaW5kZW50IiwibGluZUNvbW1lbnQiLCJlbmRzV2l0aCIsIkZPTERfRkxPVyIsIkZPTERfQkxPQ0siLCJGT0xEX1FVT1RFRCIsImZvbGRGbG93TGluZXMiLCJ0ZXh0IiwibW9kZSIsImluZGVudEF0U3RhcnQiLCJsaW5lV2lkdGgiLCJtaW5Db250ZW50V2lkdGgiLCJvbkZvbGQiLCJvbk92ZXJmbG93IiwiZW5kU3RlcCIsImZvbGRzIiwiZXNjYXBlZEZvbGRzIiwicHJldiIsImVuZCIsIm92ZXJmbG93IiwiZXNjU3RhcnQiLCJlc2NFbmQiLCJjb25zdW1lTW9yZUluZGVudGVkTGluZXMiLCJqIiwiZm9sZCIsInN0YXJ0IiwiZ2V0Rm9sZE9wdGlvbnMiLCJpc0Jsb2NrIiwiY29udGFpbnNEb2N1bWVudE1hcmtlciIsImRvdWJsZVF1b3RlZFN0cmluZyIsImpzb24iLCJkb3VibGVRdW90ZWRBc0pTT04iLCJtaW5NdWx0aUxpbmVMZW5ndGgiLCJkb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGgiLCJjb2RlIiwic3Vic3RyIiwic2luZ2xlUXVvdGVkU3RyaW5nIiwic2luZ2xlUXVvdGUiLCJxdW90ZWRTdHJpbmciLCJxcyIsImhhc0RvdWJsZSIsImhhc1NpbmdsZSIsImJsb2NrRW5kTmV3bGluZXMiLCJSZWdFeHAiLCJibG9ja1N0cmluZyIsIm9uQ29tbWVudCIsIm9uQ2hvbXBLZWVwIiwiYmxvY2tRdW90ZSIsImNvbW1lbnRTdHJpbmciLCJmb3JjZUJsb2NrSW5kZW50IiwibGl0ZXJhbCIsImluZGVudExlbmd0aCIsImxpbWl0Iiwic3RyTGVuIiwibGluZUxlbmd0aE92ZXJMaW1pdCIsImNob21wIiwiZW5kU3RhcnQiLCJlbmRObFBvcyIsInN0YXJ0RW5kIiwic3RhcnRXaXRoU3BhY2UiLCJzdGFydE5sUG9zIiwiaGVhZGVyIiwiZm9sZGVkVmFsdWUiLCJsaXRlcmFsRmFsbGJhY2siLCJmb2xkT3B0aW9ucyIsImJvZHkiLCJzdHJpbmdpZnlTdHJpbmciLCJpbkZsb3ciLCJzcyIsIl9zdHJpbmdpZnkiLCJfdHlwZSIsImFjdHVhbFN0cmluZyIsImluZGVudFN0ZXAiLCJjb21wYXQiLCJwbGFpblN0cmluZyIsImRlZmF1bHRLZXlUeXBlIiwiZGVmYXVsdFN0cmluZ1R5cGUiLCJjcmVhdGVTdHJpbmdpZnlDb250ZXh0Iiwib3B0IiwiZGlyZWN0aXZlcyIsImZhbHNlU3RyIiwiZmxvd0NvbGxlY3Rpb25QYWRkaW5nIiwiaW5kZW50U2VxIiwibnVsbFN0ciIsInNpbXBsZUtleXMiLCJ0cnVlU3RyIiwidG9TdHJpbmdPcHRpb25zIiwiY29sbGVjdGlvblN0eWxlIiwicmVwZWF0IiwicmVzb2x2ZWRBbGlhc2VzIiwidGVzdE1hdGNoIiwiZ2V0VGFnT2JqZWN0IiwicHJvcHMiLCJzdHJpbmdpZnlQcm9wcyIsIndhcm4iLCJsb2dMZXZlbCIsIndhcm5pbmciLCJjb25zb2xlIiwiTUVSR0VfS0VZIiwibWVyZ2UiLCJkZXNjcmlwdGlvbiIsImFkZFRvSlNNYXAiLCJhZGRNZXJnZVRvSlNNYXAiLCJtZXJnZVZhbHVlIiwic3JjTWFwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJhZGRQYWlyVG9KU01hcCIsImlzTWVyZ2VLZXkiLCJqc0tleSIsInN0cmluZ0tleSIsInN0ckN0eCIsImluU3RyaW5naWZ5S2V5Iiwic3RyS2V5IiwianNvblN0ciIsInN0cmluZ2lmeUtleSIsImpzVmFsdWUiLCJjcmVhdGVQYWlyIiwiXyIsImFsbE51bGxWYWx1ZXMiLCJrZXlDb21tZW50IiwiZXhwbGljaXRLZXkiLCJ2c2IiLCJ2Y2IiLCJ2YWx1ZUNvbW1lbnQiLCJrZXlDb21tZW50RG9uZSIsImNob21wS2VlcCIsInNwYWNlQmVmb3JlIiwiZmxvdyIsInZhbHVlQ29tbWVudERvbmUiLCJ2YWx1ZVN0ciIsIndzIiwidnMwIiwibmwwIiwiaGFzTmV3bGluZSIsImhhc1Byb3BzTGluZSIsInNwMCIsInN0cmluZ2lmeVBhaXIiLCJzdHJpbmdpZnlDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsInN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uIiwic3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uIiwiYmxvY2tJdGVtUHJlZml4IiwiZmxvd0NoYXJzIiwiaXRlbUluZGVudCIsIml0ZW1DdHgiLCJhZGRDb21tZW50QmVmb3JlIiwiaWsiLCJmY1BhZGRpbmciLCJyZXFOZXdsaW5lIiwibGluZXNBdFZhbHVlIiwiaXYiLCJyZWR1Y2UiLCJzdW0iLCJpYyIsInRyaW1TdGFydCIsImZpbmRQYWlyIiwiWUFNTE1hcCIsInJlcGxhY2VyIiwic29ydE1hcEVudHJpZXMiLCJzb3J0IiwicGFpciIsIm92ZXJ3cml0ZSIsIl9wYWlyIiwic29ydEVudHJpZXMiLCJmaW5kSW5kZXgiLCJUeXBlIiwiWUFNTFNlcSIsImlkeCIsImFzSXRlbUluZGV4Iiwic2VxIiwic3RyaW5nIiwibnVsbFRhZyIsImJvb2xUYWciLCJzdHJpbmdpZnlOdW1iZXIiLCJtaW5GcmFjdGlvbkRpZ2l0cyIsIm51bSIsImlzRmluaXRlIiwiaXNOYU4iLCJmbG9hdE5hTiIsInRvTG93ZXJDYXNlIiwiTmFOIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsImZsb2F0RXhwIiwicGFyc2VGbG9hdCIsInRvRXhwb25lbnRpYWwiLCJmbG9hdCIsImRvdCIsImludElkZW50aWZ5IiwiaW50UmVzb2x2ZSIsIm9mZnNldCIsInJhZGl4IiwiaW50QXNCaWdJbnQiLCJpbnRTdHJpbmdpZnkiLCJpbnRPY3QiLCJfb25FcnJvciIsImludCIsImludEhleCIsInN0cmluZ2lmeUpTT04iLCJiaW5hcnkiLCJVaW50OEFycmF5IiwiYXRvYiIsImJ1ZmZlciIsImNoYXJDb2RlQXQiLCJidWYiLCJidG9hIiwiZnJvbUNoYXJDb2RlIiwiY2VpbCIsInJlc29sdmVQYWlycyIsImNuIiwiY3JlYXRlUGFpcnMiLCJpdGVyYWJsZSIsInBhaXJzIiwiWUFNTE9NYXAiLCJiaW5kIiwib21hcCIsInNlZW5LZXlzIiwiYm9vbFN0cmluZ2lmeSIsInRydWVUYWciLCJmYWxzZVRhZyIsInNpZ24iLCJpbnRCaW4iLCJZQU1MU2V0Iiwia2VlcFBhaXIiLCJwYXJzZVNleGFnZXNpbWFsIiwiYXNCaWdJbnQiLCJzdHJpbmdpZnlTZXhhZ2VzaW1hbCIsIl82MCIsInVuc2hpZnQiLCJwYWRTdGFydCIsImludFRpbWUiLCJmbG9hdFRpbWUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2VjIiwiZGF0ZSIsIlVUQyIsInR6IiwiYWJzIiwidG9JU09TdHJpbmciLCJzY2hlbWFzIiwic2NoZW1hJDEiLCJzY2hlbWEkMiIsInRhZ3NCeU5hbWUiLCJib29sIiwibnVsbCIsImNvcmVLbm93blRhZ3MiLCJnZXRUYWdzIiwiY3VzdG9tVGFncyIsInNjaGVtYU5hbWUiLCJhZGRNZXJnZVRhZyIsInNjaGVtYVRhZ3MiLCJzb3J0TWFwRW50cmllc0J5S2V5IiwiU2NoZW1hIiwicmVzb2x2ZUtub3duVGFncyIsInRvU3RyaW5nRGVmYXVsdHMiLCJrbm93blRhZ3MiLCJEb2N1bWVudCIsImVycm9ycyIsIndhcm5pbmdzIiwiX3JlcGxhY2VyIiwia2VlcFNvdXJjZVRva2VucyIsInByZXR0eUVycm9ycyIsInN0cmljdCIsInN0cmluZ0tleXMiLCJ1bmlxdWVLZXlzIiwiX2RpcmVjdGl2ZXMiLCJzZXRTY2hlbWEiLCJhc3NlcnRDb2xsZWN0aW9uIiwiY3JlYXRlQWxpYXMiLCJrZXlUb1N0ciIsImFzU3RyIiwiYW5jaG9yUHJlZml4Iiwic2V0QW5jaG9ycyIsImFsaWFzT2JqZWN0cyIsInByZXZBbmNob3JzIiwiY3JlYXRlTm9kZUFuY2hvcnMiLCJzdiIsImpzb25BcmciLCJoYXNEaXJlY3RpdmVzIiwiZGlyIiwiY3MiLCJjb250ZW50Q29tbWVudCIsImRjIiwic3RyaW5naWZ5RG9jdW1lbnQiLCJZQU1MRXJyb3IiLCJwb3MiLCJtZXNzYWdlIiwiWUFNTFBhcnNlRXJyb3IiLCJZQU1MV2FybmluZyIsInByZXR0aWZ5RXJyb3IiLCJsYyIsImxpbmVQb3MiLCJjb2wiLCJsaW5lU3RyIiwibGluZVN0YXJ0cyIsIm1pbiIsInBvaW50ZXIiLCJyZXNvbHZlUHJvcHMiLCJ0b2tlbnMiLCJpbmRpY2F0b3IiLCJwYXJlbnRJbmRlbnQiLCJzdGFydE9uTmV3bGluZSIsImF0TmV3bGluZSIsImhhc1NwYWNlIiwiY29tbWVudFNlcCIsInJlcVNwYWNlIiwidGFiIiwibmV3bGluZUFmdGVyUHJvcCIsImNvbW1hIiwidG9rZW4iLCJjYiIsImxhc3QiLCJjb250YWluc05ld2xpbmUiLCJzdCIsInNlcCIsImZsb3dJbmRlbnRDaGVjayIsImZjIiwibWFwSW5jbHVkZXMiLCJzZWFyY2giLCJpc0VxdWFsIiwic3RhcnRDb2xNc2ciLCJyZXNvbHZlRW5kIiwiYmxvY2tNc2ciLCJyZXNvbHZlQ29sbGVjdGlvbiIsIkNOIiwiY29sbCIsImNvbXBvc2VOb2RlIiwiY29tcG9zZUVtcHR5Tm9kZSIsImJtIiwiYXRSb290IiwiY29tbWVudEVuZCIsImNvbGxJdGVtIiwia2V5UHJvcHMiLCJhdEtleSIsImtleVN0YXJ0Iiwia2V5Tm9kZSIsInZhbHVlUHJvcHMiLCJ2YWx1ZU5vZGUiLCJzcmNUb2tlbiIsInJlc29sdmVCbG9ja01hcCIsImJzIiwicmVzb2x2ZUJsb2NrU2VxIiwiZmNOYW1lIiwicHJldkl0ZW1Db21tZW50IiwibG9vcCIsImVuZFJhbmdlIiwiZXhwZWN0ZWRFbmQiLCJjZSIsImVlIiwiY2VQb3MiLCJyZXNvbHZlRmxvd0NvbGxlY3Rpb24iLCJDb2xsIiwicmVzb2x2ZUJsb2NrU2NhbGFyIiwic2NhbGFyIiwidHMiLCJwYXJzZUJsb2NrU2NhbGFySGVhZGVyIiwiZmlyc3QiLCJzcGxpdExpbmVzIiwiY2hvbXBTdGFydCIsImNvbnRlbnQiLCJ0cmltSW5kZW50IiwiY29udGVudFN0YXJ0IiwicHJldk1vcmVJbmRlbnRlZCIsImNybGYiLCJyZXNvbHZlRmxvd1NjYWxhciIsInJlbCIsImJhZENoYXIiLCJmb2xkTGluZXMiLCJwbGFpblZhbHVlIiwic2luZ2xlUXVvdGVkVmFsdWUiLCJmb2xkTmV3bGluZSIsImNjIiwiZXNjYXBlQ29kZXMiLCJVIiwicGFyc2VDaGFyQ29kZSIsIndzU3RhcnQiLCJkb3VibGVRdW90ZWRWYWx1ZSIsInZhbHVlRW5kIiwicmUiLCJsYXN0SW5kZXgiLCJOIiwiTCIsIlAiLCJmcm9tQ29kZVBvaW50IiwiY29tcG9zZVNjYWxhciIsInRhZ1Rva2VuIiwibWF0Y2hXaXRoVGVzdCIsImt0IiwiZmluZFNjYWxhclRhZ0J5TmFtZSIsImZpbmRTY2FsYXJUYWdCeVRlc3QiLCJlbXB0eVNjYWxhclBvc2l0aW9uIiwiYmVmb3JlIiwiaXNTcmNUb2tlbiIsImFsaWFzIiwiY29tcG9zZUFsaWFzIiwibmwiLCJsYXN0UHJvcCIsImV4cFR5cGUiLCJjb21wb3NlQ29sbGVjdGlvbiIsImdldEVycm9yUG9zIiwicGFyc2VQcmVsdWRlIiwicHJlbHVkZSIsImF0Q29tbWVudCIsImFmdGVyRW1wdHlMaW5lIiwiQ29tcG9zZXIiLCJhdERpcmVjdGl2ZXMiLCJkZWNvcmF0ZSIsImFmdGVyRG9jIiwiYXBwbHkiLCJzdHJlYW1JbmZvIiwiY29tcG9zZSIsImZvcmNlRG9jIiwiZW5kT2Zmc2V0Iiwib3B0cyIsImNvbnRlbnRFbmQiLCJjb21wb3NlRG9jIiwiYWRkRW5kdG9CbG9ja1Byb3BzIiwic2V0Rmxvd1NjYWxhclZhbHVlIiwib2EiLCJ0b2siLCJzdHJpbmdpZnlUb2tlbiIsInN0cmluZ2lmeUl0ZW0iLCJjc3QiLCJfdmlzaXQiLCJmaWVsZCIsIml0ZW1BdFBhdGgiLCJpbmRleCIsInBhcmVudENvbGxlY3Rpb24iLCJCT00iLCJET0NVTUVOVCIsIkZMT1dfRU5EIiwidG9rZW5UeXBlIiwiY29udGV4dCIsImhlIiwiaGVhZCIsImFmdGVyS2V5Iiwic2V0QmxvY2tTY2FsYXJWYWx1ZSIsImlzRW1wdHkiLCJoZXhEaWdpdHMiLCJ0YWdDaGFycyIsImZsb3dJbmRpY2F0b3JDaGFycyIsImludmFsaWRBbmNob3JDaGFycyIsImlzTm90QW5jaG9yQ2hhciIsIkxleGVyIiwiYXRFbmQiLCJibG9ja1NjYWxhckluZGVudCIsImJsb2NrU2NhbGFyS2VlcCIsImZsb3dLZXkiLCJmbG93TGV2ZWwiLCJpbmRlbnROZXh0IiwiaW5kZW50VmFsdWUiLCJsaW5lRW5kUG9zIiwibGV4IiwiaW5jb21wbGV0ZSIsImhhc0NoYXJzIiwicGFyc2VOZXh0IiwiYXRMaW5lRW5kIiwiY2hhckF0IiwiY29udGludWVTY2FsYXIiLCJkdCIsImdldExpbmUiLCJzZXROZXh0Iiwic3RhdGUiLCJwZWVrIiwicGFyc2VTdHJlYW0iLCJwYXJzZUxpbmVTdGFydCIsInBhcnNlQmxvY2tTdGFydCIsInBhcnNlRG9jdW1lbnQiLCJwYXJzZUZsb3dDb2xsZWN0aW9uIiwicGFyc2VRdW90ZWRTY2FsYXIiLCJwYXJzZUJsb2NrU2NhbGFyIiwicGFyc2VQbGFpblNjYWxhciIsInB1c2hDb3VudCIsImRpckVuZCIsInB1c2hTcGFjZXMiLCJwdXNoTmV3bGluZSIsInNwIiwiY2gwIiwiY2gxIiwicHVzaEluZGljYXRvcnMiLCJwdXNoVW50aWwiLCJxdW90ZSIsInFiIiwicHVzaFRvSW5kZXgiLCJsYXN0Q2hhciIsImFsbG93RW1wdHkiLCJwdXNoVGFnIiwiYWxsb3dUYWJzIiwiTGluZUNvdW50ZXIiLCJhZGROZXdMaW5lIiwibG93IiwiaGlnaCIsIm1pZCIsImluY2x1ZGVzVG9rZW4iLCJsaXN0IiwiZmluZE5vbkVtcHR5SW5kZXgiLCJpc0Zsb3dUb2tlbiIsImdldFByZXZQcm9wcyIsImdldEZpcnN0S2V5U3RhcnRQcm9wcyIsImZpeEZsb3dTZXFJdGVtcyIsIlBhcnNlciIsIm9uTmV3TGluZSIsImF0TmV3TGluZSIsImF0U2NhbGFyIiwib25LZXlMaW5lIiwic3RhY2siLCJsZXhlciIsInBhcnNlIiwibGV4ZW1lIiwic3RlcCIsInBvcCIsInNvdXJjZVRva2VuIiwidG9wIiwic3RyZWFtIiwiZG9jdW1lbnQiLCJibG9ja1NjYWxhciIsImJsb2NrTWFwIiwiYmxvY2tTZXF1ZW5jZSIsImZsb3dDb2xsZWN0aW9uIiwiZG9jdW1lbnRFbmQiLCJsaW5lRW5kIiwiYnYiLCJzdGFydEJsb2NrVmFsdWUiLCJhdEluZGVudGVkQ29tbWVudCIsImF0TWFwSW5kZW50IiwiYXROZXh0SXRlbSIsImZzIiwiZmxvd1NjYWxhciIsInBhcnNlT3B0aW9ucyIsImxpbmVDb3VudGVyIiwicGFyc2VyIiwiY29tcG9zZXIiLCJfZG9jIiwiZm9yRWFjaCIsIl9yZXZpdmVyIiwiZG9jcyIsImVtcHR5IiwiT1BFTkFJX01PREVMX1BSRUZJWEVTIiwicGFyc2VDb21tYW5kTGluZUFyZ3MiLCJhcmdzU3RyaW5nIiwicmVzdWx0IiwiY3VycmVudCIsImluRG91YmxlUXVvdGUiLCJpblNpbmdsZVF1b3RlIiwiY2hhciIsIkRFRkFVTFRfQUlERVJfRVhUUkFfQVJHUyIsIkRFRkFVTFRfUkVQT01JWF9FWFRSQV9BUkdTIiwicnVuQ29tbWFuZCIsImNvbW1hbmQiLCJhcmdzIiwiaWdub3JlRXhpdFN0YXR1cyIsInNwYXduT3B0aW9ucyIsImluZm8iLCJhbnNpcyIsInJldCIsIlByb21pc2UiLCJyZWplY3QiLCJwcm9jIiwic3Bhd24iLCJzZXRFbmNvZGluZyIsInN0ZGVyciIsIm9uIiwid3JpdGUiLCJzaWduYWwiLCJwaWQiLCJzdGF0dXMiLCJzcGF3bkFzeW5jIiwiZXhpdCIsIlJFUE9NSVhfRklMRV9OQU1FIiwicGxhbkNvZGVDaGFuZ2VzIiwibW9kZWwiLCJpc3N1ZUNvbnRlbnQiLCJkZXRhaWxlZFBsYW4iLCJyZWFzb25pbmdFZmZvcnQiLCJyZXBvbWl4RXh0cmFBcmdzIiwidXJsIiwiYXBpS2V5IiwiR0VNSU5JX0FQSV9LRVkiLCJPUEVOQUlfQVBJX0tFWSIsImdldEFwaVVybEFuZEtleSIsInJlcG9taXhBcmdzIiwicmVhZEZpbGVTeW5jIiwicHJvbWlzZXMiLCJybSIsImZvcmNlIiwicGxhbkZvcm1hdCIsInByb21wdCIsIllBTUwiLCJyZXNwb25zZSIsIm1lc3NhZ2VzIiwicmVxdWVzdEJvZHkiLCJyZWFzb25pbmdfZWZmb3J0IiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsIm9rIiwiZXJyb3JUZXh0Iiwic3RhdHVzVGV4dCIsImNob2ljZXMiLCJjYWxsTGxtQXBpIiwicm9sZSIsInBsYW5IZWFkZXIiLCJmaWxlc0hlYWRlciIsInBsYW4iLCJmaWxlUGF0aHMiLCJwbGFuSGVhZGVySW5kZXgiLCJmaWxlc0hlYWRlckluZGV4IiwicGxhbkNvbnRlbnRTdGFydEluZGV4IiwicGxhbkNvbnRlbnRFbmRJbmRleCIsImZpbGVzQ29udGVudFN0YXJ0SW5kZXgiLCJmaWxlUGF0aFJlZ2V4IiwibWF0Y2hBbGwiLCJtYWluIiwiYWlkZXJFeHRyYUFyZ3MiLCJkcnlSdW4iLCJpc3N1ZU51bWJlciIsInBsYW5uaW5nTW9kZWwiLCJnaXRodWJOYW1lT3V0cHV0IiwibmFtZVRvU2V0IiwiZ2l0aHViRW1haWxPdXRwdXQiLCJlbWFpbFRvU2V0IiwiY29uZmlndXJlR2l0VXNlckRldGFpbHNJZk5lZWRlZCIsImlzc3VlUmVzdWx0IiwiaXNzdWUiLCJjbGVhbmVkSXNzdWVCb2R5IiwiaXNzdWVPYmplY3QiLCJhdXRob3IiLCJsb2dpbiIsInRpdGxlIiwiY29tbWVudHMiLCJpc3N1ZVRleHQiLCJyZXNvbHV0aW9uUGxhbiIsInBsYW5UZXh0Iiwibm93IiwiYnJhbmNoTmFtZSIsImdldEZ1bGxZZWFyIiwiZ2V0VHdvRGlnaXRzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImFpZGVyQXJncyIsImFpZGVyQW5zd2VyIiwiRk9SQ0VfQ09MT1IiLCJwclRpdGxlIiwiY2hpbGRfcHJvY2VzcyIsInNwYXduU3luYyIsImVuY29kaW5nIiwic3RkaW8iLCJwckJvZHkiLCJyZXBsYWNlQWxsIiwicmVwb05hbWUiLCJyZXBvVXJsUmVzdWx0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WSxnQkFNekQsTUFBTVcsRUF1Q29CQyxFQUFjQyxVQUFVLE1BQU8sQ0FBQyxNQUFPLGFBQWMsWUFBYSxlQUFnQixDQUMxR0MsU0FBVSxPQUNWQyxNQUFPLFNBRWdCOTdCLE9BQU9rSyxPQUFPL0csTUFBTSxNQUFNLEdBMUNuRCxJQUFJNDRCLEVBQVMsV0FBV25DLFFBRXhCaUIsTUFTQSxHQVBBa0IsR0FBVSw4QkFJVlAsRUFBWXg2QixNQUFNLEVBcEhNLEtBb0hpQis2QixFQUFPcjlCLG9CQUVoRHE5QixFQUFTQSxFQUFPQyxXQUFXLGlCQUFrQixRQUFROXhCLE9BQ2hEeXZCLEVBSUg5Z0IsUUFBUStjLEtBQUtDLEVBQU1seUIsT0FBTywrQkFBK0IrM0IsTUFDekQ3aUIsUUFBUStjLEtBQUtDLEVBQU1seUIsT0FBTyw2REFBNkRpMkIsVUFMNUUsQ0FDWCxNQUFNcUMsRUFlVixXQUNFLE1BQU1DLEVBQWdCUCxFQUFjQyxVQUFVLE1BQU8sQ0FBQyxTQUFVLFVBQVcsVUFBVyxDQUNwRkMsU0FBVSxPQUNWQyxNQUFPLFNBR0hLLEVBRFVELEVBQWNsOEIsT0FBT2tLLE9BQ1hTLE1BQU0sNkNBQ2hDLE9BQU93eEIsRUFBWUEsRUFBVSxHQUFLLEVBQ3BDLENBdkJxQkMsU0FDWDdHLEdBQVcsS0FBTSxDQUFDLEtBQU0sU0FBVSxVQUFXbUcsRUFBUyxTQUFVSyxFQUFRLFNBQVVFLEdBQzFGLENBS0FwakIsUUFBUStjLEtBQUssWUFBWWdFLDZCQUN6Qi9nQixRQUFRK2MsS0FBSyxtQkFBb0IxMkIsUUFBUUUsSUFBSWk5QixnQkFDL0MsQ0FFQSxTQUFTcEIsR0FBYXY1QixHQUNwQixPQUFPWixPQUFPWSxHQUFPd2YsU0FBUyxFQUFHLElBQ25DIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzJdfQ==
