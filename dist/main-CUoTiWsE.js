import e,{spawn as t}from"node:child_process";import n from"node:fs";var s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var o,r={exports:{}};function a(){if(o)return r.exports;o=1;let e,t,n,{defineProperty:s,setPrototypeOf:i,create:a,keys:c}=Object,l="",{round:u,max:f}=Math,h=e=>{let t=/([a-f\d]{3,6})/i.exec(e)?.[1],n=t?.length,s=parseInt(6^n?3^n?"0":t[0]+t[0]+t[1]+t[1]+t[2]+t[2]:t,16);return[s>>16&255,s>>8&255,255&s]},d=(e,t,n)=>e^t||t^n?16+36*u(e/51)+6*u(t/51)+u(n/51):8>e?16:e>248?231:u(24*(e-8)/247)+232,p=e=>{let t,n,s,i,o;return 8>e?30+e:16>e?e-8+90:(232>e?(o=(e-=16)%36,t=(e/36|0)/5,n=(o/6|0)/5,s=o%6/5):t=n=s=(10*(e-232)+8)/255,i=2*f(t,n,s),i?30+(u(s)<<2|u(n)<<1|u(t))+(2^i?0:60):30)},m=(()=>{let n=e=>o.some((t=>e.test(t))),s=globalThis,i=s.process??{},o=i.argv??[],r=i.env??{},a=-1;try{e=","+c(r).join(",")}catch(e){r={},a=0}let l="FORCE_COLOR",u={false:0,0:0,1:1,2:2,3:3}[r[l]]??-1,f=l in r&&u||n(/^--color=?(true|always)?$/);return f&&(a=u),~a||(a=((n,s,i)=>(t=n.TERM,{"24bit":3,truecolor:3,ansi256:2,ansi:1}[n.COLORTERM]||(n.CI?/,GITHUB/.test(e)?3:1:s&&"dumb"!==t?i?3:/-256/.test(t)?2:1:0)))(r,!!r.PM2_HOME||r.NEXT_RUNTIME?.includes("edge")||!!i.stdout?.isTTY,"win32"===i.platform)),!u||r.NO_COLOR||n(/^--(no-color|color=(false|never))$/)?0:s.window?.chrome||f&&!a?3:a})(),g={open:l,close:l},y=39,b=49,w={},k=({p:e},{open:t,close:s})=>{let o=(e,...n)=>{if(!e){if(t&&t===s)return t;if((e??l)===l)return l}let i,r=e.raw?String.raw({raw:e},...n):l+e,a=o.p,c=a.o,u=a.c;if(r.includes(""))for(;a;a=a.p){let{open:e,close:t}=a,n=t.length,s=l,o=0;if(n)for(;~(i=r.indexOf(t,o));o=i+n)s+=r.slice(o,i)+e;r=s+r.slice(o)}return c+(r.includes("\n")?r.replace(/(\r?\n)/g,u+"$1"+c):r)+u},r=t,a=s;return e&&(r=e.o+t,a=s+e.c),i(o,n),o.p={open:t,close:s,o:r,c:a,p:e},o.open=r,o.close=a,o};const v=function(e=m){let t={Ansis:v,isSupported:()=>o,strip:e=>e.replace(/[Â›][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,l),extend(e){for(let t in e){let n=e[t],i=(typeof n)[0],o="s"===i?E(...h(n)):n;w[t]="f"===i?{get(){return(...e)=>k(this,n(...e))}}:{get(){let e=k(this,o);return s(this,t,{value:e}),e}}}return n=a({},w),i(t,n),t}},o=e>0,r=(e,t)=>o?{open:`[${e}m`,close:`[${t}m`}:g,c=e=>t=>e(...h(t)),u=(e,t)=>(n,s,i)=>r(`${e}8;2;${n};${s};${i}`,t),f=(e,t)=>(n,s,i)=>r(((e,t,n)=>p(d(e,t,n)))(n,s,i)+e,t),S=e=>(t,n,s)=>e(d(t,n,s)),E=u(3,y),N=u(4,b),O=e=>r("38;5;"+e,y),A=e=>r("48;5;"+e,b);2===e?(E=S(O),N=S(A)):1===e&&(E=f(0,y),N=f(10,b),O=e=>r(p(e),y),A=e=>r(p(e)+10,b));let I,T={fg:O,bg:A,rgb:E,bgRgb:N,hex:c(E),bgHex:c(N),visible:g,reset:r(0,0),bold:r(1,22),dim:r(2,22),italic:r(3,23),underline:r(4,24),inverse:r(7,27),hidden:r(8,28),strikethrough:r(9,29)},x="Bright";return"black,red,green,yellow,blue,magenta,cyan,white,gray".split(",").map(((e,t)=>{I="bg"+e[0].toUpperCase()+e.slice(1),8>t?(T[e+x]=r(90+t,y),T[I+x]=r(100+t,b)):t=60,T[e]=r(30+t,y),T[I]=r(40+t,b)})),t.extend(T)},S=new v;return r.exports=S,S.default=S,r.exports}var c=i(a());const{Ansis:l,fg:u,bg:f,rgb:h,bgRgb:d,hex:p,bgHex:m,reset:g,inverse:y,hidden:b,visible:w,bold:k,dim:v,italic:S,underline:E,strikethrough:N,black:O,red:A,green:I,yellow:T,blue:x,magenta:$,cyan:L,white:C,gray:_,redBright:B,greenBright:M,yellowBright:K,blueBright:j,magentaBright:P,cyanBright:D,whiteBright:q,bgBlack:R,bgRed:U,bgGreen:F,bgYellow:G,bgBlue:V,bgMagenta:W,bgCyan:Y,bgWhite:J,bgGray:H,bgRedBright:Q,bgGreenBright:X,bgYellowBright:z,bgBlueBright:Z,bgMagentaBright:ee,bgCyanBright:te,bgWhiteBright:ne}=c,se=Symbol.for("yaml.alias"),ie=Symbol.for("yaml.document"),oe=Symbol.for("yaml.map"),re=Symbol.for("yaml.pair"),ae=Symbol.for("yaml.scalar"),ce=Symbol.for("yaml.seq"),le=Symbol.for("yaml.node.type"),ue=e=>!!e&&"object"==typeof e&&e[le]===se,fe=e=>!!e&&"object"==typeof e&&e[le]===ie,he=e=>!!e&&"object"==typeof e&&e[le]===oe,de=e=>!!e&&"object"==typeof e&&e[le]===re,pe=e=>!!e&&"object"==typeof e&&e[le]===ae,me=e=>!!e&&"object"==typeof e&&e[le]===ce;function ge(e){if(e&&"object"==typeof e)switch(e[le]){case oe:case ce:return!0}return!1}function ye(e){if(e&&"object"==typeof e)switch(e[le]){case se:case oe:case ae:case ce:return!0}return!1}const be=e=>(pe(e)||ge(e))&&!!e.anchor,we=Symbol("break visit"),ke=Symbol("skip children"),ve=Symbol("remove node");function Se(e,t){const n=Ae(t);if(fe(e)){Ee(null,e.contents,n,Object.freeze([e]))===ve&&(e.contents=null)}else Ee(null,e,n,Object.freeze([]))}function Ee(e,t,n,s){const i=Ie(e,t,n,s);if(ye(i)||de(i))return Te(e,s,i),Ee(e,i,n,s);if("symbol"!=typeof i)if(ge(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=Ee(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===we)return we;i===ve&&(t.items.splice(e,1),e-=1)}}}else if(de(t)){s=Object.freeze(s.concat(t));const e=Ee("key",t.key,n,s);if(e===we)return we;e===ve&&(t.key=null);const i=Ee("value",t.value,n,s);if(i===we)return we;i===ve&&(t.value=null)}return i}async function Ne(e,t){const n=Ae(t);if(fe(e)){await Oe(null,e.contents,n,Object.freeze([e]))===ve&&(e.contents=null)}else await Oe(null,e,n,Object.freeze([]))}async function Oe(e,t,n,s){const i=await Ie(e,t,n,s);if(ye(i)||de(i))return Te(e,s,i),Oe(e,i,n,s);if("symbol"!=typeof i)if(ge(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){const i=await Oe(e,t.items[e],n,s);if("number"==typeof i)e=i-1;else{if(i===we)return we;i===ve&&(t.items.splice(e,1),e-=1)}}}else if(de(t)){s=Object.freeze(s.concat(t));const e=await Oe("key",t.key,n,s);if(e===we)return we;e===ve&&(t.key=null);const i=await Oe("value",t.value,n,s);if(i===we)return we;i===ve&&(t.value=null)}return i}function Ae(e){return"object"==typeof e&&(e.Collection||e.Node||e.Value)?Object.assign({Alias:e.Node,Map:e.Node,Scalar:e.Node,Seq:e.Node},e.Value&&{Map:e.Value,Scalar:e.Value,Seq:e.Value},e.Collection&&{Map:e.Collection,Seq:e.Collection},e):e}function Ie(e,t,n,s){return"function"==typeof n?n(e,t,s):he(t)?n.Map?.(e,t,s):me(t)?n.Seq?.(e,t,s):de(t)?n.Pair?.(e,t,s):pe(t)?n.Scalar?.(e,t,s):ue(t)?n.Alias?.(e,t,s):void 0}function Te(e,t,n){const s=t[t.length-1];if(ge(s))s.items[e]=n;else if(de(s))"key"===e?s.key=n:s.value=n;else{if(!fe(s)){const e=ue(s)?"alias":"scalar";throw new Error(`Cannot replace node with ${e} parent`)}s.contents=n}}Se.BREAK=we,Se.SKIP=ke,Se.REMOVE=ve,Ne.BREAK=we,Ne.SKIP=ke,Ne.REMOVE=ve;const xe={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class $e{constructor(e,t){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},$e.defaultYaml,e),this.tags=Object.assign({},$e.defaultTags,t)}clone(){const e=new $e(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){const e=new $e(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:$e.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},$e.defaultTags)}return e}add(e,t){this.atNextDocument&&(this.yaml={explicit:$e.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},$e.defaultTags),this.atNextDocument=!1);const n=e.trim().split(/[ \t]+/),s=n.shift();switch(s){case"%TAG":{if(2!==n.length&&(t(0,"%TAG directive should contain exactly two parts"),n.length<2))return!1;const[e,s]=n;return this.tags[e]=s,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==n.length)return t(0,"%YAML directive should contain exactly one part"),!1;const[e]=n;if("1.1"===e||"1.2"===e)return this.yaml.version=e,!0;return t(6,`Unsupported YAML version ${e}`,/^\d+\.\d+$/.test(e)),!1}default:return t(0,`Unknown directive ${s}`,!0),!1}}tagName(e,t){if("!"===e)return"!";if("!"!==e[0])return t(`Not a valid tag: ${e}`),null;if("<"===e[1]){const n=e.slice(2,-1);return"!"===n||"!!"===n?(t(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(">"!==e[e.length-1]&&t("Verbatim tags must end with a >"),n)}const[,n,s]=e.match(/^(.*!)([^!]*)$/s);s||t(`The ${e} tag has no suffix`);const i=this.tags[n];if(i)try{return i+decodeURIComponent(s)}catch(e){return t(String(e)),null}return"!"===n?e:(t(`Could not resolve tag: ${e}`),null)}tagString(e){for(const[t,n]of Object.entries(this.tags))if(e.startsWith(n))return t+e.substring(n.length).replace(/[!,[\]{}]/g,(e=>xe[e]));return"!"===e[0]?e:`!<${e}>`}toString(e){const t=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],n=Object.entries(this.tags);let s;if(e&&n.length>0&&ye(e.contents)){const t={};Se(e.contents,((e,n)=>{ye(n)&&n.tag&&(t[n.tag]=!0)})),s=Object.keys(t)}else s=[];for(const[i,o]of n)"!!"===i&&"tag:yaml.org,2002:"===o||e&&!s.some((e=>e.startsWith(o)))||t.push(`%TAG ${i} ${o}`);return t.join("\n")}}function Le(e){if(/[\x00-\x19\s,[\]{}]/.test(e)){const t=JSON.stringify(e);throw new Error(`Anchor must not contain whitespace or control characters: ${t}`)}return!0}function Ce(e){const t=new Set;return Se(e,{Value(e,n){n.anchor&&t.add(n.anchor)}}),t}function _e(e,t){for(let n=1;;++n){const s=`${e}${n}`;if(!t.has(s))return s}}function Be(e,t,n,s){if(s&&"object"==typeof s)if(Array.isArray(s))for(let t=0,n=s.length;t<n;++t){const n=s[t],i=Be(e,s,String(t),n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}else if(s instanceof Map)for(const t of Array.from(s.keys())){const n=s.get(t),i=Be(e,s,t,n);void 0===i?s.delete(t):i!==n&&s.set(t,i)}else if(s instanceof Set)for(const t of Array.from(s)){const n=Be(e,s,t,t);void 0===n?s.delete(t):n!==t&&(s.delete(t),s.add(n))}else for(const[t,n]of Object.entries(s)){const i=Be(e,s,t,n);void 0===i?delete s[t]:i!==n&&(s[t]=i)}return e.call(t,n,s)}function Me(e,t,n){if(Array.isArray(e))return e.map(((e,t)=>Me(e,String(t),n)));if(e&&"function"==typeof e.toJSON){if(!n||!be(e))return e.toJSON(t,n);const s={aliasCount:0,count:1,res:void 0};n.anchors.set(e,s),n.onCreate=e=>{s.res=e,delete n.onCreate};const i=e.toJSON(t,n);return n.onCreate&&n.onCreate(i),i}return"bigint"!=typeof e||n?.keep?e:Number(e)}$e.defaultYaml={explicit:!1,version:"1.2"},$e.defaultTags={"!!":"tag:yaml.org,2002:"};class Ke{constructor(e){Object.defineProperty(this,le,{value:e})}clone(){const e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(e,{mapAsMap:t,maxAliasCount:n,onAnchor:s,reviver:i}={}){if(!fe(e))throw new TypeError("A document argument is required");const o={anchors:new Map,doc:e,keep:!0,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof n?n:100},r=Me(this,"",o);if("function"==typeof s)for(const{count:e,res:t}of o.anchors.values())s(t,e);return"function"==typeof i?Be(i,{"":r},"",r):r}}class je extends Ke{constructor(e){super(se),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(e,t){let n,s;t?.aliasResolveCache?n=t.aliasResolveCache:(n=[],Se(e,{Node:(e,t)=>{(ue(t)||be(t))&&n.push(t)}}),t&&(t.aliasResolveCache=n));for(const e of n){if(e===this)break;e.anchor===this.source&&(s=e)}return s}toJSON(e,t){if(!t)return{source:this.source};const{anchors:n,doc:s,maxAliasCount:i}=t,o=this.resolve(s,t);if(!o){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(e)}let r=n.get(o);if(r||(Me(o,null,t),r=n.get(o)),!r||void 0===r.res){throw new ReferenceError("This should not happen: Alias anchor was not resolved?")}if(i>=0&&(r.count+=1,0===r.aliasCount&&(r.aliasCount=Pe(s,o,n)),r.count*r.aliasCount>i)){throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack")}return r.res}toString(e,t,n){const s=`*${this.source}`;if(e){if(Le(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source)){const e=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(e)}if(e.implicitKey)return`${s} `}return s}}function Pe(e,t,n){if(ue(t)){const s=t.resolve(e),i=n&&s&&n.get(s);return i?i.count*i.aliasCount:0}if(ge(t)){let s=0;for(const i of t.items){const t=Pe(e,i,n);t>s&&(s=t)}return s}if(de(t)){const s=Pe(e,t.key,n),i=Pe(e,t.value,n);return Math.max(s,i)}return 1}const De=e=>!e||"function"!=typeof e&&"object"!=typeof e;class qe extends Ke{constructor(e){super(ae),this.value=e}toJSON(e,t){return t?.keep?this.value:Me(this.value,e,t)}toString(){return String(this.value)}}qe.BLOCK_FOLDED="BLOCK_FOLDED",qe.BLOCK_LITERAL="BLOCK_LITERAL",qe.PLAIN="PLAIN",qe.QUOTE_DOUBLE="QUOTE_DOUBLE",qe.QUOTE_SINGLE="QUOTE_SINGLE";function Re(e,t,n){if(fe(e)&&(e=e.contents),ye(e))return e;if(de(e)){const t=n.schema[oe].createNode?.(n.schema,null,n);return t.items.push(e),t}(e instanceof String||e instanceof Number||e instanceof Boolean||"undefined"!=typeof BigInt&&e instanceof BigInt)&&(e=e.valueOf());const{aliasDuplicateObjects:s,onAnchor:i,onTagObj:o,schema:r,sourceObjects:a}=n;let c;if(s&&e&&"object"==typeof e){if(c=a.get(e),c)return c.anchor??(c.anchor=i(e)),new je(c.anchor);c={anchor:null,node:null},a.set(e,c)}t?.startsWith("!!")&&(t="tag:yaml.org,2002:"+t.slice(2));let l=function(e,t,n){if(t){const e=n.filter((e=>e.tag===t)),s=e.find((e=>!e.format))??e[0];if(!s)throw new Error(`Tag ${t} not found`);return s}return n.find((t=>t.identify?.(e)&&!t.format))}(e,t,r.tags);if(!l){if(e&&"function"==typeof e.toJSON&&(e=e.toJSON()),!e||"object"!=typeof e){const t=new qe(e);return c&&(c.node=t),t}l=e instanceof Map?r[oe]:Symbol.iterator in Object(e)?r[ce]:r[oe]}o&&(o(l),delete n.onTagObj);const u=l?.createNode?l.createNode(n.schema,e,n):"function"==typeof l?.nodeClass?.from?l.nodeClass.from(n.schema,e,n):new qe(e);return t?u.tag=t:l.default||(u.tag=l.tag),c&&(c.node=u),u}function Ue(e,t,n){let s=n;for(let e=t.length-1;e>=0;--e){const n=t[e];if("number"==typeof n&&Number.isInteger(n)&&n>=0){const e=[];e[n]=s,s=e}else s=new Map([[n,s]])}return Re(s,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}const Fe=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class Ge extends Ke{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(e){const t=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(t.schema=e),t.items=t.items.map((t=>ye(t)||de(t)?t.clone(e):t)),this.range&&(t.range=this.range.slice()),t}addIn(e,t){if(Fe(e))this.add(t);else{const[n,...s]=e,i=this.get(n,!0);if(ge(i))i.addIn(s,t);else{if(void 0!==i||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,Ue(this.schema,s,t))}}}deleteIn(e){const[t,...n]=e;if(0===n.length)return this.delete(t);const s=this.get(t,!0);if(ge(s))return s.deleteIn(n);throw new Error(`Expected YAML collection at ${t}. Remaining path: ${n}`)}getIn(e,t){const[n,...s]=e,i=this.get(n,!0);return 0===s.length?!t&&pe(i)?i.value:i:ge(i)?i.getIn(s,t):void 0}hasAllNullValues(e){return this.items.every((t=>{if(!de(t))return!1;const n=t.value;return null==n||e&&pe(n)&&null==n.value&&!n.commentBefore&&!n.comment&&!n.tag}))}hasIn(e){const[t,...n]=e;if(0===n.length)return this.has(t);const s=this.get(t,!0);return!!ge(s)&&s.hasIn(n)}setIn(e,t){const[n,...s]=e;if(0===s.length)this.set(n,t);else{const e=this.get(n,!0);if(ge(e))e.setIn(s,t);else{if(void 0!==e||!this.schema)throw new Error(`Expected YAML collection at ${n}. Remaining path: ${s}`);this.set(n,Ue(this.schema,s,t))}}}}const Ve=e=>e.replace(/^(?!$)(?: $)?/gm,"#");function We(e,t){return/^\n+$/.test(e)?e.substring(1):t?e.replace(/^(?! *$)/gm,t):e}const Ye=(e,t,n)=>e.endsWith("\n")?We(n,t):n.includes("\n")?"\n"+We(n,t):(e.endsWith(" ")?"":" ")+n,Je="flow",He="block",Qe="quoted";function Xe(e,t,n="flow",{indentAtStart:s,lineWidth:i=80,minContentWidth:o=20,onFold:r,onOverflow:a}={}){if(!i||i<0)return e;i<o&&(o=0);const c=Math.max(1+o,1+i-t.length);if(e.length<=c)return e;const l=[],u={};let f,h,d=i-t.length;"number"==typeof s&&(s>i-Math.max(2,o)?l.push(0):d=i-s);let p=!1,m=-1,g=-1,y=-1;n===He&&(m=ze(e,m,t.length),-1!==m&&(d=m+c));for(let s;s=e[m+=1];){if(n===Qe&&"\\"===s){switch(g=m,e[m+1]){case"x":m+=3;break;case"u":m+=5;break;case"U":m+=9;break;default:m+=1}y=m}if("\n"===s)n===He&&(m=ze(e,m,t.length)),d=m+t.length+c,f=void 0;else{if(" "===s&&h&&" "!==h&&"\n"!==h&&"\t"!==h){const t=e[m+1];t&&" "!==t&&"\n"!==t&&"\t"!==t&&(f=m)}if(m>=d)if(f)l.push(f),d=f+c,f=void 0;else if(n===Qe){for(;" "===h||"\t"===h;)h=s,s=e[m+=1],p=!0;const t=m>y+1?m-2:g-1;if(u[t])return e;l.push(t),u[t]=!0,d=t+c,f=void 0}else p=!0}h=s}if(p&&a&&a(),0===l.length)return e;r&&r();let b=e.slice(0,l[0]);for(let s=0;s<l.length;++s){const i=l[s],o=l[s+1]||e.length;0===i?b=`\n${t}${e.slice(0,o)}`:(n===Qe&&u[i]&&(b+=`${e[i]}\\`),b+=`\n${t}${e.slice(i+1,o)}`)}return b}function ze(e,t,n){let s=t,i=t+1,o=e[i];for(;" "===o||"\t"===o;)if(t<i+n)o=e[++t];else{do{o=e[++t]}while(o&&"\n"!==o);s=t,i=t+1,o=e[i]}return s}const Ze=(e,t)=>({indentAtStart:t?e.indent.length:e.indentAtStart,lineWidth:e.options.lineWidth,minContentWidth:e.options.minContentWidth}),et=e=>/^(%|---|\.\.\.)/m.test(e);function tt(e,t){const n=JSON.stringify(e);if(t.options.doubleQuotedAsJSON)return n;const{implicitKey:s}=t,i=t.options.doubleQuotedMinMultiLineLength,o=t.indent||(et(e)?"  ":"");let r="",a=0;for(let e=0,t=n[e];t;t=n[++e])if(" "===t&&"\\"===n[e+1]&&"n"===n[e+2]&&(r+=n.slice(a,e)+"\\ ",e+=1,a=e,t="\\"),"\\"===t)switch(n[e+1]){case"u":{r+=n.slice(a,e);const t=n.substr(e+2,4);switch(t){case"0000":r+="\\0";break;case"0007":r+="\\a";break;case"000b":r+="\\v";break;case"001b":r+="\\e";break;case"0085":r+="\\N";break;case"00a0":r+="\\_";break;case"2028":r+="\\L";break;case"2029":r+="\\P";break;default:"00"===t.substr(0,2)?r+="\\x"+t.substr(2):r+=n.substr(e,6)}e+=5,a=e+1}break;case"n":if(s||'"'===n[e+2]||n.length<i)e+=1;else{for(r+=n.slice(a,e)+"\n\n";"\\"===n[e+2]&&"n"===n[e+3]&&'"'!==n[e+4];)r+="\n",e+=2;r+=o," "===n[e+2]&&(r+="\\"),e+=1,a=e+1}break;default:e+=1}return r=a?r+n.slice(a):n,s?r:Xe(r,o,Qe,Ze(t,!1))}function nt(e,t){if(!1===t.options.singleQuote||t.implicitKey&&e.includes("\n")||/[ \t]\n|\n[ \t]/.test(e))return tt(e,t);const n=t.indent||(et(e)?"  ":""),s="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&\n${n}`)+"'";return t.implicitKey?s:Xe(s,n,Je,Ze(t,!1))}function st(e,t){const{singleQuote:n}=t.options;let s;if(!1===n)s=tt;else{const t=e.includes('"'),i=e.includes("'");s=t&&!i?nt:i&&!t?tt:n?nt:tt}return s(e,t)}let it;try{it=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{it=/\n+(?!\n|$)/g}function ot({comment:e,type:t,value:n},s,i,o){const{blockQuote:r,commentString:a,lineWidth:c}=s.options;if(!r||/\n[\t ]+$/.test(n)||/^\s*$/.test(n))return st(n,s);const l=s.indent||(s.forceBlockIndent||et(n)?"  ":""),u="literal"===r||"folded"!==r&&t!==qe.BLOCK_FOLDED&&(t===qe.BLOCK_LITERAL||!function(e,t,n){if(!t||t<0)return!1;const s=t-n,i=e.length;if(i<=s)return!1;for(let t=0,n=0;t<i;++t)if("\n"===e[t]){if(t-n>s)return!0;if(n=t+1,i-n<=s)return!1}return!0}(n,c,l.length));if(!n)return u?"|\n":">\n";let f,h;for(h=n.length;h>0;--h){const e=n[h-1];if("\n"!==e&&"\t"!==e&&" "!==e)break}let d=n.substring(h);const p=d.indexOf("\n");-1===p?f="-":n===d||p!==d.length-1?(f="+",o&&o()):f="",d&&(n=n.slice(0,-d.length),"\n"===d[d.length-1]&&(d=d.slice(0,-1)),d=d.replace(it,`$&${l}`));let m,g=!1,y=-1;for(m=0;m<n.length;++m){const e=n[m];if(" "===e)g=!0;else{if("\n"!==e)break;y=m}}let b=n.substring(0,y<m?y+1:m);b&&(n=n.substring(b.length),b=b.replace(/\n+/g,`$&${l}`));let w=(g?l?"2":"1":"")+f;if(e&&(w+=" "+a(e.replace(/ ?[\r\n]+/g," ")),i&&i()),!u){const e=n.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${l}`);let i=!1;const o=Ze(s,!0);"folded"!==r&&t!==qe.BLOCK_FOLDED&&(o.onOverflow=()=>{i=!0});const a=Xe(`${b}${e}${d}`,l,He,o);if(!i)return`>${w}\n${l}${a}`}return`|${w}\n${l}${b}${n=n.replace(/\n+/g,`$&${l}`)}${d}`}function rt(e,t,n,s){const{implicitKey:i,inFlow:o}=t,r="string"==typeof e.value?e:Object.assign({},e,{value:String(e.value)});let{type:a}=e;a!==qe.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(r.value)&&(a=qe.QUOTE_DOUBLE);const c=e=>{switch(e){case qe.BLOCK_FOLDED:case qe.BLOCK_LITERAL:return i||o?st(r.value,t):ot(r,t,n,s);case qe.QUOTE_DOUBLE:return tt(r.value,t);case qe.QUOTE_SINGLE:return nt(r.value,t);case qe.PLAIN:return function(e,t,n,s){const{type:i,value:o}=e,{actualString:r,implicitKey:a,indent:c,indentStep:l,inFlow:u}=t;if(a&&o.includes("\n")||u&&/[[\]{},]/.test(o))return st(o,t);if(/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o))return a||u||!o.includes("\n")?st(o,t):ot(e,t,n,s);if(!a&&!u&&i!==qe.PLAIN&&o.includes("\n"))return ot(e,t,n,s);if(et(o)){if(""===c)return t.forceBlockIndent=!0,ot(e,t,n,s);if(a&&c===l)return st(o,t)}const f=o.replace(/\n+/g,`$&\n${c}`);if(r){const e=e=>e.default&&"tag:yaml.org,2002:str"!==e.tag&&e.test?.test(f),{compat:n,tags:s}=t.doc.schema;if(s.some(e)||n?.some(e))return st(o,t)}return a?f:Xe(f,c,Je,Ze(t,!1))}(r,t,n,s);default:return null}};let l=c(a);if(null===l){const{defaultKeyType:e,defaultStringType:n}=t.options,s=i&&e||n;if(l=c(s),null===l)throw new Error(`Unsupported default string type ${s}`)}return l}function at(e,t){const n=Object.assign({blockQuote:!0,commentString:Ve,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},e.schema.toStringOptions,t);let s;switch(n.collectionStyle){case"block":s=!1;break;case"flow":s=!0;break;default:s=null}return{anchors:new Set,doc:e,flowCollectionPadding:n.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof n.indent?" ".repeat(n.indent):"  ",inFlow:s,options:n}}function ct(e,t,n,s){if(de(e))return e.toString(t,n,s);if(ue(e)){if(t.doc.directives)return e.toString(t);if(t.resolvedAliases?.has(e))throw new TypeError("Cannot stringify circular structure without alias nodes");t.resolvedAliases?t.resolvedAliases.add(e):t.resolvedAliases=new Set([e]),e=e.resolve(t.doc)}let i;const o=ye(e)?e:t.doc.createNode(e,{onTagObj:e=>i=e});i??(i=function(e,t){if(t.tag){const n=e.filter((e=>e.tag===t.tag));if(n.length>0)return n.find((e=>e.format===t.format))??n[0]}let n,s;if(pe(t)){s=t.value;let i=e.filter((e=>e.identify?.(s)));if(i.length>1){const e=i.filter((e=>e.test));e.length>0&&(i=e)}n=i.find((e=>e.format===t.format))??i.find((e=>!e.format))}else s=t,n=e.find((e=>e.nodeClass&&s instanceof e.nodeClass));if(!n)throw new Error(`Tag not resolved for ${s?.constructor?.name??(null===s?"null":typeof s)} value`);return n}(t.doc.schema.tags,o));const r=function(e,t,{anchors:n,doc:s}){if(!s.directives)return"";const i=[],o=(pe(e)||ge(e))&&e.anchor;o&&Le(o)&&(n.add(o),i.push(`&${o}`));const r=e.tag??(t.default?null:t.tag);return r&&i.push(s.directives.tagString(r)),i.join(" ")}(o,i,t);r.length>0&&(t.indentAtStart=(t.indentAtStart??0)+r.length+1);const a="function"==typeof i.stringify?i.stringify(o,t,n,s):pe(o)?rt(o,t,n,s):o.toString(t,n,s);return r?pe(o)||"{"===a[0]||"["===a[0]?`${r} ${a}`:`${r}\n${t.indent}${a}`:a}function lt(e,t){"debug"!==e&&"warn"!==e||console.warn(t)}const ut="<<",ft={identify:e=>e===ut||"symbol"==typeof e&&e.description===ut,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new qe(Symbol(ut)),{addToJSMap:ht}),stringify:()=>ut};function ht(e,t,n){if(n=e&&ue(n)?n.resolve(e.doc):n,me(n))for(const s of n.items)dt(e,t,s);else if(Array.isArray(n))for(const s of n)dt(e,t,s);else dt(e,t,n)}function dt(e,t,n){const s=e&&ue(n)?n.resolve(e.doc):n;if(!he(s))throw new Error("Merge sources must be maps or map aliases");const i=s.toJSON(null,e,Map);for(const[e,n]of i)t instanceof Map?t.has(e)||t.set(e,n):t instanceof Set?t.add(e):Object.prototype.hasOwnProperty.call(t,e)||Object.defineProperty(t,e,{value:n,writable:!0,enumerable:!0,configurable:!0});return t}function pt(e,t,{key:n,value:s}){if(ye(n)&&n.addToJSMap)n.addToJSMap(e,t,s);else if(((e,t)=>(ft.identify(t)||pe(t)&&(!t.type||t.type===qe.PLAIN)&&ft.identify(t.value))&&e?.doc.schema.tags.some((e=>e.tag===ft.tag&&e.default)))(e,n))ht(e,t,s);else{const i=Me(n,"",e);if(t instanceof Map)t.set(i,Me(s,i,e));else if(t instanceof Set)t.add(i);else{const o=function(e,t,n){if(null===t)return"";if("object"!=typeof t)return String(t);if(ye(e)&&n?.doc){const t=at(n.doc,{});t.anchors=new Set;for(const e of n.anchors.keys())t.anchors.add(e.anchor);t.inFlow=!0,t.inStringifyKey=!0;const s=e.toString(t);if(!n.mapKeyWarned){let e=JSON.stringify(s);e.length>40&&(e=e.substring(0,36)+'..."'),lt(n.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),n.mapKeyWarned=!0}return s}return JSON.stringify(t)}(n,i,e),r=Me(s,o,e);o in t?Object.defineProperty(t,o,{value:r,writable:!0,enumerable:!0,configurable:!0}):t[o]=r}}return t}function mt(e,t,n){const s=Re(e,void 0,n),i=Re(t,void 0,n);return new gt(s,i)}class gt{constructor(e,t=null){Object.defineProperty(this,le,{value:re}),this.key=e,this.value=t}clone(e){let{key:t,value:n}=this;return ye(t)&&(t=t.clone(e)),ye(n)&&(n=n.clone(e)),new gt(t,n)}toJSON(e,t){return pt(t,t?.mapAsMap?new Map:{},this)}toString(e,t,n){return e?.doc?function({key:e,value:t},n,s,i){const{allNullValues:o,doc:r,indent:a,indentStep:c,options:{commentString:l,indentSeq:u,simpleKeys:f}}=n;let h=ye(e)&&e.comment||null;if(f){if(h)throw new Error("With simple keys, key nodes cannot have comments");if(ge(e)||!ye(e)&&"object"==typeof e)throw new Error("With simple keys, collection cannot be used as a key value")}let d=!f&&(!e||h&&null==t&&!n.inFlow||ge(e)||(pe(e)?e.type===qe.BLOCK_FOLDED||e.type===qe.BLOCK_LITERAL:"object"==typeof e));n=Object.assign({},n,{allNullValues:!1,implicitKey:!d&&(f||!o),indent:a+c});let p,m,g,y=!1,b=!1,w=ct(e,n,(()=>y=!0),(()=>b=!0));if(!d&&!n.inFlow&&w.length>1024){if(f)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");d=!0}if(n.inFlow){if(o||null==t)return y&&s&&s(),""===w?"?":d?`? ${w}`:w}else if(o&&!f||null==t&&d)return w=`? ${w}`,h&&!y?w+=Ye(w,n.indent,l(h)):b&&i&&i(),w;y&&(h=null),d?(h&&(w+=Ye(w,n.indent,l(h))),w=`? ${w}\n${a}:`):(w=`${w}:`,h&&(w+=Ye(w,n.indent,l(h)))),ye(t)?(p=!!t.spaceBefore,m=t.commentBefore,g=t.comment):(p=!1,m=null,g=null,t&&"object"==typeof t&&(t=r.createNode(t))),n.implicitKey=!1,d||h||!pe(t)||(n.indentAtStart=w.length+1),b=!1,u||!(c.length>=2)||n.inFlow||d||!me(t)||t.flow||t.tag||t.anchor||(n.indent=n.indent.substring(2));let k=!1;const v=ct(t,n,(()=>k=!0),(()=>b=!0));let S=" ";if(h||p||m)S=p?"\n":"",m&&(S+=`\n${We(l(m),n.indent)}`),""!==v||n.inFlow?S+=`\n${n.indent}`:"\n"===S&&(S="\n\n");else if(!d&&ge(t)){const e=v[0],s=v.indexOf("\n"),i=-1!==s,o=n.inFlow??t.flow??0===t.items.length;if(i||!o){let t=!1;if(i&&("&"===e||"!"===e)){let n=v.indexOf(" ");"&"===e&&-1!==n&&n<s&&"!"===v[n+1]&&(n=v.indexOf(" ",n+1)),(-1===n||s<n)&&(t=!0)}t||(S=`\n${n.indent}`)}}else""!==v&&"\n"!==v[0]||(S="");return w+=S+v,n.inFlow?k&&s&&s():g&&!k?w+=Ye(w,n.indent,l(g)):b&&i&&i(),w}(this,e,t,n):JSON.stringify(this)}}function yt(e,t,n){return(t.inFlow??e.flow?wt:bt)(e,t,n)}function bt({comment:e,items:t},n,{blockItemPrefix:s,flowChars:i,itemIndent:o,onChompKeep:r,onComment:a}){const{indent:c,options:{commentString:l}}=n,u=Object.assign({},n,{indent:o,type:null});let f=!1;const h=[];for(let e=0;e<t.length;++e){const i=t[e];let r=null;if(ye(i))!f&&i.spaceBefore&&h.push(""),kt(n,h,i.commentBefore,f),i.comment&&(r=i.comment);else if(de(i)){const e=ye(i.key)?i.key:null;e&&(!f&&e.spaceBefore&&h.push(""),kt(n,h,e.commentBefore,f))}f=!1;let a=ct(i,u,(()=>r=null),(()=>f=!0));r&&(a+=Ye(a,o,l(r))),f&&r&&(f=!1),h.push(s+a)}let d;if(0===h.length)d=i.start+i.end;else{d=h[0];for(let e=1;e<h.length;++e){const t=h[e];d+=t?`\n${c}${t}`:"\n"}}return e?(d+="\n"+We(l(e),c),a&&a()):f&&r&&r(),d}function wt({items:e},t,{flowChars:n,itemIndent:s}){const{indent:i,indentStep:o,flowCollectionPadding:r,options:{commentString:a}}=t;s+=o;const c=Object.assign({},t,{indent:s,inFlow:!0,type:null});let l=!1,u=0;const f=[];for(let n=0;n<e.length;++n){const i=e[n];let o=null;if(ye(i))i.spaceBefore&&f.push(""),kt(t,f,i.commentBefore,!1),i.comment&&(o=i.comment);else if(de(i)){const e=ye(i.key)?i.key:null;e&&(e.spaceBefore&&f.push(""),kt(t,f,e.commentBefore,!1),e.comment&&(l=!0));const n=ye(i.value)?i.value:null;n?(n.comment&&(o=n.comment),n.commentBefore&&(l=!0)):null==i.value&&e?.comment&&(o=e.comment)}o&&(l=!0);let r=ct(i,c,(()=>o=null));n<e.length-1&&(r+=","),o&&(r+=Ye(r,s,a(o))),!l&&(f.length>u||r.includes("\n"))&&(l=!0),f.push(r),u=f.length}const{start:h,end:d}=n;if(0===f.length)return h+d;if(!l){const e=f.reduce(((e,t)=>e+t.length+2),2);l=t.options.lineWidth>0&&e>t.options.lineWidth}if(l){let e=h;for(const t of f)e+=t?`\n${o}${i}${t}`:"\n";return`${e}\n${i}${d}`}return`${h}${r}${f.join(" ")}${r}${d}`}function kt({indent:e,options:{commentString:t}},n,s,i){if(s&&i&&(s=s.replace(/^\n+/,"")),s){const i=We(t(s),e);n.push(i.trimStart())}}function vt(e,t){const n=pe(t)?t.value:t;for(const s of e)if(de(s)){if(s.key===t||s.key===n)return s;if(pe(s.key)&&s.key.value===n)return s}}class St extends Ge{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(oe,e),this.items=[]}static from(e,t,n){const{keepUndefined:s,replacer:i}=n,o=new this(e),r=(e,r)=>{if("function"==typeof i)r=i.call(t,e,r);else if(Array.isArray(i)&&!i.includes(e))return;(void 0!==r||s)&&o.items.push(mt(e,r,n))};if(t instanceof Map)for(const[e,n]of t)r(e,n);else if(t&&"object"==typeof t)for(const e of Object.keys(t))r(e,t[e]);return"function"==typeof e.sortMapEntries&&o.items.sort(e.sortMapEntries),o}add(e,t){let n;n=de(e)?e:e&&"object"==typeof e&&"key"in e?new gt(e.key,e.value):new gt(e,e?.value);const s=vt(this.items,n.key),i=this.schema?.sortMapEntries;if(s){if(!t)throw new Error(`Key ${n.key} already set`);pe(s.value)&&De(n.value)?s.value.value=n.value:s.value=n.value}else if(i){const e=this.items.findIndex((e=>i(n,e)<0));-1===e?this.items.push(n):this.items.splice(e,0,n)}else this.items.push(n)}delete(e){const t=vt(this.items,e);if(!t)return!1;return this.items.splice(this.items.indexOf(t),1).length>0}get(e,t){const n=vt(this.items,e),s=n?.value;return(!t&&pe(s)?s.value:s)??void 0}has(e){return!!vt(this.items,e)}set(e,t){this.add(new gt(e,t),!0)}toJSON(e,t,n){const s=n?new n:t?.mapAsMap?new Map:{};t?.onCreate&&t.onCreate(s);for(const e of this.items)pt(t,s,e);return s}toString(e,t,n){if(!e)return JSON.stringify(this);for(const e of this.items)if(!de(e))throw new Error(`Map items must all be pairs; found ${JSON.stringify(e)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),yt(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:n,onComment:t})}}const Et={collection:"map",default:!0,nodeClass:St,tag:"tag:yaml.org,2002:map",resolve:(e,t)=>(he(e)||t("Expected a mapping for this tag"),e),createNode:(e,t,n)=>St.from(e,t,n)};class Nt extends Ge{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(ce,e),this.items=[]}add(e){this.items.push(e)}delete(e){const t=Ot(e);if("number"!=typeof t)return!1;return this.items.splice(t,1).length>0}get(e,t){const n=Ot(e);if("number"!=typeof n)return;const s=this.items[n];return!t&&pe(s)?s.value:s}has(e){const t=Ot(e);return"number"==typeof t&&t<this.items.length}set(e,t){const n=Ot(e);if("number"!=typeof n)throw new Error(`Expected a valid index, not ${e}.`);const s=this.items[n];pe(s)&&De(t)?s.value=t:this.items[n]=t}toJSON(e,t){const n=[];t?.onCreate&&t.onCreate(n);let s=0;for(const e of this.items)n.push(Me(e,String(s++),t));return n}toString(e,t,n){return e?yt(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:n,onComment:t}):JSON.stringify(this)}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(let o of t){if("function"==typeof s){const n=t instanceof Set?o:String(e++);o=s.call(t,n,o)}i.items.push(Re(o,void 0,n))}}return i}}function Ot(e){let t=pe(e)?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),"number"==typeof t&&Number.isInteger(t)&&t>=0?t:null}const At={collection:"seq",default:!0,nodeClass:Nt,tag:"tag:yaml.org,2002:seq",resolve:(e,t)=>(me(e)||t("Expected a sequence for this tag"),e),createNode:(e,t,n)=>Nt.from(e,t,n)},It={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:(e,t,n,s)=>rt(e,t=Object.assign({actualString:!0},t),n,s)},Tt={identify:e=>null==e,createNode:()=>new qe(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new qe(null),stringify:({source:e},t)=>"string"==typeof e&&Tt.test.test(e)?e:t.options.nullStr},xt={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>new qe("t"===e[0]||"T"===e[0]),stringify({source:e,value:t},n){if(e&&xt.test.test(e)){if(t===("t"===e[0]||"T"===e[0]))return e}return t?n.options.trueStr:n.options.falseStr}};function $t({format:e,minFractionDigits:t,tag:n,value:s}){if("bigint"==typeof s)return String(s);const i="number"==typeof s?s:Number(s);if(!isFinite(i))return isNaN(i)?".nan":i<0?"-.inf":".inf";let o=JSON.stringify(s);if(!e&&t&&(!n||"tag:yaml.org,2002:float"===n)&&/^\d/.test(o)){let e=o.indexOf(".");e<0&&(e=o.length,o+=".");let n=t-(o.length-e-1);for(;n-- >0;)o+="0"}return o}const Lt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:$t},Ct={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():$t(e)}},_t={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(e){const t=new qe(parseFloat(e)),n=e.indexOf(".");return-1!==n&&"0"===e[e.length-1]&&(t.minFractionDigits=e.length-n-1),t},stringify:$t},Bt=e=>"bigint"==typeof e||Number.isInteger(e),Mt=(e,t,n,{intAsBigInt:s})=>s?BigInt(e):parseInt(e.substring(t),n);function Kt(e,t,n){const{value:s}=e;return Bt(s)&&s>=0?n+s.toString(t):$t(e)}const jt={identify:e=>Bt(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(e,t,n)=>Mt(e,2,8,n),stringify:e=>Kt(e,8,"0o")},Pt={identify:Bt,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(e,t,n)=>Mt(e,0,10,n),stringify:$t},Dt={identify:e=>Bt(e)&&e>=0,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(e,t,n)=>Mt(e,2,16,n),stringify:e=>Kt(e,16,"0x")},qt=[Et,At,It,Tt,xt,jt,Pt,Dt,Lt,Ct,_t];function Rt(e){return"bigint"==typeof e||Number.isInteger(e)}const Ut=({value:e})=>JSON.stringify(e),Ft=[Et,At].concat([{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:Ut},{identify:e=>null==e,createNode:()=>new qe(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:Ut},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:e=>"true"===e,stringify:Ut},{identify:Rt,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(e,t,{intAsBigInt:n})=>n?BigInt(e):parseInt(e,10),stringify:({value:e})=>Rt(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:Ut}],{default:!0,tag:"",test:/^/,resolve:(e,t)=>(t(`Unresolved plain scalar ${JSON.stringify(e)}`),e)}),Gt={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(e,t){if("function"==typeof atob){const t=atob(e.replace(/[\n\r]/g,"")),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n[e]=t.charCodeAt(e);return n}return t("This environment does not support reading binary tags; either Buffer or atob is required"),e},stringify({comment:e,type:t,value:n},s,i,o){if(!n)return"";const r=n;let a;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let e="";for(let t=0;t<r.length;++t)e+=String.fromCharCode(r[t]);a=btoa(e)}if(t??(t=qe.BLOCK_LITERAL),t!==qe.QUOTE_DOUBLE){const e=Math.max(s.options.lineWidth-s.indent.length,s.options.minContentWidth),n=Math.ceil(a.length/e),i=new Array(n);for(let t=0,s=0;t<n;++t,s+=e)i[t]=a.substr(s,e);a=i.join(t===qe.BLOCK_LITERAL?"\n":" ")}return rt({comment:e,type:t,value:a},s,i,o)}};function Vt(e,t){if(me(e))for(let n=0;n<e.items.length;++n){let s=e.items[n];if(!de(s)){if(he(s)){s.items.length>1&&t("Each pair must have its own sequence indicator");const e=s.items[0]||new gt(new qe(null));if(s.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${s.commentBefore}\n${e.key.commentBefore}`:s.commentBefore),s.comment){const t=e.value??e.key;t.comment=t.comment?`${s.comment}\n${t.comment}`:s.comment}s=e}e.items[n]=de(s)?s:new gt(s)}}else t("Expected a sequence for this tag");return e}function Wt(e,t,n){const{replacer:s}=n,i=new Nt(e);i.tag="tag:yaml.org,2002:pairs";let o=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let r,a;if("function"==typeof s&&(e=s.call(t,String(o++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);r=e[0],a=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);r=t[0],a=e[r]}else r=e;i.items.push(mt(r,a,n))}return i}const Yt={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:Vt,createNode:Wt};class Jt extends Nt{constructor(){super(),this.add=St.prototype.add.bind(this),this.delete=St.prototype.delete.bind(this),this.get=St.prototype.get.bind(this),this.has=St.prototype.has.bind(this),this.set=St.prototype.set.bind(this),this.tag=Jt.tag}toJSON(e,t){if(!t)return super.toJSON(e);const n=new Map;t?.onCreate&&t.onCreate(n);for(const e of this.items){let s,i;if(de(e)?(s=Me(e.key,"",t),i=Me(e.value,s,t)):s=Me(e,"",t),n.has(s))throw new Error("Ordered maps must not include duplicate keys");n.set(s,i)}return n}static from(e,t,n){const s=Wt(e,t,n),i=new this;return i.items=s.items,i}}Jt.tag="tag:yaml.org,2002:omap";const Ht={collection:"seq",identify:e=>e instanceof Map,nodeClass:Jt,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){const n=Vt(e,t),s=[];for(const{key:e}of n.items)pe(e)&&(s.includes(e.value)?t(`Ordered maps must not include duplicate keys: ${e.value}`):s.push(e.value));return Object.assign(new Jt,n)},createNode:(e,t,n)=>Jt.from(e,t,n)};function Qt({value:e,source:t},n){return t&&(e?Xt:zt).test.test(t)?t:e?n.options.trueStr:n.options.falseStr}const Xt={identify:e=>!0===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new qe(!0),stringify:Qt},zt={identify:e=>!1===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new qe(!1),stringify:Qt},Zt={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:$t},en={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify(e){const t=Number(e.value);return isFinite(t)?t.toExponential():$t(e)}},tn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(e){const t=new qe(parseFloat(e.replace(/_/g,""))),n=e.indexOf(".");if(-1!==n){const s=e.substring(n+1).replace(/_/g,"");"0"===s[s.length-1]&&(t.minFractionDigits=s.length)}return t},stringify:$t},nn=e=>"bigint"==typeof e||Number.isInteger(e);function sn(e,t,n,{intAsBigInt:s}){const i=e[0];if("-"!==i&&"+"!==i||(t+=1),e=e.substring(t).replace(/_/g,""),s){switch(n){case 2:e=`0b${e}`;break;case 8:e=`0o${e}`;break;case 16:e=`0x${e}`}const t=BigInt(e);return"-"===i?BigInt(-1)*t:t}const o=parseInt(e,n);return"-"===i?-1*o:o}function on(e,t,n){const{value:s}=e;if(nn(s)){const e=s.toString(t);return s<0?"-"+n+e.substr(1):n+e}return $t(e)}const rn={identify:nn,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(e,t,n)=>sn(e,2,2,n),stringify:e=>on(e,2,"0b")},an={identify:nn,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(e,t,n)=>sn(e,1,8,n),stringify:e=>on(e,8,"0")},cn={identify:nn,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(e,t,n)=>sn(e,0,10,n),stringify:$t},ln={identify:nn,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(e,t,n)=>sn(e,2,16,n),stringify:e=>on(e,16,"0x")};class un extends St{constructor(e){super(e),this.tag=un.tag}add(e){let t;t=de(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new gt(e.key,null):new gt(e,null);vt(this.items,t.key)||this.items.push(t)}get(e,t){const n=vt(this.items,e);return!t&&de(n)?pe(n.key)?n.key.value:n.key:n}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);const n=vt(this.items,e);n&&!t?this.items.splice(this.items.indexOf(n),1):!n&&t&&this.items.push(new gt(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,n){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,n);throw new Error("Set items must all have null values")}static from(e,t,n){const{replacer:s}=n,i=new this(e);if(t&&Symbol.iterator in Object(t))for(let e of t)"function"==typeof s&&(e=s.call(t,e,e)),i.items.push(mt(e,null,n));return i}}un.tag="tag:yaml.org,2002:set";const fn={collection:"map",identify:e=>e instanceof Set,nodeClass:un,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,n)=>un.from(e,t,n),resolve(e,t){if(he(e)){if(e.hasAllNullValues(!0))return Object.assign(new un,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};function hn(e,t){const n=e[0],s="-"===n||"+"===n?e.substring(1):e,i=e=>t?BigInt(e):Number(e),o=s.replace(/_/g,"").split(":").reduce(((e,t)=>e*i(60)+i(t)),i(0));return"-"===n?i(-1)*o:o}function dn(e){let{value:t}=e,n=e=>e;if("bigint"==typeof t)n=e=>BigInt(e);else if(isNaN(t)||!isFinite(t))return $t(e);let s="";t<0&&(s="-",t*=n(-1));const i=n(60),o=[t%i];return t<60?o.unshift(0):(t=(t-o[0])/i,o.unshift(t%i),t>=60&&(t=(t-o[0])/i,o.unshift(t))),s+o.map((e=>String(e).padStart(2,"0"))).join(":").replace(/000000\d*$/,"")}const pn={identify:e=>"bigint"==typeof e||Number.isInteger(e),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(e,t,{intAsBigInt:n})=>hn(e,n),stringify:dn},mn={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:e=>hn(e,!1),stringify:dn},gn={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(e){const t=e.match(gn.test);if(!t)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");const[,n,s,i,o,r,a]=t.map(Number),c=t[7]?Number((t[7]+"00").substr(1,3)):0;let l=Date.UTC(n,s-1,i,o||0,r||0,a||0,c);const u=t[8];if(u&&"Z"!==u){let e=hn(u,!1);Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e?.toISOString().replace(/(T00:00:00)?\.000Z$/,"")??""},yn=[Et,At,It,Tt,Xt,zt,rn,an,cn,ln,Zt,en,tn,Gt,ft,Ht,Yt,fn,pn,mn,gn],bn=new Map([["core",qt],["failsafe",[Et,At,It]],["json",Ft],["yaml11",yn],["yaml-1.1",yn]]),wn={binary:Gt,bool:xt,float:_t,floatExp:Ct,floatNaN:Lt,floatTime:mn,int:Pt,intHex:Dt,intOct:jt,intTime:pn,map:Et,merge:ft,null:Tt,omap:Ht,pairs:Yt,seq:At,set:fn,timestamp:gn},kn={"tag:yaml.org,2002:binary":Gt,"tag:yaml.org,2002:merge":ft,"tag:yaml.org,2002:omap":Ht,"tag:yaml.org,2002:pairs":Yt,"tag:yaml.org,2002:set":fn,"tag:yaml.org,2002:timestamp":gn};function vn(e,t,n){const s=bn.get(t);if(s&&!e)return n&&!s.includes(ft)?s.concat(ft):s.slice();let i=s;if(!i){if(!Array.isArray(e)){const e=Array.from(bn.keys()).filter((e=>"yaml11"!==e)).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown schema "${t}"; use one of ${e} or define customTags array`)}i=[]}if(Array.isArray(e))for(const t of e)i=i.concat(t);else"function"==typeof e&&(i=e(i.slice()));return n&&(i=i.concat(ft)),i.reduce(((e,t)=>{const n="string"==typeof t?wn[t]:t;if(!n){const e=JSON.stringify(t),n=Object.keys(wn).map((e=>JSON.stringify(e))).join(", ");throw new Error(`Unknown custom tag ${e}; use one of ${n}`)}return e.includes(n)||e.push(n),e}),[])}const Sn=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class En{constructor({compat:e,customTags:t,merge:n,resolveKnownTags:s,schema:i,sortMapEntries:o,toStringDefaults:r}){this.compat=Array.isArray(e)?vn(e,"compat"):e?vn(null,e):null,this.name="string"==typeof i&&i||"core",this.knownTags=s?kn:{},this.tags=vn(t,this.name,n),this.toStringOptions=r??null,Object.defineProperty(this,oe,{value:Et}),Object.defineProperty(this,ae,{value:It}),Object.defineProperty(this,ce,{value:At}),this.sortMapEntries="function"==typeof o?o:!0===o?Sn:null}clone(){const e=Object.create(En.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}}class Nn{constructor(e,t,n){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,le,{value:ie});let s=null;"function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t,t=void 0);const i=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},n);this.options=i;let{version:o}=i;n?._directives?(this.directives=n._directives.atDocument(),this.directives.yaml.explicit&&(o=this.directives.yaml.version)):this.directives=new $e({version:o}),this.setSchema(o,n),this.contents=void 0===e?null:this.createNode(e,s,n)}clone(){const e=Object.create(Nn.prototype,{[le]:{value:ie}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=ye(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){On(this.contents)&&this.contents.add(e)}addIn(e,t){On(this.contents)&&this.contents.addIn(e,t)}createAlias(e,t){if(!e.anchor){const n=Ce(this);e.anchor=!t||n.has(t)?_e(t||"a",n):t}return new je(e.anchor)}createNode(e,t,n){let s;if("function"==typeof t)e=t.call({"":e},"",e),s=t;else if(Array.isArray(t)){const e=e=>"number"==typeof e||e instanceof String||e instanceof Number,n=t.filter(e).map(String);n.length>0&&(t=t.concat(n)),s=t}else void 0===n&&t&&(n=t,t=void 0);const{aliasDuplicateObjects:i,anchorPrefix:o,flow:r,keepUndefined:a,onTagObj:c,tag:l}=n??{},{onAnchor:u,setAnchors:f,sourceObjects:h}=function(e,t){const n=[],s=new Map;let i=null;return{onAnchor:s=>{n.push(s),i??(i=Ce(e));const o=_e(t,i);return i.add(o),o},setAnchors:()=>{for(const e of n){const t=s.get(e);if("object"!=typeof t||!t.anchor||!pe(t.node)&&!ge(t.node)){const t=new Error("Failed to resolve repeated object (this should not happen)");throw t.source=e,t}t.node.anchor=t.anchor}},sourceObjects:s}}(this,o||"a"),d=Re(e,l,{aliasDuplicateObjects:i??!0,keepUndefined:a??!1,onAnchor:u,onTagObj:c,replacer:s,schema:this.schema,sourceObjects:h});return r&&ge(d)&&(d.flow=!0),f(),d}createPair(e,t,n={}){const s=this.createNode(e,null,n),i=this.createNode(t,null,n);return new gt(s,i)}delete(e){return!!On(this.contents)&&this.contents.delete(e)}deleteIn(e){return Fe(e)?null!=this.contents&&(this.contents=null,!0):!!On(this.contents)&&this.contents.deleteIn(e)}get(e,t){return ge(this.contents)?this.contents.get(e,t):void 0}getIn(e,t){return Fe(e)?!t&&pe(this.contents)?this.contents.value:this.contents:ge(this.contents)?this.contents.getIn(e,t):void 0}has(e){return!!ge(this.contents)&&this.contents.has(e)}hasIn(e){return Fe(e)?void 0!==this.contents:!!ge(this.contents)&&this.contents.hasIn(e)}set(e,t){null==this.contents?this.contents=Ue(this.schema,[e],t):On(this.contents)&&this.contents.set(e,t)}setIn(e,t){Fe(e)?this.contents=t:null==this.contents?this.contents=Ue(this.schema,Array.from(e),t):On(this.contents)&&this.contents.setIn(e,t)}setSchema(e,t={}){let n;switch("number"==typeof e&&(e=String(e)),e){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new $e({version:"1.1"}),n={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=e:this.directives=new $e({version:e}),n={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,n=null;break;default:{const t=JSON.stringify(e);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${t}`)}}if(t.schema instanceof Object)this.schema=t.schema;else{if(!n)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new En(Object.assign(n,t))}}toJS({json:e,jsonArg:t,mapAsMap:n,maxAliasCount:s,onAnchor:i,reviver:o}={}){const r={anchors:new Map,doc:this,keep:!e,mapAsMap:!0===n,mapKeyWarned:!1,maxAliasCount:"number"==typeof s?s:100},a=Me(this.contents,t??"",r);if("function"==typeof i)for(const{count:e,res:t}of r.anchors.values())i(t,e);return"function"==typeof o?Be(o,{"":a},"",a):a}toJSON(e,t){return this.toJS({json:!0,jsonArg:e,mapAsMap:!1,onAnchor:t})}toString(e={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in e&&(!Number.isInteger(e.indent)||Number(e.indent)<=0)){const t=JSON.stringify(e.indent);throw new Error(`"indent" option must be a positive integer, not ${t}`)}return function(e,t){const n=[];let s=!0===t.directives;if(!1!==t.directives&&e.directives){const t=e.directives.toString(e);t?(n.push(t),s=!0):e.directives.docStart&&(s=!0)}s&&n.push("---");const i=at(e,t),{commentString:o}=i.options;if(e.commentBefore){1!==n.length&&n.unshift("");const t=o(e.commentBefore);n.unshift(We(t,""))}let r=!1,a=null;if(e.contents){if(ye(e.contents)){if(e.contents.spaceBefore&&s&&n.push(""),e.contents.commentBefore){const t=o(e.contents.commentBefore);n.push(We(t,""))}i.forceBlockIndent=!!e.comment,a=e.contents.comment}const t=a?void 0:()=>r=!0;let c=ct(e.contents,i,(()=>a=null),t);a&&(c+=Ye(c,"",o(a))),"|"!==c[0]&&">"!==c[0]||"---"!==n[n.length-1]?n.push(c):n[n.length-1]=`--- ${c}`}else n.push(ct(e.contents,i));if(e.directives?.docEnd)if(e.comment){const t=o(e.comment);t.includes("\n")?(n.push("..."),n.push(We(t,""))):n.push(`... ${t}`)}else n.push("...");else{let t=e.comment;t&&r&&(t=t.replace(/^\n+/,"")),t&&(r&&!a||""===n[n.length-1]||n.push(""),n.push(We(o(t),"")))}return n.join("\n")+"\n"}(this,e)}}function On(e){if(ge(e))return!0;throw new Error("Expected a YAML collection as document contents")}class An extends Error{constructor(e,t,n,s){super(),this.name=e,this.code=n,this.message=s,this.pos=t}}class In extends An{constructor(e,t,n){super("YAMLParseError",e,t,n)}}class Tn extends An{constructor(e,t,n){super("YAMLWarning",e,t,n)}}const xn=(e,t)=>n=>{if(-1===n.pos[0])return;n.linePos=n.pos.map((e=>t.linePos(e)));const{line:s,col:i}=n.linePos[0];n.message+=` at line ${s}, column ${i}`;let o=i-1,r=e.substring(t.lineStarts[s-1],t.lineStarts[s]).replace(/[\n\r]+$/,"");if(o>=60&&r.length>80){const e=Math.min(o-39,r.length-79);r="â€¦"+r.substring(e),o-=e-1}if(r.length>80&&(r=r.substring(0,79)+"â€¦"),s>1&&/^ *$/.test(r.substring(0,o))){let n=e.substring(t.lineStarts[s-2],t.lineStarts[s-1]);n.length>80&&(n=n.substring(0,79)+"â€¦\n"),r=n+r}if(/[^ ]/.test(r)){let e=1;const t=n.linePos[1];t&&t.line===s&&t.col>i&&(e=Math.max(1,Math.min(t.col-i,80-o)));const a=" ".repeat(o)+"^".repeat(e);n.message+=`:\n\n${r}\n${a}\n`}};function $n(e,{flow:t,indicator:n,next:s,offset:i,onError:o,parentIndent:r,startOnNewline:a}){let c=!1,l=a,u=a,f="",h="",d=!1,p=!1,m=null,g=null,y=null,b=null,w=null,k=null,v=null;for(const i of e)switch(p&&("space"!==i.type&&"newline"!==i.type&&"comma"!==i.type&&o(i.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),p=!1),m&&(l&&"comment"!==i.type&&"newline"!==i.type&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),m=null),i.type){case"space":t||"doc-start"===n&&"flow-collection"===s?.type||!i.source.includes("\t")||(m=i),u=!0;break;case"comment":{u||o(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const e=i.source.substring(1)||" ";f?f+=h+e:f=e,h="",l=!1;break}case"newline":l?f?f+=i.source:k&&"seq-item-ind"===n||(c=!0):h+=i.source,l=!0,d=!0,(g||y)&&(b=i),u=!0;break;case"anchor":g&&o(i,"MULTIPLE_ANCHORS","A node can have at most one anchor"),i.source.endsWith(":")&&o(i.offset+i.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),g=i,v??(v=i.offset),l=!1,u=!1,p=!0;break;case"tag":y&&o(i,"MULTIPLE_TAGS","A node can have at most one tag"),y=i,v??(v=i.offset),l=!1,u=!1,p=!0;break;case n:(g||y)&&o(i,"BAD_PROP_ORDER",`Anchors and tags must be after the ${i.source} indicator`),k&&o(i,"UNEXPECTED_TOKEN",`Unexpected ${i.source} in ${t??"collection"}`),k=i,l="seq-item-ind"===n||"explicit-key-ind"===n,u=!1;break;case"comma":if(t){w&&o(i,"UNEXPECTED_TOKEN",`Unexpected , in ${t}`),w=i,l=!1,u=!1;break}default:o(i,"UNEXPECTED_TOKEN",`Unexpected ${i.type} token`),l=!1,u=!1}const S=e[e.length-1],E=S?S.offset+S.source.length:i;return p&&s&&"space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&("scalar"!==s.type||""!==s.source)&&o(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),m&&(l&&m.indent<=r||"block-map"===s?.type||"block-seq"===s?.type)&&o(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:w,found:k,spaceBefore:c,comment:f,hasNewline:d,anchor:g,tag:y,newlineAfterProp:b,end:E,start:v??E}}function Ln(e){if(!e)return null;switch(e.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(e.source.includes("\n"))return!0;if(e.end)for(const t of e.end)if("newline"===t.type)return!0;return!1;case"flow-collection":for(const t of e.items){for(const e of t.start)if("newline"===e.type)return!0;if(t.sep)for(const e of t.sep)if("newline"===e.type)return!0;if(Ln(t.key)||Ln(t.value))return!0}return!1;default:return!0}}function Cn(e,t,n){if("flow-collection"===t?.type){const s=t.end[0];if(s.indent===e&&("]"===s.source||"}"===s.source)&&Ln(t)){n(s,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}}}function _n(e,t,n){const{uniqueKeys:s}=e.options;if(!1===s)return!1;const i="function"==typeof s?s:(e,t)=>e===t||pe(e)&&pe(t)&&e.value===t.value;return t.some((e=>i(e.key,n)))}const Bn="All mapping items must start at the same column";function Mn(e,t,n,s){let i="";if(e){let o=!1,r="";for(const a of e){const{source:e,type:c}=a;switch(c){case"space":o=!0;break;case"comment":{n&&!o&&s(a,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");const t=e.substring(1)||" ";i?i+=r+t:i=t,r="";break}case"newline":i&&(r+=e),o=!0;break;default:s(a,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`)}t+=e.length}}return{comment:i,offset:t}}const Kn="Block collections are not allowed within flow collections",jn=e=>e&&("block-map"===e.type||"block-seq"===e.type);function Pn(e,t,n,s,i,o){const r="block-map"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r=new(o?.nodeClass??St)(n.schema);n.atRoot&&(n.atRoot=!1);let a=s.offset,c=null;for(const o of s.items){const{start:l,key:u,sep:f,value:h}=o,d=$n(l,{indicator:"explicit-key-ind",next:u??f?.[0],offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0}),p=!d.found;if(p){if(u&&("block-seq"===u.type?i(a,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in u&&u.indent!==s.indent&&i(a,"BAD_INDENT",Bn)),!d.anchor&&!d.tag&&!f){c=d.end,d.comment&&(r.comment?r.comment+="\n"+d.comment:r.comment=d.comment);continue}(d.newlineAfterProp||Ln(u))&&i(u??l[l.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else d.found?.indent!==s.indent&&i(a,"BAD_INDENT",Bn);n.atKey=!0;const m=d.end,g=u?e(n,u,d,i):t(n,m,l,null,d,i);n.schema.compat&&Cn(s.indent,u,i),n.atKey=!1,_n(n,r.items,g)&&i(m,"DUPLICATE_KEY","Map keys must be unique");const y=$n(f??[],{indicator:"map-value-ind",next:h,offset:g.range[2],onError:i,parentIndent:s.indent,startOnNewline:!u||"block-scalar"===u.type});if(a=y.end,y.found){p&&("block-map"!==h?.type||y.hasNewline||i(a,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),n.options.strict&&d.start<y.found.offset-1024&&i(g.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));const c=h?e(n,h,y,i):t(n,a,f,null,y,i);n.schema.compat&&Cn(s.indent,h,i),a=c.range[2];const l=new gt(g,c);n.options.keepSourceTokens&&(l.srcToken=o),r.items.push(l)}else{p&&i(g.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const e=new gt(g);n.options.keepSourceTokens&&(e.srcToken=o),r.items.push(e)}}return c&&c<a&&i(c,"IMPOSSIBLE","Map comment with trailing content"),r.range=[s.offset,a,c??a],r}(e,t,n,s,o):"block-seq"===n.type?function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r=new(o?.nodeClass??Nt)(n.schema);n.atRoot&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let a=s.offset,c=null;for(const{start:o,value:l}of s.items){const u=$n(o,{indicator:"seq-item-ind",next:l,offset:a,onError:i,parentIndent:s.indent,startOnNewline:!0});if(!u.found){if(!(u.anchor||u.tag||l)){c=u.end,u.comment&&(r.comment=u.comment);continue}l&&"block-seq"===l.type?i(u.end,"BAD_INDENT","All sequence items must start at the same column"):i(a,"MISSING_CHAR","Sequence item without - indicator")}const f=l?e(n,l,u,i):t(n,u.end,o,null,u,i);n.schema.compat&&Cn(s.indent,l,i),a=f.range[2],r.items.push(f)}return r.range=[s.offset,a,c??a],r}(e,t,n,s,o):function({composeNode:e,composeEmptyNode:t},n,s,i,o){const r="{"===s.start.source,a=r?"flow map":"flow sequence",c=new(o?.nodeClass??(r?St:Nt))(n.schema);c.flow=!0;const l=n.atRoot;l&&(n.atRoot=!1),n.atKey&&(n.atKey=!1);let u=s.offset+s.start.source.length;for(let o=0;o<s.items.length;++o){const l=s.items[o],{start:f,key:h,sep:d,value:p}=l,m=$n(f,{flow:a,indicator:"explicit-key-ind",next:h??d?.[0],offset:u,onError:i,parentIndent:s.indent,startOnNewline:!1});if(!m.found){if(!(m.anchor||m.tag||d||p)){0===o&&m.comma?i(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`):o<s.items.length-1&&i(m.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${a}`),m.comment&&(c.comment?c.comment+="\n"+m.comment:c.comment=m.comment),u=m.end;continue}!r&&n.options.strict&&Ln(h)&&i(h,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===o)m.comma&&i(m.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`);else if(m.comma||i(m.start,"MISSING_CHAR",`Missing , between ${a} items`),m.comment){let e="";e:for(const t of f)switch(t.type){case"comma":case"space":break;case"comment":e=t.source.substring(1);break e;default:break e}if(e){let t=c.items[c.items.length-1];de(t)&&(t=t.value??t.key),t.comment?t.comment+="\n"+e:t.comment=e,m.comment=m.comment.substring(e.length+1)}}if(r||d||m.found){n.atKey=!0;const o=m.end,g=h?e(n,h,m,i):t(n,o,f,null,m,i);jn(h)&&i(g.range,"BLOCK_IN_FLOW",Kn),n.atKey=!1;const y=$n(d??[],{flow:a,indicator:"map-value-ind",next:p,offset:g.range[2],onError:i,parentIndent:s.indent,startOnNewline:!1});if(y.found){if(!r&&!m.found&&n.options.strict){if(d)for(const e of d){if(e===y.found)break;if("newline"===e.type){i(e,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}m.start<y.found.offset-1024&&i(y.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else p&&("source"in p&&p.source&&":"===p.source[0]?i(p,"MISSING_CHAR",`Missing space after : in ${a}`):i(y.start,"MISSING_CHAR",`Missing , or : between ${a} items`));const b=p?e(n,p,y,i):y.found?t(n,y.end,d,null,y,i):null;b?jn(p)&&i(b.range,"BLOCK_IN_FLOW",Kn):y.comment&&(g.comment?g.comment+="\n"+y.comment:g.comment=y.comment);const w=new gt(g,b);if(n.options.keepSourceTokens&&(w.srcToken=l),r){const e=c;_n(n,e.items,g)&&i(o,"DUPLICATE_KEY","Map keys must be unique"),e.items.push(w)}else{const e=new St(n.schema);e.flow=!0,e.items.push(w);const t=(b??g).range;e.range=[g.range[0],t[1],t[2]],c.items.push(e)}u=b?b.range[2]:y.end}else{const s=p?e(n,p,m,i):t(n,m.end,d,null,m,i);c.items.push(s),u=s.range[2],jn(p)&&i(s.range,"BLOCK_IN_FLOW",Kn)}}const f=r?"}":"]",[h,...d]=s.end;let p=u;if(h&&h.source===f)p=h.offset+h.source.length;else{const e=a[0].toUpperCase()+a.substring(1);i(u,l?"MISSING_CHAR":"BAD_INDENT",l?`${e} must end with a ${f}`:`${e} in block collection must be sufficiently indented and end with a ${f}`),h&&1!==h.source.length&&d.unshift(h)}if(d.length>0){const e=Mn(d,p,n.options.strict,i);e.comment&&(c.comment?c.comment+="\n"+e.comment:c.comment=e.comment),c.range=[s.offset,p,e.offset]}else c.range=[s.offset,p,p];return c}(e,t,n,s,o),a=r.constructor;return"!"===i||i===a.tagName?(r.tag=a.tagName,r):(i&&(r.tag=i),r)}function Dn(e,t,n){const s=t.offset,i=function({offset:e,props:t},n,s){if("block-scalar-header"!==t[0].type)return s(t[0],"IMPOSSIBLE","Block scalar header not found"),null;const{source:i}=t[0],o=i[0];let r=0,a="",c=-1;for(let t=1;t<i.length;++t){const n=i[t];if(a||"-"!==n&&"+"!==n){const s=Number(n);!r&&s?r=s:-1===c&&(c=e+t)}else a=n}-1!==c&&s(c,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${i}`);let l=!1,u="",f=i.length;for(let e=1;e<t.length;++e){const i=t[e];switch(i.type){case"space":l=!0;case"newline":f+=i.source.length;break;case"comment":if(n&&!l){s(i,"MISSING_CHAR","Comments must be separated from other tokens by white space characters")}f+=i.source.length,u=i.source.substring(1);break;case"error":s(i,"UNEXPECTED_TOKEN",i.message),f+=i.source.length;break;default:{s(i,"UNEXPECTED_TOKEN",`Unexpected token in block scalar header: ${i.type}`);const e=i.source;e&&"string"==typeof e&&(f+=e.length)}}}return{mode:o,indent:r,chomp:a,comment:u,length:f}}(t,e.options.strict,n);if(!i)return{value:"",type:null,comment:"",range:[s,s,s]};const o=">"===i.mode?qe.BLOCK_FOLDED:qe.BLOCK_LITERAL,r=t.source?function(e){const t=e.split(/\n( *)/),n=t[0],s=n.match(/^( *)/),i=[s?.[1]?[s[1],n.slice(s[1].length)]:["",n]];for(let e=1;e<t.length;e+=2)i.push([t[e],t[e+1]]);return i}(t.source):[];let a=r.length;for(let e=r.length-1;e>=0;--e){const t=r[e][1];if(""!==t&&"\r"!==t)break;a=e}if(0===a){const e="+"===i.chomp&&r.length>0?"\n".repeat(Math.max(1,r.length-1)):"";let n=s+i.length;return t.source&&(n+=t.source.length),{value:e,type:o,comment:i.comment,range:[s,n,n]}}let c=t.indent+i.indent,l=t.offset+i.length,u=0;for(let t=0;t<a;++t){const[s,o]=r[t];if(""!==o&&"\r"!==o){if(s.length<c){const e="Block scalars with more-indented leading empty lines must use an explicit indentation indicator";n(l+s.length,"MISSING_CHAR",e)}if(0===i.indent&&(c=s.length),u=t,0===c&&!e.atRoot){n(l,"BAD_INDENT","Block scalar values in collections must be indented")}break}0===i.indent&&s.length>c&&(c=s.length),l+=s.length+o.length+1}for(let e=r.length-1;e>=a;--e)r[e][0].length>c&&(a=e+1);let f="",h="",d=!1;for(let e=0;e<u;++e)f+=r[e][0].slice(c)+"\n";for(let e=u;e<a;++e){let[t,s]=r[e];l+=t.length+s.length+1;const a="\r"===s[s.length-1];if(a&&(s=s.slice(0,-1)),s&&t.length<c){const e=`Block scalar lines must not be less indented than their ${i.indent?"explicit indentation indicator":"first line"}`;n(l-s.length-(a?2:1),"BAD_INDENT",e),t=""}o===qe.BLOCK_LITERAL?(f+=h+t.slice(c)+s,h="\n"):t.length>c||"\t"===s[0]?(" "===h?h="\n":d||"\n"!==h||(h="\n\n"),f+=h+t.slice(c)+s,h="\n",d=!0):""===s?"\n"===h?f+="\n":h="\n":(f+=h+s,h=" ",d=!1)}switch(i.chomp){case"-":break;case"+":for(let e=a;e<r.length;++e)f+="\n"+r[e][0].slice(c);"\n"!==f[f.length-1]&&(f+="\n");break;default:f+="\n"}const p=s+i.length+t.source.length;return{value:f,type:o,comment:i.comment,range:[s,p,p]}}function qn(e,t,n){const{offset:s,type:i,source:o,end:r}=e;let a,c;const l=(e,t,i)=>n(s+e,t,i);switch(i){case"scalar":a=qe.PLAIN,c=function(e,t){let n="";switch(e[0]){case"\t":n="a tab character";break;case",":n="flow indicator character ,";break;case"%":n="directive indicator character %";break;case"|":case">":n=`block scalar indicator ${e[0]}`;break;case"@":case"`":n=`reserved character ${e[0]}`}n&&t(0,"BAD_SCALAR_START",`Plain value cannot start with ${n}`);return Rn(e)}(o,l);break;case"single-quoted-scalar":a=qe.QUOTE_SINGLE,c=function(e,t){"'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote");return Rn(e.slice(1,-1)).replace(/''/g,"'")}(o,l);break;case"double-quoted-scalar":a=qe.QUOTE_DOUBLE,c=function(e,t){let n="";for(let s=1;s<e.length-1;++s){const i=e[s];if("\r"!==i||"\n"!==e[s+1])if("\n"===i){const{fold:t,offset:i}=Un(e,s);n+=t,s=i}else if("\\"===i){let i=e[++s];const o=Fn[i];if(o)n+=o;else if("\n"===i)for(i=e[s+1];" "===i||"\t"===i;)i=e[1+ ++s];else if("\r"===i&&"\n"===e[s+1])for(i=e[1+ ++s];" "===i||"\t"===i;)i=e[1+ ++s];else if("x"===i||"u"===i||"U"===i){const o={x:2,u:4,U:8}[i];n+=Gn(e,s+1,o,t),s+=o}else{const i=e.substr(s-1,2);t(s-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),n+=i}}else if(" "===i||"\t"===i){const t=s;let o=e[s+1];for(;" "===o||"\t"===o;)o=e[1+ ++s];"\n"===o||"\r"===o&&"\n"===e[s+2]||(n+=s>t?e.slice(t,s+1):i)}else n+=i}'"'===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR",'Missing closing "quote');return n}(o,l);break;default:return n(e,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${i}`),{value:"",type:null,comment:"",range:[s,s+o.length,s+o.length]}}const u=s+o.length,f=Mn(r,u,t,n);return{value:c,type:a,comment:f.comment,range:[s,u,f.offset]}}function Rn(e){let t,n;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),n=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,n=/[ \t]*(.*?)[ \t]*\r?\n/sy}let s=t.exec(e);if(!s)return e;let i=s[1],o=" ",r=t.lastIndex;for(n.lastIndex=r;s=n.exec(e);)""===s[1]?"\n"===o?i+=o:o="\n":(i+=o+s[1],o=" "),r=n.lastIndex;const a=/[ \t]*(.*)/sy;return a.lastIndex=r,s=a.exec(e),i+o+(s?.[1]??"")}function Un(e,t){let n="",s=e[t+1];for(;!(" "!==s&&"\t"!==s&&"\n"!==s&&"\r"!==s||"\r"===s&&"\n"!==e[t+2]);)"\n"===s&&(n+="\n"),s=e[(t+=1)+1];return n||(n=" "),{fold:n,offset:t}}const Fn={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"Â…",_:"Â ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function Gn(e,t,n,s){const i=e.substr(t,n),o=i.length===n&&/^[0-9a-fA-F]+$/.test(i)?parseInt(i,16):NaN;if(isNaN(o)){const i=e.substr(t-2,n+2);return s(t-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${i}`),i}return String.fromCodePoint(o)}function Vn(e,t,n,s){const{value:i,type:o,comment:r,range:a}="block-scalar"===t.type?Dn(e,t,s):qn(t,e.options.strict,s),c=n?e.directives.tagName(n.source,(e=>s(n,"TAG_RESOLVE_FAILED",e))):null;let l,u;l=e.options.stringKeys&&e.atKey?e.schema[ae]:c?function(e,t,n,s,i){if("!"===n)return e[ae];const o=[];for(const t of e.tags)if(!t.collection&&t.tag===n){if(!t.default||!t.test)return t;o.push(t)}for(const e of o)if(e.test?.test(t))return e;const r=e.knownTags[n];if(r&&!r.collection)return e.tags.push(Object.assign({},r,{default:!1,test:void 0})),r;return i(s,"TAG_RESOLVE_FAILED",`Unresolved tag: ${n}`,"tag:yaml.org,2002:str"!==n),e[ae]}(e.schema,i,c,n,s):"scalar"===t.type?function({atKey:e,directives:t,schema:n},s,i,o){const r=n.tags.find((t=>(!0===t.default||e&&"key"===t.default)&&t.test?.test(s)))||n[ae];if(n.compat){const e=n.compat.find((e=>e.default&&e.test?.test(s)))??n[ae];if(r.tag!==e.tag){o(i,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${t.tagString(r.tag)} or ${t.tagString(e.tag)}`,!0)}}return r}(e,i,t,s):e.schema[ae];try{const o=l.resolve(i,(e=>s(n??t,"TAG_RESOLVE_FAILED",e)),e.options);u=pe(o)?o:new qe(o)}catch(e){const o=e instanceof Error?e.message:String(e);s(n??t,"TAG_RESOLVE_FAILED",o),u=new qe(i)}return u.range=a,u.source=i,o&&(u.type=o),c&&(u.tag=c),l.format&&(u.format=l.format),r&&(u.comment=r),u}function Wn(e,t,n){if(t){n??(n=t.length);for(let s=n-1;s>=0;--s){let n=t[s];switch(n.type){case"space":case"comment":case"newline":e-=n.source.length;continue}for(n=t[++s];"space"===n?.type;)e+=n.source.length,n=t[++s];break}}return e}const Yn={composeNode:Jn,composeEmptyNode:Hn};function Jn(e,t,n,s){const i=e.atKey,{spaceBefore:o,comment:r,anchor:a,tag:c}=n;let l,u=!0;switch(t.type){case"alias":l=function({options:e},{offset:t,source:n,end:s},i){const o=new je(n.substring(1));""===o.source&&i(t,"BAD_ALIAS","Alias cannot be an empty string");o.source.endsWith(":")&&i(t+n.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0);const r=t+n.length,a=Mn(s,r,e.strict,i);o.range=[t,r,a.offset],a.comment&&(o.comment=a.comment);return o}(e,t,s),(a||c)&&s(t,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":l=Vn(e,t,c,s),a&&(l.anchor=a.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":l=function(e,t,n,s,i){const o=s.tag,r=o?t.directives.tagName(o.source,(e=>i(o,"TAG_RESOLVE_FAILED",e))):null;if("block-seq"===n.type){const{anchor:e,newlineAfterProp:t}=s,n=e&&o?e.offset>o.offset?e:o:e??o;n&&(!t||t.offset<n.offset)&&i(n,"MISSING_CHAR","Missing newline after block sequence props")}const a="block-map"===n.type?"map":"block-seq"===n.type?"seq":"{"===n.start.source?"map":"seq";if(!o||!r||"!"===r||r===St.tagName&&"map"===a||r===Nt.tagName&&"seq"===a)return Pn(e,t,n,i,r);let c=t.schema.tags.find((e=>e.tag===r&&e.collection===a));if(!c){const s=t.schema.knownTags[r];if(!s||s.collection!==a)return s?i(o,"BAD_COLLECTION_TYPE",`${s.tag} used for ${a} collection, but expects ${s.collection??"scalar"}`,!0):i(o,"TAG_RESOLVE_FAILED",`Unresolved tag: ${r}`,!0),Pn(e,t,n,i,r);t.schema.tags.push(Object.assign({},s,{default:!1})),c=s}const l=Pn(e,t,n,i,r,c),u=c.resolve?.(l,(e=>i(o,"TAG_RESOLVE_FAILED",e)),t.options)??l,f=ye(u)?u:new qe(u);return f.range=l.range,f.tag=r,c?.format&&(f.format=c.format),f}(Yn,e,t,n,s),a&&(l.anchor=a.source.substring(1));break;default:s(t,"UNEXPECTED_TOKEN","error"===t.type?t.message:`Unsupported token (type: ${t.type})`),l=Hn(e,t.offset,void 0,null,n,s),u=!1}if(a&&""===l.anchor&&s(a,"BAD_ALIAS","Anchor cannot be an empty string"),i&&e.options.stringKeys&&(!pe(l)||"string"!=typeof l.value||l.tag&&"tag:yaml.org,2002:str"!==l.tag)){s(c??t,"NON_STRING_KEY","With stringKeys, all keys must be strings")}return o&&(l.spaceBefore=!0),r&&("scalar"===t.type&&""===t.source?l.comment=r:l.commentBefore=r),e.options.keepSourceTokens&&u&&(l.srcToken=t),l}function Hn(e,t,n,s,{spaceBefore:i,comment:o,anchor:r,tag:a,end:c},l){const u=Vn(e,{type:"scalar",offset:Wn(t,n,s),indent:-1,source:""},a,l);return r&&(u.anchor=r.source.substring(1),""===u.anchor&&l(r,"BAD_ALIAS","Anchor cannot be an empty string")),i&&(u.spaceBefore=!0),o&&(u.comment=o,u.range[2]=c),u}function Qn(e){if("number"==typeof e)return[e,e+1];if(Array.isArray(e))return 2===e.length?e:[e[0],e[1]];const{offset:t,source:n}=e;return[t,t+("string"==typeof n?n.length:1)]}function Xn(e){let t="",n=!1,s=!1;for(let i=0;i<e.length;++i){const o=e[i];switch(o[0]){case"#":t+=(""===t?"":s?"\n\n":"\n")+(o.substring(1)||" "),n=!0,s=!1;break;case"%":"#"!==e[i+1]?.[0]&&(i+=1),n=!1;break;default:n||(s=!0),n=!1}}return{comment:t,afterEmptyLine:s}}class zn{constructor(e={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(e,t,n,s)=>{const i=Qn(e);s?this.warnings.push(new Tn(i,t,n)):this.errors.push(new In(i,t,n))},this.directives=new $e({version:e.version||"1.2"}),this.options=e}decorate(e,t){const{comment:n,afterEmptyLine:s}=Xn(this.prelude);if(n){const i=e.contents;if(t)e.comment=e.comment?`${e.comment}\n${n}`:n;else if(s||e.directives.docStart||!i)e.commentBefore=n;else if(ge(i)&&!i.flow&&i.items.length>0){let e=i.items[0];de(e)&&(e=e.key);const t=e.commentBefore;e.commentBefore=t?`${n}\n${t}`:n}else{const e=i.commentBefore;i.commentBefore=e?`${n}\n${e}`:n}}t?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:Xn(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,t=!1,n=-1){for(const t of e)yield*this.next(t);yield*this.end(t,n)}*next(e){switch(e.type){case"directive":this.directives.add(e.source,((t,n,s)=>{const i=Qn(e);i[0]+=t,this.onError(i,"BAD_DIRECTIVE",n,s)})),this.prelude.push(e.source),this.atDirectives=!0;break;case"document":{const t=function(e,t,{offset:n,start:s,value:i,end:o},r){const a=Object.assign({_directives:t},e),c=new Nn(void 0,a),l={atKey:!1,atRoot:!0,directives:c.directives,options:c.options,schema:c.schema},u=$n(s,{indicator:"doc-start",next:i??o?.[0],offset:n,onError:r,parentIndent:0,startOnNewline:!0});u.found&&(c.directives.docStart=!0,!i||"block-map"!==i.type&&"block-seq"!==i.type||u.hasNewline||r(u.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),c.contents=i?Jn(l,i,u,r):Hn(l,u.end,s,null,u,r);const f=c.contents.range[2],h=Mn(o,f,!1,r);return h.comment&&(c.comment=h.comment),c.range=[n,f,h.offset],c}(this.options,this.directives,e,this.onError);this.atDirectives&&!t.directives.docStart&&this.onError(e,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(t,!1),this.doc&&(yield this.doc),this.doc=t,this.atDirectives=!1;break}case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(e.source);break;case"error":{const t=e.source?`${e.message}: ${JSON.stringify(e.source)}`:e.message,n=new In(Qn(e),"UNEXPECTED_TOKEN",t);this.atDirectives||!this.doc?this.errors.push(n):this.doc.errors.push(n);break}case"doc-end":{if(!this.doc){const t="Unexpected doc-end without preceding document";this.errors.push(new In(Qn(e),"UNEXPECTED_TOKEN",t));break}this.doc.directives.docEnd=!0;const t=Mn(e.end,e.offset+e.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,!0),t.comment){const e=this.doc.comment;this.doc.comment=e?`${e}\n${t.comment}`:t.comment}this.doc.range[2]=t.offset;break}default:this.errors.push(new In(Qn(e),"UNEXPECTED_TOKEN",`Unsupported token ${e.type}`))}}*end(e=!1,t=-1){if(this.doc)this.decorate(this.doc,!0),yield this.doc,this.doc=null;else if(e){const e=Object.assign({_directives:this.directives},this.options),n=new Nn(void 0,e);this.atDirectives&&this.onError(t,"MISSING_CHAR","Missing directives-end indicator line"),n.range=[0,t,t],this.decorate(n,!1),yield n}}}function Zn(e,t){if(t)for(const n of t)switch(n.type){case"space":case"comment":e.push(n);break;case"newline":return e.push(n),!0}return!1}function es(e,t,n){switch(e.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":e.type=n,e.source=t;break;case"block-scalar":{const s=e.props.slice(1);let i=t.length;"block-scalar-header"===e.props[0].type&&(i-=e.props[0].source.length);for(const e of s)e.offset+=i;delete e.props,Object.assign(e,{type:n,source:t,end:s});break}case"block-map":case"block-seq":{const s={type:"newline",offset:e.offset+t.length,indent:e.indent,source:"\n"};delete e.items,Object.assign(e,{type:n,source:t,end:[s]});break}default:{const s="indent"in e?e.indent:-1,i="end"in e&&Array.isArray(e.end)?e.end.filter((e=>"space"===e.type||"comment"===e.type||"newline"===e.type)):[];for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:n,indent:s,source:t,end:i})}}}function ts(e){switch(e.type){case"block-scalar":{let t="";for(const n of e.props)t+=ts(n);return t+e.source}case"block-map":case"block-seq":{let t="";for(const n of e.items)t+=ns(n);return t}case"flow-collection":{let t=e.start.source;for(const n of e.items)t+=ns(n);for(const n of e.end)t+=n.source;return t}case"document":{let t=ns(e);if(e.end)for(const n of e.end)t+=n.source;return t}default:{let t=e.source;if("end"in e&&e.end)for(const n of e.end)t+=n.source;return t}}}function ns({start:e,key:t,sep:n,value:s}){let i="";for(const t of e)i+=t.source;if(t&&(i+=ts(t)),n)for(const e of n)i+=e.source;return s&&(i+=ts(s)),i}const ss=Symbol("break visit"),is=Symbol("skip children"),os=Symbol("remove item");function rs(e,t){"type"in e&&"document"===e.type&&(e={start:e.start,value:e.value}),as(Object.freeze([]),e,t)}function as(e,t,n){let s=n(t,e);if("symbol"==typeof s)return s;for(const i of["key","value"]){const o=t[i];if(o&&"items"in o){for(let t=0;t<o.items.length;++t){const s=as(Object.freeze(e.concat([[i,t]])),o.items[t],n);if("number"==typeof s)t=s-1;else{if(s===ss)return ss;s===os&&(o.items.splice(t,1),t-=1)}}"function"==typeof s&&"key"===i&&(s=s(t,e))}}return"function"==typeof s?s(t,e):s}rs.BREAK=ss,rs.SKIP=is,rs.REMOVE=os,rs.itemAtPath=(e,t)=>{let n=e;for(const[e,s]of t){const t=n?.[e];if(!t||!("items"in t))return;n=t.items[s]}return n},rs.parentCollection=(e,t)=>{const n=rs.itemAtPath(e,t.slice(0,-1)),s=t[t.length-1][0],i=n?.[s];if(i&&"items"in i)return i;throw new Error("Parent collection not found")};const cs="\ufeff",ls="",us="",fs="";function hs(e){switch(e){case cs:return"byte-order-mark";case ls:return"doc-mode";case us:return"flow-error-end";case fs:return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(e[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}var ds=Object.freeze({__proto__:null,BOM:cs,DOCUMENT:ls,FLOW_END:us,SCALAR:fs,createScalarToken:function(e,t){const{implicitKey:n=!1,indent:s,inFlow:i=!1,offset:o=-1,type:r="PLAIN"}=t,a=rt({type:r,value:e},{implicitKey:n,indent:s>0?" ".repeat(s):"",inFlow:i,options:{blockQuote:!0,lineWidth:-1}}),c=t.end??[{type:"newline",offset:-1,indent:s,source:"\n"}];switch(a[0]){case"|":case">":{const e=a.indexOf("\n"),t=a.substring(0,e),n=a.substring(e+1)+"\n",i=[{type:"block-scalar-header",offset:o,indent:s,source:t}];return Zn(i,c)||i.push({type:"newline",offset:-1,indent:s,source:"\n"}),{type:"block-scalar",offset:o,indent:s,props:i,source:n}}case'"':return{type:"double-quoted-scalar",offset:o,indent:s,source:a,end:c};case"'":return{type:"single-quoted-scalar",offset:o,indent:s,source:a,end:c};default:return{type:"scalar",offset:o,indent:s,source:a,end:c}}},isCollection:e=>!!e&&"items"in e,isScalar:e=>!!e&&("scalar"===e.type||"single-quoted-scalar"===e.type||"double-quoted-scalar"===e.type||"block-scalar"===e.type),prettyToken:function(e){switch(e){case cs:return"<BOM>";case ls:return"<DOC>";case us:return"<FLOW_END>";case fs:return"<SCALAR>";default:return JSON.stringify(e)}},resolveAsScalar:function(e,t=!0,n){if(e){const s=(e,t,s)=>{const i="number"==typeof e?e:Array.isArray(e)?e[0]:e.offset;if(!n)throw new In([i,i+1],t,s);n(i,t,s)};switch(e.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return qn(e,t,s);case"block-scalar":return Dn({options:{strict:t}},e,s)}}return null},setScalarValue:function(e,t,n={}){let{afterKey:s=!1,implicitKey:i=!1,inFlow:o=!1,type:r}=n,a="indent"in e?e.indent:null;if(s&&"number"==typeof a&&(a+=2),!r)switch(e.type){case"single-quoted-scalar":r="QUOTE_SINGLE";break;case"double-quoted-scalar":r="QUOTE_DOUBLE";break;case"block-scalar":{const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");r=">"===t.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:r="PLAIN"}const c=rt({type:r,value:t},{implicitKey:i||null===a,indent:null!==a&&a>0?" ".repeat(a):"",inFlow:o,options:{blockQuote:!0,lineWidth:-1}});switch(c[0]){case"|":case">":!function(e,t){const n=t.indexOf("\n"),s=t.substring(0,n),i=t.substring(n+1)+"\n";if("block-scalar"===e.type){const t=e.props[0];if("block-scalar-header"!==t.type)throw new Error("Invalid block scalar header");t.source=s,e.source=i}else{const{offset:t}=e,n="indent"in e?e.indent:-1,o=[{type:"block-scalar-header",offset:t,indent:n,source:s}];Zn(o,"end"in e?e.end:void 0)||o.push({type:"newline",offset:-1,indent:n,source:"\n"});for(const t of Object.keys(e))"type"!==t&&"offset"!==t&&delete e[t];Object.assign(e,{type:"block-scalar",indent:n,props:o,source:i})}}(e,c);break;case'"':es(e,c,"double-quoted-scalar");break;case"'":es(e,c,"single-quoted-scalar");break;default:es(e,c,"scalar")}},stringify:e=>"type"in e?ts(e):ns(e),tokenType:hs,visit:rs});function ps(e){switch(e){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}const ms=new Set("0123456789ABCDEFabcdef"),gs=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),ys=new Set(",[]{}"),bs=new Set(" ,[]{}\n\r\t"),ws=e=>!e||bs.has(e);class ks{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(e,t=!1){if(e){if("string"!=typeof e)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null}this.atEnd=!t;let n=this.next??"stream";for(;n&&(t||this.hasChars(1));)n=yield*this.parseNext(n)}atLineEnd(){let e=this.pos,t=this.buffer[e];for(;" "===t||"\t"===t;)t=this.buffer[++e];return!t||"#"===t||"\n"===t||"\r"===t&&"\n"===this.buffer[e+1]}charAt(e){return this.buffer[this.pos+e]}continueScalar(e){let t=this.buffer[e];if(this.indentNext>0){let n=0;for(;" "===t;)t=this.buffer[++n+e];if("\r"===t){const t=this.buffer[n+e+1];if("\n"===t||!t&&!this.atEnd)return e+n+1}return"\n"===t||n>=this.indentNext||!t&&!this.atEnd?e+n:-1}if("-"===t||"."===t){const t=this.buffer.substr(e,3);if(("---"===t||"..."===t)&&ps(this.buffer[e+3]))return-1}return e}getLine(){let e=this.lineEndPos;return("number"!=typeof e||-1!==e&&e<this.pos)&&(e=this.buffer.indexOf("\n",this.pos),this.lineEndPos=e),-1===e?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[e-1]&&(e-=1),this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let e=this.getLine();if(null===e)return this.setNext("stream");if(e[0]===cs&&(yield*this.pushCount(1),e=e.substring(1)),"%"===e[0]){let t=e.length,n=e.indexOf("#");for(;-1!==n;){const s=e[n-1];if(" "===s||"\t"===s){t=n-1;break}n=e.indexOf("#",n+1)}for(;;){const n=e[t-1];if(" "!==n&&"\t"!==n)break;t-=1}const s=(yield*this.pushCount(t))+(yield*this.pushSpaces(!0));return yield*this.pushCount(e.length-s),this.pushNewline(),"stream"}if(this.atLineEnd()){const t=yield*this.pushSpaces(!0);return yield*this.pushCount(e.length-t),yield*this.pushNewline(),"stream"}return yield ls,yield*this.parseLineStart()}*parseLineStart(){const e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if("-"===e||"."===e){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");const e=this.peek(3);if(("---"===e||"..."===e)&&ps(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===e?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!ps(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){const[e,t]=this.peek(2);if(!t&&!this.atEnd)return this.setNext("block-start");if(("-"===e||"?"===e||":"===e)&&ps(t)){const e=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0));return this.indentNext=this.indentValue+1,this.indentValue+=e,yield*this.parseBlockStart()}return"doc"}*parseDocument(){yield*this.pushSpaces(!0);const e=this.getLine();if(null===e)return this.setNext("doc");let t=yield*this.pushIndicators();switch(e[t]){case"#":yield*this.pushCount(e.length-t);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(ws),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return t+=(yield*this.parseBlockScalarHeader()),t+=(yield*this.pushSpaces(!0)),yield*this.pushCount(e.length-t),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,t,n=-1;do{e=yield*this.pushNewline(),e>0?(t=yield*this.pushSpaces(!1),this.indentValue=n=t):t=0,t+=(yield*this.pushSpaces(!0))}while(e+t>0);const s=this.getLine();if(null===s)return this.setNext("flow");if(-1!==n&&n<this.indentNext&&"#"!==s[0]||0===n&&(s.startsWith("---")||s.startsWith("..."))&&ps(s[3])){if(!(n===this.indentNext-1&&1===this.flowLevel&&("]"===s[0]||"}"===s[0])))return this.flowLevel=0,yield us,yield*this.parseLineStart()}let i=0;for(;","===s[i];)i+=(yield*this.pushCount(1)),i+=(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(i+=(yield*this.pushIndicators()),s[i]){case void 0:return"flow";case"#":return yield*this.pushCount(s.length-i),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,this.flowLevel-=1,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(ws),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":{const e=this.charAt(1);if(this.flowKey||ps(e)||","===e)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow"}default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){const e=this.charAt(0);let t=this.buffer.indexOf(e,this.pos+1);if("'"===e)for(;-1!==t&&"'"===this.buffer[t+1];)t=this.buffer.indexOf("'",t+2);else for(;-1!==t;){let e=0;for(;"\\"===this.buffer[t-1-e];)e+=1;if(e%2==0)break;t=this.buffer.indexOf('"',t+1)}const n=this.buffer.substring(0,t);let s=n.indexOf("\n",this.pos);if(-1!==s){for(;-1!==s;){const e=this.continueScalar(s+1);if(-1===e)break;s=n.indexOf("\n",e)}-1!==s&&(t=s-("\r"===n[s-1]?2:1))}if(-1===t){if(!this.atEnd)return this.setNext("quoted-scalar");t=this.buffer.length}return yield*this.pushToIndex(t+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let e=this.pos;for(;;){const t=this.buffer[++e];if("+"===t)this.blockScalarKeep=!0;else if(t>"0"&&t<="9")this.blockScalarIndent=Number(t)-1;else if("-"!==t)break}return yield*this.pushUntil((e=>ps(e)||"#"===e))}*parseBlockScalar(){let e,t=this.pos-1,n=0;e:for(let s=this.pos;e=this.buffer[s];++s)switch(e){case" ":n+=1;break;case"\n":t=s,n=0;break;case"\r":{const e=this.buffer[s+1];if(!e&&!this.atEnd)return this.setNext("block-scalar");if("\n"===e)break}default:break e}if(!e&&!this.atEnd)return this.setNext("block-scalar");if(n>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=n:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{const e=this.continueScalar(t+1);if(-1===e)break;t=this.buffer.indexOf("\n",e)}while(-1!==t);if(-1===t){if(!this.atEnd)return this.setNext("block-scalar");t=this.buffer.length}}let s=t+1;for(e=this.buffer[s];" "===e;)e=this.buffer[++s];if("\t"===e){for(;"\t"===e||" "===e||"\r"===e||"\n"===e;)e=this.buffer[++s];t=s-1}else if(!this.blockScalarKeep)for(;;){let e=t-1,s=this.buffer[e];"\r"===s&&(s=this.buffer[--e]);const i=e;for(;" "===s;)s=this.buffer[--e];if(!("\n"===s&&e>=this.pos&&e+1+n>i))break;t=e}return yield fs,yield*this.pushToIndex(t+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){const e=this.flowLevel>0;let t,n=this.pos-1,s=this.pos-1;for(;t=this.buffer[++s];)if(":"===t){const t=this.buffer[s+1];if(ps(t)||e&&ys.has(t))break;n=s}else if(ps(t)){let i=this.buffer[s+1];if("\r"===t&&("\n"===i?(s+=1,t="\n",i=this.buffer[s+1]):n=s),"#"===i||e&&ys.has(i))break;if("\n"===t){const e=this.continueScalar(s+1);if(-1===e)break;s=Math.max(s,e-2)}}else{if(e&&ys.has(t))break;n=s}return t||this.atEnd?(yield fs,yield*this.pushToIndex(n+1,!0),e?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(e){return e>0?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,t){const n=this.buffer.slice(this.pos,e);return n?(yield n,this.pos+=n.length,n.length):(t&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(ws))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":{const e=this.flowLevel>0,t=this.charAt(1);if(ps(t)||e&&ys.has(t))return e?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}}return 0}*pushTag(){if("<"===this.charAt(1)){let e=this.pos+2,t=this.buffer[e];for(;!ps(t)&&">"!==t;)t=this.buffer[++e];return yield*this.pushToIndex(">"===t?e+1:e,!1)}{let e=this.pos+1,t=this.buffer[e];for(;t;)if(gs.has(t))t=this.buffer[++e];else{if("%"!==t||!ms.has(this.buffer[e+1])||!ms.has(this.buffer[e+2]))break;t=this.buffer[e+=3]}return yield*this.pushToIndex(e,!1)}}*pushNewline(){const e=this.buffer[this.pos];return"\n"===e?yield*this.pushCount(1):"\r"===e&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(e){let t,n=this.pos-1;do{t=this.buffer[++n]}while(" "===t||e&&"\t"===t);const s=n-this.pos;return s>0&&(yield this.buffer.substr(this.pos,s),this.pos=n),s}*pushUntil(e){let t=this.pos,n=this.buffer[t];for(;!e(n);)n=this.buffer[++t];return yield*this.pushToIndex(t,!1)}}class vs{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let t=0,n=this.lineStarts.length;for(;t<n;){const s=t+n>>1;this.lineStarts[s]<e?t=s+1:n=s}if(this.lineStarts[t]===e)return{line:t+1,col:1};if(0===t)return{line:0,col:e};return{line:t,col:e-this.lineStarts[t-1]+1}}}}function Ss(e,t){for(let n=0;n<e.length;++n)if(e[n].type===t)return!0;return!1}function Es(e){for(let t=0;t<e.length;++t)switch(e[t].type){case"space":case"comment":case"newline":break;default:return t}return-1}function Ns(e){switch(e?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return!0;default:return!1}}function Os(e){switch(e.type){case"document":return e.start;case"block-map":{const t=e.items[e.items.length-1];return t.sep??t.start}case"block-seq":return e.items[e.items.length-1].start;default:return[]}}function As(e){if(0===e.length)return[];let t=e.length;e:for(;--t>=0;)switch(e[t].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break e}for(;"space"===e[++t]?.type;);return e.splice(t,e.length)}function Is(e){if("flow-seq-start"===e.start.type)for(const t of e.items)!t.sep||t.value||Ss(t.start,"explicit-key-ind")||Ss(t.sep,"map-value-ind")||(t.key&&(t.value=t.key),delete t.key,Ns(t.value)?t.value.end?Array.prototype.push.apply(t.value.end,t.sep):t.value.end=t.sep:Array.prototype.push.apply(t.start,t.sep),delete t.sep)}class Ts{constructor(e){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new ks,this.onNewLine=e}*parse(e,t=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(const n of this.lexer.lex(e,t))yield*this.next(n);t||(yield*this.end())}*next(e){if(this.source=e,this.atScalar)return this.atScalar=!1,yield*this.step(),void(this.offset+=e.length);const t=hs(e);if(t)if("scalar"===t)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=t,yield*this.step(),t){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case"space":this.atNewLine&&" "===e[0]&&(this.indent+=e.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=e.length}else{const t=`Not a YAML token: ${e}`;yield*this.pop({type:"error",offset:this.offset,message:t,source:e}),this.offset+=e.length}}*end(){for(;this.stack.length>0;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){const e=this.peek(1);if("doc-end"!==this.type||e&&"doc-end"===e.type){if(!e)return yield*this.stream();switch(e.type){case"document":return yield*this.document(e);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(e);case"block-scalar":return yield*this.blockScalar(e);case"block-map":return yield*this.blockMap(e);case"block-seq":return yield*this.blockSequence(e);case"flow-collection":return yield*this.flowCollection(e);case"doc-end":return yield*this.documentEnd(e)}yield*this.pop()}else{for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(e){return this.stack[this.stack.length-e]}*pop(e){const t=e??this.stack.pop();if(t)if(0===this.stack.length)yield t;else{const e=this.peek(1);switch("block-scalar"===t.type?t.indent="indent"in e?e.indent:0:"flow-collection"===t.type&&"document"===e.type&&(t.indent=0),"flow-collection"===t.type&&Is(t),e.type){case"document":e.value=t;break;case"block-scalar":e.props.push(t);break;case"block-map":{const n=e.items[e.items.length-1];if(n.value)return e.items.push({start:[],key:t,sep:[]}),void(this.onKeyLine=!0);if(!n.sep)return Object.assign(n,{key:t,sep:[]}),void(this.onKeyLine=!n.explicitKey);n.value=t;break}case"block-seq":{const n=e.items[e.items.length-1];n.value?e.items.push({start:[],value:t}):n.value=t;break}case"flow-collection":{const n=e.items[e.items.length-1];return void(!n||n.value?e.items.push({start:[],key:t,sep:[]}):n.sep?n.value=t:Object.assign(n,{key:t,sep:[]}))}default:yield*this.pop(),yield*this.pop(t)}if(!("document"!==e.type&&"block-map"!==e.type&&"block-seq"!==e.type||"block-map"!==t.type&&"block-seq"!==t.type)){const n=t.items[t.items.length-1];n&&!n.sep&&!n.value&&n.start.length>0&&-1===Es(n.start)&&(0===t.indent||n.start.every((e=>"comment"!==e.type||e.indent<t.indent)))&&("document"===e.type?e.end=n.start:e.items.push({start:n.start}),t.items.splice(-1,1))}}else{const e="Tried to pop an empty stack";yield{type:"error",offset:this.offset,source:"",message:e}}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":{const e={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&e.start.push(this.sourceToken),void this.stack.push(e)}}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case"doc-start":return void(-1!==Es(e.start)?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void e.start.push(this.sourceToken)}const t=this.startBlockValue(e);t?this.stack.push(t):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(e){if("map-value-ind"===this.type){const t=As(Os(this.peek(2)));let n;e.end?(n=e.end,n.push(this.sourceToken),delete e.end):n=[this.sourceToken];const s={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:t,key:e,sep:n}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=s}else yield*this.lineEnd(e)}*blockScalar(e){switch(this.type){case"space":case"comment":case"newline":return void e.props.push(this.sourceToken);case"scalar":if(e.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(this.onKeyLine=!1,t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else if(t.sep)t.sep.push(this.sourceToken);else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return}if(this.indent>=e.indent){const n=!this.onKeyLine&&this.indent===e.indent,s=n&&(t.sep||t.explicitKey)&&"seq-item-ind"!==this.type;let i=[];if(s&&t.sep&&!t.value){const n=[];for(let s=0;s<t.sep.length;++s){const i=t.sep[s];switch(i.type){case"newline":n.push(s);break;case"space":break;case"comment":i.indent>e.indent&&(n.length=0);break;default:n.length=0}}n.length>=2&&(i=t.sep.splice(n[1]))}switch(this.type){case"anchor":case"tag":return void(s||t.value?(i.push(this.sourceToken),e.items.push({start:i}),this.onKeyLine=!0):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"explicit-key-ind":return t.sep||t.explicitKey?s||t.value?(i.push(this.sourceToken),e.items.push({start:i,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(t.start.push(this.sourceToken),t.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":if(t.explicitKey)if(t.sep)if(t.value)e.items.push({start:[],key:null,sep:[this.sourceToken]});else if(Ss(t.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:i,key:null,sep:[this.sourceToken]}]});else if(Ns(t.key)&&!Ss(t.sep,"newline")){const e=As(t.start),n=t.key,s=t.sep;s.push(this.sourceToken),delete t.key,delete t.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:n,sep:s}]})}else i.length>0?t.sep=t.sep.concat(i,this.sourceToken):t.sep.push(this.sourceToken);else if(Ss(t.start,"newline"))Object.assign(t,{key:null,sep:[this.sourceToken]});else{const e=As(t.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]})}else t.sep?t.value||s?e.items.push({start:i,key:null,sep:[this.sourceToken]}):Ss(t.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]});return void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(s||t.value?(e.items.push({start:i,key:n,sep:[]}),this.onKeyLine=!0):t.sep?this.stack.push(n):(Object.assign(t,{key:n,sep:[]}),this.onKeyLine=!0))}default:{const s=this.startBlockValue(e);if(s){if("block-seq"===s.type){if(!t.explicitKey&&t.sep&&!Ss(t.sep,"newline"))return void(yield*this.pop({type:"error",offset:this.offset,message:"Unexpected block-seq-ind on same line with key",source:this.source}))}else n&&e.items.push({start:i});return void this.stack.push(s)}}}}yield*this.pop(),yield*this.step()}*blockSequence(e){const t=e.items[e.items.length-1];switch(this.type){case"newline":if(t.value){const n="end"in t.value?t.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;"comment"===s?.type?n?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})}else t.start.push(this.sourceToken);return;case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(t.start,e.indent)){const n=e.items[e.items.length-2],s=n?.value?.end;if(Array.isArray(s))return Array.prototype.push.apply(s,t.start),s.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return;case"anchor":case"tag":if(t.value||this.indent<=e.indent)break;return void t.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==e.indent)break;return void(t.value||Ss(t.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken))}if(this.indent>e.indent){const t=this.startBlockValue(e);if(t)return void this.stack.push(t)}yield*this.pop(),yield*this.step()}*flowCollection(e){const t=e.items[e.items.length-1];if("flow-error-end"===this.type){let e;do{yield*this.pop(),e=this.peek(1)}while(e&&"flow-collection"===e.type)}else if(0===e.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!t||t.sep?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken));case"map-value-ind":return void(!t||t.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):Object.assign(t,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!t||t.value?e.items.push({start:[this.sourceToken]}):t.sep?t.sep.push(this.sourceToken):t.start.push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":{const n=this.flowScalar(this.type);return void(!t||t.value?e.items.push({start:[],key:n,sep:[]}):t.sep?this.stack.push(n):Object.assign(t,{key:n,sep:[]}))}case"flow-map-end":case"flow-seq-end":return void e.end.push(this.sourceToken)}const n=this.startBlockValue(e);n?this.stack.push(n):(yield*this.pop(),yield*this.step())}else{const t=this.peek(2);if("block-map"===t.type&&("map-value-ind"===this.type&&t.indent===e.indent||"newline"===this.type&&!t.items[t.items.length-1].sep))yield*this.pop(),yield*this.step();else if("map-value-ind"===this.type&&"flow-collection"!==t.type){const n=As(Os(t));Is(e);const s=e.end.splice(1,e.end.length);s.push(this.sourceToken);const i={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:n,key:e,sep:s}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=i}else yield*this.lineEnd(e)}}flowScalar(e){if(this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}return{type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":{this.onKeyLine=!0;const t=As(Os(e));return t.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,explicitKey:!0}]}}case"map-value-ind":{this.onKeyLine=!0;const t=As(Os(e));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(e,t){return"comment"===this.type&&(!(this.indent<=t)&&e.every((e=>"newline"===e.type||"space"===e.type)))}*documentEnd(e){"doc-mode"!==this.type&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop()))}*lineEnd(e){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function xs(e){const t=!1!==e.prettyErrors;return{lineCounter:e.lineCounter||t&&new vs||null,prettyErrors:t}}function $s(e,t={}){const{lineCounter:n,prettyErrors:s}=xs(t),i=new Ts(n?.addNewLine),o=new zn(t);let r=null;for(const t of o.compose(i.parse(e),!0,e.length))if(r){if("silent"!==r.options.logLevel){r.errors.push(new In(t.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else r=t;return s&&n&&(r.errors.forEach(xn(e,n)),r.warnings.forEach(xn(e,n))),r}var Ls=Object.freeze({__proto__:null,Alias:je,CST:ds,Composer:zn,Document:Nn,Lexer:ks,LineCounter:vs,Pair:gt,Parser:Ts,Scalar:qe,Schema:En,YAMLError:An,YAMLMap:St,YAMLParseError:In,YAMLSeq:Nt,YAMLWarning:Tn,isAlias:ue,isCollection:ge,isDocument:fe,isMap:he,isNode:ye,isPair:de,isScalar:pe,isSeq:me,parse:function(e,t,n){let s;"function"==typeof t?s=t:void 0===n&&t&&"object"==typeof t&&(n=t);const i=$s(e,n);if(!i)return null;if(i.warnings.forEach((e=>lt(i.options.logLevel,e))),i.errors.length>0){if("silent"!==i.options.logLevel)throw i.errors[0];i.errors=[]}return i.toJS(Object.assign({reviver:s},n))},parseAllDocuments:function(e,t={}){const{lineCounter:n,prettyErrors:s}=xs(t),i=new Ts(n?.addNewLine),o=new zn(t),r=Array.from(o.compose(i.parse(e)));if(s&&n)for(const t of r)t.errors.forEach(xn(e,n)),t.warnings.forEach(xn(e,n));return r.length>0?r:Object.assign([],{empty:!0},o.streamInfo())},parseDocument:$s,stringify:function(e,t,n){let s=null;if("function"==typeof t||Array.isArray(t)?s=t:void 0===n&&t&&(n=t),"string"==typeof n&&(n=n.length),"number"==typeof n){const e=Math.round(n);n=e<1?void 0:e>8?{indent:8}:{indent:e}}if(void 0===e){const{keepUndefined:e}=n??t??{};if(!e)return}return fe(e)&&!s?e.toString(n):new Nn(e,s,n).toString(n)},visit:Se,visitAsync:Ne});const Cs=["gpt-","o1","o3","o4"];function _s(e){if(!e)return[];const t=[];let n="",s=!1,i=!1;for(let o=0;o<e.length;o++){const r=e[o];'"'!==r||i?"'"!==r||s?" "!==r||s||i?n+=r:n&&(t.push(n),n=""):i=!i:s=!s}return n&&t.push(n),t}const Bs="--model gemini/gemini-2.5-pro-preview-05-06 --edit-format diff-fenced --chat-language English",Ms='--compress --remove-empty-lines --include "src/**/*.{ts,tsx},**/*.md"';async function Ks(e,n,s){const{ignoreExitStatus:i,...o}=s??{};console.info(c.green(`$ ${e} ${n}`)),console.info("stdout: ---------------------");const r=await async function(e,n,s){return new Promise(((i,o)=>{try{const r=t(e,n??[],s);r.stdout?.setEncoding?.("utf8"),r.stderr?.setEncoding?.("utf8");let a="",c="";r.stdout?.on("data",(e=>{process.stdout.write(e),a+=e})),r.stderr?.on("data",(e=>{c+=e})),r.on("error",(e=>{o(e)})),r.on("close",((e,t)=>{void 0===r.pid?o(new Error("Process has no pid.")):i({pid:r.pid,stdout:a,stderr:c,status:e,signal:t})}))}catch(e){o(e)}}))}(e,n,o),a=r.stderr.trim();return a&&(console.info("stderr: ---------------------"),console.info(c.yellow(a))),console.info("-----------------------------"),console.info(c.magenta(`Exit code: ${r.status}\n`)),i||0===r.status||null===r.status||process.exit(r.status),r.stdout}const js="repomix.result";async function Ps(e,t,s,i,o){const{url:r,apiKey:a}=function(e){let t,n;return e.startsWith("gemini-")?(t="https://generativelanguage.googleapis.com/v1beta/openai/chat/completions",n=process.env.GEMINI_API_KEY||""):Cs.some((t=>e.startsWith(t)))?(t="https://api.openai.com/v1/chat/completions",n=process.env.OPENAI_API_KEY||""):(console.error(`Unknown model: ${e}`),process.exit(1)),{url:t,apiKey:n}}(e),c=["--yes","repomix@latest","--output",js];c.push(..._s(o||Ms)),await Ks("npx",c);const l=n.readFileSync(js,"utf8");n.promises.rm(js,{force:!0});const u=s?"# Plan to Resolve the Issue\n\n1. <Description of step 1>\n2. <Description of step 2>\n3. ...\n\n":"",f=`\nReview the following GitHub issue and the following list of available file paths and their contents.\nBased on this information, please perform the following tasks:\n\n- Create a step-by-step plan outlining how to address the GitHub issue. The plan must focus on writing code excluding tests.\n${s?"\n- Identify the files from the provided list that will need to be modified to implement the plan and resolve the issue.":""}\n\nGitHub Issue:\n\`\`\`\`yml\n${Ls.stringify(t).trim()}\n\`\`\`\`\n\nAvailable files: The user will provide this as a separate message.\n\nPlease format your response as follows:\n\`\`\`\n${u}# File Paths to be Modified\n\n- \`<filePath1>\`\n- \`<filePath2>\`\n- ...\n\`\`\`\n\nEnsure that the file paths are exactly as provided in the input.\n`.trim();console.info(`Generating plan with ${e} (reasoning effort: ${i}) ...`);const h=await async function(e,t,n,s,i){t||(console.error(`API key for ${n} is not set.`),process.exit(1));const o={model:n,messages:s};void 0!==i&&(o.reasoning_effort=i);const r=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(o)});if(!r.ok){const e=await r.text();console.error(`LLM API error: ${r.statusText} (${r.status}): ${e}`),process.exit(1)}return(await r.json()).choices[0].message.content}(r,a,e,[{role:"system",content:f},{role:"user",content:l}],i);console.info("Planning complete!");const d="# Plan to Resolve the Issue",p="# File Paths to be Modified";let m,g=[];const y=h.indexOf(d),b=h.indexOf(p);if(-1!==y){const e=y+27,t=-1!==b?b:h.length;m=h.slice(e,t).trim()}if(-1!==b){const e=b+27,t=/\B-\s*`?([^`\n]+)`?/g;g=[...h.slice(e).trim().matchAll(t)].map((e=>e[1].trim()))}return{plan:m,filePaths:g}}async function Ds({aiderExtraArgs:t,detailedPlan:n,dryRun:s,issueNumber:i,planningModel:o,reasoningEffort:r,repomixExtraArgs:a}){s?console.info(c.yellow("Running in dry-run mode. No branches or PRs will be created.")):await async function(){if(!(await Ks("git",["config","user.name"],{ignoreExitStatus:!0})).trim()){const e=(await Ks("gh",["api","user","--jq",".name"])).trim();if(e&&"null"!==e){const t=e.replace(/^"|"$/g,"");await Ks("git",["config","user.name",t])}else console.warn(c.yellow('Could not retrieve user name from GitHub profile (it might be "null" or not set).'))}if(!(await Ks("git",["config","user.email"],{ignoreExitStatus:!0})).trim()){const e=(await Ks("gh",["api","user","--jq",".email"])).trim();if(e&&"null"!==e){const t=e.replace(/^"|"$/g,"");await Ks("git",["config","user.email",t])}else console.warn(c.yellow('Could not retrieve user email from GitHub profile (it might be "null", private, or not set).'))}}(),await Ks("python",["-m","pip","install","aider-install"]),await Ks("uv",["tool","uninstall","aider-chat"],{ignoreExitStatus:!0}),await Ks("aider-install",[]),await Ks("uv",["tool","run","--from","aider-chat","pip","install","boto3"]);const l=await Ks("gh",["issue","view",i.toString(),"--json","author,title,body,labels,comments"]),u=JSON.parse(l),f=u.body.replace(/<!--[\s\S]*?-->/g,"");const h={author:u.author.login,title:u.title,description:f,comments:u.comments.map((e=>({author:e.author.login,body:e.body})))},d=Ls.stringify(h).trim(),p=o&&await Ps(o,d,n,r,a),m=p&&"plan"in p&&p.plan?`\n# Plan\n\n${p.plan}\n`.trim():"",g=`\nModify the code to resolve the following GitHub issue:\n\`\`\`\`yml\n${d}\n\`\`\`\`\n\n${m}\n`.trim(),y=new Date,b=`ai-pr-${i}-${y.getFullYear()}_${qs(y.getMonth()+1)}${qs(y.getDate())}_${qs(y.getHours())}${qs(y.getMinutes())}${qs(y.getSeconds())}`;s?console.info(c.yellow(`Would create branch: ${b}`)):await Ks("git",["switch","-C",b]);const w=["--yes-always","--no-check-update","--no-gitignore","--no-show-model-warnings","--no-show-release-notes"];w.push(..._s(t||Bs)),s&&w.push("--dry-run"),w.push("--message",g),p&&"filePaths"in p&&w.push(...p.filePaths);const k=(await Ks("aider",w,{env:{...process.env,NO_COLOR:"1"}})).trim();await Ks("git",["commit","-m",`fix: close #${i}`,"--no-verify"],{ignoreExitStatus:!0}),s?console.info(c.yellow(`Would push branch: ${b} to origin`)):await Ks("git",["push","origin",b,"--no-verify"]);const v=e.spawnSync("git",["log","main..HEAD","--reverse","--pretty=%s"],{encoding:"utf8",stdio:"pipe"}).stdout.trim().split("\n")[0];let S=`Closes #${i}\n\n${m}\n`;if(S+=`\n# Aider Log\n\n\`\`\`\`\n${k.slice(0,65e3-S.length)}\n\`\`\`\``,S=S.replaceAll(/(?:\s*\n){2,}/g,"\n\n").trim(),s)console.info(c.yellow(`Would create PR with title: ${v}`)),console.info(c.yellow(`PR body would include the aider response and close issue #${i}`));else{const t=function(){const t=e.spawnSync("git",["remote","get-url","origin"],{encoding:"utf8",stdio:"pipe"}),n=t.stdout.trim().match(/github\.com[\/:]([\w-]+\/[\w-]+)(\.git)?$/);return n?n[1]:""}();await Ks("gh",["pr","create","--title",v,"--body",S,"--repo",t])}console.info(`\nIssue #${i} processed successfully.`),console.info("AWS_REGION_NAME:",process.env.AWS_REGION_NAME)}function qs(e){return String(e).padStart(2,"0")}export{Bs as D,Ms as a,s as c,i as g,Ds as m};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1DVW9UaVdzRS5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2Fuc2lzL2luZGV4LmNqcyIsIi4uL25vZGVfbW9kdWxlcy9hbnNpcy9pbmRleC5tanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvaWRlbnRpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvdmlzaXQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2RpcmVjdGl2ZXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FuY2hvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2FwcGx5UmV2aXZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy90b0pTLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL05vZGUuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvQWxpYXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvU2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9jcmVhdGVOb2RlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL0NvbGxlY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeUNvbW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L2ZvbGRGbG93TGluZXMuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2xvZy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvYWRkUGFpclRvSlNNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvUGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9ZQU1MTWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb21tb24vbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL1lBTUxTZXEuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zZXEuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9udWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb3JlL2Jvb2wuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9mbG9hdC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9pbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvcmUvc2NoZW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9qc29uL3NjaGVtYS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYmluYXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9wYWlycy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvb21hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvYm9vbC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvZmxvYXQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL2ludC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS90aW1lc3RhbXAuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3NjaGVtYS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvdGFncy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvU2NoZW1hLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2RvYy9Eb2N1bWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5RG9jdW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1wcm9wcy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtY29udGFpbnMtbmV3bGluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLW1hcC1pbmNsdWRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1lbmQuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2UtY29sbGVjdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtYmxvY2stc2VxLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zY2FsYXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1zY2FsYXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS91dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2Utbm9kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1kb2MuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvY3N0LXNjYWxhci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3Qtc3RyaW5naWZ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC12aXNpdC5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3QuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGV4ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvbGluZS1jb3VudGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL3BhcnNlci5qcyIsIi4uL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wdWJsaWMtYXBpLmpzIiwiLi4vc3JjL2xsbS50cyIsIi4uL3NyYy91dGlscy50cyIsIi4uL3NyYy9kZWZhdWx0T3B0aW9ucy50cyIsIi4uL3NyYy9zcGF3bi50cyIsIi4uL3NyYy9wbGFuLnRzIiwiLi4vc3JjL21haW4udHMiLCIuLi9zcmMvcHJvZmlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZSx0LHIse2RlZmluZVByb3BlcnR5Om4sc2V0UHJvdG90eXBlT2Y6bCxjcmVhdGU6byxrZXlzOnN9PU9iamVjdCxpPVwiXCIse3JvdW5kOmMsbWF4OmF9PU1hdGgscD1lPT57bGV0IHQ9LyhbYS1mXFxkXXszLDZ9KS9pLmV4ZWMoZSk/LlsxXSxyPXQ/Lmxlbmd0aCxuPXBhcnNlSW50KDZecj8zXnI/XCIwXCI6dFswXSt0WzBdK3RbMV0rdFsxXSt0WzJdK3RbMl06dCwxNik7cmV0dXJuW24+PjE2JjI1NSxuPj44JjI1NSwyNTUmbl19LHU9KGUsdCxyKT0+ZV50fHx0XnI/MTYrMzYqYyhlLzUxKSs2KmModC81MSkrYyhyLzUxKTo4PmU/MTY6ZT4yNDg/MjMxOmMoMjQqKGUtOCkvMjQ3KSsyMzIsZD1lPT57bGV0IHQscixuLGwsbztyZXR1cm4gOD5lPzMwK2U6MTY+ZT9lLTgrOTA6KDIzMj5lPyhvPShlLT0xNiklMzYsdD0oZS8zNnwwKS81LHI9KG8vNnwwKS81LG49byU2LzUpOnQ9cj1uPSgxMCooZS0yMzIpKzgpLzI1NSxsPTIqYSh0LHIsbiksbD8zMCsoYyhuKTw8MnxjKHIpPDwxfGModCkpKygyXmw/MDo2MCk6MzApfSxnPSgoKT0+e2xldCByPWU9Pm8uc29tZSgodD0+ZS50ZXN0KHQpKSksbj1nbG9iYWxUaGlzLGw9bi5wcm9jZXNzPz97fSxvPWwuYXJndj8/W10saT1sLmVudj8/e30sYz0tMTt0cnl7ZT1cIixcIitzKGkpLmpvaW4oXCIsXCIpfWNhdGNoKGUpe2k9e30sYz0wfWxldCBhPVwiRk9SQ0VfQ09MT1JcIixwPXtmYWxzZTowLDA6MCwxOjEsMjoyLDM6M31baVthXV0/Py0xLHU9YSBpbiBpJiZwfHxyKC9eLS1jb2xvcj0/KHRydWV8YWx3YXlzKT8kLyk7cmV0dXJuIHUmJihjPXApLH5jfHwoYz0oKHIsbixsKT0+KHQ9ci5URVJNLHtcIjI0Yml0XCI6Myx0cnVlY29sb3I6MyxhbnNpMjU2OjIsYW5zaToxfVtyLkNPTE9SVEVSTV18fChyLkNJPy8sR0lUSFVCLy50ZXN0KGUpPzM6MTpuJiZcImR1bWJcIiE9PXQ/bD8zOi8tMjU2Ly50ZXN0KHQpPzI6MTowKSkpKGksISFpLlBNMl9IT01FfHxpLk5FWFRfUlVOVElNRT8uaW5jbHVkZXMoXCJlZGdlXCIpfHwhIWwuc3Rkb3V0Py5pc1RUWSxcIndpbjMyXCI9PT1sLnBsYXRmb3JtKSksIXB8fGkuTk9fQ09MT1J8fHIoL14tLShuby1jb2xvcnxjb2xvcj0oZmFsc2V8bmV2ZXIpKSQvKT8wOm4ud2luZG93Py5jaHJvbWV8fHUmJiFjPzM6Y30pKCksZj17b3BlbjppLGNsb3NlOml9LGg9MzksYj00OSxPPXt9LG09KHtwOmV9LHtvcGVuOnQsY2xvc2U6bn0pPT57bGV0IG89KGUsLi4ucik9PntpZighZSl7aWYodCYmdD09PW4pcmV0dXJuIHQ7aWYoKGU/P2kpPT09aSlyZXR1cm4gaX1sZXQgbCxzPWUucmF3P1N0cmluZy5yYXcoe3JhdzplfSwuLi5yKTppK2UsYz1vLnAsYT1jLm8scD1jLmM7aWYocy5pbmNsdWRlcyhcIlx1MDAxYlwiKSlmb3IoO2M7Yz1jLnApe2xldHtvcGVuOmUsY2xvc2U6dH09YyxyPXQubGVuZ3RoLG49aSxvPTA7aWYocilmb3IoO34obD1zLmluZGV4T2YodCxvKSk7bz1sK3Ipbis9cy5zbGljZShvLGwpK2U7cz1uK3Muc2xpY2Uobyl9cmV0dXJuIGErKHMuaW5jbHVkZXMoXCJcXG5cIik/cy5yZXBsYWNlKC8oXFxyP1xcbikvZyxwK1wiJDFcIithKTpzKStwfSxzPXQsYz1uO3JldHVybiBlJiYocz1lLm8rdCxjPW4rZS5jKSxsKG8sciksby5wPXtvcGVuOnQsY2xvc2U6bixvOnMsYyxwOmV9LG8ub3Blbj1zLG8uY2xvc2U9YyxvfTtjb25zdCB3PWZ1bmN0aW9uKGU9Zyl7bGV0IHQ9e0Fuc2lzOncsaXNTdXBwb3J0ZWQ6KCk9PnMsc3RyaXA6ZT0+ZS5yZXBsYWNlKC9bXHUwMDFiwptdW1soKSM7P10qKD86WzAtOV17MSw0fSg/OjtbMC05XXswLDR9KSopP1swLTlBLU9SWmNmLW5xcnk9PjxdL2csaSksZXh0ZW5kKGUpe2ZvcihsZXQgdCBpbiBlKXtsZXQgcj1lW3RdLGw9KHR5cGVvZiByKVswXSxvPVwic1wiPT09bD94KC4uLnAocikpOnI7T1t0XT1cImZcIj09PWw/e2dldCgpe3JldHVybiguLi5lKT0+bSh0aGlzLHIoLi4uZSkpfX06e2dldCgpe2xldCBlPW0odGhpcyxvKTtyZXR1cm4gbih0aGlzLHQse3ZhbHVlOmV9KSxlfX19cmV0dXJuIHI9byh7fSxPKSxsKHQsciksdH19LHM9ZT4wLGM9KGUsdCk9PnM/e29wZW46YFx1MDAxYlske2V9bWAsY2xvc2U6YFx1MDAxYlske3R9bWB9OmYsYT1lPT50PT5lKC4uLnAodCkpLHk9KGUsdCk9PihyLG4sbCk9PmMoYCR7ZX04OzI7JHtyfTske259OyR7bH1gLHQpLFI9KGUsdCk9PihyLG4sbCk9PmMoKChlLHQscik9PmQodShlLHQscikpKShyLG4sbCkrZSx0KSwkPWU9Pih0LHIsbik9PmUodSh0LHIsbikpLHg9eSgzLGgpLFQ9eSg0LGIpLHY9ZT0+YyhcIjM4OzU7XCIrZSxoKSxDPWU9PmMoXCI0ODs1O1wiK2UsYik7Mj09PWU/KHg9JCh2KSxUPSQoQykpOjE9PT1lJiYoeD1SKDAsaCksVD1SKDEwLGIpLHY9ZT0+YyhkKGUpLGgpLEM9ZT0+YyhkKGUpKzEwLGIpKTtsZXQgRSxNPXtmZzp2LGJnOkMscmdiOngsYmdSZ2I6VCxoZXg6YSh4KSxiZ0hleDphKFQpLHZpc2libGU6ZixyZXNldDpjKDAsMCksYm9sZDpjKDEsMjIpLGRpbTpjKDIsMjIpLGl0YWxpYzpjKDMsMjMpLHVuZGVybGluZTpjKDQsMjQpLGludmVyc2U6Yyg3LDI3KSxoaWRkZW46Yyg4LDI4KSxzdHJpa2V0aHJvdWdoOmMoOSwyOSl9LEk9XCJCcmlnaHRcIjtyZXR1cm5cImJsYWNrLHJlZCxncmVlbix5ZWxsb3csYmx1ZSxtYWdlbnRhLGN5YW4sd2hpdGUsZ3JheVwiLnNwbGl0KFwiLFwiKS5tYXAoKChlLHQpPT57RT1cImJnXCIrZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksOD50PyhNW2UrSV09Yyg5MCt0LGgpLE1bRStJXT1jKDEwMCt0LGIpKTp0PTYwLE1bZV09YygzMCt0LGgpLE1bRV09Yyg0MCt0LGIpfSkpLHQuZXh0ZW5kKE0pfSx5PW5ldyB3O21vZHVsZS5leHBvcnRzPXkseS5kZWZhdWx0PXk7XG4iLCJpbXBvcnQgYSBmcm9tXCIuL2luZGV4LmNqc1wiO2V4cG9ydCBkZWZhdWx0IGE7ZXhwb3J0IGNvbnN0e0Fuc2lzLGZnLGJnLHJnYixiZ1JnYixoZXgsYmdIZXgscmVzZXQsaW52ZXJzZSxoaWRkZW4sdmlzaWJsZSxib2xkLGRpbSxpdGFsaWMsdW5kZXJsaW5lLHN0cmlrZXRocm91Z2gsYmxhY2sscmVkLGdyZWVuLHllbGxvdyxibHVlLG1hZ2VudGEsY3lhbix3aGl0ZSxncmF5LHJlZEJyaWdodCxncmVlbkJyaWdodCx5ZWxsb3dCcmlnaHQsYmx1ZUJyaWdodCxtYWdlbnRhQnJpZ2h0LGN5YW5CcmlnaHQsd2hpdGVCcmlnaHQsYmdCbGFjayxiZ1JlZCxiZ0dyZWVuLGJnWWVsbG93LGJnQmx1ZSxiZ01hZ2VudGEsYmdDeWFuLGJnV2hpdGUsYmdHcmF5LGJnUmVkQnJpZ2h0LGJnR3JlZW5CcmlnaHQsYmdZZWxsb3dCcmlnaHQsYmdCbHVlQnJpZ2h0LGJnTWFnZW50YUJyaWdodCxiZ0N5YW5CcmlnaHQsYmdXaGl0ZUJyaWdodH09YTsiLCJjb25zdCBBTElBUyA9IFN5bWJvbC5mb3IoJ3lhbWwuYWxpYXMnKTtcbmNvbnN0IERPQyA9IFN5bWJvbC5mb3IoJ3lhbWwuZG9jdW1lbnQnKTtcbmNvbnN0IE1BUCA9IFN5bWJvbC5mb3IoJ3lhbWwubWFwJyk7XG5jb25zdCBQQUlSID0gU3ltYm9sLmZvcigneWFtbC5wYWlyJyk7XG5jb25zdCBTQ0FMQVIgPSBTeW1ib2wuZm9yKCd5YW1sLnNjYWxhcicpO1xuY29uc3QgU0VRID0gU3ltYm9sLmZvcigneWFtbC5zZXEnKTtcbmNvbnN0IE5PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3lhbWwubm9kZS50eXBlJyk7XG5jb25zdCBpc0FsaWFzID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBBTElBUztcbmNvbnN0IGlzRG9jdW1lbnQgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IERPQztcbmNvbnN0IGlzTWFwID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBNQVA7XG5jb25zdCBpc1BhaXIgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFBBSVI7XG5jb25zdCBpc1NjYWxhciA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0NBTEFSO1xuY29uc3QgaXNTZXEgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFNFUTtcbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBBTElBUzpcbiAgICAgICAgICAgIGNhc2UgTUFQOlxuICAgICAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IGhhc0FuY2hvciA9IChub2RlKSA9PiAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiAhIW5vZGUuYW5jaG9yO1xuXG5leHBvcnQgeyBBTElBUywgRE9DLCBNQVAsIE5PREVfVFlQRSwgUEFJUiwgU0NBTEFSLCBTRVEsIGhhc0FuY2hvciwgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc0RvY3VtZW50LCBpc01hcCwgaXNOb2RlLCBpc1BhaXIsIGlzU2NhbGFyLCBpc1NlcSB9O1xuIiwiaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNNYXAsIGlzU2VxLCBpc1NjYWxhciwgaXNBbGlhcyB9IGZyb20gJy4vbm9kZXMvaWRlbnRpdHkuanMnO1xuXG5jb25zdCBCUkVBSyA9IFN5bWJvbCgnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGRyZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIG5vZGUnKTtcbi8qKlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGFuIEFTVCBub2RlIG9yIGRvY3VtZW50LlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIGBub2RlYCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYGtleWA6IEZvciBzZXF1ZW5jZSB2YWx1ZXMgYW5kIG1hcCBgUGFpcmAsIHRoZSBub2RlJ3MgaW5kZXggaW4gdGhlXG4gKiAgICAgY29sbGVjdGlvbi4gV2l0aGluIGEgYFBhaXJgLCBgJ2tleSdgIG9yIGAndmFsdWUnYCwgY29ycmVzcG9uZGluZ2x5LlxuICogICAgIGBudWxsYCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAqICAgLSBgbm9kZWA6IFRoZSBjdXJyZW50IG5vZGUuXG4gKiAgIC0gYHBhdGhgOiBUaGUgYW5jZXN0cnkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgY29udGludWUgd2l0aCBuZXh0XG4gKiAgICAgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBOb2RlYDogUmVwbGFjZSB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIGJ5IHZpc2l0aW5nIGl0XG4gKiAgIC0gYG51bWJlcmA6IFdoaWxlIGl0ZXJhdGluZyB0aGUgaXRlbXMgb2YgYSBzZXF1ZW5jZSBvciBtYXAsIHNldCB0aGUgaW5kZXhcbiAqICAgICBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudFxuICogICAgIG5vZGUgaGFzIGNoYW5nZWQuXG4gKlxuICogSWYgYHZpc2l0b3JgIGlzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB2YWx1ZXNcbiAqIGVuY291bnRlcmVkIGluIHRoZSB0cmVlLCBpbmNsdWRpbmcgZS5nLiBgbnVsbGAgdmFsdWVzLiBBbHRlcm5hdGl2ZWx5LFxuICogc2VwYXJhdGUgdmlzaXRvciBmdW5jdGlvbnMgbWF5IGJlIGRlZmluZWQgZm9yIGVhY2ggYE1hcGAsIGBQYWlyYCwgYFNlcWAsXG4gKiBgQWxpYXNgIGFuZCBgU2NhbGFyYCBub2RlLiBUbyBkZWZpbmUgdGhlIHNhbWUgdmlzaXRvciBmdW5jdGlvbiBmb3IgbW9yZSB0aGFuXG4gKiBvbmUgbm9kZSB0eXBlLCB1c2UgdGhlIGBDb2xsZWN0aW9uYCAobWFwIGFuZCBzZXEpLCBgVmFsdWVgIChtYXAsIHNlcSAmIHNjYWxhcilcbiAqIGFuZCBgTm9kZWAgKGFsaWFzLCBtYXAsIHNlcSAmIHNjYWxhcikgdGFyZ2V0cy4gT2YgYWxsIHRoZXNlLCBvbmx5IHRoZSBtb3N0XG4gKiBzcGVjaWZpYyBkZWZpbmVkIG9uZSB3aWxsIGJlIHVzZWQgZm9yIGVhY2ggbm9kZS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSB2aXNpdF8obnVsbCwgbm9kZS5jb250ZW50cywgdmlzaXRvcl8sIE9iamVjdC5mcmVlemUoW25vZGVdKSk7XG4gICAgICAgIGlmIChjZCA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgbm9kZS5jb250ZW50cyA9IG51bGw7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgdmlzaXRfKG51bGwsIG5vZGUsIHZpc2l0b3JfLCBPYmplY3QuZnJlZXplKFtdKSk7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuZnVuY3Rpb24gdmlzaXRfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdF8oa2V5LCBjdHJsLCB2aXNpdG9yLCBwYXRoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjdHJsICE9PSAnc3ltYm9sJykge1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXRoID0gT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChub2RlKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaSA9IHZpc2l0XyhpLCBub2RlLml0ZW1zW2ldLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgY29uc3QgY2sgPSB2aXNpdF8oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IHZpc2l0XygndmFsdWUnLCBub2RlLnZhbHVlLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjdiA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY3YgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3RybDtcbn1cbi8qKlxuICogQXBwbHkgYW4gYXN5bmMgdmlzaXRvciB0byBhbiBBU1Qgbm9kZSBvciBkb2N1bWVudC5cbiAqXG4gKiBXYWxrcyB0aHJvdWdoIHRoZSB0cmVlIChkZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSBgbm9kZWAsIGNhbGxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogICAtIGBrZXlgOiBGb3Igc2VxdWVuY2UgdmFsdWVzIGFuZCBtYXAgYFBhaXJgLCB0aGUgbm9kZSdzIGluZGV4IGluIHRoZVxuICogICAgIGNvbGxlY3Rpb24uIFdpdGhpbiBhIGBQYWlyYCwgYCdrZXknYCBvciBgJ3ZhbHVlJ2AsIGNvcnJlc3BvbmRpbmdseS5cbiAqICAgICBgbnVsbGAgZm9yIHRoZSByb290IG5vZGUuXG4gKiAgIC0gYG5vZGVgOiBUaGUgY3VycmVudCBub2RlLlxuICogICAtIGBwYXRoYDogVGhlIGFuY2VzdHJ5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0cmF2ZXJzYWw6XG4gKiAgIC0gYFByb21pc2VgOiBNdXN0IHJlc29sdmUgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzXG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQYDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsIGNvbnRpbnVlIHdpdGggbmV4dFxuICogICAgIHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQUtgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQuUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUsIHRoZW4gY29udGludWUgd2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgTm9kZWA6IFJlcGxhY2UgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSBieSB2aXNpdGluZyBpdFxuICogICAtIGBudW1iZXJgOiBXaGlsZSBpdGVyYXRpbmcgdGhlIGl0ZW1zIG9mIGEgc2VxdWVuY2Ugb3IgbWFwLCBzZXQgdGhlIGluZGV4XG4gKiAgICAgb2YgdGhlIG5leHQgc3RlcC4gVGhpcyBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZiB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnRcbiAqICAgICBub2RlIGhhcyBjaGFuZ2VkLlxuICpcbiAqIElmIGB2aXNpdG9yYCBpcyBhIHNpbmdsZSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdmFsdWVzXG4gKiBlbmNvdW50ZXJlZCBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nIGUuZy4gYG51bGxgIHZhbHVlcy4gQWx0ZXJuYXRpdmVseSxcbiAqIHNlcGFyYXRlIHZpc2l0b3IgZnVuY3Rpb25zIG1heSBiZSBkZWZpbmVkIGZvciBlYWNoIGBNYXBgLCBgUGFpcmAsIGBTZXFgLFxuICogYEFsaWFzYCBhbmQgYFNjYWxhcmAgbm9kZS4gVG8gZGVmaW5lIHRoZSBzYW1lIHZpc2l0b3IgZnVuY3Rpb24gZm9yIG1vcmUgdGhhblxuICogb25lIG5vZGUgdHlwZSwgdXNlIHRoZSBgQ29sbGVjdGlvbmAgKG1hcCBhbmQgc2VxKSwgYFZhbHVlYCAobWFwLCBzZXEgJiBzY2FsYXIpXG4gKiBhbmQgYE5vZGVgIChhbGlhcywgbWFwLCBzZXEgJiBzY2FsYXIpIHRhcmdldHMuIE9mIGFsbCB0aGVzZSwgb25seSB0aGUgbW9zdFxuICogc3BlY2lmaWMgZGVmaW5lZCBvbmUgd2lsbCBiZSB1c2VkIGZvciBlYWNoIG5vZGUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmMobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLmNvbnRlbnRzLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbbm9kZV0pKTtcbiAgICAgICAgaWYgKGNkID09PSBSRU1PVkUpXG4gICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbXSkpO1xufVxuLy8gV2l0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlIGluIHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aGVuIGNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9sYCBtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNhbCBjb21wbGV0ZWx5ICovXG52aXNpdEFzeW5jLkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlJFTU9WRSA9IFJFTU9WRTtcbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmNfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBhd2FpdCBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdEFzeW5jXyhrZXksIGN0cmwsIHZpc2l0b3IsIHBhdGgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGN0cmwgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0gYXdhaXQgdmlzaXRBc3luY18oaSwgbm9kZS5pdGVtc1tpXSwgdmlzaXRvciwgcGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBjaSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGNvbnN0IGNrID0gYXdhaXQgdmlzaXRBc3luY18oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IGF3YWl0IHZpc2l0QXN5bmNfKCd2YWx1ZScsIG5vZGUudmFsdWUsIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGN2ID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjdiA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdHJsO1xufVxuZnVuY3Rpb24gaW5pdFZpc2l0b3IodmlzaXRvcikge1xuICAgIGlmICh0eXBlb2YgdmlzaXRvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgKHZpc2l0b3IuQ29sbGVjdGlvbiB8fCB2aXNpdG9yLk5vZGUgfHwgdmlzaXRvci5WYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgQWxpYXM6IHZpc2l0b3IuTm9kZSxcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5Ob2RlLFxuICAgICAgICAgICAgU2NhbGFyOiB2aXNpdG9yLk5vZGUsXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuTm9kZVxuICAgICAgICB9LCB2aXNpdG9yLlZhbHVlICYmIHtcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNjYWxhcjogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNlcTogdmlzaXRvci5WYWx1ZVxuICAgICAgICB9LCB2aXNpdG9yLkNvbGxlY3Rpb24gJiYge1xuICAgICAgICAgICAgTWFwOiB2aXNpdG9yLkNvbGxlY3Rpb24sXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuQ29sbGVjdGlvblxuICAgICAgICB9LCB2aXNpdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc2l0b3I7XG59XG5mdW5jdGlvbiBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHZpc2l0b3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aXNpdG9yKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzTWFwKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5NYXA/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1NlcShub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2VxPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNQYWlyKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5QYWlyPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNTY2FsYXIobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLlNjYWxhcj8uKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzQWxpYXMobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLkFsaWFzPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBub2RlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIGlmIChpc0NvbGxlY3Rpb24ocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuaXRlbXNba2V5XSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihwYXJlbnQpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdrZXknKVxuICAgICAgICAgICAgcGFyZW50LmtleSA9IG5vZGU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcmVudC52YWx1ZSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbnQocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuY29udGVudHMgPSBub2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcHQgPSBpc0FsaWFzKHBhcmVudCkgPyAnYWxpYXMnIDogJ3NjYWxhcic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlcGxhY2Ugbm9kZSB3aXRoICR7cHR9IHBhcmVudGApO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgdmlzaXQsIHZpc2l0QXN5bmMgfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAnLi4vdmlzaXQuanMnO1xuXG5jb25zdCBlc2NhcGVDaGFycyA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgICcsJzogJyUyQycsXG4gICAgJ1snOiAnJTVCJyxcbiAgICAnXSc6ICclNUQnLFxuICAgICd7JzogJyU3QicsXG4gICAgJ30nOiAnJTdEJ1xufTtcbmNvbnN0IGVzY2FwZVRhZ05hbWUgPSAodG4pID0+IHRuLnJlcGxhY2UoL1shLFtcXF17fV0vZywgY2ggPT4gZXNjYXBlQ2hhcnNbY2hdKTtcbmNsYXNzIERpcmVjdGl2ZXMge1xuICAgIGNvbnN0cnVjdG9yKHlhbWwsIHRhZ3MpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkaXJlY3RpdmVzLWVuZC9kb2Mtc3RhcnQgbWFya2VyIGAtLS1gLiBJZiBgbnVsbGAsIGEgbWFya2VyIG1heSBzdGlsbCBiZVxuICAgICAgICAgKiBpbmNsdWRlZCBpbiB0aGUgZG9jdW1lbnQncyBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZG9jU3RhcnQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIGRvYy1lbmQgbWFya2VyIGAuLi5gLiAgKi9cbiAgICAgICAgdGhpcy5kb2NFbmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55YW1sID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0WWFtbCwgeWFtbCk7XG4gICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MsIHRhZ3MpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgY29weS5kb2NTdGFydCA9IHRoaXMuZG9jU3RhcnQ7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEdXJpbmcgcGFyc2luZywgZ2V0IGEgRGlyZWN0aXZlcyBpbnN0YW5jZSBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kXG4gICAgICogdXBkYXRlIHRoZSBzdHJlYW0gc3RhdGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHZlcnNpb24ncyBzcGVjLlxuICAgICAqL1xuICAgIGF0RG9jdW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnlhbWwudmVyc2lvbikge1xuICAgICAgICAgICAgY2FzZSAnMS4xJzpcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMueWFtbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXQ6IERpcmVjdGl2ZXMuZGVmYXVsdFlhbWwuZXhwbGljaXQsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBEaXJlY3RpdmVzLmRlZmF1bHRUYWdzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25FcnJvciAtIE1heSBiZSBjYWxsZWQgZXZlbiBpZiB0aGUgYWN0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBhZGQobGluZSwgb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5hdE5leHREb2N1bWVudCkge1xuICAgICAgICAgICAgdGhpcy55YW1sID0geyBleHBsaWNpdDogRGlyZWN0aXZlcy5kZWZhdWx0WWFtbC5leHBsaWNpdCwgdmVyc2lvbjogJzEuMScgfTtcbiAgICAgICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MpO1xuICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gbGluZS50cmltKCkuc3BsaXQoL1sgXFx0XSsvKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnJVRBRyc6IHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoMCwgJyVUQUcgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgdHdvIHBhcnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbaGFuZGxlLCBwcmVmaXhdID0gcGFydHM7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzW2hhbmRsZV0gPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICclWUFNTCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnlhbWwuZXhwbGljaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcigwLCAnJVlBTUwgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHBhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbdmVyc2lvbl0gPSBwYXJ0cztcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gJzEuMScgfHwgdmVyc2lvbiA9PT0gJzEuMicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55YW1sLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSAvXlxcZCtcXC5cXGQrJC8udGVzdCh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcig2LCBgVW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uICR7dmVyc2lvbn1gLCBpc1ZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb25FcnJvcigwLCBgVW5rbm93biBkaXJlY3RpdmUgJHtuYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyBhIHRhZywgbWF0Y2hpbmcgaGFuZGxlcyB0byB0aG9zZSBkZWZpbmVkIGluICVUQUcgZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVkIHRhZywgd2hpY2ggbWF5IGFsc28gYmUgdGhlIG5vbi1zcGVjaWZpYyB0YWcgYCchJ2Agb3IgYVxuICAgICAqICAgYCchbG9jYWwnYCB0YWcsIG9yIGBudWxsYCBpZiB1bnJlc29sdmFibGUuXG4gICAgICovXG4gICAgdGFnTmFtZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuICchJzsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgICAgICBpZiAoc291cmNlWzBdICE9PSAnIScpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoYE5vdCBhIHZhbGlkIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlWzFdID09PSAnPCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHZlcmJhdGltID0gc291cmNlLnNsaWNlKDIsIC0xKTtcbiAgICAgICAgICAgIGlmICh2ZXJiYXRpbSA9PT0gJyEnIHx8IHZlcmJhdGltID09PSAnISEnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihgVmVyYmF0aW0gdGFncyBhcmVuJ3QgcmVzb2x2ZWQsIHNvICR7c291cmNlfSBpcyBpbnZhbGlkLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICc+JylcbiAgICAgICAgICAgICAgICBvbkVycm9yKCdWZXJiYXRpbSB0YWdzIG11c3QgZW5kIHdpdGggYSA+Jyk7XG4gICAgICAgICAgICByZXR1cm4gdmVyYmF0aW07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgWywgaGFuZGxlLCBzdWZmaXhdID0gc291cmNlLm1hdGNoKC9eKC4qISkoW14hXSopJC9zKTtcbiAgICAgICAgaWYgKCFzdWZmaXgpXG4gICAgICAgICAgICBvbkVycm9yKGBUaGUgJHtzb3VyY2V9IHRhZyBoYXMgbm8gc3VmZml4YCk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMudGFnc1toYW5kbGVdO1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBkZWNvZGVVUklDb21wb25lbnQoc3VmZml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTsgLy8gbG9jYWwgdGFnXG4gICAgICAgIG9uRXJyb3IoYENvdWxkIG5vdCByZXNvbHZlIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGZ1bGx5IHJlc29sdmVkIHRhZywgcmV0dXJucyBpdHMgcHJpbnRhYmxlIHN0cmluZyBmb3JtLFxuICAgICAqIHRha2luZyBpbnRvIGFjY291bnQgY3VycmVudCB0YWcgcHJlZml4ZXMgYW5kIGRlZmF1bHRzLlxuICAgICAqL1xuICAgIHRhZ1N0cmluZyh0YWcpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaGFuZGxlLCBwcmVmaXhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMudGFncykpIHtcbiAgICAgICAgICAgIGlmICh0YWcuc3RhcnRzV2l0aChwcmVmaXgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUgKyBlc2NhcGVUYWdOYW1lKHRhZy5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdbMF0gPT09ICchJyA/IHRhZyA6IGAhPCR7dGFnfT5gO1xuICAgIH1cbiAgICB0b1N0cmluZyhkb2MpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLnlhbWwuZXhwbGljaXRcbiAgICAgICAgICAgID8gW2AlWUFNTCAke3RoaXMueWFtbC52ZXJzaW9uIHx8ICcxLjInfWBdXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICBjb25zdCB0YWdFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy50YWdzKTtcbiAgICAgICAgbGV0IHRhZ05hbWVzO1xuICAgICAgICBpZiAoZG9jICYmIHRhZ0VudHJpZXMubGVuZ3RoID4gMCAmJiBpc05vZGUoZG9jLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgY29uc3QgdGFncyA9IHt9O1xuICAgICAgICAgICAgdmlzaXQoZG9jLmNvbnRlbnRzLCAoX2tleSwgbm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUobm9kZSkgJiYgbm9kZS50YWcpXG4gICAgICAgICAgICAgICAgICAgIHRhZ3Nbbm9kZS50YWddID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnTmFtZXMgPSBPYmplY3Qua2V5cyh0YWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0YWdOYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtoYW5kbGUsIHByZWZpeF0gb2YgdGFnRW50cmllcykge1xuICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEhJyAmJiBwcmVmaXggPT09ICd0YWc6eWFtbC5vcmcsMjAwMjonKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFkb2MgfHwgdGFnTmFtZXMuc29tZSh0biA9PiB0bi5zdGFydHNXaXRoKHByZWZpeCkpKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYCVUQUcgJHtoYW5kbGV9ICR7cHJlZml4fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICB9XG59XG5EaXJlY3RpdmVzLmRlZmF1bHRZYW1sID0geyBleHBsaWNpdDogZmFsc2UsIHZlcnNpb246ICcxLjInIH07XG5EaXJlY3RpdmVzLmRlZmF1bHRUYWdzID0geyAnISEnOiAndGFnOnlhbWwub3JnLDIwMDI6JyB9O1xuXG5leHBvcnQgeyBEaXJlY3RpdmVzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkIGFuY2hvci5cbiAqXG4gKiBXaWxsIHRocm93IG9uIGVycm9ycy5cbiAqL1xuZnVuY3Rpb24gYW5jaG9ySXNWYWxpZChhbmNob3IpIHtcbiAgICBpZiAoL1tcXHgwMC1cXHgxOVxccyxbXFxde31dLy50ZXN0KGFuY2hvcikpIHtcbiAgICAgICAgY29uc3Qgc2EgPSBKU09OLnN0cmluZ2lmeShhbmNob3IpO1xuICAgICAgICBjb25zdCBtc2cgPSBgQW5jaG9yIG11c3Qgbm90IGNvbnRhaW4gd2hpdGVzcGFjZSBvciBjb250cm9sIGNoYXJhY3RlcnM6ICR7c2F9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYW5jaG9yTmFtZXMocm9vdCkge1xuICAgIGNvbnN0IGFuY2hvcnMgPSBuZXcgU2V0KCk7XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBWYWx1ZShfa2V5LCBub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5hbmNob3IpXG4gICAgICAgICAgICAgICAgYW5jaG9ycy5hZGQobm9kZS5hbmNob3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuY2hvcnM7XG59XG4vKiogRmluZCBhIG5ldyBhbmNob3IgbmFtZSB3aXRoIHRoZSBnaXZlbiBgcHJlZml4YCBhbmQgYSBvbmUtaW5kZXhlZCBzdWZmaXguICovXG5mdW5jdGlvbiBmaW5kTmV3QW5jaG9yKHByZWZpeCwgZXhjbHVkZSkge1xuICAgIGZvciAobGV0IGkgPSAxOyB0cnVlOyArK2kpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke3ByZWZpeH0ke2l9YDtcbiAgICAgICAgaWYgKCFleGNsdWRlLmhhcyhuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVBbmNob3JzKGRvYywgcHJlZml4KSB7XG4gICAgY29uc3QgYWxpYXNPYmplY3RzID0gW107XG4gICAgY29uc3Qgc291cmNlT2JqZWN0cyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcHJldkFuY2hvcnMgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uQW5jaG9yOiAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBhbGlhc09iamVjdHMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgcHJldkFuY2hvcnMgPz8gKHByZXZBbmNob3JzID0gYW5jaG9yTmFtZXMoZG9jKSk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBmaW5kTmV3QW5jaG9yKHByZWZpeCwgcHJldkFuY2hvcnMpO1xuICAgICAgICAgICAgcHJldkFuY2hvcnMuYWRkKGFuY2hvcik7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogV2l0aCBjaXJjdWxhciByZWZlcmVuY2VzLCB0aGUgc291cmNlIG5vZGUgaXMgb25seSByZXNvbHZlZCBhZnRlciBhbGxcbiAgICAgICAgICogb2YgaXRzIGNoaWxkIG5vZGVzIGFyZS4gVGhpcyBpcyB3aHkgYW5jaG9ycyBhcmUgc2V0IG9ubHkgYWZ0ZXIgYWxsIG9mXG4gICAgICAgICAqIHRoZSBub2RlcyBoYXZlIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNldEFuY2hvcnM6ICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIGFsaWFzT2JqZWN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNvdXJjZU9iamVjdHMuZ2V0KHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZi5hbmNob3IgJiZcbiAgICAgICAgICAgICAgICAgICAgKGlzU2NhbGFyKHJlZi5ub2RlKSB8fCBpc0NvbGxlY3Rpb24ocmVmLm5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZWYubm9kZS5hbmNob3IgPSByZWYuYW5jaG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXNvbHZlIHJlcGVhdGVkIG9iamVjdCAodGhpcyBzaG91bGQgbm90IGhhcHBlbiknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmNob3JJc1ZhbGlkLCBhbmNob3JOYW1lcywgY3JlYXRlTm9kZUFuY2hvcnMsIGZpbmROZXdBbmNob3IgfTtcbiIsIi8qKlxuICogQXBwbGllcyB0aGUgSlNPTi5wYXJzZSByZXZpdmVyIGFsZ29yaXRobSBhcyBkZWZpbmVkIGluIHRoZSBFQ01BLTI2MiBzcGVjLFxuICogaW4gc2VjdGlvbiAyNC41LjEuMSBcIlJ1bnRpbWUgU2VtYW50aWNzOiBJbnRlcm5hbGl6ZUpTT05Qcm9wZXJ0eVwiIG9mIHRoZVxuICogMjAyMSBlZGl0aW9uOiBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24ucGFyc2VcbiAqXG4gKiBJbmNsdWRlcyBleHRlbnNpb25zIGZvciBoYW5kbGluZyBNYXAgYW5kIFNldCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBhcHBseVJldml2ZXIocmV2aXZlciwgb2JqLCBrZXksIHZhbCkge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgU3RyaW5nKGkpLCB2MCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1hcnJheS1kZWxldGVcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFtpXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbFtpXSA9IHYxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrIG9mIEFycmF5LmZyb20odmFsLmtleXMoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MCA9IHZhbC5nZXQoayk7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbC5kZWxldGUoayk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWwuc2V0KGssIHYxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdjAgb2YgQXJyYXkuZnJvbSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCB2MCwgdjApO1xuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB2YWwuZGVsZXRlKHYwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZSh2MCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbC5hZGQodjEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHYwXSBvZiBPYmplY3QuZW50cmllcyh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWxba107XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWxba10gPSB2MTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKG9iaiwga2V5LCB2YWwpO1xufVxuXG5leHBvcnQgeyBhcHBseVJldml2ZXIgfTtcbiIsImltcG9ydCB7IGhhc0FuY2hvciB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgYW55IG5vZGUgb3IgaXRzIGNvbnRlbnRzIHRvIG5hdGl2ZSBKYXZhU2NyaXB0XG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGlucHV0IHZhbHVlXG4gKiBAcGFyYW0gYXJnIC0gSWYgYHZhbHVlYCBkZWZpbmVzIGEgYHRvSlNPTigpYCBtZXRob2QsIHVzZSB0aGlzXG4gKiAgIGFzIGl0cyBmaXJzdCBhcmd1bWVudFxuICogQHBhcmFtIGN0eCAtIENvbnZlcnNpb24gY29udGV4dCwgb3JpZ2luYWxseSBzZXQgaW4gRG9jdW1lbnQjdG9KUygpLiBJZlxuICogICBgeyBrZWVwOiB0cnVlIH1gIGlzIG5vdCBzZXQsIG91dHB1dCBzaG91bGQgYmUgc3VpdGFibGUgZm9yIEpTT05cbiAqICAgc3RyaW5naWZpY2F0aW9uLlxuICovXG5mdW5jdGlvbiB0b0pTKHZhbHVlLCBhcmcsIGN0eCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgodiwgaSkgPT4gdG9KUyh2LCBTdHJpbmcoaSksIGN0eCkpO1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICAgICAgaWYgKCFjdHggfHwgIWhhc0FuY2hvcih2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9KU09OKGFyZywgY3R4KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHsgYWxpYXNDb3VudDogMCwgY291bnQ6IDEsIHJlczogdW5kZWZpbmVkIH07XG4gICAgICAgIGN0eC5hbmNob3JzLnNldCh2YWx1ZSwgZGF0YSk7XG4gICAgICAgIGN0eC5vbkNyZWF0ZSA9IHJlcyA9PiB7XG4gICAgICAgICAgICBkYXRhLnJlcyA9IHJlcztcbiAgICAgICAgICAgIGRlbGV0ZSBjdHgub25DcmVhdGU7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHZhbHVlLnRvSlNPTihhcmcsIGN0eCk7XG4gICAgICAgIGlmIChjdHgub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUocmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgJiYgIWN0eD8ua2VlcClcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgeyB0b0pTIH07XG4iLCJpbXBvcnQgeyBhcHBseVJldml2ZXIgfSBmcm9tICcuLi9kb2MvYXBwbHlSZXZpdmVyLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgaXNEb2N1bWVudCB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IHR5cGUgfSk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgbm9kZS4gICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKiogQSBwbGFpbiBKYXZhU2NyaXB0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgbm9kZS4gKi9cbiAgICB0b0pTKGRvYywgeyBtYXBBc01hcCwgbWF4QWxpYXNDb3VudCwgb25BbmNob3IsIHJldml2ZXIgfSA9IHt9KSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudChkb2MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBkb2N1bWVudCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbmNob3JzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkb2MsXG4gICAgICAgICAgICBrZWVwOiB0cnVlLFxuICAgICAgICAgICAgbWFwQXNNYXA6IG1hcEFzTWFwID09PSB0cnVlLFxuICAgICAgICAgICAgbWFwS2V5V2FybmVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heEFsaWFzQ291bnQ6IHR5cGVvZiBtYXhBbGlhc0NvdW50ID09PSAnbnVtYmVyJyA/IG1heEFsaWFzQ291bnQgOiAxMDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdG9KUyh0aGlzLCAnJywgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFuY2hvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjb3VudCwgcmVzIH0gb2YgY3R4LmFuY2hvcnMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgb25BbmNob3IocmVzLCBjb3VudCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBhcHBseVJldml2ZXIocmV2aXZlciwgeyAnJzogcmVzIH0sICcnLCByZXMpXG4gICAgICAgICAgICA6IHJlcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IE5vZGVCYXNlIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5pbXBvcnQgeyBBTElBUywgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc1BhaXIsIGhhc0FuY2hvciB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgTm9kZUJhc2UgfSBmcm9tICcuL05vZGUuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIEFsaWFzIGV4dGVuZHMgTm9kZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICBzdXBlcihBTElBUyk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RhZycsIHtcbiAgICAgICAgICAgIHNldCgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FsaWFzIG5vZGVzIGNhbm5vdCBoYXZlIHRhZ3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgdGhlIHZhbHVlIG9mIHRoaXMgYWxpYXMgd2l0aGluIGBkb2NgLCBmaW5kaW5nIHRoZSBsYXN0XG4gICAgICogaW5zdGFuY2Ugb2YgdGhlIGBzb3VyY2VgIGFuY2hvciBiZWZvcmUgdGhpcyBub2RlLlxuICAgICAqL1xuICAgIHJlc29sdmUoZG9jLCBjdHgpIHtcbiAgICAgICAgbGV0IG5vZGVzO1xuICAgICAgICBpZiAoY3R4Py5hbGlhc1Jlc29sdmVDYWNoZSkge1xuICAgICAgICAgICAgbm9kZXMgPSBjdHguYWxpYXNSZXNvbHZlQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlcyA9IFtdO1xuICAgICAgICAgICAgdmlzaXQoZG9jLCB7XG4gICAgICAgICAgICAgICAgTm9kZTogKF9rZXksIG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWxpYXMobm9kZSkgfHwgaGFzQW5jaG9yKG5vZGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjdHgpXG4gICAgICAgICAgICAgICAgY3R4LmFsaWFzUmVzb2x2ZUNhY2hlID0gbm9kZXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZvdW5kID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICAgICAgICAgIGlmIChub2RlID09PSB0aGlzKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgaWYgKG5vZGUuYW5jaG9yID09PSB0aGlzLnNvdXJjZSlcbiAgICAgICAgICAgICAgICBmb3VuZCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbiAgICB0b0pTT04oX2FyZywgY3R4KSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIHsgc291cmNlOiB0aGlzLnNvdXJjZSB9O1xuICAgICAgICBjb25zdCB7IGFuY2hvcnMsIGRvYywgbWF4QWxpYXNDb3VudCB9ID0gY3R4O1xuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnJlc29sdmUoZG9jLCBjdHgpO1xuICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFVucmVzb2x2ZWQgYWxpYXMgKHRoZSBhbmNob3IgbXVzdCBiZSBzZXQgYmVmb3JlIHRoZSBhbGlhcyk6ICR7dGhpcy5zb3VyY2V9YDtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkYXRhID0gYW5jaG9ycy5nZXQoc291cmNlKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAvLyBSZXNvbHZlIGFuY2hvcnMgZm9yIE5vZGUucHJvdG90eXBlLnRvSlMoKVxuICAgICAgICAgICAgdG9KUyhzb3VyY2UsIG51bGwsIGN0eCk7XG4gICAgICAgICAgICBkYXRhID0gYW5jaG9ycy5nZXQoc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFkYXRhIHx8IGRhdGEucmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdUaGlzIHNob3VsZCBub3QgaGFwcGVuOiBBbGlhcyBhbmNob3Igd2FzIG5vdCByZXNvbHZlZD8nO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heEFsaWFzQ291bnQgPj0gMCkge1xuICAgICAgICAgICAgZGF0YS5jb3VudCArPSAxO1xuICAgICAgICAgICAgaWYgKGRhdGEuYWxpYXNDb3VudCA9PT0gMClcbiAgICAgICAgICAgICAgICBkYXRhLmFsaWFzQ291bnQgPSBnZXRBbGlhc0NvdW50KGRvYywgc291cmNlLCBhbmNob3JzKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmNvdW50ICogZGF0YS5hbGlhc0NvdW50ID4gbWF4QWxpYXNDb3VudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdFeGNlc3NpdmUgYWxpYXMgY291bnQgaW5kaWNhdGVzIGEgcmVzb3VyY2UgZXhoYXVzdGlvbiBhdHRhY2snO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLnJlcztcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBfb25Db21tZW50LCBfb25DaG9tcEtlZXApIHtcbiAgICAgICAgY29uc3Qgc3JjID0gYCoke3RoaXMuc291cmNlfWA7XG4gICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgIGFuY2hvcklzVmFsaWQodGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLnZlcmlmeUFsaWFzT3JkZXIgJiYgIWN0eC5hbmNob3JzLmhhcyh0aGlzLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBgVW5yZXNvbHZlZCBhbGlhcyAodGhlIGFuY2hvciBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIGFsaWFzKTogJHt0aGlzLnNvdXJjZX1gO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN0eC5pbXBsaWNpdEtleSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7c3JjfSBgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcmM7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0QWxpYXNDb3VudChkb2MsIG5vZGUsIGFuY2hvcnMpIHtcbiAgICBpZiAoaXNBbGlhcyhub2RlKSkge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBub2RlLnJlc29sdmUoZG9jKTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gYW5jaG9ycyAmJiBzb3VyY2UgJiYgYW5jaG9ycy5nZXQoc291cmNlKTtcbiAgICAgICAgcmV0dXJuIGFuY2hvciA/IGFuY2hvci5jb3VudCAqIGFuY2hvci5hbGlhc0NvdW50IDogMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBub2RlLml0ZW1zKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gZ2V0QWxpYXNDb3VudChkb2MsIGl0ZW0sIGFuY2hvcnMpO1xuICAgICAgICAgICAgaWYgKGMgPiBjb3VudClcbiAgICAgICAgICAgICAgICBjb3VudCA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgY29uc3Qga2MgPSBnZXRBbGlhc0NvdW50KGRvYywgbm9kZS5rZXksIGFuY2hvcnMpO1xuICAgICAgICBjb25zdCB2YyA9IGdldEFsaWFzQ291bnQoZG9jLCBub2RlLnZhbHVlLCBhbmNob3JzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGtjLCB2Yyk7XG4gICAgfVxuICAgIHJldHVybiAxO1xufVxuXG5leHBvcnQgeyBBbGlhcyB9O1xuIiwiaW1wb3J0IHsgU0NBTEFSIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBOb2RlQmFzZSB9IGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuY29uc3QgaXNTY2FsYXJWYWx1ZSA9ICh2YWx1ZSkgPT4gIXZhbHVlIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG5jbGFzcyBTY2FsYXIgZXh0ZW5kcyBOb2RlQmFzZSB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoU0NBTEFSKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICB0b0pTT04oYXJnLCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGN0eD8ua2VlcCA/IHRoaXMudmFsdWUgOiB0b0pTKHRoaXMudmFsdWUsIGFyZywgY3R4KTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZSk7XG4gICAgfVxufVxuU2NhbGFyLkJMT0NLX0ZPTERFRCA9ICdCTE9DS19GT0xERUQnO1xuU2NhbGFyLkJMT0NLX0xJVEVSQUwgPSAnQkxPQ0tfTElURVJBTCc7XG5TY2FsYXIuUExBSU4gPSAnUExBSU4nO1xuU2NhbGFyLlFVT1RFX0RPVUJMRSA9ICdRVU9URV9ET1VCTEUnO1xuU2NhbGFyLlFVT1RFX1NJTkdMRSA9ICdRVU9URV9TSU5HTEUnO1xuXG5leHBvcnQgeyBTY2FsYXIsIGlzU2NhbGFyVmFsdWUgfTtcbiIsImltcG9ydCB7IEFsaWFzIH0gZnJvbSAnLi4vbm9kZXMvQWxpYXMuanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1BhaXIsIE1BUCwgU0VRLCBpc0RvY3VtZW50IH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuY29uc3QgZGVmYXVsdFRhZ1ByZWZpeCA9ICd0YWc6eWFtbC5vcmcsMjAwMjonO1xuZnVuY3Rpb24gZmluZFRhZ09iamVjdCh2YWx1ZSwgdGFnTmFtZSwgdGFncykge1xuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGFncy5maWx0ZXIodCA9PiB0LnRhZyA9PT0gdGFnTmFtZSk7XG4gICAgICAgIGNvbnN0IHRhZ09iaiA9IG1hdGNoLmZpbmQodCA9PiAhdC5mb3JtYXQpID8/IG1hdGNoWzBdO1xuICAgICAgICBpZiAoIXRhZ09iailcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGFnICR7dGFnTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIHJldHVybiB0YWdPYmo7XG4gICAgfVxuICAgIHJldHVybiB0YWdzLmZpbmQodCA9PiB0LmlkZW50aWZ5Py4odmFsdWUpICYmICF0LmZvcm1hdCk7XG59XG5mdW5jdGlvbiBjcmVhdGVOb2RlKHZhbHVlLCB0YWdOYW1lLCBjdHgpIHtcbiAgICBpZiAoaXNEb2N1bWVudCh2YWx1ZSkpXG4gICAgICAgIHZhbHVlID0gdmFsdWUuY29udGVudHM7XG4gICAgaWYgKGlzTm9kZSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBpZiAoaXNQYWlyKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBtYXAgPSBjdHguc2NoZW1hW01BUF0uY3JlYXRlTm9kZT8uKGN0eC5zY2hlbWEsIG51bGwsIGN0eCk7XG4gICAgICAgIG1hcC5pdGVtcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nIHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyIHx8XG4gICAgICAgIHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbiB8fFxuICAgICAgICAodHlwZW9mIEJpZ0ludCAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBCaWdJbnQpIC8vIG5vdCBzdXBwb3J0ZWQgZXZlcnl3aGVyZVxuICAgICkge1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNlcmlhbGl6ZWpzb25wcm9wZXJ0eVxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICB9XG4gICAgY29uc3QgeyBhbGlhc0R1cGxpY2F0ZU9iamVjdHMsIG9uQW5jaG9yLCBvblRhZ09iaiwgc2NoZW1hLCBzb3VyY2VPYmplY3RzIH0gPSBjdHg7XG4gICAgLy8gRGV0ZWN0IGR1cGxpY2F0ZSByZWZlcmVuY2VzIHRvIHRoZSBzYW1lIG9iamVjdCAmIHVzZSBBbGlhcyBub2RlcyBmb3IgYWxsXG4gICAgLy8gYWZ0ZXIgZmlyc3QuIFRoZSBgcmVmYCB3cmFwcGVyIGFsbG93cyBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyB0byByZXNvbHZlLlxuICAgIGxldCByZWYgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGFsaWFzRHVwbGljYXRlT2JqZWN0cyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJlZiA9IHNvdXJjZU9iamVjdHMuZ2V0KHZhbHVlKTtcbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgcmVmLmFuY2hvciA/PyAocmVmLmFuY2hvciA9IG9uQW5jaG9yKHZhbHVlKSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFsaWFzKHJlZi5hbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVmID0geyBhbmNob3I6IG51bGwsIG5vZGU6IG51bGwgfTtcbiAgICAgICAgICAgIHNvdXJjZU9iamVjdHMuc2V0KHZhbHVlLCByZWYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0YWdOYW1lPy5zdGFydHNXaXRoKCchIScpKVxuICAgICAgICB0YWdOYW1lID0gZGVmYXVsdFRhZ1ByZWZpeCArIHRhZ05hbWUuc2xpY2UoMik7XG4gICAgbGV0IHRhZ09iaiA9IGZpbmRUYWdPYmplY3QodmFsdWUsIHRhZ05hbWUsIHNjaGVtYS50YWdzKTtcbiAgICBpZiAoIXRhZ09iaikge1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgU2NhbGFyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChyZWYpXG4gICAgICAgICAgICAgICAgcmVmLm5vZGUgPSBub2RlO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGFnT2JqID1cbiAgICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgTWFwXG4gICAgICAgICAgICAgICAgPyBzY2hlbWFbTUFQXVxuICAgICAgICAgICAgICAgIDogU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyBzY2hlbWFbU0VRXVxuICAgICAgICAgICAgICAgICAgICA6IHNjaGVtYVtNQVBdO1xuICAgIH1cbiAgICBpZiAob25UYWdPYmopIHtcbiAgICAgICAgb25UYWdPYmoodGFnT2JqKTtcbiAgICAgICAgZGVsZXRlIGN0eC5vblRhZ09iajtcbiAgICB9XG4gICAgY29uc3Qgbm9kZSA9IHRhZ09iaj8uY3JlYXRlTm9kZVxuICAgICAgICA/IHRhZ09iai5jcmVhdGVOb2RlKGN0eC5zY2hlbWEsIHZhbHVlLCBjdHgpXG4gICAgICAgIDogdHlwZW9mIHRhZ09iaj8ubm9kZUNsYXNzPy5mcm9tID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHRhZ09iai5ub2RlQ2xhc3MuZnJvbShjdHguc2NoZW1hLCB2YWx1ZSwgY3R4KVxuICAgICAgICAgICAgOiBuZXcgU2NhbGFyKHZhbHVlKTtcbiAgICBpZiAodGFnTmFtZSlcbiAgICAgICAgbm9kZS50YWcgPSB0YWdOYW1lO1xuICAgIGVsc2UgaWYgKCF0YWdPYmouZGVmYXVsdClcbiAgICAgICAgbm9kZS50YWcgPSB0YWdPYmoudGFnO1xuICAgIGlmIChyZWYpXG4gICAgICAgIHJlZi5ub2RlID0gbm9kZTtcbiAgICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlTm9kZSB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IGlzTm9kZSwgaXNQYWlyLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBOb2RlQmFzZSB9IGZyb20gJy4vTm9kZS5qcyc7XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb25Gcm9tUGF0aChzY2hlbWEsIHBhdGgsIHZhbHVlKSB7XG4gICAgbGV0IHYgPSB2YWx1ZTtcbiAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBjb25zdCBrID0gcGF0aFtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBrID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKGspICYmIGsgPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgYSA9IFtdO1xuICAgICAgICAgICAgYVtrXSA9IHY7XG4gICAgICAgICAgICB2ID0gYTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHYgPSBuZXcgTWFwKFtbaywgdl1dKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlTm9kZSh2LCB1bmRlZmluZWQsIHtcbiAgICAgICAgYWxpYXNEdXBsaWNhdGVPYmplY3RzOiBmYWxzZSxcbiAgICAgICAga2VlcFVuZGVmaW5lZDogZmFsc2UsXG4gICAgICAgIG9uQW5jaG9yOiAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgc2hvdWxkIG5vdCBoYXBwZW4sIHBsZWFzZSByZXBvcnQgYSBidWcuJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgc291cmNlT2JqZWN0czogbmV3IE1hcCgpXG4gICAgfSk7XG59XG4vLyBUeXBlIGd1YXJkIGlzIGludGVudGlvbmFsbHkgYSBsaXR0bGUgd3Jvbmcgc28gYXMgdG8gYmUgbW9yZSB1c2VmdWwsXG4vLyBhcyBpdCBkb2VzIG5vdCBjb3ZlciB1bnR5cGFibGUgZW1wdHkgbm9uLXN0cmluZyBpdGVyYWJsZXMgKGUuZy4gW10pLlxuY29uc3QgaXNFbXB0eVBhdGggPSAocGF0aCkgPT4gcGF0aCA9PSBudWxsIHx8XG4gICAgKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiAhIXBhdGhbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS5kb25lKTtcbmNsYXNzIENvbGxlY3Rpb24gZXh0ZW5kcyBOb2RlQmFzZSB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKHR5cGUpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3NjaGVtYScsIHtcbiAgICAgICAgICAgIHZhbHVlOiBzY2hlbWEsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBJZiBkZWZpbmVkLCBvdmVyd3JpdGVzIHRoZSBvcmlnaW5hbCdzIHNjaGVtYVxuICAgICAqL1xuICAgIGNsb25lKHNjaGVtYSkge1xuICAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMpKTtcbiAgICAgICAgaWYgKHNjaGVtYSlcbiAgICAgICAgICAgIGNvcHkuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICBjb3B5Lml0ZW1zID0gY29weS5pdGVtcy5tYXAoaXQgPT4gaXNOb2RlKGl0KSB8fCBpc1BhaXIoaXQpID8gaXQuY2xvbmUoc2NoZW1hKSA6IGl0KTtcbiAgICAgICAgaWYgKHRoaXMucmFuZ2UpXG4gICAgICAgICAgICBjb3B5LnJhbmdlID0gdGhpcy5yYW5nZS5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHZhbHVlIHRvIHRoZSBjb2xsZWN0aW9uLiBGb3IgYCEhbWFwYCBhbmQgYCEhb21hcGAgdGhlIHZhbHVlIG11c3RcbiAgICAgKiBiZSBhIFBhaXIgaW5zdGFuY2Ugb3IgYSBgeyBrZXksIHZhbHVlIH1gIG9iamVjdCwgd2hpY2ggbWF5IG5vdCBoYXZlIGEga2V5XG4gICAgICogdGhhdCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgbWFwLlxuICAgICAqL1xuICAgIGFkZEluKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSlcbiAgICAgICAgICAgIHRoaXMuYWRkKHZhbHVlKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICAgICAgbm9kZS5hZGRJbihyZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIHJlc3QsIHZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBZQU1MIGNvbGxlY3Rpb24gYXQgJHtrZXl9LiBSZW1haW5pbmcgcGF0aDogJHtyZXN0fWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSB2YWx1ZSBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlSW4ocGF0aCkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgIHJldHVybiBub2RlLmRlbGV0ZUluKHJlc3QpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFlBTUwgY29sbGVjdGlvbiBhdCAke2tleX0uIFJlbWFpbmluZyBwYXRoOiAke3Jlc3R9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaXRlbSBhdCBga2V5YCwgb3IgYHVuZGVmaW5lZGAgaWYgbm90IGZvdW5kLiBCeSBkZWZhdWx0IHVud3JhcHNcbiAgICAgKiBzY2FsYXIgdmFsdWVzIGZyb20gdGhlaXIgc3Vycm91bmRpbmcgbm9kZTsgdG8gZGlzYWJsZSBzZXQgYGtlZXBTY2FsYXJgIHRvXG4gICAgICogYHRydWVgIChjb2xsZWN0aW9ucyBhcmUgYWx3YXlzIHJldHVybmVkIGludGFjdCkuXG4gICAgICovXG4gICAgZ2V0SW4ocGF0aCwga2VlcFNjYWxhcikge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICBpZiAocmVzdC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIobm9kZSkgPyBub2RlLnZhbHVlIDogbm9kZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbihub2RlKSA/IG5vZGUuZ2V0SW4ocmVzdCwga2VlcFNjYWxhcikgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGhhc0FsbE51bGxWYWx1ZXMoYWxsb3dTY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZXZlcnkobm9kZSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzUGFpcihub2RlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBuID0gbm9kZS52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiAobiA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgKGFsbG93U2NhbGFyICYmXG4gICAgICAgICAgICAgICAgICAgIGlzU2NhbGFyKG4pICYmXG4gICAgICAgICAgICAgICAgICAgIG4udmFsdWUgPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAhbi5jb21tZW50QmVmb3JlICYmXG4gICAgICAgICAgICAgICAgICAgICFuLmNvbW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgIW4udGFnKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGNvbGxlY3Rpb24gaW5jbHVkZXMgYSB2YWx1ZSB3aXRoIHRoZSBrZXkgYGtleWAuXG4gICAgICovXG4gICAgaGFzSW4ocGF0aCkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhcyhrZXkpO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbihub2RlKSA/IG5vZGUuaGFzSW4ocmVzdCkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgY29sbGVjdGlvbi4gRm9yIGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgICAqIGJvb2xlYW4gdG8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG4gICAgICovXG4gICAgc2V0SW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgW2tleSwgLi4ucmVzdF0gPSBwYXRoO1xuICAgICAgICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgICAgIG5vZGUuc2V0SW4ocmVzdCwgdmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAobm9kZSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuc2NoZW1hKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgY29sbGVjdGlvbkZyb21QYXRoKHRoaXMuc2NoZW1hLCByZXN0LCB2YWx1ZSkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgWUFNTCBjb2xsZWN0aW9uIGF0ICR7a2V5fS4gUmVtYWluaW5nIHBhdGg6ICR7cmVzdH1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgQ29sbGVjdGlvbiwgY29sbGVjdGlvbkZyb21QYXRoLCBpc0VtcHR5UGF0aCB9O1xuIiwiLyoqXG4gKiBTdHJpbmdpZmllcyBhIGNvbW1lbnQuXG4gKlxuICogRW1wdHkgY29tbWVudCBsaW5lcyBhcmUgbGVmdCBlbXB0eSxcbiAqIGxpbmVzIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUgc3BhY2UgYXJlIHJlcGxhY2VkIGJ5IGAjYCxcbiAqIGFuZCBhbGwgb3RoZXIgbGluZXMgYXJlIHByZWZpeGVkIHdpdGggYSBgI2AuXG4gKi9cbmNvbnN0IHN0cmluZ2lmeUNvbW1lbnQgPSAoc3RyKSA9PiBzdHIucmVwbGFjZSgvXig/ISQpKD86ICQpPy9nbSwgJyMnKTtcbmZ1bmN0aW9uIGluZGVudENvbW1lbnQoY29tbWVudCwgaW5kZW50KSB7XG4gICAgaWYgKC9eXFxuKyQvLnRlc3QoY29tbWVudCkpXG4gICAgICAgIHJldHVybiBjb21tZW50LnN1YnN0cmluZygxKTtcbiAgICByZXR1cm4gaW5kZW50ID8gY29tbWVudC5yZXBsYWNlKC9eKD8hICokKS9nbSwgaW5kZW50KSA6IGNvbW1lbnQ7XG59XG5jb25zdCBsaW5lQ29tbWVudCA9IChzdHIsIGluZGVudCwgY29tbWVudCkgPT4gc3RyLmVuZHNXaXRoKCdcXG4nKVxuICAgID8gaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpXG4gICAgOiBjb21tZW50LmluY2x1ZGVzKCdcXG4nKVxuICAgICAgICA/ICdcXG4nICsgaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpXG4gICAgICAgIDogKHN0ci5lbmRzV2l0aCgnICcpID8gJycgOiAnICcpICsgY29tbWVudDtcblxuZXhwb3J0IHsgaW5kZW50Q29tbWVudCwgbGluZUNvbW1lbnQsIHN0cmluZ2lmeUNvbW1lbnQgfTtcbiIsImNvbnN0IEZPTERfRkxPVyA9ICdmbG93JztcbmNvbnN0IEZPTERfQkxPQ0sgPSAnYmxvY2snO1xuY29uc3QgRk9MRF9RVU9URUQgPSAncXVvdGVkJztcbi8qKlxuICogVHJpZXMgdG8ga2VlcCBpbnB1dCBhdCB1cCB0byBgbGluZVdpZHRoYCBjaGFyYWN0ZXJzLCBzcGxpdHRpbmcgb25seSBvbiBzcGFjZXNcbiAqIG5vdCBmb2xsb3dlZCBieSBuZXdsaW5lcyBvciBzcGFjZXMgdW5sZXNzIGBtb2RlYCBpcyBgJ3F1b3RlZCdgLiBMaW5lcyBhcmVcbiAqIHRlcm1pbmF0ZWQgd2l0aCBgXFxuYCBhbmQgc3RhcnRlZCB3aXRoIGBpbmRlbnRgLlxuICovXG5mdW5jdGlvbiBmb2xkRmxvd0xpbmVzKHRleHQsIGluZGVudCwgbW9kZSA9ICdmbG93JywgeyBpbmRlbnRBdFN0YXJ0LCBsaW5lV2lkdGggPSA4MCwgbWluQ29udGVudFdpZHRoID0gMjAsIG9uRm9sZCwgb25PdmVyZmxvdyB9ID0ge30pIHtcbiAgICBpZiAoIWxpbmVXaWR0aCB8fCBsaW5lV2lkdGggPCAwKVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICBpZiAobGluZVdpZHRoIDwgbWluQ29udGVudFdpZHRoKVxuICAgICAgICBtaW5Db250ZW50V2lkdGggPSAwO1xuICAgIGNvbnN0IGVuZFN0ZXAgPSBNYXRoLm1heCgxICsgbWluQ29udGVudFdpZHRoLCAxICsgbGluZVdpZHRoIC0gaW5kZW50Lmxlbmd0aCk7XG4gICAgaWYgKHRleHQubGVuZ3RoIDw9IGVuZFN0ZXApXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGNvbnN0IGZvbGRzID0gW107XG4gICAgY29uc3QgZXNjYXBlZEZvbGRzID0ge307XG4gICAgbGV0IGVuZCA9IGxpbmVXaWR0aCAtIGluZGVudC5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBpbmRlbnRBdFN0YXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoaW5kZW50QXRTdGFydCA+IGxpbmVXaWR0aCAtIE1hdGgubWF4KDIsIG1pbkNvbnRlbnRXaWR0aCkpXG4gICAgICAgICAgICBmb2xkcy5wdXNoKDApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlbmQgPSBsaW5lV2lkdGggLSBpbmRlbnRBdFN0YXJ0O1xuICAgIH1cbiAgICBsZXQgc3BsaXQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHByZXYgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG92ZXJmbG93ID0gZmFsc2U7XG4gICAgbGV0IGkgPSAtMTtcbiAgICBsZXQgZXNjU3RhcnQgPSAtMTtcbiAgICBsZXQgZXNjRW5kID0gLTE7XG4gICAgaWYgKG1vZGUgPT09IEZPTERfQkxPQ0spIHtcbiAgICAgICAgaSA9IGNvbnN1bWVNb3JlSW5kZW50ZWRMaW5lcyh0ZXh0LCBpLCBpbmRlbnQubGVuZ3RoKTtcbiAgICAgICAgaWYgKGkgIT09IC0xKVxuICAgICAgICAgICAgZW5kID0gaSArIGVuZFN0ZXA7XG4gICAgfVxuICAgIGZvciAobGV0IGNoOyAoY2ggPSB0ZXh0WyhpICs9IDEpXSk7KSB7XG4gICAgICAgIGlmIChtb2RlID09PSBGT0xEX1FVT1RFRCAmJiBjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBlc2NTdGFydCA9IGk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRleHRbaSArIDFdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnVSc6XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gOTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXNjRW5kID0gaTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gRk9MRF9CTE9DSylcbiAgICAgICAgICAgICAgICBpID0gY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzKHRleHQsIGksIGluZGVudC5sZW5ndGgpO1xuICAgICAgICAgICAgZW5kID0gaSArIGluZGVudC5sZW5ndGggKyBlbmRTdGVwO1xuICAgICAgICAgICAgc3BsaXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2ggPT09ICcgJyAmJlxuICAgICAgICAgICAgICAgIHByZXYgJiZcbiAgICAgICAgICAgICAgICBwcmV2ICE9PSAnICcgJiZcbiAgICAgICAgICAgICAgICBwcmV2ICE9PSAnXFxuJyAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICdcXHQnKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BhY2Ugc3Vycm91bmRlZCBieSBub24tc3BhY2UgY2FuIGJlIHJlcGxhY2VkIHdpdGggbmV3bGluZSArIGluZGVudFxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0ZXh0W2kgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSAnICcgJiYgbmV4dCAhPT0gJ1xcbicgJiYgbmV4dCAhPT0gJ1xcdCcpXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID49IGVuZCkge1xuICAgICAgICAgICAgICAgIGlmIChzcGxpdCkge1xuICAgICAgICAgICAgICAgICAgICBmb2xkcy5wdXNoKHNwbGl0KTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gc3BsaXQgKyBlbmRTdGVwO1xuICAgICAgICAgICAgICAgICAgICBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW9kZSA9PT0gRk9MRF9RVU9URUQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpdGUtc3BhY2UgY29sbGVjdGVkIGF0IGVuZCBtYXkgc3RyZXRjaCBwYXN0IGxpbmVXaWR0aFxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocHJldiA9PT0gJyAnIHx8IHByZXYgPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gY2g7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaCA9IHRleHRbKGkgKz0gMSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEFjY291bnQgZm9yIG5ld2xpbmUgZXNjYXBlLCBidXQgZG9uJ3QgYnJlYWsgcHJlY2VkaW5nIGVzY2FwZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBqID0gaSA+IGVzY0VuZCArIDEgPyBpIC0gMiA6IGVzY1N0YXJ0IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQmFpbCBvdXQgaWYgbGluZVdpZHRoICYgbWluQ29udGVudFdpZHRoIGFyZSBzaG9ydGVyIHRoYW4gYW4gZXNjYXBlIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZEZvbGRzW2pdKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRzLnB1c2goaik7XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWRGb2xkc1tqXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGogKyBlbmRTdGVwO1xuICAgICAgICAgICAgICAgICAgICBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGNoO1xuICAgIH1cbiAgICBpZiAob3ZlcmZsb3cgJiYgb25PdmVyZmxvdylcbiAgICAgICAgb25PdmVyZmxvdygpO1xuICAgIGlmIChmb2xkcy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGlmIChvbkZvbGQpXG4gICAgICAgIG9uRm9sZCgpO1xuICAgIGxldCByZXMgPSB0ZXh0LnNsaWNlKDAsIGZvbGRzWzBdKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvbGRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGZvbGQgPSBmb2xkc1tpXTtcbiAgICAgICAgY29uc3QgZW5kID0gZm9sZHNbaSArIDFdIHx8IHRleHQubGVuZ3RoO1xuICAgICAgICBpZiAoZm9sZCA9PT0gMClcbiAgICAgICAgICAgIHJlcyA9IGBcXG4ke2luZGVudH0ke3RleHQuc2xpY2UoMCwgZW5kKX1gO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBGT0xEX1FVT1RFRCAmJiBlc2NhcGVkRm9sZHNbZm9sZF0pXG4gICAgICAgICAgICAgICAgcmVzICs9IGAke3RleHRbZm9sZF19XFxcXGA7XG4gICAgICAgICAgICByZXMgKz0gYFxcbiR7aW5kZW50fSR7dGV4dC5zbGljZShmb2xkICsgMSwgZW5kKX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIFByZXN1bWVzIGBpICsgMWAgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgbGluZVxuICogQHJldHVybnMgaW5kZXggb2YgbGFzdCBuZXdsaW5lIGluIG1vcmUtaW5kZW50ZWQgYmxvY2tcbiAqL1xuZnVuY3Rpb24gY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzKHRleHQsIGksIGluZGVudCkge1xuICAgIGxldCBlbmQgPSBpO1xuICAgIGxldCBzdGFydCA9IGkgKyAxO1xuICAgIGxldCBjaCA9IHRleHRbc3RhcnRdO1xuICAgIHdoaWxlIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0Jykge1xuICAgICAgICBpZiAoaSA8IHN0YXJ0ICsgaW5kZW50KSB7XG4gICAgICAgICAgICBjaCA9IHRleHRbKytpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjaCA9IHRleHRbKytpXTtcbiAgICAgICAgICAgIH0gd2hpbGUgKGNoICYmIGNoICE9PSAnXFxuJyk7XG4gICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGNoID0gdGV4dFtzdGFydF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuZDtcbn1cblxuZXhwb3J0IHsgRk9MRF9CTE9DSywgRk9MRF9GTE9XLCBGT0xEX1FVT1RFRCwgZm9sZEZsb3dMaW5lcyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IGZvbGRGbG93TGluZXMsIEZPTERfRkxPVywgRk9MRF9RVU9URUQsIEZPTERfQkxPQ0sgfSBmcm9tICcuL2ZvbGRGbG93TGluZXMuanMnO1xuXG5jb25zdCBnZXRGb2xkT3B0aW9ucyA9IChjdHgsIGlzQmxvY2spID0+ICh7XG4gICAgaW5kZW50QXRTdGFydDogaXNCbG9jayA/IGN0eC5pbmRlbnQubGVuZ3RoIDogY3R4LmluZGVudEF0U3RhcnQsXG4gICAgbGluZVdpZHRoOiBjdHgub3B0aW9ucy5saW5lV2lkdGgsXG4gICAgbWluQ29udGVudFdpZHRoOiBjdHgub3B0aW9ucy5taW5Db250ZW50V2lkdGhcbn0pO1xuLy8gQWxzbyBjaGVja3MgZm9yIGxpbmVzIHN0YXJ0aW5nIHdpdGggJSwgYXMgcGFyc2luZyB0aGUgb3V0cHV0IGFzIFlBTUwgMS4xIHdpbGxcbi8vIHByZXN1bWUgdGhhdCdzIHN0YXJ0aW5nIGEgbmV3IGRvY3VtZW50LlxuY29uc3QgY29udGFpbnNEb2N1bWVudE1hcmtlciA9IChzdHIpID0+IC9eKCV8LS0tfFxcLlxcLlxcLikvbS50ZXN0KHN0cik7XG5mdW5jdGlvbiBsaW5lTGVuZ3RoT3ZlckxpbWl0KHN0ciwgbGluZVdpZHRoLCBpbmRlbnRMZW5ndGgpIHtcbiAgICBpZiAoIWxpbmVXaWR0aCB8fCBsaW5lV2lkdGggPCAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgbGltaXQgPSBsaW5lV2lkdGggLSBpbmRlbnRMZW5ndGg7XG4gICAgY29uc3Qgc3RyTGVuID0gc3RyLmxlbmd0aDtcbiAgICBpZiAoc3RyTGVuIDw9IGxpbWl0KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIHN0YXJ0ID0gMDsgaSA8IHN0ckxlbjsgKytpKSB7XG4gICAgICAgIGlmIChzdHJbaV0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBpZiAoaSAtIHN0YXJ0ID4gbGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgaWYgKHN0ckxlbiAtIHN0YXJ0IDw9IGxpbWl0KVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRvdWJsZVF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICBpZiAoY3R4Lm9wdGlvbnMuZG91YmxlUXVvdGVkQXNKU09OKVxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICBjb25zdCB7IGltcGxpY2l0S2V5IH0gPSBjdHg7XG4gICAgY29uc3QgbWluTXVsdGlMaW5lTGVuZ3RoID0gY3R4Lm9wdGlvbnMuZG91YmxlUXVvdGVkTWluTXVsdGlMaW5lTGVuZ3RoO1xuICAgIGNvbnN0IGluZGVudCA9IGN0eC5pbmRlbnQgfHwgKGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpID8gJyAgJyA6ICcnKTtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgY2ggPSBqc29uW2ldOyBjaDsgY2ggPSBqc29uWysraV0pIHtcbiAgICAgICAgaWYgKGNoID09PSAnICcgJiYganNvbltpICsgMV0gPT09ICdcXFxcJyAmJiBqc29uW2kgKyAyXSA9PT0gJ24nKSB7XG4gICAgICAgICAgICAvLyBzcGFjZSBiZWZvcmUgbmV3bGluZSBuZWVkcyB0byBiZSBlc2NhcGVkIHRvIG5vdCBiZSBmb2xkZWRcbiAgICAgICAgICAgIHN0ciArPSBqc29uLnNsaWNlKHN0YXJ0LCBpKSArICdcXFxcICc7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICBzdGFydCA9IGk7XG4gICAgICAgICAgICBjaCA9ICdcXFxcJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2ggPT09ICdcXFxcJylcbiAgICAgICAgICAgIHN3aXRjaCAoanNvbltpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGpzb24uc2xpY2Uoc3RhcnQsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGpzb24uc3Vic3RyKGkgKyAyLCA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwMDAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAwNyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXGEnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDBiJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcdic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwMWInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDA4NSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXE4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMGEwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcXyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzIwMjgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxMJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMjAyOSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXFAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZS5zdWJzdHIoMCwgMikgPT09ICcwMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx4JyArIGNvZGUuc3Vic3RyKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0ganNvbi5zdWJzdHIoaSwgNik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1wbGljaXRLZXkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25baSArIDJdID09PSAnXCInIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uLmxlbmd0aCA8IG1pbk11bHRpTGluZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9sZGluZyB3aWxsIGVhdCBmaXJzdCBuZXdsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0ganNvbi5zbGljZShzdGFydCwgaSkgKyAnXFxuXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqc29uW2kgKyAyXSA9PT0gJ1xcXFwnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgM10gPT09ICduJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25baSArIDRdICE9PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBpbmRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGFjZSBhZnRlciBuZXdsaW5lIG5lZWRzIHRvIGJlIGVzY2FwZWQgdG8gbm90IGJlIGZvbGRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25baSArIDJdID09PSAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICBzdHIgPSBzdGFydCA/IHN0ciArIGpzb24uc2xpY2Uoc3RhcnQpIDoganNvbjtcbiAgICByZXR1cm4gaW1wbGljaXRLZXlcbiAgICAgICAgPyBzdHJcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHN0ciwgaW5kZW50LCBGT0xEX1FVT1RFRCwgZ2V0Rm9sZE9wdGlvbnMoY3R4LCBmYWxzZSkpO1xufVxuZnVuY3Rpb24gc2luZ2xlUXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpIHtcbiAgICBpZiAoY3R4Lm9wdGlvbnMuc2luZ2xlUXVvdGUgPT09IGZhbHNlIHx8XG4gICAgICAgIChjdHguaW1wbGljaXRLZXkgJiYgdmFsdWUuaW5jbHVkZXMoJ1xcbicpKSB8fFxuICAgICAgICAvWyBcXHRdXFxufFxcblsgXFx0XS8udGVzdCh2YWx1ZSkgLy8gc2luZ2xlIHF1b3RlZCBzdHJpbmcgY2FuJ3QgaGF2ZSBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2UgYXJvdW5kIG5ld2xpbmVcbiAgICApXG4gICAgICAgIHJldHVybiBkb3VibGVRdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgY29uc3QgaW5kZW50ID0gY3R4LmluZGVudCB8fCAoY29udGFpbnNEb2N1bWVudE1hcmtlcih2YWx1ZSkgPyAnICAnIDogJycpO1xuICAgIGNvbnN0IHJlcyA9IFwiJ1wiICsgdmFsdWUucmVwbGFjZSgvJy9nLCBcIicnXCIpLnJlcGxhY2UoL1xcbisvZywgYCQmXFxuJHtpbmRlbnR9YCkgKyBcIidcIjtcbiAgICByZXR1cm4gY3R4LmltcGxpY2l0S2V5XG4gICAgICAgID8gcmVzXG4gICAgICAgIDogZm9sZEZsb3dMaW5lcyhyZXMsIGluZGVudCwgRk9MRF9GTE9XLCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCkge1xuICAgIGNvbnN0IHsgc2luZ2xlUXVvdGUgfSA9IGN0eC5vcHRpb25zO1xuICAgIGxldCBxcztcbiAgICBpZiAoc2luZ2xlUXVvdGUgPT09IGZhbHNlKVxuICAgICAgICBxcyA9IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgaGFzRG91YmxlID0gdmFsdWUuaW5jbHVkZXMoJ1wiJyk7XG4gICAgICAgIGNvbnN0IGhhc1NpbmdsZSA9IHZhbHVlLmluY2x1ZGVzKFwiJ1wiKTtcbiAgICAgICAgaWYgKGhhc0RvdWJsZSAmJiAhaGFzU2luZ2xlKVxuICAgICAgICAgICAgcXMgPSBzaW5nbGVRdW90ZWRTdHJpbmc7XG4gICAgICAgIGVsc2UgaWYgKGhhc1NpbmdsZSAmJiAhaGFzRG91YmxlKVxuICAgICAgICAgICAgcXMgPSBkb3VibGVRdW90ZWRTdHJpbmc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHFzID0gc2luZ2xlUXVvdGUgPyBzaW5nbGVRdW90ZWRTdHJpbmcgOiBkb3VibGVRdW90ZWRTdHJpbmc7XG4gICAgfVxuICAgIHJldHVybiBxcyh2YWx1ZSwgY3R4KTtcbn1cbi8vIFRoZSBuZWdhdGl2ZSBsb29rYmVoaW5kIGF2b2lkcyBhIHBvbHlub21pYWwgc2VhcmNoLFxuLy8gYnV0IGlzbid0IHN1cHBvcnRlZCB5ZXQgb24gU2FmYXJpOiBodHRwczovL2Nhbml1c2UuY29tL2pzLXJlZ2V4cC1sb29rYmVoaW5kXG5sZXQgYmxvY2tFbmROZXdsaW5lcztcbnRyeSB7XG4gICAgYmxvY2tFbmROZXdsaW5lcyA9IG5ldyBSZWdFeHAoJyhefCg/PCFcXG4pKVxcbisoPyFcXG58JCknLCAnZycpO1xufVxuY2F0Y2gge1xuICAgIGJsb2NrRW5kTmV3bGluZXMgPSAvXFxuKyg/IVxcbnwkKS9nO1xufVxuZnVuY3Rpb24gYmxvY2tTdHJpbmcoeyBjb21tZW50LCB0eXBlLCB2YWx1ZSB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IGJsb2NrUXVvdGUsIGNvbW1lbnRTdHJpbmcsIGxpbmVXaWR0aCB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgLy8gMS4gQmxvY2sgY2FuJ3QgZW5kIGluIHdoaXRlc3BhY2UgdW5sZXNzIHRoZSBsYXN0IGxpbmUgaXMgbm9uLWVtcHR5LlxuICAgIC8vIDIuIFN0cmluZ3MgY29uc2lzdGluZyBvZiBvbmx5IHdoaXRlc3BhY2UgYXJlIGJlc3QgcmVuZGVyZWQgZXhwbGljaXRseS5cbiAgICBpZiAoIWJsb2NrUXVvdGUgfHwgL1xcbltcXHQgXSskLy50ZXN0KHZhbHVlKSB8fCAvXlxccyokLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgIH1cbiAgICBjb25zdCBpbmRlbnQgPSBjdHguaW5kZW50IHx8XG4gICAgICAgIChjdHguZm9yY2VCbG9ja0luZGVudCB8fCBjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSA/ICcgICcgOiAnJyk7XG4gICAgY29uc3QgbGl0ZXJhbCA9IGJsb2NrUXVvdGUgPT09ICdsaXRlcmFsJ1xuICAgICAgICA/IHRydWVcbiAgICAgICAgOiBibG9ja1F1b3RlID09PSAnZm9sZGVkJyB8fCB0eXBlID09PSBTY2FsYXIuQkxPQ0tfRk9MREVEXG4gICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICA6IHR5cGUgPT09IFNjYWxhci5CTE9DS19MSVRFUkFMXG4gICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgOiAhbGluZUxlbmd0aE92ZXJMaW1pdCh2YWx1ZSwgbGluZVdpZHRoLCBpbmRlbnQubGVuZ3RoKTtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gbGl0ZXJhbCA/ICd8XFxuJyA6ICc+XFxuJztcbiAgICAvLyBkZXRlcm1pbmUgY2hvbXBpbmcgZnJvbSB3aGl0ZXNwYWNlIGF0IHZhbHVlIGVuZFxuICAgIGxldCBjaG9tcDtcbiAgICBsZXQgZW5kU3RhcnQ7XG4gICAgZm9yIChlbmRTdGFydCA9IHZhbHVlLmxlbmd0aDsgZW5kU3RhcnQgPiAwOyAtLWVuZFN0YXJ0KSB7XG4gICAgICAgIGNvbnN0IGNoID0gdmFsdWVbZW5kU3RhcnQgLSAxXTtcbiAgICAgICAgaWYgKGNoICE9PSAnXFxuJyAmJiBjaCAhPT0gJ1xcdCcgJiYgY2ggIT09ICcgJylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsZXQgZW5kID0gdmFsdWUuc3Vic3RyaW5nKGVuZFN0YXJ0KTtcbiAgICBjb25zdCBlbmRObFBvcyA9IGVuZC5pbmRleE9mKCdcXG4nKTtcbiAgICBpZiAoZW5kTmxQb3MgPT09IC0xKSB7XG4gICAgICAgIGNob21wID0gJy0nOyAvLyBzdHJpcFxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gZW5kIHx8IGVuZE5sUG9zICE9PSBlbmQubGVuZ3RoIC0gMSkge1xuICAgICAgICBjaG9tcCA9ICcrJzsgLy8ga2VlcFxuICAgICAgICBpZiAob25DaG9tcEtlZXApXG4gICAgICAgICAgICBvbkNob21wS2VlcCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hvbXAgPSAnJzsgLy8gY2xpcFxuICAgIH1cbiAgICBpZiAoZW5kKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgLWVuZC5sZW5ndGgpO1xuICAgICAgICBpZiAoZW5kW2VuZC5sZW5ndGggLSAxXSA9PT0gJ1xcbicpXG4gICAgICAgICAgICBlbmQgPSBlbmQuc2xpY2UoMCwgLTEpO1xuICAgICAgICBlbmQgPSBlbmQucmVwbGFjZShibG9ja0VuZE5ld2xpbmVzLCBgJCYke2luZGVudH1gKTtcbiAgICB9XG4gICAgLy8gZGV0ZXJtaW5lIGluZGVudCBpbmRpY2F0b3IgZnJvbSB3aGl0ZXNwYWNlIGF0IHZhbHVlIHN0YXJ0XG4gICAgbGV0IHN0YXJ0V2l0aFNwYWNlID0gZmFsc2U7XG4gICAgbGV0IHN0YXJ0RW5kO1xuICAgIGxldCBzdGFydE5sUG9zID0gLTE7XG4gICAgZm9yIChzdGFydEVuZCA9IDA7IHN0YXJ0RW5kIDwgdmFsdWUubGVuZ3RoOyArK3N0YXJ0RW5kKSB7XG4gICAgICAgIGNvbnN0IGNoID0gdmFsdWVbc3RhcnRFbmRdO1xuICAgICAgICBpZiAoY2ggPT09ICcgJylcbiAgICAgICAgICAgIHN0YXJ0V2l0aFNwYWNlID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgc3RhcnRObFBvcyA9IHN0YXJ0RW5kO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgbGV0IHN0YXJ0ID0gdmFsdWUuc3Vic3RyaW5nKDAsIHN0YXJ0TmxQb3MgPCBzdGFydEVuZCA/IHN0YXJ0TmxQb3MgKyAxIDogc3RhcnRFbmQpO1xuICAgIGlmIChzdGFydCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyhzdGFydC5sZW5ndGgpO1xuICAgICAgICBzdGFydCA9IHN0YXJ0LnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudFNpemUgPSBpbmRlbnQgPyAnMicgOiAnMSc7IC8vIHJvb3QgaXMgYXQgLTFcbiAgICAvLyBMZWFkaW5nIHwgb3IgPiBpcyBhZGRlZCBsYXRlclxuICAgIGxldCBoZWFkZXIgPSAoc3RhcnRXaXRoU3BhY2UgPyBpbmRlbnRTaXplIDogJycpICsgY2hvbXA7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgaGVhZGVyICs9ICcgJyArIGNvbW1lbnRTdHJpbmcoY29tbWVudC5yZXBsYWNlKC8gP1tcXHJcXG5dKy9nLCAnICcpKTtcbiAgICAgICAgaWYgKG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBpZiAoIWxpdGVyYWwpIHtcbiAgICAgICAgY29uc3QgZm9sZGVkVmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbisvZywgJ1xcbiQmJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8oPzpefFxcbikoW1xcdCBdLiopKD86KFtcXG5cXHQgXSopXFxuKD8hW1xcblxcdCBdKSk/L2csICckMSQyJykgLy8gbW9yZS1pbmRlbnRlZCBsaW5lcyBhcmVuJ3QgZm9sZGVkXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBeIG1vcmUtaW5kLiBeIGVtcHR5ICAgICBeIGNhcHR1cmUgbmV4dCBlbXB0eSBsaW5lcyBvbmx5IGF0IGVuZCBvZiBpbmRlbnRcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4rL2csIGAkJiR7aW5kZW50fWApO1xuICAgICAgICBsZXQgbGl0ZXJhbEZhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGZvbGRPcHRpb25zID0gZ2V0Rm9sZE9wdGlvbnMoY3R4LCB0cnVlKTtcbiAgICAgICAgaWYgKGJsb2NrUXVvdGUgIT09ICdmb2xkZWQnICYmIHR5cGUgIT09IFNjYWxhci5CTE9DS19GT0xERUQpIHtcbiAgICAgICAgICAgIGZvbGRPcHRpb25zLm9uT3ZlcmZsb3cgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGl0ZXJhbEZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm9keSA9IGZvbGRGbG93TGluZXMoYCR7c3RhcnR9JHtmb2xkZWRWYWx1ZX0ke2VuZH1gLCBpbmRlbnQsIEZPTERfQkxPQ0ssIGZvbGRPcHRpb25zKTtcbiAgICAgICAgaWYgKCFsaXRlcmFsRmFsbGJhY2spXG4gICAgICAgICAgICByZXR1cm4gYD4ke2hlYWRlcn1cXG4ke2luZGVudH0ke2JvZHl9YDtcbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXG4rL2csIGAkJiR7aW5kZW50fWApO1xuICAgIHJldHVybiBgfCR7aGVhZGVyfVxcbiR7aW5kZW50fSR7c3RhcnR9JHt2YWx1ZX0ke2VuZH1gO1xufVxuZnVuY3Rpb24gcGxhaW5TdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gaXRlbTtcbiAgICBjb25zdCB7IGFjdHVhbFN0cmluZywgaW1wbGljaXRLZXksIGluZGVudCwgaW5kZW50U3RlcCwgaW5GbG93IH0gPSBjdHg7XG4gICAgaWYgKChpbXBsaWNpdEtleSAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHx8XG4gICAgICAgIChpbkZsb3cgJiYgL1tbXFxde30sXS8udGVzdCh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGlmICgvXltcXG5cXHQgLFtcXF17fSMmKiF8PidcIiVAYF18Xls/LV0kfF5bPy1dWyBcXHRdfFtcXG46XVsgXFx0XXxbIFxcdF1cXG58W1xcblxcdCBdI3xbXFxuXFx0IDpdJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gbm90IGFsbG93ZWQ6XG4gICAgICAgIC8vIC0gJy0nIG9yICc/J1xuICAgICAgICAvLyAtIHN0YXJ0IHdpdGggYW4gaW5kaWNhdG9yIGNoYXJhY3RlciAoZXhjZXB0IFs/Oi1dKSBvciAvWz8tXSAvXG4gICAgICAgIC8vIC0gJ1xcbiAnLCAnOiAnIG9yICcgXFxuJyBhbnl3aGVyZVxuICAgICAgICAvLyAtICcjJyBub3QgcHJlY2VkZWQgYnkgYSBub24tc3BhY2UgY2hhclxuICAgICAgICAvLyAtIGVuZCB3aXRoICcgJyBvciAnOidcbiAgICAgICAgcmV0dXJuIGltcGxpY2l0S2V5IHx8IGluRmxvdyB8fCAhdmFsdWUuaW5jbHVkZXMoJ1xcbicpXG4gICAgICAgICAgICA/IHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KVxuICAgICAgICAgICAgOiBibG9ja1N0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbiAgICBpZiAoIWltcGxpY2l0S2V5ICYmXG4gICAgICAgICFpbkZsb3cgJiZcbiAgICAgICAgdHlwZSAhPT0gU2NhbGFyLlBMQUlOICYmXG4gICAgICAgIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAvLyBXaGVyZSBhbGxvd2VkICYgdHlwZSBub3Qgc2V0IGV4cGxpY2l0bHksIHByZWZlciBibG9jayBzdHlsZSBmb3IgbXVsdGlsaW5lIHN0cmluZ3NcbiAgICAgICAgcmV0dXJuIGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxuICAgIGlmIChjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSkge1xuICAgICAgICBpZiAoaW5kZW50ID09PSAnJykge1xuICAgICAgICAgICAgY3R4LmZvcmNlQmxvY2tJbmRlbnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW1wbGljaXRLZXkgJiYgaW5kZW50ID09PSBpbmRlbnRTdGVwKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN0ciA9IHZhbHVlLnJlcGxhY2UoL1xcbisvZywgYCQmXFxuJHtpbmRlbnR9YCk7XG4gICAgLy8gVmVyaWZ5IHRoYXQgb3V0cHV0IHdpbGwgYmUgcGFyc2VkIGFzIGEgc3RyaW5nLCBhcyBlLmcuIHBsYWluIG51bWJlcnMgYW5kXG4gICAgLy8gYm9vbGVhbnMgZ2V0IHBhcnNlZCB3aXRoIHRob3NlIHR5cGVzIGluIHYxLjIgKGUuZy4gJzQyJywgJ3RydWUnICYgJzAuOWUtMycpLFxuICAgIC8vIGFuZCBvdGhlcnMgaW4gdjEuMS5cbiAgICBpZiAoYWN0dWFsU3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHRlc3QgPSAodGFnKSA9PiB0YWcuZGVmYXVsdCAmJiB0YWcudGFnICE9PSAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyAmJiB0YWcudGVzdD8udGVzdChzdHIpO1xuICAgICAgICBjb25zdCB7IGNvbXBhdCwgdGFncyB9ID0gY3R4LmRvYy5zY2hlbWE7XG4gICAgICAgIGlmICh0YWdzLnNvbWUodGVzdCkgfHwgY29tcGF0Py5zb21lKHRlc3QpKVxuICAgICAgICAgICAgcmV0dXJuIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGxpY2l0S2V5XG4gICAgICAgID8gc3RyXG4gICAgICAgIDogZm9sZEZsb3dMaW5lcyhzdHIsIGluZGVudCwgRk9MRF9GTE9XLCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyBpbXBsaWNpdEtleSwgaW5GbG93IH0gPSBjdHg7XG4gICAgY29uc3Qgc3MgPSB0eXBlb2YgaXRlbS52YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBpdGVtXG4gICAgICAgIDogT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwgeyB2YWx1ZTogU3RyaW5nKGl0ZW0udmFsdWUpIH0pO1xuICAgIGxldCB7IHR5cGUgfSA9IGl0ZW07XG4gICAgaWYgKHR5cGUgIT09IFNjYWxhci5RVU9URV9ET1VCTEUpIHtcbiAgICAgICAgLy8gZm9yY2UgZG91YmxlIHF1b3RlcyBvbiBjb250cm9sIGNoYXJhY3RlcnMgJiB1bnBhaXJlZCBzdXJyb2dhdGVzXG4gICAgICAgIGlmICgvW1xceDAwLVxceDA4XFx4MGItXFx4MWZcXHg3Zi1cXHg5ZlxcdXtEODAwfS1cXHV7REZGRn1dL3UudGVzdChzcy52YWx1ZSkpXG4gICAgICAgICAgICB0eXBlID0gU2NhbGFyLlFVT1RFX0RPVUJMRTtcbiAgICB9XG4gICAgY29uc3QgX3N0cmluZ2lmeSA9IChfdHlwZSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKF90eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5CTE9DS19GT0xERUQ6XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5CTE9DS19MSVRFUkFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBpbXBsaWNpdEtleSB8fCBpbkZsb3dcbiAgICAgICAgICAgICAgICAgICAgPyBxdW90ZWRTdHJpbmcoc3MudmFsdWUsIGN0eCkgLy8gYmxvY2tzIGFyZSBub3QgdmFsaWQgaW5zaWRlIGZsb3cgY29udGFpbmVyc1xuICAgICAgICAgICAgICAgICAgICA6IGJsb2NrU3RyaW5nKHNzLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXIuUVVPVEVfRE9VQkxFOlxuICAgICAgICAgICAgICAgIHJldHVybiBkb3VibGVRdW90ZWRTdHJpbmcoc3MudmFsdWUsIGN0eCk7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5RVU9URV9TSU5HTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpbmdsZVF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLlBMQUlOOlxuICAgICAgICAgICAgICAgIHJldHVybiBwbGFpblN0cmluZyhzcywgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCByZXMgPSBfc3RyaW5naWZ5KHR5cGUpO1xuICAgIGlmIChyZXMgPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgeyBkZWZhdWx0S2V5VHlwZSwgZGVmYXVsdFN0cmluZ1R5cGUgfSA9IGN0eC5vcHRpb25zO1xuICAgICAgICBjb25zdCB0ID0gKGltcGxpY2l0S2V5ICYmIGRlZmF1bHRLZXlUeXBlKSB8fCBkZWZhdWx0U3RyaW5nVHlwZTtcbiAgICAgICAgcmVzID0gX3N0cmluZ2lmeSh0KTtcbiAgICAgICAgaWYgKHJlcyA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVmYXVsdCBzdHJpbmcgdHlwZSAke3R9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9O1xuIiwiaW1wb3J0IHsgYW5jaG9ySXNWYWxpZCB9IGZyb20gJy4uL2RvYy9hbmNob3JzLmpzJztcbmltcG9ydCB7IGlzUGFpciwgaXNBbGlhcywgaXNOb2RlLCBpc1NjYWxhciwgaXNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5Q29tbWVudCB9IGZyb20gJy4vc3RyaW5naWZ5Q29tbWVudC5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuL3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoZG9jLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0ID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGJsb2NrUXVvdGU6IHRydWUsXG4gICAgICAgIGNvbW1lbnRTdHJpbmc6IHN0cmluZ2lmeUNvbW1lbnQsXG4gICAgICAgIGRlZmF1bHRLZXlUeXBlOiBudWxsLFxuICAgICAgICBkZWZhdWx0U3RyaW5nVHlwZTogJ1BMQUlOJyxcbiAgICAgICAgZGlyZWN0aXZlczogbnVsbCxcbiAgICAgICAgZG91YmxlUXVvdGVkQXNKU09OOiBmYWxzZSxcbiAgICAgICAgZG91YmxlUXVvdGVkTWluTXVsdGlMaW5lTGVuZ3RoOiA0MCxcbiAgICAgICAgZmFsc2VTdHI6ICdmYWxzZScsXG4gICAgICAgIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogdHJ1ZSxcbiAgICAgICAgaW5kZW50U2VxOiB0cnVlLFxuICAgICAgICBsaW5lV2lkdGg6IDgwLFxuICAgICAgICBtaW5Db250ZW50V2lkdGg6IDIwLFxuICAgICAgICBudWxsU3RyOiAnbnVsbCcsXG4gICAgICAgIHNpbXBsZUtleXM6IGZhbHNlLFxuICAgICAgICBzaW5nbGVRdW90ZTogbnVsbCxcbiAgICAgICAgdHJ1ZVN0cjogJ3RydWUnLFxuICAgICAgICB2ZXJpZnlBbGlhc09yZGVyOiB0cnVlXG4gICAgfSwgZG9jLnNjaGVtYS50b1N0cmluZ09wdGlvbnMsIG9wdGlvbnMpO1xuICAgIGxldCBpbkZsb3c7XG4gICAgc3dpdGNoIChvcHQuY29sbGVjdGlvblN0eWxlKSB7XG4gICAgICAgIGNhc2UgJ2Jsb2NrJzpcbiAgICAgICAgICAgIGluRmxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Zsb3cnOlxuICAgICAgICAgICAgaW5GbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaW5GbG93ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5jaG9yczogbmV3IFNldCgpLFxuICAgICAgICBkb2MsXG4gICAgICAgIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogb3B0LmZsb3dDb2xsZWN0aW9uUGFkZGluZyA/ICcgJyA6ICcnLFxuICAgICAgICBpbmRlbnQ6ICcnLFxuICAgICAgICBpbmRlbnRTdGVwOiB0eXBlb2Ygb3B0LmluZGVudCA9PT0gJ251bWJlcicgPyAnICcucmVwZWF0KG9wdC5pbmRlbnQpIDogJyAgJyxcbiAgICAgICAgaW5GbG93LFxuICAgICAgICBvcHRpb25zOiBvcHRcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0VGFnT2JqZWN0KHRhZ3MsIGl0ZW0pIHtcbiAgICBpZiAoaXRlbS50YWcpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID0+IHQudGFnID09PSBpdGVtLnRhZyk7XG4gICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoLmZpbmQodCA9PiB0LmZvcm1hdCA9PT0gaXRlbS5mb3JtYXQpID8/IG1hdGNoWzBdO1xuICAgIH1cbiAgICBsZXQgdGFnT2JqID0gdW5kZWZpbmVkO1xuICAgIGxldCBvYmo7XG4gICAgaWYgKGlzU2NhbGFyKGl0ZW0pKSB7XG4gICAgICAgIG9iaiA9IGl0ZW0udmFsdWU7XG4gICAgICAgIGxldCBtYXRjaCA9IHRhZ3MuZmlsdGVyKHQgPT4gdC5pZGVudGlmeT8uKG9iaikpO1xuICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgdGVzdE1hdGNoID0gbWF0Y2guZmlsdGVyKHQgPT4gdC50ZXN0KTtcbiAgICAgICAgICAgIGlmICh0ZXN0TWF0Y2gubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRlc3RNYXRjaDtcbiAgICAgICAgfVxuICAgICAgICB0YWdPYmogPVxuICAgICAgICAgICAgbWF0Y2guZmluZCh0ID0+IHQuZm9ybWF0ID09PSBpdGVtLmZvcm1hdCkgPz8gbWF0Y2guZmluZCh0ID0+ICF0LmZvcm1hdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmogPSBpdGVtO1xuICAgICAgICB0YWdPYmogPSB0YWdzLmZpbmQodCA9PiB0Lm5vZGVDbGFzcyAmJiBvYmogaW5zdGFuY2VvZiB0Lm5vZGVDbGFzcyk7XG4gICAgfVxuICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBvYmo/LmNvbnN0cnVjdG9yPy5uYW1lID8/IChvYmogPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygb2JqKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgbm90IHJlc29sdmVkIGZvciAke25hbWV9IHZhbHVlYCk7XG4gICAgfVxuICAgIHJldHVybiB0YWdPYmo7XG59XG4vLyBuZWVkcyB0byBiZSBjYWxsZWQgYmVmb3JlIHZhbHVlIHN0cmluZ2lmaWVyIHRvIGFsbG93IGZvciBjaXJjdWxhciBhbmNob3IgcmVmc1xuZnVuY3Rpb24gc3RyaW5naWZ5UHJvcHMobm9kZSwgdGFnT2JqLCB7IGFuY2hvcnMsIGRvYyB9KSB7XG4gICAgaWYgKCFkb2MuZGlyZWN0aXZlcylcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IHByb3BzID0gW107XG4gICAgY29uc3QgYW5jaG9yID0gKGlzU2NhbGFyKG5vZGUpIHx8IGlzQ29sbGVjdGlvbihub2RlKSkgJiYgbm9kZS5hbmNob3I7XG4gICAgaWYgKGFuY2hvciAmJiBhbmNob3JJc1ZhbGlkKGFuY2hvcikpIHtcbiAgICAgICAgYW5jaG9ycy5hZGQoYW5jaG9yKTtcbiAgICAgICAgcHJvcHMucHVzaChgJiR7YW5jaG9yfWApO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBub2RlLnRhZyA/PyAodGFnT2JqLmRlZmF1bHQgPyBudWxsIDogdGFnT2JqLnRhZyk7XG4gICAgaWYgKHRhZylcbiAgICAgICAgcHJvcHMucHVzaChkb2MuZGlyZWN0aXZlcy50YWdTdHJpbmcodGFnKSk7XG4gICAgcmV0dXJuIHByb3BzLmpvaW4oJyAnKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBpZiAoaXNQYWlyKGl0ZW0pKVxuICAgICAgICByZXR1cm4gaXRlbS50b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIGlmIChpc0FsaWFzKGl0ZW0pKSB7XG4gICAgICAgIGlmIChjdHguZG9jLmRpcmVjdGl2ZXMpXG4gICAgICAgICAgICByZXR1cm4gaXRlbS50b1N0cmluZyhjdHgpO1xuICAgICAgICBpZiAoY3R4LnJlc29sdmVkQWxpYXNlcz8uaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3Qgc3RyaW5naWZ5IGNpcmN1bGFyIHN0cnVjdHVyZSB3aXRob3V0IGFsaWFzIG5vZGVzYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3R4LnJlc29sdmVkQWxpYXNlcylcbiAgICAgICAgICAgICAgICBjdHgucmVzb2x2ZWRBbGlhc2VzLmFkZChpdGVtKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjdHgucmVzb2x2ZWRBbGlhc2VzID0gbmV3IFNldChbaXRlbV0pO1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW0ucmVzb2x2ZShjdHguZG9jKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgdGFnT2JqID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vZGUgPSBpc05vZGUoaXRlbSlcbiAgICAgICAgPyBpdGVtXG4gICAgICAgIDogY3R4LmRvYy5jcmVhdGVOb2RlKGl0ZW0sIHsgb25UYWdPYmo6IG8gPT4gKHRhZ09iaiA9IG8pIH0pO1xuICAgIHRhZ09iaiA/PyAodGFnT2JqID0gZ2V0VGFnT2JqZWN0KGN0eC5kb2Muc2NoZW1hLnRhZ3MsIG5vZGUpKTtcbiAgICBjb25zdCBwcm9wcyA9IHN0cmluZ2lmeVByb3BzKG5vZGUsIHRhZ09iaiwgY3R4KTtcbiAgICBpZiAocHJvcHMubGVuZ3RoID4gMClcbiAgICAgICAgY3R4LmluZGVudEF0U3RhcnQgPSAoY3R4LmluZGVudEF0U3RhcnQgPz8gMCkgKyBwcm9wcy5sZW5ndGggKyAxO1xuICAgIGNvbnN0IHN0ciA9IHR5cGVvZiB0YWdPYmouc3RyaW5naWZ5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdGFnT2JqLnN0cmluZ2lmeShub2RlLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApXG4gICAgICAgIDogaXNTY2FsYXIobm9kZSlcbiAgICAgICAgICAgID8gc3RyaW5naWZ5U3RyaW5nKG5vZGUsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogbm9kZS50b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIGlmICghcHJvcHMpXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgcmV0dXJuIGlzU2NhbGFyKG5vZGUpIHx8IHN0clswXSA9PT0gJ3snIHx8IHN0clswXSA9PT0gJ1snXG4gICAgICAgID8gYCR7cHJvcHN9ICR7c3RyfWBcbiAgICAgICAgOiBgJHtwcm9wc31cXG4ke2N0eC5pbmRlbnR9JHtzdHJ9YDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH07XG4iLCJmdW5jdGlvbiBkZWJ1Zyhsb2dMZXZlbCwgLi4ubWVzc2FnZXMpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycpXG4gICAgICAgIGNvbnNvbGUubG9nKC4uLm1lc3NhZ2VzKTtcbn1cbmZ1bmN0aW9uIHdhcm4obG9nTGV2ZWwsIHdhcm5pbmcpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycgfHwgbG9nTGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkZWJ1Zywgd2FybiB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIGlzQWxpYXMsIGlzU2VxLCBpc01hcCB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbi8vIElmIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggYSBtZXJnZSBrZXkgaXMgYSBzaW5nbGUgbWFwcGluZyBub2RlLCBlYWNoIG9mXG4vLyBpdHMga2V5L3ZhbHVlIHBhaXJzIGlzIGluc2VydGVkIGludG8gdGhlIGN1cnJlbnQgbWFwcGluZywgdW5sZXNzIHRoZSBrZXlcbi8vIGFscmVhZHkgZXhpc3RzIGluIGl0LiBJZiB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXJnZSBrZXkgaXMgYVxuLy8gc2VxdWVuY2UsIHRoZW4gdGhpcyBzZXF1ZW5jZSBpcyBleHBlY3RlZCB0byBjb250YWluIG1hcHBpbmcgbm9kZXMgYW5kIGVhY2hcbi8vIG9mIHRoZXNlIG5vZGVzIGlzIG1lcmdlZCBpbiB0dXJuIGFjY29yZGluZyB0byBpdHMgb3JkZXIgaW4gdGhlIHNlcXVlbmNlLlxuLy8gS2V5cyBpbiBtYXBwaW5nIG5vZGVzIGVhcmxpZXIgaW4gdGhlIHNlcXVlbmNlIG92ZXJyaWRlIGtleXMgc3BlY2lmaWVkIGluXG4vLyBsYXRlciBtYXBwaW5nIG5vZGVzLiAtLSBodHRwOi8veWFtbC5vcmcvdHlwZS9tZXJnZS5odG1sXG5jb25zdCBNRVJHRV9LRVkgPSAnPDwnO1xuY29uc3QgbWVyZ2UgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSBNRVJHRV9LRVkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgJiYgdmFsdWUuZGVzY3JpcHRpb24gPT09IE1FUkdFX0tFWSksXG4gICAgZGVmYXVsdDogJ2tleScsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLFxuICAgIHRlc3Q6IC9ePDwkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBPYmplY3QuYXNzaWduKG5ldyBTY2FsYXIoU3ltYm9sKE1FUkdFX0tFWSkpLCB7XG4gICAgICAgIGFkZFRvSlNNYXA6IGFkZE1lcmdlVG9KU01hcFxuICAgIH0pLFxuICAgIHN0cmluZ2lmeTogKCkgPT4gTUVSR0VfS0VZXG59O1xuY29uc3QgaXNNZXJnZUtleSA9IChjdHgsIGtleSkgPT4gKG1lcmdlLmlkZW50aWZ5KGtleSkgfHxcbiAgICAoaXNTY2FsYXIoa2V5KSAmJlxuICAgICAgICAoIWtleS50eXBlIHx8IGtleS50eXBlID09PSBTY2FsYXIuUExBSU4pICYmXG4gICAgICAgIG1lcmdlLmlkZW50aWZ5KGtleS52YWx1ZSkpKSAmJlxuICAgIGN0eD8uZG9jLnNjaGVtYS50YWdzLnNvbWUodGFnID0+IHRhZy50YWcgPT09IG1lcmdlLnRhZyAmJiB0YWcuZGVmYXVsdCk7XG5mdW5jdGlvbiBhZGRNZXJnZVRvSlNNYXAoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSBjdHggJiYgaXNBbGlhcyh2YWx1ZSkgPyB2YWx1ZS5yZXNvbHZlKGN0eC5kb2MpIDogdmFsdWU7XG4gICAgaWYgKGlzU2VxKHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZS5pdGVtcylcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZSlcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlXG4gICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgY29uc3Qgc291cmNlID0gY3R4ICYmIGlzQWxpYXModmFsdWUpID8gdmFsdWUucmVzb2x2ZShjdHguZG9jKSA6IHZhbHVlO1xuICAgIGlmICghaXNNYXAoc291cmNlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXJnZSBzb3VyY2VzIG11c3QgYmUgbWFwcyBvciBtYXAgYWxpYXNlcycpO1xuICAgIGNvbnN0IHNyY01hcCA9IHNvdXJjZS50b0pTT04obnVsbCwgY3R4LCBNYXApO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNyY01hcCkge1xuICAgICAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBrZXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBrZXksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IHsgYWRkTWVyZ2VUb0pTTWFwLCBpc01lcmdlS2V5LCBtZXJnZSB9O1xuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL2xvZy5qcyc7XG5pbXBvcnQgeyBpc01lcmdlS2V5LCBhZGRNZXJnZVRvSlNNYXAgfSBmcm9tICcuLi9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuZnVuY3Rpb24gYWRkUGFpclRvSlNNYXAoY3R4LCBtYXAsIHsga2V5LCB2YWx1ZSB9KSB7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGtleS5hZGRUb0pTTWFwKVxuICAgICAgICBrZXkuYWRkVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIC8vIFRPRE86IFNob3VsZCBkcm9wIHRoaXMgc3BlY2lhbCBjYXNlIGZvciBiYXJlIDw8IGhhbmRsaW5nXG4gICAgZWxzZSBpZiAoaXNNZXJnZUtleShjdHgsIGtleSkpXG4gICAgICAgIGFkZE1lcmdlVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBqc0tleSA9IHRvSlMoa2V5LCAnJywgY3R4KTtcbiAgICAgICAgaWYgKG1hcCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgbWFwLnNldChqc0tleSwgdG9KUyh2YWx1ZSwganNLZXksIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChqc0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdLZXkgPSBzdHJpbmdpZnlLZXkoa2V5LCBqc0tleSwgY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IGpzVmFsdWUgPSB0b0pTKHZhbHVlLCBzdHJpbmdLZXksIGN0eCk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nS2V5IGluIG1hcClcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBzdHJpbmdLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGpzVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtYXBbc3RyaW5nS2V5XSA9IGpzVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUtleShrZXksIGpzS2V5LCBjdHgpIHtcbiAgICBpZiAoanNLZXkgPT09IG51bGwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWJhc2UtdG8tc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBqc0tleSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBTdHJpbmcoanNLZXkpO1xuICAgIGlmIChpc05vZGUoa2V5KSAmJiBjdHg/LmRvYykge1xuICAgICAgICBjb25zdCBzdHJDdHggPSBjcmVhdGVTdHJpbmdpZnlDb250ZXh0KGN0eC5kb2MsIHt9KTtcbiAgICAgICAgc3RyQ3R4LmFuY2hvcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjdHguYW5jaG9ycy5rZXlzKCkpXG4gICAgICAgICAgICBzdHJDdHguYW5jaG9ycy5hZGQobm9kZS5hbmNob3IpO1xuICAgICAgICBzdHJDdHguaW5GbG93ID0gdHJ1ZTtcbiAgICAgICAgc3RyQ3R4LmluU3RyaW5naWZ5S2V5ID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc3RyS2V5ID0ga2V5LnRvU3RyaW5nKHN0ckN0eCk7XG4gICAgICAgIGlmICghY3R4Lm1hcEtleVdhcm5lZCkge1xuICAgICAgICAgICAgbGV0IGpzb25TdHIgPSBKU09OLnN0cmluZ2lmeShzdHJLZXkpO1xuICAgICAgICAgICAgaWYgKGpzb25TdHIubGVuZ3RoID4gNDApXG4gICAgICAgICAgICAgICAganNvblN0ciA9IGpzb25TdHIuc3Vic3RyaW5nKDAsIDM2KSArICcuLi5cIic7XG4gICAgICAgICAgICB3YXJuKGN0eC5kb2Mub3B0aW9ucy5sb2dMZXZlbCwgYEtleXMgd2l0aCBjb2xsZWN0aW9uIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkIGR1ZSB0byBKUyBPYmplY3QgcmVzdHJpY3Rpb25zOiAke2pzb25TdHJ9LiBTZXQgbWFwQXNNYXA6IHRydWUgdG8gdXNlIG9iamVjdCBrZXlzLmApO1xuICAgICAgICAgICAgY3R4Lm1hcEtleVdhcm5lZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cktleTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzS2V5KTtcbn1cblxuZXhwb3J0IHsgYWRkUGFpclRvSlNNYXAgfTtcbiIsImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuLi9kb2MvY3JlYXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlQYWlyIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVBhaXIuanMnO1xuaW1wb3J0IHsgYWRkUGFpclRvSlNNYXAgfSBmcm9tICcuL2FkZFBhaXJUb0pTTWFwLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgUEFJUiwgaXNOb2RlIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhaXIoa2V5LCB2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QgayA9IGNyZWF0ZU5vZGUoa2V5LCB1bmRlZmluZWQsIGN0eCk7XG4gICAgY29uc3QgdiA9IGNyZWF0ZU5vZGUodmFsdWUsIHVuZGVmaW5lZCwgY3R4KTtcbiAgICByZXR1cm4gbmV3IFBhaXIoaywgdik7XG59XG5jbGFzcyBQYWlyIHtcbiAgICBjb25zdHJ1Y3RvcihrZXksIHZhbHVlID0gbnVsbCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTk9ERV9UWVBFLCB7IHZhbHVlOiBQQUlSIH0pO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjbG9uZShzY2hlbWEpIHtcbiAgICAgICAgbGV0IHsga2V5LCB2YWx1ZSB9ID0gdGhpcztcbiAgICAgICAgaWYgKGlzTm9kZShrZXkpKVxuICAgICAgICAgICAga2V5ID0ga2V5LmNsb25lKHNjaGVtYSk7XG4gICAgICAgIGlmIChpc05vZGUodmFsdWUpKVxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5jbG9uZShzY2hlbWEpO1xuICAgICAgICByZXR1cm4gbmV3IFBhaXIoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgY29uc3QgcGFpciA9IGN0eD8ubWFwQXNNYXAgPyBuZXcgTWFwKCkgOiB7fTtcbiAgICAgICAgcmV0dXJuIGFkZFBhaXJUb0pTTWFwKGN0eCwgcGFpciwgdGhpcyk7XG4gICAgfVxuICAgIHRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICByZXR1cm4gY3R4Py5kb2NcbiAgICAgICAgICAgID8gc3RyaW5naWZ5UGFpcih0aGlzLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApXG4gICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9O1xuIiwiaW1wb3J0IHsgaXNDb2xsZWN0aW9uLCBpc05vZGUsIGlzU2NhbGFyLCBpc1NlcSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgeyBsaW5lQ29tbWVudCwgaW5kZW50Q29tbWVudCB9IGZyb20gJy4vc3RyaW5naWZ5Q29tbWVudC5qcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVBhaXIoeyBrZXksIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGNvbnN0IHsgYWxsTnVsbFZhbHVlcywgZG9jLCBpbmRlbnQsIGluZGVudFN0ZXAsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZywgaW5kZW50U2VxLCBzaW1wbGVLZXlzIH0gfSA9IGN0eDtcbiAgICBsZXQga2V5Q29tbWVudCA9IChpc05vZGUoa2V5KSAmJiBrZXkuY29tbWVudCkgfHwgbnVsbDtcbiAgICBpZiAoc2ltcGxlS2V5cykge1xuICAgICAgICBpZiAoa2V5Q29tbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaXRoIHNpbXBsZSBrZXlzLCBrZXkgbm9kZXMgY2Fubm90IGhhdmUgY29tbWVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKGtleSkgfHwgKCFpc05vZGUoa2V5KSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdXaXRoIHNpbXBsZSBrZXlzLCBjb2xsZWN0aW9uIGNhbm5vdCBiZSB1c2VkIGFzIGEga2V5IHZhbHVlJztcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBleHBsaWNpdEtleSA9ICFzaW1wbGVLZXlzICYmXG4gICAgICAgICgha2V5IHx8XG4gICAgICAgICAgICAoa2V5Q29tbWVudCAmJiB2YWx1ZSA9PSBudWxsICYmICFjdHguaW5GbG93KSB8fFxuICAgICAgICAgICAgaXNDb2xsZWN0aW9uKGtleSkgfHxcbiAgICAgICAgICAgIChpc1NjYWxhcihrZXkpXG4gICAgICAgICAgICAgICAgPyBrZXkudHlwZSA9PT0gU2NhbGFyLkJMT0NLX0ZPTERFRCB8fCBrZXkudHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUxcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSk7XG4gICAgY3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7XG4gICAgICAgIGFsbE51bGxWYWx1ZXM6IGZhbHNlLFxuICAgICAgICBpbXBsaWNpdEtleTogIWV4cGxpY2l0S2V5ICYmIChzaW1wbGVLZXlzIHx8ICFhbGxOdWxsVmFsdWVzKSxcbiAgICAgICAgaW5kZW50OiBpbmRlbnQgKyBpbmRlbnRTdGVwXG4gICAgfSk7XG4gICAgbGV0IGtleUNvbW1lbnREb25lID0gZmFsc2U7XG4gICAgbGV0IGNob21wS2VlcCA9IGZhbHNlO1xuICAgIGxldCBzdHIgPSBzdHJpbmdpZnkoa2V5LCBjdHgsICgpID0+IChrZXlDb21tZW50RG9uZSA9IHRydWUpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgIGlmICghZXhwbGljaXRLZXkgJiYgIWN0eC5pbkZsb3cgJiYgc3RyLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgaWYgKHNpbXBsZUtleXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpdGggc2ltcGxlIGtleXMsIHNpbmdsZSBsaW5lIHNjYWxhciBtdXN0IG5vdCBzcGFuIG1vcmUgdGhhbiAxMDI0IGNoYXJhY3RlcnMnKTtcbiAgICAgICAgZXhwbGljaXRLZXkgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY3R4LmluRmxvdykge1xuICAgICAgICBpZiAoYWxsTnVsbFZhbHVlcyB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoa2V5Q29tbWVudERvbmUgJiYgb25Db21tZW50KVxuICAgICAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgICAgICAgICAgcmV0dXJuIHN0ciA9PT0gJycgPyAnPycgOiBleHBsaWNpdEtleSA/IGA/ICR7c3RyfWAgOiBzdHI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoKGFsbE51bGxWYWx1ZXMgJiYgIXNpbXBsZUtleXMpIHx8ICh2YWx1ZSA9PSBudWxsICYmIGV4cGxpY2l0S2V5KSkge1xuICAgICAgICBzdHIgPSBgPyAke3N0cn1gO1xuICAgICAgICBpZiAoa2V5Q29tbWVudCAmJiAha2V5Q29tbWVudERvbmUpIHtcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJpbmcoa2V5Q29tbWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNob21wS2VlcCAmJiBvbkNob21wS2VlcClcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGlmIChrZXlDb21tZW50RG9uZSlcbiAgICAgICAga2V5Q29tbWVudCA9IG51bGw7XG4gICAgaWYgKGV4cGxpY2l0S2V5KSB7XG4gICAgICAgIGlmIChrZXlDb21tZW50KVxuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgICAgIHN0ciA9IGA/ICR7c3RyfVxcbiR7aW5kZW50fTpgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RyID0gYCR7c3RyfTpgO1xuICAgICAgICBpZiAoa2V5Q29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJpbmcoa2V5Q29tbWVudCkpO1xuICAgIH1cbiAgICBsZXQgdnNiLCB2Y2IsIHZhbHVlQ29tbWVudDtcbiAgICBpZiAoaXNOb2RlKHZhbHVlKSkge1xuICAgICAgICB2c2IgPSAhIXZhbHVlLnNwYWNlQmVmb3JlO1xuICAgICAgICB2Y2IgPSB2YWx1ZS5jb21tZW50QmVmb3JlO1xuICAgICAgICB2YWx1ZUNvbW1lbnQgPSB2YWx1ZS5jb21tZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdnNiID0gZmFsc2U7XG4gICAgICAgIHZjYiA9IG51bGw7XG4gICAgICAgIHZhbHVlQ29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgdmFsdWUgPSBkb2MuY3JlYXRlTm9kZSh2YWx1ZSk7XG4gICAgfVxuICAgIGN0eC5pbXBsaWNpdEtleSA9IGZhbHNlO1xuICAgIGlmICghZXhwbGljaXRLZXkgJiYgIWtleUNvbW1lbnQgJiYgaXNTY2FsYXIodmFsdWUpKVxuICAgICAgICBjdHguaW5kZW50QXRTdGFydCA9IHN0ci5sZW5ndGggKyAxO1xuICAgIGNob21wS2VlcCA9IGZhbHNlO1xuICAgIGlmICghaW5kZW50U2VxICYmXG4gICAgICAgIGluZGVudFN0ZXAubGVuZ3RoID49IDIgJiZcbiAgICAgICAgIWN0eC5pbkZsb3cgJiZcbiAgICAgICAgIWV4cGxpY2l0S2V5ICYmXG4gICAgICAgIGlzU2VxKHZhbHVlKSAmJlxuICAgICAgICAhdmFsdWUuZmxvdyAmJlxuICAgICAgICAhdmFsdWUudGFnICYmXG4gICAgICAgICF2YWx1ZS5hbmNob3IpIHtcbiAgICAgICAgLy8gSWYgaW5kZW50U2VxID09PSBmYWxzZSwgY29uc2lkZXIgJy0gJyBhcyBwYXJ0IG9mIGluZGVudGF0aW9uIHdoZXJlIHBvc3NpYmxlXG4gICAgICAgIGN0eC5pbmRlbnQgPSBjdHguaW5kZW50LnN1YnN0cmluZygyKTtcbiAgICB9XG4gICAgbGV0IHZhbHVlQ29tbWVudERvbmUgPSBmYWxzZTtcbiAgICBjb25zdCB2YWx1ZVN0ciA9IHN0cmluZ2lmeSh2YWx1ZSwgY3R4LCAoKSA9PiAodmFsdWVDb21tZW50RG9uZSA9IHRydWUpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgIGxldCB3cyA9ICcgJztcbiAgICBpZiAoa2V5Q29tbWVudCB8fCB2c2IgfHwgdmNiKSB7XG4gICAgICAgIHdzID0gdnNiID8gJ1xcbicgOiAnJztcbiAgICAgICAgaWYgKHZjYikge1xuICAgICAgICAgICAgY29uc3QgY3MgPSBjb21tZW50U3RyaW5nKHZjYik7XG4gICAgICAgICAgICB3cyArPSBgXFxuJHtpbmRlbnRDb21tZW50KGNzLCBjdHguaW5kZW50KX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZVN0ciA9PT0gJycgJiYgIWN0eC5pbkZsb3cpIHtcbiAgICAgICAgICAgIGlmICh3cyA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgd3MgPSAnXFxuXFxuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdzICs9IGBcXG4ke2N0eC5pbmRlbnR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICghZXhwbGljaXRLZXkgJiYgaXNDb2xsZWN0aW9uKHZhbHVlKSkge1xuICAgICAgICBjb25zdCB2czAgPSB2YWx1ZVN0clswXTtcbiAgICAgICAgY29uc3QgbmwwID0gdmFsdWVTdHIuaW5kZXhPZignXFxuJyk7XG4gICAgICAgIGNvbnN0IGhhc05ld2xpbmUgPSBubDAgIT09IC0xO1xuICAgICAgICBjb25zdCBmbG93ID0gY3R4LmluRmxvdyA/PyB2YWx1ZS5mbG93ID8/IHZhbHVlLml0ZW1zLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaWYgKGhhc05ld2xpbmUgfHwgIWZsb3cpIHtcbiAgICAgICAgICAgIGxldCBoYXNQcm9wc0xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChoYXNOZXdsaW5lICYmICh2czAgPT09ICcmJyB8fCB2czAgPT09ICchJykpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3AwID0gdmFsdWVTdHIuaW5kZXhPZignICcpO1xuICAgICAgICAgICAgICAgIGlmICh2czAgPT09ICcmJyAmJlxuICAgICAgICAgICAgICAgICAgICBzcDAgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIHNwMCA8IG5sMCAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVN0cltzcDAgKyAxXSA9PT0gJyEnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwMCA9IHZhbHVlU3RyLmluZGV4T2YoJyAnLCBzcDAgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNwMCA9PT0gLTEgfHwgbmwwIDwgc3AwKVxuICAgICAgICAgICAgICAgICAgICBoYXNQcm9wc0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFoYXNQcm9wc0xpbmUpXG4gICAgICAgICAgICAgICAgd3MgPSBgXFxuJHtjdHguaW5kZW50fWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVTdHIgPT09ICcnIHx8IHZhbHVlU3RyWzBdID09PSAnXFxuJykge1xuICAgICAgICB3cyA9ICcnO1xuICAgIH1cbiAgICBzdHIgKz0gd3MgKyB2YWx1ZVN0cjtcbiAgICBpZiAoY3R4LmluRmxvdykge1xuICAgICAgICBpZiAodmFsdWVDb21tZW50RG9uZSAmJiBvbkNvbW1lbnQpXG4gICAgICAgICAgICBvbkNvbW1lbnQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVDb21tZW50ICYmICF2YWx1ZUNvbW1lbnREb25lKSB7XG4gICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGN0eC5pbmRlbnQsIGNvbW1lbnRTdHJpbmcodmFsdWVDb21tZW50KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNob21wS2VlcCAmJiBvbkNob21wS2VlcCkge1xuICAgICAgICBvbkNob21wS2VlcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlQYWlyIH07XG4iLCJpbXBvcnQgeyBpc05vZGUsIGlzUGFpciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGxpbmVDb21tZW50LCBpbmRlbnRDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcblxuZnVuY3Rpb24gc3RyaW5naWZ5Q29sbGVjdGlvbihjb2xsZWN0aW9uLCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmbG93ID0gY3R4LmluRmxvdyA/PyBjb2xsZWN0aW9uLmZsb3c7XG4gICAgY29uc3Qgc3RyaW5naWZ5ID0gZmxvdyA/IHN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uIDogc3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uO1xuICAgIHJldHVybiBzdHJpbmdpZnkoY29sbGVjdGlvbiwgY3R4LCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUJsb2NrQ29sbGVjdGlvbih7IGNvbW1lbnQsIGl0ZW1zIH0sIGN0eCwgeyBibG9ja0l0ZW1QcmVmaXgsIGZsb3dDaGFycywgaXRlbUluZGVudCwgb25DaG9tcEtlZXAsIG9uQ29tbWVudCB9KSB7XG4gICAgY29uc3QgeyBpbmRlbnQsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZyB9IH0gPSBjdHg7XG4gICAgY29uc3QgaXRlbUN0eCA9IE9iamVjdC5hc3NpZ24oe30sIGN0eCwgeyBpbmRlbnQ6IGl0ZW1JbmRlbnQsIHR5cGU6IG51bGwgfSk7XG4gICAgbGV0IGNob21wS2VlcCA9IGZhbHNlOyAvLyBmbGFnIGZvciB0aGUgcHJlY2VkaW5nIG5vZGUncyBzdGF0dXNcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBsZXQgY29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChpc05vZGUoaXRlbSkpIHtcbiAgICAgICAgICAgIGlmICghY2hvbXBLZWVwICYmIGl0ZW0uc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBhZGRDb21tZW50QmVmb3JlKGN0eCwgbGluZXMsIGl0ZW0uY29tbWVudEJlZm9yZSwgY2hvbXBLZWVwKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGl0ZW0uY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIoaXRlbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlrID0gaXNOb2RlKGl0ZW0ua2V5KSA/IGl0ZW0ua2V5IDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpaykge1xuICAgICAgICAgICAgICAgIGlmICghY2hvbXBLZWVwICYmIGlrLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgICAgICBhZGRDb21tZW50QmVmb3JlKGN0eCwgbGluZXMsIGlrLmNvbW1lbnRCZWZvcmUsIGNob21wS2VlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgICAgIGxldCBzdHIgPSBzdHJpbmdpZnkoaXRlbSwgaXRlbUN0eCwgKCkgPT4gKGNvbW1lbnQgPSBudWxsKSwgKCkgPT4gKGNob21wS2VlcCA9IHRydWUpKTtcbiAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBpdGVtSW5kZW50LCBjb21tZW50U3RyaW5nKGNvbW1lbnQpKTtcbiAgICAgICAgaWYgKGNob21wS2VlcCAmJiBjb21tZW50KVxuICAgICAgICAgICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgICAgIGxpbmVzLnB1c2goYmxvY2tJdGVtUHJlZml4ICsgc3RyKTtcbiAgICB9XG4gICAgbGV0IHN0cjtcbiAgICBpZiAobGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHN0ciA9IGZsb3dDaGFycy5zdGFydCArIGZsb3dDaGFycy5lbmQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBsaW5lc1swXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgc3RyICs9IGxpbmUgPyBgXFxuJHtpbmRlbnR9JHtsaW5lfWAgOiAnXFxuJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBzdHIgKz0gJ1xcbicgKyBpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoY29tbWVudCksIGluZGVudCk7XG4gICAgICAgIGlmIChvbkNvbW1lbnQpXG4gICAgICAgICAgICBvbkNvbW1lbnQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKVxuICAgICAgICBvbkNob21wS2VlcCgpO1xuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlGbG93Q29sbGVjdGlvbih7IGl0ZW1zIH0sIGN0eCwgeyBmbG93Q2hhcnMsIGl0ZW1JbmRlbnQgfSkge1xuICAgIGNvbnN0IHsgaW5kZW50LCBpbmRlbnRTdGVwLCBmbG93Q29sbGVjdGlvblBhZGRpbmc6IGZjUGFkZGluZywgb3B0aW9uczogeyBjb21tZW50U3RyaW5nIH0gfSA9IGN0eDtcbiAgICBpdGVtSW5kZW50ICs9IGluZGVudFN0ZXA7XG4gICAgY29uc3QgaXRlbUN0eCA9IE9iamVjdC5hc3NpZ24oe30sIGN0eCwge1xuICAgICAgICBpbmRlbnQ6IGl0ZW1JbmRlbnQsXG4gICAgICAgIGluRmxvdzogdHJ1ZSxcbiAgICAgICAgdHlwZTogbnVsbFxuICAgIH0pO1xuICAgIGxldCByZXFOZXdsaW5lID0gZmFsc2U7XG4gICAgbGV0IGxpbmVzQXRWYWx1ZSA9IDA7XG4gICAgY29uc3QgbGluZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgbGV0IGNvbW1lbnQgPSBudWxsO1xuICAgICAgICBpZiAoaXNOb2RlKGl0ZW0pKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaXRlbS5jb21tZW50QmVmb3JlLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoaXRlbS5jb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBpdGVtLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQYWlyKGl0ZW0pKSB7XG4gICAgICAgICAgICBjb25zdCBpayA9IGlzTm9kZShpdGVtLmtleSkgPyBpdGVtLmtleSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoaWspIHtcbiAgICAgICAgICAgICAgICBpZiAoaWsuc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaWsuY29tbWVudEJlZm9yZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpay5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGl2ID0gaXNOb2RlKGl0ZW0udmFsdWUpID8gaXRlbS52YWx1ZSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoaXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXYuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGl2LmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGl2LmNvbW1lbnRCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS52YWx1ZSA9PSBudWxsICYmIGlrPy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGlrLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgbGV0IHN0ciA9IHN0cmluZ2lmeShpdGVtLCBpdGVtQ3R4LCAoKSA9PiAoY29tbWVudCA9IG51bGwpKTtcbiAgICAgICAgaWYgKGkgPCBpdGVtcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgc3RyICs9ICcsJztcbiAgICAgICAgaWYgKGNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBpdGVtSW5kZW50LCBjb21tZW50U3RyaW5nKGNvbW1lbnQpKTtcbiAgICAgICAgaWYgKCFyZXFOZXdsaW5lICYmIChsaW5lcy5sZW5ndGggPiBsaW5lc0F0VmFsdWUgfHwgc3RyLmluY2x1ZGVzKCdcXG4nKSkpXG4gICAgICAgICAgICByZXFOZXdsaW5lID0gdHJ1ZTtcbiAgICAgICAgbGluZXMucHVzaChzdHIpO1xuICAgICAgICBsaW5lc0F0VmFsdWUgPSBsaW5lcy5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gZmxvd0NoYXJzO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgZW5kO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFyZXFOZXdsaW5lKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBsaW5lcy5yZWR1Y2UoKHN1bSwgbGluZSkgPT4gc3VtICsgbGluZS5sZW5ndGggKyAyLCAyKTtcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSBjdHgub3B0aW9ucy5saW5lV2lkdGggPiAwICYmIGxlbiA+IGN0eC5vcHRpb25zLmxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxTmV3bGluZSkge1xuICAgICAgICAgICAgbGV0IHN0ciA9IHN0YXJ0O1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKVxuICAgICAgICAgICAgICAgIHN0ciArPSBsaW5lID8gYFxcbiR7aW5kZW50U3RlcH0ke2luZGVudH0ke2xpbmV9YCA6ICdcXG4nO1xuICAgICAgICAgICAgcmV0dXJuIGAke3N0cn1cXG4ke2luZGVudH0ke2VuZH1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke3N0YXJ0fSR7ZmNQYWRkaW5nfSR7bGluZXMuam9pbignICcpfSR7ZmNQYWRkaW5nfSR7ZW5kfWA7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhZGRDb21tZW50QmVmb3JlKHsgaW5kZW50LCBvcHRpb25zOiB7IGNvbW1lbnRTdHJpbmcgfSB9LCBsaW5lcywgY29tbWVudCwgY2hvbXBLZWVwKSB7XG4gICAgaWYgKGNvbW1lbnQgJiYgY2hvbXBLZWVwKVxuICAgICAgICBjb21tZW50ID0gY29tbWVudC5yZXBsYWNlKC9eXFxuKy8sICcnKTtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBjb25zdCBpYyA9IGluZGVudENvbW1lbnQoY29tbWVudFN0cmluZyhjb21tZW50KSwgaW5kZW50KTtcbiAgICAgICAgbGluZXMucHVzaChpYy50cmltU3RhcnQoKSk7IC8vIEF2b2lkIGRvdWJsZSBpbmRlbnQgb24gZmlyc3QgbGluZVxuICAgIH1cbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5Q29sbGVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5Q29sbGVjdGlvbiB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlDb2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IGFkZFBhaXJUb0pTTWFwIH0gZnJvbSAnLi9hZGRQYWlyVG9KU01hcC5qcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IE1BUCwgaXNQYWlyLCBpc1NjYWxhciB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9IGZyb20gJy4vUGFpci5qcyc7XG5pbXBvcnQgeyBpc1NjYWxhclZhbHVlIH0gZnJvbSAnLi9TY2FsYXIuanMnO1xuXG5mdW5jdGlvbiBmaW5kUGFpcihpdGVtcywga2V5KSB7XG4gICAgY29uc3QgayA9IGlzU2NhbGFyKGtleSkgPyBrZXkudmFsdWUgOiBrZXk7XG4gICAgZm9yIChjb25zdCBpdCBvZiBpdGVtcykge1xuICAgICAgICBpZiAoaXNQYWlyKGl0KSkge1xuICAgICAgICAgICAgaWYgKGl0LmtleSA9PT0ga2V5IHx8IGl0LmtleSA9PT0gaylcbiAgICAgICAgICAgICAgICByZXR1cm4gaXQ7XG4gICAgICAgICAgICBpZiAoaXNTY2FsYXIoaXQua2V5KSAmJiBpdC5rZXkudmFsdWUgPT09IGspXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5jbGFzcyBZQU1MTWFwIGV4dGVuZHMgQ29sbGVjdGlvbiB7XG4gICAgc3RhdGljIGdldCB0YWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ3RhZzp5YW1sLm9yZywyMDAyOm1hcCc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICBzdXBlcihNQVAsIHNjaGVtYSk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBnZW5lcmljIGNvbGxlY3Rpb24gcGFyc2luZyBtZXRob2QgdGhhdCBjYW4gYmUgZXh0ZW5kZWRcbiAgICAgKiB0byBvdGhlciBub2RlIGNsYXNzZXMgdGhhdCBpbmhlcml0IGZyb20gWUFNTE1hcFxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgb2JqLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyBrZWVwVW5kZWZpbmVkLCByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBjb25zdCBhZGQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyLmNhbGwob2JqLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVwbGFjZXIpICYmICFyZXBsYWNlci5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkIHx8IGtlZXBVbmRlZmluZWQpXG4gICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygb2JqKVxuICAgICAgICAgICAgICAgIGFkZChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpXG4gICAgICAgICAgICAgICAgYWRkKGtleSwgb2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnNvcnRNYXBFbnRyaWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtYXAuaXRlbXMuc29ydChzY2hlbWEuc29ydE1hcEVudHJpZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSB2YWx1ZSB0byB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgLSBJZiBub3Qgc2V0IGB0cnVlYCwgdXNpbmcgYSBrZXkgdGhhdCBpcyBhbHJlYWR5IGluIHRoZVxuICAgICAqICAgY29sbGVjdGlvbiB3aWxsIHRocm93LiBPdGhlcndpc2UsIG92ZXJ3cml0ZXMgdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgICAqL1xuICAgIGFkZChwYWlyLCBvdmVyd3JpdGUpIHtcbiAgICAgICAgbGV0IF9wYWlyO1xuICAgICAgICBpZiAoaXNQYWlyKHBhaXIpKVxuICAgICAgICAgICAgX3BhaXIgPSBwYWlyO1xuICAgICAgICBlbHNlIGlmICghcGFpciB8fCB0eXBlb2YgcGFpciAhPT0gJ29iamVjdCcgfHwgISgna2V5JyBpbiBwYWlyKSkge1xuICAgICAgICAgICAgLy8gSW4gVHlwZVNjcmlwdCwgdGhpcyBuZXZlciBoYXBwZW5zLlxuICAgICAgICAgICAgX3BhaXIgPSBuZXcgUGFpcihwYWlyLCBwYWlyPy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgX3BhaXIgPSBuZXcgUGFpcihwYWlyLmtleSwgcGFpci52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBfcGFpci5rZXkpO1xuICAgICAgICBjb25zdCBzb3J0RW50cmllcyA9IHRoaXMuc2NoZW1hPy5zb3J0TWFwRW50cmllcztcbiAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIGlmICghb3ZlcndyaXRlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5ICR7X3BhaXIua2V5fSBhbHJlYWR5IHNldGApO1xuICAgICAgICAgICAgLy8gRm9yIHNjYWxhcnMsIGtlZXAgdGhlIG9sZCBub2RlICYgaXRzIGNvbW1lbnRzIGFuZCBhbmNob3JzXG4gICAgICAgICAgICBpZiAoaXNTY2FsYXIocHJldi52YWx1ZSkgJiYgaXNTY2FsYXJWYWx1ZShfcGFpci52YWx1ZSkpXG4gICAgICAgICAgICAgICAgcHJldi52YWx1ZS52YWx1ZSA9IF9wYWlyLnZhbHVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHByZXYudmFsdWUgPSBfcGFpci52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzb3J0RW50cmllcykge1xuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gc29ydEVudHJpZXMoX3BhaXIsIGl0ZW0pIDwgMCk7XG4gICAgICAgICAgICBpZiAoaSA9PT0gLTEpXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKF9wYWlyKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpLCAwLCBfcGFpcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goX3BhaXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBpZiAoIWl0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBkZWwgPSB0aGlzLml0ZW1zLnNwbGljZSh0aGlzLml0ZW1zLmluZGV4T2YoaXQpLCAxKTtcbiAgICAgICAgcmV0dXJuIGRlbC5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGl0Py52YWx1ZTtcbiAgICAgICAgcmV0dXJuICgha2VlcFNjYWxhciAmJiBpc1NjYWxhcihub2RlKSA/IG5vZGUudmFsdWUgOiBub2RlKSA/PyB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZmluZFBhaXIodGhpcy5pdGVtcywga2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGQobmV3IFBhaXIoa2V5LCB2YWx1ZSksIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY3R4IC0gQ29udmVyc2lvbiBjb250ZXh0LCBvcmlnaW5hbGx5IHNldCBpbiBEb2N1bWVudCN0b0pTKClcbiAgICAgKiBAcGFyYW0ge0NsYXNzfSBUeXBlIC0gSWYgc2V0LCBmb3JjZXMgdGhlIHJldHVybmVkIGNvbGxlY3Rpb24gdHlwZVxuICAgICAqIEByZXR1cm5zIEluc3RhbmNlIG9mIFR5cGUsIE1hcCwgb3IgT2JqZWN0XG4gICAgICovXG4gICAgdG9KU09OKF8sIGN0eCwgVHlwZSkge1xuICAgICAgICBjb25zdCBtYXAgPSBUeXBlID8gbmV3IFR5cGUoKSA6IGN0eD8ubWFwQXNNYXAgPyBuZXcgTWFwKCkgOiB7fTtcbiAgICAgICAgaWYgKGN0eD8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUobWFwKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpXG4gICAgICAgICAgICBhZGRQYWlyVG9KU01hcChjdHgsIG1hcCwgaXRlbSk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIHRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghaXNQYWlyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWFwIGl0ZW1zIG11c3QgYWxsIGJlIHBhaXJzOyBmb3VuZCAke0pTT04uc3RyaW5naWZ5KGl0ZW0pfSBpbnN0ZWFkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdHguYWxsTnVsbFZhbHVlcyAmJiB0aGlzLmhhc0FsbE51bGxWYWx1ZXMoZmFsc2UpKVxuICAgICAgICAgICAgY3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGFsbE51bGxWYWx1ZXM6IHRydWUgfSk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlDb2xsZWN0aW9uKHRoaXMsIGN0eCwge1xuICAgICAgICAgICAgYmxvY2tJdGVtUHJlZml4OiAnJyxcbiAgICAgICAgICAgIGZsb3dDaGFyczogeyBzdGFydDogJ3snLCBlbmQ6ICd9JyB9LFxuICAgICAgICAgICAgaXRlbUluZGVudDogY3R4LmluZGVudCB8fCAnJyxcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwLFxuICAgICAgICAgICAgb25Db21tZW50XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgWUFNTE1hcCwgZmluZFBhaXIgfTtcbiIsImltcG9ydCB7IGlzTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxNYXAuanMnO1xuXG5jb25zdCBtYXAgPSB7XG4gICAgY29sbGVjdGlvbjogJ21hcCcsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBub2RlQ2xhc3M6IFlBTUxNYXAsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bWFwJyxcbiAgICByZXNvbHZlKG1hcCwgb25FcnJvcikge1xuICAgICAgICBpZiAoIWlzTWFwKG1hcCkpXG4gICAgICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIG1hcHBpbmcgZm9yIHRoaXMgdGFnJyk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBvYmosIGN0eCkgPT4gWUFNTE1hcC5mcm9tKHNjaGVtYSwgb2JqLCBjdHgpXG59O1xuXG5leHBvcnQgeyBtYXAgfTtcbiIsImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuLi9kb2MvY3JlYXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeUNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4vQ29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBTRVEsIGlzU2NhbGFyIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBpc1NjYWxhclZhbHVlIH0gZnJvbSAnLi9TY2FsYXIuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIFlBTUxTZXEgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcbiAgICBzdGF0aWMgZ2V0IHRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiAndGFnOnlhbWwub3JnLDIwMDI6c2VxJztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKFNFUSwgc2NoZW1hKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH1cbiAgICBhZGQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBga2V5YCBtdXN0IGNvbnRhaW4gYSByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnRlZ2VyIGZvciB0aGlzIHRvIHN1Y2NlZWQuXG4gICAgICogSXQgbWF5IGJlIHdyYXBwZWQgaW4gYSBgU2NhbGFyYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlbCA9IHRoaXMuaXRlbXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIHJldHVybiBkZWwubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgZ2V0KGtleSwga2VlcFNjYWxhcikge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBpdCA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgICAgcmV0dXJuICFrZWVwU2NhbGFyICYmIGlzU2NhbGFyKGl0KSA/IGl0LnZhbHVlIDogaXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29sbGVjdGlvbiBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKlxuICAgICAqIGBrZXlgIG11c3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIgZm9yIHRoaXMgdG8gc3VjY2VlZC5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqL1xuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gYXNJdGVtSW5kZXgoa2V5KTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpZHggPT09ICdudW1iZXInICYmIGlkeCA8IHRoaXMuaXRlbXMubGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBjb2xsZWN0aW9uLiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKlxuICAgICAqIElmIGBrZXlgIGRvZXMgbm90IGNvbnRhaW4gYSByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnRlZ2VyLCB0aGlzIHdpbGwgdGhyb3cuXG4gICAgICogSXQgbWF5IGJlIHdyYXBwZWQgaW4gYSBgU2NhbGFyYC5cbiAgICAgKi9cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGEgdmFsaWQgaW5kZXgsIG5vdCAke2tleX0uYCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLml0ZW1zW2lkeF07XG4gICAgICAgIGlmIChpc1NjYWxhcihwcmV2KSAmJiBpc1NjYWxhclZhbHVlKHZhbHVlKSlcbiAgICAgICAgICAgIHByZXYudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpZHhdID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgY29uc3Qgc2VxID0gW107XG4gICAgICAgIGlmIChjdHg/Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKHNlcSk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuaXRlbXMpXG4gICAgICAgICAgICBzZXEucHVzaCh0b0pTKGl0ZW0sIFN0cmluZyhpKyspLCBjdHgpKTtcbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5Q29sbGVjdGlvbih0aGlzLCBjdHgsIHtcbiAgICAgICAgICAgIGJsb2NrSXRlbVByZWZpeDogJy0gJyxcbiAgICAgICAgICAgIGZsb3dDaGFyczogeyBzdGFydDogJ1snLCBlbmQ6ICddJyB9LFxuICAgICAgICAgICAgaXRlbUluZGVudDogKGN0eC5pbmRlbnQgfHwgJycpICsgJyAgJyxcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwLFxuICAgICAgICAgICAgb25Db21tZW50XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIG9iaiwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc2VxID0gbmV3IHRoaXMoc2NoZW1hKTtcbiAgICAgICAgaWYgKG9iaiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KG9iaikpIHtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGl0IG9mIG9iaikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gb2JqIGluc3RhbmNlb2YgU2V0ID8gaXQgOiBTdHJpbmcoaSsrKTtcbiAgICAgICAgICAgICAgICAgICAgaXQgPSByZXBsYWNlci5jYWxsKG9iaiwga2V5LCBpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKGNyZWF0ZU5vZGUoaXQsIHVuZGVmaW5lZCwgY3R4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc0l0ZW1JbmRleChrZXkpIHtcbiAgICBsZXQgaWR4ID0gaXNTY2FsYXIoa2V5KSA/IGtleS52YWx1ZSA6IGtleTtcbiAgICBpZiAoaWR4ICYmIHR5cGVvZiBpZHggPT09ICdzdHJpbmcnKVxuICAgICAgICBpZHggPSBOdW1iZXIoaWR4KTtcbiAgICByZXR1cm4gdHlwZW9mIGlkeCA9PT0gJ251bWJlcicgJiYgTnVtYmVyLmlzSW50ZWdlcihpZHgpICYmIGlkeCA+PSAwXG4gICAgICAgID8gaWR4XG4gICAgICAgIDogbnVsbDtcbn1cblxuZXhwb3J0IHsgWUFNTFNlcSB9O1xuIiwiaW1wb3J0IHsgaXNTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5cbmNvbnN0IHNlcSA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIG5vZGVDbGFzczogWUFNTFNlcSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnLFxuICAgIHJlc29sdmUoc2VxLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghaXNTZXEoc2VxKSlcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgc2VxdWVuY2UgZm9yIHRoaXMgdGFnJyk7XG4gICAgICAgIHJldHVybiBzZXE7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBvYmosIGN0eCkgPT4gWUFNTFNlcS5mcm9tKHNjaGVtYSwgb2JqLCBjdHgpXG59O1xuXG5leHBvcnQgeyBzZXEgfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlTdHJpbmcuanMnO1xuXG5jb25zdCBzdHJpbmcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInLFxuICAgIHJlc29sdmU6IHN0ciA9PiBzdHIsXG4gICAgc3RyaW5naWZ5KGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBjdHggPSBPYmplY3QuYXNzaWduKHsgYWN0dWFsU3RyaW5nOiB0cnVlIH0sIGN0eCk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBzdHJpbmcgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbmNvbnN0IG51bGxUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09IG51bGwsXG4gICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLFxuICAgIHRlc3Q6IC9eKD86fnxbTm5ddWxsfE5VTEwpPyQvLFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBTY2FsYXIobnVsbCksXG4gICAgc3RyaW5naWZ5OiAoeyBzb3VyY2UgfSwgY3R4KSA9PiB0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJyAmJiBudWxsVGFnLnRlc3QudGVzdChzb3VyY2UpXG4gICAgICAgID8gc291cmNlXG4gICAgICAgIDogY3R4Lm9wdGlvbnMubnVsbFN0clxufTtcblxuZXhwb3J0IHsgbnVsbFRhZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuY29uc3QgYm9vbFRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICB0ZXN0OiAvXig/OltUdF1ydWV8VFJVRXxbRmZdYWxzZXxGQUxTRSkkLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gbmV3IFNjYWxhcihzdHJbMF0gPT09ICd0JyB8fCBzdHJbMF0gPT09ICdUJyksXG4gICAgc3RyaW5naWZ5KHsgc291cmNlLCB2YWx1ZSB9LCBjdHgpIHtcbiAgICAgICAgaWYgKHNvdXJjZSAmJiBib29sVGFnLnRlc3QudGVzdChzb3VyY2UpKSB7XG4gICAgICAgICAgICBjb25zdCBzdiA9IHNvdXJjZVswXSA9PT0gJ3QnIHx8IHNvdXJjZVswXSA9PT0gJ1QnO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBzdilcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IGN0eC5vcHRpb25zLnRydWVTdHIgOiBjdHgub3B0aW9ucy5mYWxzZVN0cjtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBib29sVGFnIH07XG4iLCJmdW5jdGlvbiBzdHJpbmdpZnlOdW1iZXIoeyBmb3JtYXQsIG1pbkZyYWN0aW9uRGlnaXRzLCB0YWcsIHZhbHVlIH0pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JylcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgY29uc3QgbnVtID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAoIWlzRmluaXRlKG51bSkpXG4gICAgICAgIHJldHVybiBpc05hTihudW0pID8gJy5uYW4nIDogbnVtIDwgMCA/ICctLmluZicgOiAnLmluZic7XG4gICAgbGV0IG4gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgaWYgKCFmb3JtYXQgJiZcbiAgICAgICAgbWluRnJhY3Rpb25EaWdpdHMgJiZcbiAgICAgICAgKCF0YWcgfHwgdGFnID09PSAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnKSAmJlxuICAgICAgICAvXlxcZC8udGVzdChuKSkge1xuICAgICAgICBsZXQgaSA9IG4uaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgIGkgPSBuLmxlbmd0aDtcbiAgICAgICAgICAgIG4gKz0gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkID0gbWluRnJhY3Rpb25EaWdpdHMgLSAobi5sZW5ndGggLSBpIC0gMSk7XG4gICAgICAgIHdoaWxlIChkLS0gPiAwKVxuICAgICAgICAgICAgbiArPSAnMCc7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3QgZmxvYXROYU4gPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL14oPzpbLStdP1xcLig/OmluZnxJbmZ8SU5GKXxcXC5uYW58XFwuTmFOfFxcLk5BTikkLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gc3RyLnNsaWNlKC0zKS50b0xvd2VyQ2FzZSgpID09PSAnbmFuJ1xuICAgICAgICA/IE5hTlxuICAgICAgICA6IHN0clswXSA9PT0gJy0nXG4gICAgICAgICAgICA/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBmbG9hdEV4cCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdFWFAnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpcXC5bMC05XSt8WzAtOV0rKD86XFwuWzAtOV0qKT8pW2VFXVstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x2ZTogc3RyID0+IHBhcnNlRmxvYXQoc3RyKSxcbiAgICBzdHJpbmdpZnkobm9kZSkge1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIobm9kZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pID8gbnVtLnRvRXhwb25lbnRpYWwoKSA6IHN0cmluZ2lmeU51bWJlcihub2RlKTtcbiAgICB9XG59O1xuY29uc3QgZmxvYXQgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL15bLStdPyg/OlxcLlswLTldK3xbMC05XStcXC5bMC05XSopJC8sXG4gICAgcmVzb2x2ZShzdHIpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIocGFyc2VGbG9hdChzdHIpKTtcbiAgICAgICAgY29uc3QgZG90ID0gc3RyLmluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGRvdCAhPT0gLTEgJiYgc3RyW3N0ci5sZW5ndGggLSAxXSA9PT0gJzAnKVxuICAgICAgICAgICAgbm9kZS5taW5GcmFjdGlvbkRpZ2l0cyA9IHN0ci5sZW5ndGggLSBkb3QgLSAxO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuXG5leHBvcnQgeyBmbG9hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3QgaW50SWRlbnRpZnkgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG5jb25zdCBpbnRSZXNvbHZlID0gKHN0ciwgb2Zmc2V0LCByYWRpeCwgeyBpbnRBc0JpZ0ludCB9KSA9PiAoaW50QXNCaWdJbnQgPyBCaWdJbnQoc3RyKSA6IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcob2Zmc2V0KSwgcmFkaXgpKTtcbmZ1bmN0aW9uIGludFN0cmluZ2lmeShub2RlLCByYWRpeCwgcHJlZml4KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBpZiAoaW50SWRlbnRpZnkodmFsdWUpICYmIHZhbHVlID49IDApXG4gICAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZS50b1N0cmluZyhyYWRpeCk7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlcihub2RlKTtcbn1cbmNvbnN0IGludE9jdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gaW50SWRlbnRpZnkodmFsdWUpICYmIHZhbHVlID49IDAsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ09DVCcsXG4gICAgdGVzdDogL14wb1swLTddKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAyLCA4LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgOCwgJzBvJylcbn07XG5jb25zdCBpbnQgPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDAsIDEwLCBvcHQpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgaW50SGV4ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnSEVYJyxcbiAgICB0ZXN0OiAvXjB4WzAtOWEtZkEtRl0rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDE2LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgMTYsICcweCcpXG59O1xuXG5leHBvcnQgeyBpbnQsIGludEhleCwgaW50T2N0IH07XG4iLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IG51bGxUYWcgfSBmcm9tICcuLi9jb21tb24vbnVsbC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuLi9jb21tb24vc2VxLmpzJztcbmltcG9ydCB7IHN0cmluZyB9IGZyb20gJy4uL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgYm9vbFRhZyB9IGZyb20gJy4vYm9vbC5qcyc7XG5pbXBvcnQgeyBmbG9hdE5hTiwgZmxvYXRFeHAsIGZsb2F0IH0gZnJvbSAnLi9mbG9hdC5qcyc7XG5pbXBvcnQgeyBpbnRPY3QsIGludCwgaW50SGV4IH0gZnJvbSAnLi9pbnQuanMnO1xuXG5jb25zdCBzY2hlbWEgPSBbXG4gICAgbWFwLFxuICAgIHNlcSxcbiAgICBzdHJpbmcsXG4gICAgbnVsbFRhZyxcbiAgICBib29sVGFnLFxuICAgIGludE9jdCxcbiAgICBpbnQsXG4gICAgaW50SGV4LFxuICAgIGZsb2F0TmFOLFxuICAgIGZsb2F0RXhwLFxuICAgIGZsb2F0XG5dO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuXG5mdW5jdGlvbiBpbnRJZGVudGlmeSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xufVxuY29uc3Qgc3RyaW5naWZ5SlNPTiA9ICh7IHZhbHVlIH0pID0+IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbmNvbnN0IGpzb25TY2FsYXJzID0gW1xuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBzdHIsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT0gbnVsbCxcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsXG4gICAgICAgIHRlc3Q6IC9ebnVsbCQvLFxuICAgICAgICByZXNvbHZlOiAoKSA9PiBudWxsLFxuICAgICAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeUpTT05cbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICAgICAgdGVzdDogL150cnVlJHxeZmFsc2UkLyxcbiAgICAgICAgcmVzb2x2ZTogc3RyID0+IHN0ciA9PT0gJ3RydWUnLFxuICAgICAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeUpTT05cbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgICAgICB0ZXN0OiAvXi0/KD86MHxbMS05XVswLTldKikkLyxcbiAgICAgICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIHsgaW50QXNCaWdJbnQgfSkgPT4gaW50QXNCaWdJbnQgPyBCaWdJbnQoc3RyKSA6IHBhcnNlSW50KHN0ciwgMTApLFxuICAgICAgICBzdHJpbmdpZnk6ICh7IHZhbHVlIH0pID0+IGludElkZW50aWZ5KHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKCkgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICAgICAgdGVzdDogL14tPyg/OjB8WzEtOV1bMC05XSopKD86XFwuWzAtOV0qKT8oPzpbZUVdWy0rXT9bMC05XSspPyQvLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4gcGFyc2VGbG9hdChzdHIpLFxuICAgICAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeUpTT05cbiAgICB9XG5dO1xuY29uc3QganNvbkVycm9yID0ge1xuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAnJyxcbiAgICB0ZXN0OiAvXi8sXG4gICAgcmVzb2x2ZShzdHIsIG9uRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihgVW5yZXNvbHZlZCBwbGFpbiBzY2FsYXIgJHtKU09OLnN0cmluZ2lmeShzdHIpfWApO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbn07XG5jb25zdCBzY2hlbWEgPSBbbWFwLCBzZXFdLmNvbmNhdChqc29uU2NhbGFycywganNvbkVycm9yKTtcblxuZXhwb3J0IHsgc2NoZW1hIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmNvbnN0IGJpbmFyeSA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5LCAvLyBCdWZmZXIgaW5oZXJpdHMgZnJvbSBVaW50OEFycmF5XG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5JyxcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQnVmZmVyIGluIG5vZGUgYW5kIGFuIFVpbnQ4QXJyYXkgaW4gYnJvd3NlcnNcbiAgICAgKlxuICAgICAqIFRvIHVzZSB0aGUgcmVzdWx0aW5nIGJ1ZmZlciBhcyBhbiBpbWFnZSwgeW91J2xsIHdhbnQgdG8gZG8gc29tZXRoaW5nIGxpa2U6XG4gICAgICpcbiAgICAgKiAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbYnVmZmVyXSwgeyB0eXBlOiAnaW1hZ2UvanBlZycgfSlcbiAgICAgKiAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwaG90bycpLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcbiAgICAgKi9cbiAgICByZXNvbHZlKHNyYywgb25FcnJvcikge1xuICAgICAgICBpZiAodHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIE9uIElFIDExLCBhdG9iKCkgY2FuJ3QgaGFuZGxlIG5ld2xpbmVzXG4gICAgICAgICAgICBjb25zdCBzdHIgPSBhdG9iKHNyYy5yZXBsYWNlKC9bXFxuXFxyXS9nLCAnJykpO1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvbkVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgcmVhZGluZyBiaW5hcnkgdGFnczsgZWl0aGVyIEJ1ZmZlciBvciBhdG9iIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICByZXR1cm4gc3JjO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzdHJpbmdpZnkoeyBjb21tZW50LCB0eXBlLCB2YWx1ZSB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgY29uc3QgYnVmID0gdmFsdWU7IC8vIGNoZWNrZWQgZWFybGllciBieSBiaW5hcnkuaWRlbnRpZnkoKVxuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGxldCBzID0gJyc7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICAgICAgICAgIHN0ciA9IGJ0b2Eocyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCB3cml0aW5nIGJpbmFyeSB0YWdzOyBlaXRoZXIgQnVmZmVyIG9yIGJ0b2EgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlID8/ICh0eXBlID0gU2NhbGFyLkJMT0NLX0xJVEVSQUwpO1xuICAgICAgICBpZiAodHlwZSAhPT0gU2NhbGFyLlFVT1RFX0RPVUJMRSkge1xuICAgICAgICAgICAgY29uc3QgbGluZVdpZHRoID0gTWF0aC5tYXgoY3R4Lm9wdGlvbnMubGluZVdpZHRoIC0gY3R4LmluZGVudC5sZW5ndGgsIGN0eC5vcHRpb25zLm1pbkNvbnRlbnRXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBuID0gTWF0aC5jZWlsKHN0ci5sZW5ndGggLyBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbyA9IDA7IGkgPCBuOyArK2ksIG8gKz0gbGluZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgbGluZXNbaV0gPSBzdHIuc3Vic3RyKG8sIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHIgPSBsaW5lcy5qb2luKHR5cGUgPT09IFNjYWxhci5CTE9DS19MSVRFUkFMID8gJ1xcbicgOiAnICcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlTdHJpbmcoeyBjb21tZW50LCB0eXBlLCB2YWx1ZTogc3RyIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgYmluYXJ5IH07XG4iLCJpbXBvcnQgeyBpc1NlcSwgaXNQYWlyLCBpc01hcCB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNyZWF0ZVBhaXIsIFBhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9QYWlyLmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVQYWlycyhzZXEsIG9uRXJyb3IpIHtcbiAgICBpZiAoaXNTZXEoc2VxKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBzZXEuaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoaXNQYWlyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNNYXAoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5pdGVtcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKCdFYWNoIHBhaXIgbXVzdCBoYXZlIGl0cyBvd24gc2VxdWVuY2UgaW5kaWNhdG9yJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFpciA9IGl0ZW0uaXRlbXNbMF0gfHwgbmV3IFBhaXIobmV3IFNjYWxhcihudWxsKSk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudEJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgcGFpci5rZXkuY29tbWVudEJlZm9yZSA9IHBhaXIua2V5LmNvbW1lbnRCZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYCR7aXRlbS5jb21tZW50QmVmb3JlfVxcbiR7cGFpci5rZXkuY29tbWVudEJlZm9yZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGl0ZW0uY29tbWVudEJlZm9yZTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNuID0gcGFpci52YWx1ZSA/PyBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICAgICAgY24uY29tbWVudCA9IGNuLmNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYCR7aXRlbS5jb21tZW50fVxcbiR7Y24uY29tbWVudH1gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGl0ZW0uY29tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXRlbSA9IHBhaXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXEuaXRlbXNbaV0gPSBpc1BhaXIoaXRlbSkgPyBpdGVtIDogbmV3IFBhaXIoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBvbkVycm9yKCdFeHBlY3RlZCBhIHNlcXVlbmNlIGZvciB0aGlzIHRhZycpO1xuICAgIHJldHVybiBzZXE7XG59XG5mdW5jdGlvbiBjcmVhdGVQYWlycyhzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpIHtcbiAgICBjb25zdCB7IHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgY29uc3QgcGFpcnMgPSBuZXcgWUFNTFNlcShzY2hlbWEpO1xuICAgIHBhaXJzLnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjpwYWlycyc7XG4gICAgbGV0IGkgPSAwO1xuICAgIGlmIChpdGVyYWJsZSAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXJhYmxlKSlcbiAgICAgICAgZm9yIChsZXQgaXQgb2YgaXRlcmFibGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgaXQgPSByZXBsYWNlci5jYWxsKGl0ZXJhYmxlLCBTdHJpbmcoaSsrKSwgaXQpO1xuICAgICAgICAgICAgbGV0IGtleSwgdmFsdWU7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGl0WzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0WzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFtrZXksIHZhbHVlXSB0dXBsZTogJHtpdH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGl0ICYmIGl0IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGl0KTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0ga2V5c1swXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpdFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgdHVwbGUgd2l0aCBvbmUga2V5LCBub3QgJHtrZXlzLmxlbmd0aH0ga2V5c2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleSA9IGl0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFpcnMuaXRlbXMucHVzaChjcmVhdGVQYWlyKGtleSwgdmFsdWUsIGN0eCkpO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHBhaXJzO1xufVxuY29uc3QgcGFpcnMgPSB7XG4gICAgY29sbGVjdGlvbjogJ3NlcScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnLFxuICAgIHJlc29sdmU6IHJlc29sdmVQYWlycyxcbiAgICBjcmVhdGVOb2RlOiBjcmVhdGVQYWlyc1xufTtcblxuZXhwb3J0IHsgY3JlYXRlUGFpcnMsIHBhaXJzLCByZXNvbHZlUGFpcnMgfTtcbiIsImltcG9ydCB7IGlzU2NhbGFyLCBpc1BhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi4vLi4vbm9kZXMvdG9KUy5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUGFpcnMsIGNyZWF0ZVBhaXJzIH0gZnJvbSAnLi9wYWlycy5qcyc7XG5cbmNsYXNzIFlBTUxPTWFwIGV4dGVuZHMgWUFNTFNlcSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWRkID0gWUFNTE1hcC5wcm90b3R5cGUuYWRkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVsZXRlID0gWUFNTE1hcC5wcm90b3R5cGUuZGVsZXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZ2V0ID0gWUFNTE1hcC5wcm90b3R5cGUuZ2V0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFzID0gWUFNTE1hcC5wcm90b3R5cGUuaGFzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2V0ID0gWUFNTE1hcC5wcm90b3R5cGUuc2V0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudGFnID0gWUFNTE9NYXAudGFnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiBgY3R4YCBpcyBnaXZlbiwgdGhlIHJldHVybiB0eXBlIGlzIGFjdHVhbGx5IGBNYXA8dW5rbm93biwgdW5rbm93bj5gLFxuICAgICAqIGJ1dCBUeXBlU2NyaXB0IHdvbid0IGFsbG93IHdpZGVuaW5nIHRoZSBzaWduYXR1cmUgb2YgYSBjaGlsZCBtZXRob2QuXG4gICAgICovXG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiBzdXBlci50b0pTT04oXyk7XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKGN0eD8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUobWFwKTtcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAgIGxldCBrZXksIHZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzUGFpcihwYWlyKSkge1xuICAgICAgICAgICAgICAgIGtleSA9IHRvSlMocGFpci5rZXksICcnLCBjdHgpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9KUyhwYWlyLnZhbHVlLCBrZXksIGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXkgPSB0b0pTKHBhaXIsICcnLCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09yZGVyZWQgbWFwcyBtdXN0IG5vdCBpbmNsdWRlIGR1cGxpY2F0ZSBrZXlzJyk7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgICAgICBjb25zdCBwYWlycyA9IGNyZWF0ZVBhaXJzKHNjaGVtYSwgaXRlcmFibGUsIGN0eCk7XG4gICAgICAgIGNvbnN0IG9tYXAgPSBuZXcgdGhpcygpO1xuICAgICAgICBvbWFwLml0ZW1zID0gcGFpcnMuaXRlbXM7XG4gICAgICAgIHJldHVybiBvbWFwO1xuICAgIH1cbn1cbllBTUxPTWFwLnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJztcbmNvbnN0IG9tYXAgPSB7XG4gICAgY29sbGVjdGlvbjogJ3NlcScsXG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgTWFwLFxuICAgIG5vZGVDbGFzczogWUFNTE9NYXAsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsXG4gICAgcmVzb2x2ZShzZXEsIG9uRXJyb3IpIHtcbiAgICAgICAgY29uc3QgcGFpcnMgPSByZXNvbHZlUGFpcnMoc2VxLCBvbkVycm9yKTtcbiAgICAgICAgY29uc3Qgc2VlbktleXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IGtleSB9IG9mIHBhaXJzLml0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoaXNTY2FsYXIoa2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWVuS2V5cy5pbmNsdWRlcyhrZXkudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoYE9yZGVyZWQgbWFwcyBtdXN0IG5vdCBpbmNsdWRlIGR1cGxpY2F0ZSBrZXlzOiAke2tleS52YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5LZXlzLnB1c2goa2V5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFlBTUxPTWFwKCksIHBhaXJzKTtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpID0+IFlBTUxPTWFwLmZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KVxufTtcblxuZXhwb3J0IHsgWUFNTE9NYXAsIG9tYXAgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGJvb2xTdHJpbmdpZnkoeyB2YWx1ZSwgc291cmNlIH0sIGN0eCkge1xuICAgIGNvbnN0IGJvb2xPYmogPSB2YWx1ZSA/IHRydWVUYWcgOiBmYWxzZVRhZztcbiAgICBpZiAoc291cmNlICYmIGJvb2xPYmoudGVzdC50ZXN0KHNvdXJjZSkpXG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgcmV0dXJuIHZhbHVlID8gY3R4Lm9wdGlvbnMudHJ1ZVN0ciA6IGN0eC5vcHRpb25zLmZhbHNlU3RyO1xufVxuY29uc3QgdHJ1ZVRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT09IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICB0ZXN0OiAvXig/Oll8eXxbWXldZXN8WUVTfFtUdF1ydWV8VFJVRXxbT29dbnxPTikkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBuZXcgU2NhbGFyKHRydWUpLFxuICAgIHN0cmluZ2lmeTogYm9vbFN0cmluZ2lmeVxufTtcbmNvbnN0IGZhbHNlVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PT0gZmFsc2UsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpib29sJyxcbiAgICB0ZXN0OiAvXig/Ok58bnxbTm5db3xOT3xbRmZdYWxzZXxGQUxTRXxbT29dZmZ8T0ZGKSQvLFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBTY2FsYXIoZmFsc2UpLFxuICAgIHN0cmluZ2lmeTogYm9vbFN0cmluZ2lmeVxufTtcblxuZXhwb3J0IHsgZmFsc2VUYWcsIHRydWVUYWcgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3QgZmxvYXROYU4gPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL14oPzpbLStdP1xcLig/OmluZnxJbmZ8SU5GKXxcXC5uYW58XFwuTmFOfFxcLk5BTikkLyxcbiAgICByZXNvbHZlOiAoc3RyKSA9PiBzdHIuc2xpY2UoLTMpLnRvTG93ZXJDYXNlKCkgPT09ICduYW4nXG4gICAgICAgID8gTmFOXG4gICAgICAgIDogc3RyWzBdID09PSAnLSdcbiAgICAgICAgICAgID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcbmNvbnN0IGZsb2F0RXhwID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIGZvcm1hdDogJ0VYUCcsXG4gICAgdGVzdDogL15bLStdPyg/OlswLTldWzAtOV9dKik/KD86XFwuWzAtOV9dKik/W2VFXVstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x2ZTogKHN0cikgPT4gcGFyc2VGbG9hdChzdHIucmVwbGFjZSgvXy9nLCAnJykpLFxuICAgIHN0cmluZ2lmeShub2RlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihub2RlLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBudW0udG9FeHBvbmVudGlhbCgpIDogc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIH1cbn07XG5jb25zdCBmbG9hdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXlstK10/KD86WzAtOV1bMC05X10qKT9cXC5bMC05X10qJC8sXG4gICAgcmVzb2x2ZShzdHIpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIocGFyc2VGbG9hdChzdHIucmVwbGFjZSgvXy9nLCAnJykpKTtcbiAgICAgICAgY29uc3QgZG90ID0gc3RyLmluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGRvdCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IGYgPSBzdHIuc3Vic3RyaW5nKGRvdCArIDEpLnJlcGxhY2UoL18vZywgJycpO1xuICAgICAgICAgICAgaWYgKGZbZi5sZW5ndGggLSAxXSA9PT0gJzAnKVxuICAgICAgICAgICAgICAgIG5vZGUubWluRnJhY3Rpb25EaWdpdHMgPSBmLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuXG5leHBvcnQgeyBmbG9hdCwgZmxvYXRFeHAsIGZsb2F0TmFOIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlOdW1iZXIgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJztcblxuY29uc3QgaW50SWRlbnRpZnkgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG5mdW5jdGlvbiBpbnRSZXNvbHZlKHN0ciwgb2Zmc2V0LCByYWRpeCwgeyBpbnRBc0JpZ0ludCB9KSB7XG4gICAgY29uc3Qgc2lnbiA9IHN0clswXTtcbiAgICBpZiAoc2lnbiA9PT0gJy0nIHx8IHNpZ24gPT09ICcrJylcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZyhvZmZzZXQpLnJlcGxhY2UoL18vZywgJycpO1xuICAgIGlmIChpbnRBc0JpZ0ludCkge1xuICAgICAgICBzd2l0Y2ggKHJhZGl4KSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgc3RyID0gYDBiJHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBzdHIgPSBgMG8ke3N0cn1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICBzdHIgPSBgMHgke3N0cn1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG4gPSBCaWdJbnQoc3RyKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gPT09ICctJyA/IEJpZ0ludCgtMSkgKiBuIDogbjtcbiAgICB9XG4gICAgY29uc3QgbiA9IHBhcnNlSW50KHN0ciwgcmFkaXgpO1xuICAgIHJldHVybiBzaWduID09PSAnLScgPyAtMSAqIG4gOiBuO1xufVxuZnVuY3Rpb24gaW50U3RyaW5naWZ5KG5vZGUsIHJhZGl4LCBwcmVmaXgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBub2RlO1xuICAgIGlmIChpbnRJZGVudGlmeSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3Qgc3RyID0gdmFsdWUudG9TdHJpbmcocmFkaXgpO1xuICAgICAgICByZXR1cm4gdmFsdWUgPCAwID8gJy0nICsgcHJlZml4ICsgc3RyLnN1YnN0cigxKSA6IHByZWZpeCArIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlcihub2RlKTtcbn1cbmNvbnN0IGludEJpbiA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ0JJTicsXG4gICAgdGVzdDogL15bLStdPzBiWzAtMV9dKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAyLCAyLCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgMiwgJzBiJylcbn07XG5jb25zdCBpbnRPY3QgPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdPQ1QnLFxuICAgIHRlc3Q6IC9eWy0rXT8wWzAtN19dKyQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAxLCA4LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgOCwgJzAnKVxufTtcbmNvbnN0IGludCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XVswLTlfXSokLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMCwgMTAsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBpbnRIZXggPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdIRVgnLFxuICAgIHRlc3Q6IC9eWy0rXT8weFswLTlhLWZBLUZfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMTYsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAxNiwgJzB4Jylcbn07XG5cbmV4cG9ydCB7IGludCwgaW50QmluLCBpbnRIZXgsIGludE9jdCB9O1xuIiwiaW1wb3J0IHsgaXNNYXAsIGlzUGFpciwgaXNTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwLCBmaW5kUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxNYXAuanMnO1xuXG5jbGFzcyBZQU1MU2V0IGV4dGVuZHMgWUFNTE1hcCB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIHRoaXMudGFnID0gWUFNTFNldC50YWc7XG4gICAgfVxuICAgIGFkZChrZXkpIHtcbiAgICAgICAgbGV0IHBhaXI7XG4gICAgICAgIGlmIChpc1BhaXIoa2V5KSlcbiAgICAgICAgICAgIHBhaXIgPSBrZXk7XG4gICAgICAgIGVsc2UgaWYgKGtleSAmJlxuICAgICAgICAgICAgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICdrZXknIGluIGtleSAmJlxuICAgICAgICAgICAgJ3ZhbHVlJyBpbiBrZXkgJiZcbiAgICAgICAgICAgIGtleS52YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHBhaXIgPSBuZXcgUGFpcihrZXkua2V5LCBudWxsKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcGFpciA9IG5ldyBQYWlyKGtleSwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBwYWlyLmtleSk7XG4gICAgICAgIGlmICghcHJldilcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChwYWlyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgYGtlZXBQYWlyYCBpcyBgdHJ1ZWAsIHJldHVybnMgdGhlIFBhaXIgbWF0Y2hpbmcgYGtleWAuXG4gICAgICogT3RoZXJ3aXNlLCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGF0IFBhaXIncyBrZXkuXG4gICAgICovXG4gICAgZ2V0KGtleSwga2VlcFBhaXIpIHtcbiAgICAgICAgY29uc3QgcGFpciA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIGtleSk7XG4gICAgICAgIHJldHVybiAha2VlcFBhaXIgJiYgaXNQYWlyKHBhaXIpXG4gICAgICAgICAgICA/IGlzU2NhbGFyKHBhaXIua2V5KVxuICAgICAgICAgICAgICAgID8gcGFpci5rZXkudmFsdWVcbiAgICAgICAgICAgICAgICA6IHBhaXIua2V5XG4gICAgICAgICAgICA6IHBhaXI7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYm9vbGVhbiB2YWx1ZSBmb3Igc2V0KGtleSwgdmFsdWUpIGluIGEgWUFNTCBzZXQsIG5vdCAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIGtleSk7XG4gICAgICAgIGlmIChwcmV2ICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UodGhpcy5pdGVtcy5pbmRleE9mKHByZXYpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcHJldiAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKG5ldyBQYWlyKGtleSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnRvSlNPTihfLCBjdHgsIFNldCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQWxsTnVsbFZhbHVlcyh0cnVlKSlcbiAgICAgICAgICAgIHJldHVybiBzdXBlci50b1N0cmluZyhPYmplY3QuYXNzaWduKHt9LCBjdHgsIHsgYWxsTnVsbFZhbHVlczogdHJ1ZSB9KSwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2V0IGl0ZW1zIG11c3QgYWxsIGhhdmUgbnVsbCB2YWx1ZXMnKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc2V0ID0gbmV3IHRoaXMoc2NoZW1hKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcmFibGUpKVxuICAgICAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgaXRlcmFibGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyLmNhbGwoaXRlcmFibGUsIHZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc2V0Lml0ZW1zLnB1c2goY3JlYXRlUGFpcih2YWx1ZSwgbnVsbCwgY3R4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgfVxufVxuWUFNTFNldC50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6c2V0JztcbmNvbnN0IHNldCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnbWFwJyxcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBTZXQsXG4gICAgbm9kZUNsYXNzOiBZQU1MU2V0LFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnNldCcsXG4gICAgY3JlYXRlTm9kZTogKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkgPT4gWUFNTFNldC5mcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eCksXG4gICAgcmVzb2x2ZShtYXAsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKGlzTWFwKG1hcCkpIHtcbiAgICAgICAgICAgIGlmIChtYXAuaGFzQWxsTnVsbFZhbHVlcyh0cnVlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgWUFNTFNldCgpLCBtYXApO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9uRXJyb3IoJ1NldCBpdGVtcyBtdXN0IGFsbCBoYXZlIG51bGwgdmFsdWVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBtYXBwaW5nIGZvciB0aGlzIHRhZycpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFlBTUxTZXQsIHNldCB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbi8qKiBJbnRlcm5hbCB0eXBlcyBoYW5kbGUgYmlnaW50IGFzIG51bWJlciwgYmVjYXVzZSBUUyBjYW4ndCBmaWd1cmUgaXQgb3V0LiAqL1xuZnVuY3Rpb24gcGFyc2VTZXhhZ2VzaW1hbChzdHIsIGFzQmlnSW50KSB7XG4gICAgY29uc3Qgc2lnbiA9IHN0clswXTtcbiAgICBjb25zdCBwYXJ0cyA9IHNpZ24gPT09ICctJyB8fCBzaWduID09PSAnKycgPyBzdHIuc3Vic3RyaW5nKDEpIDogc3RyO1xuICAgIGNvbnN0IG51bSA9IChuKSA9PiBhc0JpZ0ludCA/IEJpZ0ludChuKSA6IE51bWJlcihuKTtcbiAgICBjb25zdCByZXMgPSBwYXJ0c1xuICAgICAgICAucmVwbGFjZSgvXy9nLCAnJylcbiAgICAgICAgLnNwbGl0KCc6JylcbiAgICAgICAgLnJlZHVjZSgocmVzLCBwKSA9PiByZXMgKiBudW0oNjApICsgbnVtKHApLCBudW0oMCkpO1xuICAgIHJldHVybiAoc2lnbiA9PT0gJy0nID8gbnVtKC0xKSAqIHJlcyA6IHJlcyk7XG59XG4vKipcbiAqIGhoaGg6bW06c3Muc3NzXG4gKlxuICogSW50ZXJuYWwgdHlwZXMgaGFuZGxlIGJpZ2ludCBhcyBudW1iZXIsIGJlY2F1c2UgVFMgY2FuJ3QgZmlndXJlIGl0IG91dC5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2V4YWdlc2ltYWwobm9kZSkge1xuICAgIGxldCB7IHZhbHVlIH0gPSBub2RlO1xuICAgIGxldCBudW0gPSAobikgPT4gbjtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JylcbiAgICAgICAgbnVtID0gbiA9PiBCaWdJbnQobik7XG4gICAgZWxzZSBpZiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlOdW1iZXIobm9kZSk7XG4gICAgbGV0IHNpZ24gPSAnJztcbiAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIHZhbHVlICo9IG51bSgtMSk7XG4gICAgfVxuICAgIGNvbnN0IF82MCA9IG51bSg2MCk7XG4gICAgY29uc3QgcGFydHMgPSBbdmFsdWUgJSBfNjBdOyAvLyBzZWNvbmRzLCBpbmNsdWRpbmcgbXNcbiAgICBpZiAodmFsdWUgPCA2MCkge1xuICAgICAgICBwYXJ0cy51bnNoaWZ0KDApOyAvLyBhdCBsZWFzdCBvbmUgOiBpcyByZXF1aXJlZFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgLSBwYXJ0c1swXSkgLyBfNjA7XG4gICAgICAgIHBhcnRzLnVuc2hpZnQodmFsdWUgJSBfNjApOyAvLyBtaW51dGVzXG4gICAgICAgIGlmICh2YWx1ZSA+PSA2MCkge1xuICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgLSBwYXJ0c1swXSkgLyBfNjA7XG4gICAgICAgICAgICBwYXJ0cy51bnNoaWZ0KHZhbHVlKTsgLy8gaG91cnNcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKHNpZ24gK1xuICAgICAgICBwYXJ0c1xuICAgICAgICAgICAgLm1hcChuID0+IFN0cmluZyhuKS5wYWRTdGFydCgyLCAnMCcpKVxuICAgICAgICAgICAgLmpvaW4oJzonKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzAwMDAwMFxcZCokLywgJycpIC8vICUgNjAgbWF5IGludHJvZHVjZSBlcnJvclxuICAgICk7XG59XG5jb25zdCBpbnRUaW1lID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdUSU1FJyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0ludCB9KSA9PiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgaW50QXNCaWdJbnQpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5U2V4YWdlc2ltYWxcbn07XG5jb25zdCBmbG9hdFRpbWUgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgZm9ybWF0OiAnVElNRScsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKig/OjpbMC01XT9bMC05XSkrXFwuWzAtOV9dKiQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgZmFsc2UpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5U2V4YWdlc2ltYWxcbn07XG5jb25zdCB0aW1lc3RhbXAgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcCcsXG4gICAgLy8gSWYgdGhlIHRpbWUgem9uZSBpcyBvbWl0dGVkLCB0aGUgdGltZXN0YW1wIGlzIGFzc3VtZWQgdG8gYmUgc3BlY2lmaWVkIGluIFVUQy4gVGhlIHRpbWUgcGFydFxuICAgIC8vIG1heSBiZSBvbWl0dGVkIGFsdG9nZXRoZXIsIHJlc3VsdGluZyBpbiBhIGRhdGUgZm9ybWF0LiBJbiBzdWNoIGEgY2FzZSwgdGhlIHRpbWUgcGFydCBpc1xuICAgIC8vIGFzc3VtZWQgdG8gYmUgMDA6MDA6MDBaIChzdGFydCBvZiBkYXksIFVUQykuXG4gICAgdGVzdDogUmVnRXhwKCdeKFswLTldezR9KS0oWzAtOV17MSwyfSktKFswLTldezEsMn0pJyArIC8vIFlZWVktTW0tRGRcbiAgICAgICAgJyg/OicgKyAvLyB0aW1lIGlzIG9wdGlvbmFsXG4gICAgICAgICcoPzp0fFR8WyBcXFxcdF0rKScgKyAvLyB0IHwgVCB8IHdoaXRlc3BhY2VcbiAgICAgICAgJyhbMC05XXsxLDJ9KTooWzAtOV17MSwyfSk6KFswLTldezEsMn0oXFxcXC5bMC05XSspPyknICsgLy8gSGg6TW06U3MoLnNzKT9cbiAgICAgICAgJyg/OlsgXFxcXHRdKihafFstK11bMDEyXT9bMC05XSg/OjpbMC05XXsyfSk/KSk/JyArIC8vIFogfCArNSB8IC0wMzozMFxuICAgICAgICAnKT8kJyksXG4gICAgcmVzb2x2ZShzdHIpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2godGltZXN0YW1wLnRlc3QpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCchIXRpbWVzdGFtcCBleHBlY3RzIGEgZGF0ZSwgc3RhcnRpbmcgd2l0aCB5eXl5LW1tLWRkJyk7XG4gICAgICAgIGNvbnN0IFssIHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IG1hdGNoLm1hcChOdW1iZXIpO1xuICAgICAgICBjb25zdCBtaWxsaXNlYyA9IG1hdGNoWzddID8gTnVtYmVyKChtYXRjaFs3XSArICcwMCcpLnN1YnN0cigxLCAzKSkgOiAwO1xuICAgICAgICBsZXQgZGF0ZSA9IERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5LCBob3VyIHx8IDAsIG1pbnV0ZSB8fCAwLCBzZWNvbmQgfHwgMCwgbWlsbGlzZWMpO1xuICAgICAgICBjb25zdCB0eiA9IG1hdGNoWzhdO1xuICAgICAgICBpZiAodHogJiYgdHogIT09ICdaJykge1xuICAgICAgICAgICAgbGV0IGQgPSBwYXJzZVNleGFnZXNpbWFsKHR6LCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZCkgPCAzMClcbiAgICAgICAgICAgICAgICBkICo9IDYwO1xuICAgICAgICAgICAgZGF0ZSAtPSA2MDAwMCAqIGQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZT8udG9JU09TdHJpbmcoKS5yZXBsYWNlKC8oVDAwOjAwOjAwKT9cXC4wMDBaJC8sICcnKSA/PyAnJ1xufTtcblxuZXhwb3J0IHsgZmxvYXRUaW1lLCBpbnRUaW1lLCB0aW1lc3RhbXAgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgbnVsbFRhZyB9IGZyb20gJy4uL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBiaW5hcnkgfSBmcm9tICcuL2JpbmFyeS5qcyc7XG5pbXBvcnQgeyB0cnVlVGFnLCBmYWxzZVRhZyB9IGZyb20gJy4vYm9vbC5qcyc7XG5pbXBvcnQgeyBmbG9hdE5hTiwgZmxvYXRFeHAsIGZsb2F0IH0gZnJvbSAnLi9mbG9hdC5qcyc7XG5pbXBvcnQgeyBpbnRCaW4sIGludE9jdCwgaW50LCBpbnRIZXggfSBmcm9tICcuL2ludC5qcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4vbWVyZ2UuanMnO1xuaW1wb3J0IHsgb21hcCB9IGZyb20gJy4vb21hcC5qcyc7XG5pbXBvcnQgeyBwYWlycyB9IGZyb20gJy4vcGFpcnMuanMnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi9zZXQuanMnO1xuaW1wb3J0IHsgaW50VGltZSwgZmxvYXRUaW1lLCB0aW1lc3RhbXAgfSBmcm9tICcuL3RpbWVzdGFtcC5qcyc7XG5cbmNvbnN0IHNjaGVtYSA9IFtcbiAgICBtYXAsXG4gICAgc2VxLFxuICAgIHN0cmluZyxcbiAgICBudWxsVGFnLFxuICAgIHRydWVUYWcsXG4gICAgZmFsc2VUYWcsXG4gICAgaW50QmluLFxuICAgIGludE9jdCxcbiAgICBpbnQsXG4gICAgaW50SGV4LFxuICAgIGZsb2F0TmFOLFxuICAgIGZsb2F0RXhwLFxuICAgIGZsb2F0LFxuICAgIGJpbmFyeSxcbiAgICBtZXJnZSxcbiAgICBvbWFwLFxuICAgIHBhaXJzLFxuICAgIHNldCxcbiAgICBpbnRUaW1lLFxuICAgIGZsb2F0VGltZSxcbiAgICB0aW1lc3RhbXBcbl07XG5cbmV4cG9ydCB7IHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IG51bGxUYWcgfSBmcm9tICcuL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4vY29tbW9uL3NlcS5qcyc7XG5pbXBvcnQgeyBzdHJpbmcgfSBmcm9tICcuL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgYm9vbFRhZyB9IGZyb20gJy4vY29yZS9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0TmFOLCBmbG9hdEV4cCwgZmxvYXQgfSBmcm9tICcuL2NvcmUvZmxvYXQuanMnO1xuaW1wb3J0IHsgaW50T2N0LCBpbnRIZXgsIGludCB9IGZyb20gJy4vY29yZS9pbnQuanMnO1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnLi9jb3JlL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzY2hlbWEgYXMgc2NoZW1hJDEgfSBmcm9tICcuL2pzb24vc2NoZW1hLmpzJztcbmltcG9ydCB7IGJpbmFyeSB9IGZyb20gJy4veWFtbC0xLjEvYmluYXJ5LmpzJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnLi95YW1sLTEuMS9tZXJnZS5qcyc7XG5pbXBvcnQgeyBvbWFwIH0gZnJvbSAnLi95YW1sLTEuMS9vbWFwLmpzJztcbmltcG9ydCB7IHBhaXJzIH0gZnJvbSAnLi95YW1sLTEuMS9wYWlycy5qcyc7XG5pbXBvcnQgeyBzY2hlbWEgYXMgc2NoZW1hJDIgfSBmcm9tICcuL3lhbWwtMS4xL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzZXQgfSBmcm9tICcuL3lhbWwtMS4xL3NldC5qcyc7XG5pbXBvcnQgeyB0aW1lc3RhbXAsIGludFRpbWUsIGZsb2F0VGltZSB9IGZyb20gJy4veWFtbC0xLjEvdGltZXN0YW1wLmpzJztcblxuY29uc3Qgc2NoZW1hcyA9IG5ldyBNYXAoW1xuICAgIFsnY29yZScsIHNjaGVtYV0sXG4gICAgWydmYWlsc2FmZScsIFttYXAsIHNlcSwgc3RyaW5nXV0sXG4gICAgWydqc29uJywgc2NoZW1hJDFdLFxuICAgIFsneWFtbDExJywgc2NoZW1hJDJdLFxuICAgIFsneWFtbC0xLjEnLCBzY2hlbWEkMl1cbl0pO1xuY29uc3QgdGFnc0J5TmFtZSA9IHtcbiAgICBiaW5hcnksXG4gICAgYm9vbDogYm9vbFRhZyxcbiAgICBmbG9hdCxcbiAgICBmbG9hdEV4cCxcbiAgICBmbG9hdE5hTixcbiAgICBmbG9hdFRpbWUsXG4gICAgaW50LFxuICAgIGludEhleCxcbiAgICBpbnRPY3QsXG4gICAgaW50VGltZSxcbiAgICBtYXAsXG4gICAgbWVyZ2UsXG4gICAgbnVsbDogbnVsbFRhZyxcbiAgICBvbWFwLFxuICAgIHBhaXJzLFxuICAgIHNlcSxcbiAgICBzZXQsXG4gICAgdGltZXN0YW1wXG59O1xuY29uc3QgY29yZUtub3duVGFncyA9IHtcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5JzogYmluYXJ5LFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZSc6IG1lcmdlLFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJzogb21hcCxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnOiBwYWlycyxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6c2V0Jzogc2V0LFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnOiB0aW1lc3RhbXBcbn07XG5mdW5jdGlvbiBnZXRUYWdzKGN1c3RvbVRhZ3MsIHNjaGVtYU5hbWUsIGFkZE1lcmdlVGFnKSB7XG4gICAgY29uc3Qgc2NoZW1hVGFncyA9IHNjaGVtYXMuZ2V0KHNjaGVtYU5hbWUpO1xuICAgIGlmIChzY2hlbWFUYWdzICYmICFjdXN0b21UYWdzKSB7XG4gICAgICAgIHJldHVybiBhZGRNZXJnZVRhZyAmJiAhc2NoZW1hVGFncy5pbmNsdWRlcyhtZXJnZSlcbiAgICAgICAgICAgID8gc2NoZW1hVGFncy5jb25jYXQobWVyZ2UpXG4gICAgICAgICAgICA6IHNjaGVtYVRhZ3Muc2xpY2UoKTtcbiAgICB9XG4gICAgbGV0IHRhZ3MgPSBzY2hlbWFUYWdzO1xuICAgIGlmICghdGFncykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjdXN0b21UYWdzKSlcbiAgICAgICAgICAgIHRhZ3MgPSBbXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbShzY2hlbWFzLmtleXMoKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09ICd5YW1sMTEnKVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IEpTT04uc3RyaW5naWZ5KGtleSkpXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2NoZW1hIFwiJHtzY2hlbWFOYW1lfVwiOyB1c2Ugb25lIG9mICR7a2V5c30gb3IgZGVmaW5lIGN1c3RvbVRhZ3MgYXJyYXlgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjdXN0b21UYWdzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiBjdXN0b21UYWdzKVxuICAgICAgICAgICAgdGFncyA9IHRhZ3MuY29uY2F0KHRhZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjdXN0b21UYWdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRhZ3MgPSBjdXN0b21UYWdzKHRhZ3Muc2xpY2UoKSk7XG4gICAgfVxuICAgIGlmIChhZGRNZXJnZVRhZylcbiAgICAgICAgdGFncyA9IHRhZ3MuY29uY2F0KG1lcmdlKTtcbiAgICByZXR1cm4gdGFncy5yZWR1Y2UoKHRhZ3MsIHRhZykgPT4ge1xuICAgICAgICBjb25zdCB0YWdPYmogPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IHRhZ3NCeU5hbWVbdGFnXSA6IHRhZztcbiAgICAgICAgaWYgKCF0YWdPYmopIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSBKU09OLnN0cmluZ2lmeSh0YWcpO1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRhZ3NCeU5hbWUpXG4gICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gSlNPTi5zdHJpbmdpZnkoa2V5KSlcbiAgICAgICAgICAgICAgICAuam9pbignLCAnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjdXN0b20gdGFnICR7dGFnTmFtZX07IHVzZSBvbmUgb2YgJHtrZXlzfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGFncy5pbmNsdWRlcyh0YWdPYmopKVxuICAgICAgICAgICAgdGFncy5wdXNoKHRhZ09iaik7XG4gICAgICAgIHJldHVybiB0YWdzO1xuICAgIH0sIFtdKTtcbn1cblxuZXhwb3J0IHsgY29yZUtub3duVGFncywgZ2V0VGFncyB9O1xuIiwiaW1wb3J0IHsgTUFQLCBTQ0FMQVIsIFNFUSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGdldFRhZ3MsIGNvcmVLbm93blRhZ3MgfSBmcm9tICcuL3RhZ3MuanMnO1xuXG5jb25zdCBzb3J0TWFwRW50cmllc0J5S2V5ID0gKGEsIGIpID0+IGEua2V5IDwgYi5rZXkgPyAtMSA6IGEua2V5ID4gYi5rZXkgPyAxIDogMDtcbmNsYXNzIFNjaGVtYSB7XG4gICAgY29uc3RydWN0b3IoeyBjb21wYXQsIGN1c3RvbVRhZ3MsIG1lcmdlLCByZXNvbHZlS25vd25UYWdzLCBzY2hlbWEsIHNvcnRNYXBFbnRyaWVzLCB0b1N0cmluZ0RlZmF1bHRzIH0pIHtcbiAgICAgICAgdGhpcy5jb21wYXQgPSBBcnJheS5pc0FycmF5KGNvbXBhdClcbiAgICAgICAgICAgID8gZ2V0VGFncyhjb21wYXQsICdjb21wYXQnKVxuICAgICAgICAgICAgOiBjb21wYXRcbiAgICAgICAgICAgICAgICA/IGdldFRhZ3MobnVsbCwgY29tcGF0KVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgdGhpcy5uYW1lID0gKHR5cGVvZiBzY2hlbWEgPT09ICdzdHJpbmcnICYmIHNjaGVtYSkgfHwgJ2NvcmUnO1xuICAgICAgICB0aGlzLmtub3duVGFncyA9IHJlc29sdmVLbm93blRhZ3MgPyBjb3JlS25vd25UYWdzIDoge307XG4gICAgICAgIHRoaXMudGFncyA9IGdldFRhZ3MoY3VzdG9tVGFncywgdGhpcy5uYW1lLCBtZXJnZSk7XG4gICAgICAgIHRoaXMudG9TdHJpbmdPcHRpb25zID0gdG9TdHJpbmdEZWZhdWx0cyA/PyBudWxsO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTUFQLCB7IHZhbHVlOiBtYXAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBTQ0FMQVIsIHsgdmFsdWU6IHN0cmluZyB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFNFUSwgeyB2YWx1ZTogc2VxIH0pO1xuICAgICAgICAvLyBVc2VkIGJ5IGNyZWF0ZU1hcCgpXG4gICAgICAgIHRoaXMuc29ydE1hcEVudHJpZXMgPVxuICAgICAgICAgICAgdHlwZW9mIHNvcnRNYXBFbnRyaWVzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBzb3J0TWFwRW50cmllc1xuICAgICAgICAgICAgICAgIDogc29ydE1hcEVudHJpZXMgPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgPyBzb3J0TWFwRW50cmllc0J5S2V5XG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKFNjaGVtYS5wcm90b3R5cGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMpKTtcbiAgICAgICAgY29weS50YWdzID0gdGhpcy50YWdzLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU2NoZW1hIH07XG4iLCJpbXBvcnQgeyBBbGlhcyB9IGZyb20gJy4uL25vZGVzL0FsaWFzLmpzJztcbmltcG9ydCB7IGlzRW1wdHlQYXRoLCBjb2xsZWN0aW9uRnJvbVBhdGggfSBmcm9tICcuLi9ub2Rlcy9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgRE9DLCBpc05vZGUsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi4vbm9kZXMvdG9KUy5qcyc7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuLi9zY2hlbWEvU2NoZW1hLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeURvY3VtZW50IH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeURvY3VtZW50LmpzJztcbmltcG9ydCB7IGFuY2hvck5hbWVzLCBmaW5kTmV3QW5jaG9yLCBjcmVhdGVOb2RlQW5jaG9ycyB9IGZyb20gJy4vYW5jaG9ycy5qcyc7XG5pbXBvcnQgeyBhcHBseVJldml2ZXIgfSBmcm9tICcuL2FwcGx5UmV2aXZlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSAnLi9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IERpcmVjdGl2ZXMgfSBmcm9tICcuL2RpcmVjdGl2ZXMuanMnO1xuXG5jbGFzcyBEb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIHJlcGxhY2VyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBBIGNvbW1lbnQgYmVmb3JlIHRoaXMgRG9jdW1lbnQgKi9cbiAgICAgICAgdGhpcy5jb21tZW50QmVmb3JlID0gbnVsbDtcbiAgICAgICAgLyoqIEEgY29tbWVudCBpbW1lZGlhdGVseSBhZnRlciB0aGlzIERvY3VtZW50ICovXG4gICAgICAgIHRoaXMuY29tbWVudCA9IG51bGw7XG4gICAgICAgIC8qKiBFcnJvcnMgZW5jb3VudGVyZWQgZHVyaW5nIHBhcnNpbmcuICovXG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgIC8qKiBXYXJuaW5ncyBlbmNvdW50ZXJlZCBkdXJpbmcgcGFyc2luZy4gKi9cbiAgICAgICAgdGhpcy53YXJuaW5ncyA9IFtdO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTk9ERV9UWVBFLCB7IHZhbHVlOiBET0MgfSk7XG4gICAgICAgIGxldCBfcmVwbGFjZXIgPSBudWxsO1xuICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nIHx8IEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgICAgICBfcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZXBsYWNlcjtcbiAgICAgICAgICAgIHJlcGxhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdCA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgaW50QXNCaWdJbnQ6IGZhbHNlLFxuICAgICAgICAgICAga2VlcFNvdXJjZVRva2VuczogZmFsc2UsXG4gICAgICAgICAgICBsb2dMZXZlbDogJ3dhcm4nLFxuICAgICAgICAgICAgcHJldHR5RXJyb3JzOiB0cnVlLFxuICAgICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgICAgc3RyaW5nS2V5czogZmFsc2UsXG4gICAgICAgICAgICB1bmlxdWVLZXlzOiB0cnVlLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEuMidcbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdDtcbiAgICAgICAgbGV0IHsgdmVyc2lvbiB9ID0gb3B0O1xuICAgICAgICBpZiAob3B0aW9ucz8uX2RpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG9wdGlvbnMuX2RpcmVjdGl2ZXMuYXREb2N1bWVudCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcy55YW1sLmV4cGxpY2l0KVxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSB0aGlzLmRpcmVjdGl2ZXMueWFtbC52ZXJzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbiB9KTtcbiAgICAgICAgdGhpcy5zZXRTY2hlbWEodmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgIHRoaXMuY29udGVudHMgPVxuICAgICAgICAgICAgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0aGlzLmNyZWF0ZU5vZGUodmFsdWUsIF9yZXBsYWNlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlZXAgY29weSBvZiB0aGlzIERvY3VtZW50IGFuZCBpdHMgY29udGVudHMuXG4gICAgICpcbiAgICAgKiBDdXN0b20gTm9kZSB2YWx1ZXMgdGhhdCBpbmhlcml0IGZyb20gYE9iamVjdGAgc3RpbGwgcmVmZXIgdG8gdGhlaXIgb3JpZ2luYWwgaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShEb2N1bWVudC5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIFtOT0RFX1RZUEVdOiB7IHZhbHVlOiBET0MgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29weS5jb21tZW50QmVmb3JlID0gdGhpcy5jb21tZW50QmVmb3JlO1xuICAgICAgICBjb3B5LmNvbW1lbnQgPSB0aGlzLmNvbW1lbnQ7XG4gICAgICAgIGNvcHkuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoKTtcbiAgICAgICAgY29weS53YXJuaW5ncyA9IHRoaXMud2FybmluZ3Muc2xpY2UoKTtcbiAgICAgICAgY29weS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgIGNvcHkuZGlyZWN0aXZlcyA9IHRoaXMuZGlyZWN0aXZlcy5jbG9uZSgpO1xuICAgICAgICBjb3B5LnNjaGVtYSA9IHRoaXMuc2NoZW1hLmNsb25lKCk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgIGNvcHkuY29udGVudHMgPSBpc05vZGUodGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy5jbG9uZShjb3B5LnNjaGVtYSlcbiAgICAgICAgICAgIDogdGhpcy5jb250ZW50cztcbiAgICAgICAgaWYgKHRoaXMucmFuZ2UpXG4gICAgICAgICAgICBjb3B5LnJhbmdlID0gdGhpcy5yYW5nZS5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgLyoqIEFkZHMgYSB2YWx1ZSB0byB0aGUgZG9jdW1lbnQuICovXG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIGlmIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKVxuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5hZGQodmFsdWUpO1xuICAgIH1cbiAgICAvKiogQWRkcyBhIHZhbHVlIHRvIHRoZSBkb2N1bWVudC4gKi9cbiAgICBhZGRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSlcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuYWRkSW4ocGF0aCwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFsaWFzYCBub2RlLCBlbnN1cmluZyB0aGF0IHRoZSB0YXJnZXQgYG5vZGVgIGhhcyB0aGUgcmVxdWlyZWQgYW5jaG9yLlxuICAgICAqXG4gICAgICogSWYgYG5vZGVgIGFscmVhZHkgaGFzIGFuIGFuY2hvciwgYG5hbWVgIGlzIGlnbm9yZWQuXG4gICAgICogT3RoZXJ3aXNlLCB0aGUgYG5vZGUuYW5jaG9yYCB2YWx1ZSB3aWxsIGJlIHNldCB0byBgbmFtZWAsXG4gICAgICogb3IgaWYgYW4gYW5jaG9yIHdpdGggdGhhdCBuYW1lIGlzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQsXG4gICAgICogYG5hbWVgIHdpbGwgYmUgdXNlZCBhcyBhIHByZWZpeCBmb3IgYSBuZXcgdW5pcXVlIGFuY2hvci5cbiAgICAgKiBJZiBgbmFtZWAgaXMgdW5kZWZpbmVkLCB0aGUgZ2VuZXJhdGVkIGFuY2hvciB3aWxsIHVzZSAnYScgYXMgYSBwcmVmaXguXG4gICAgICovXG4gICAgY3JlYXRlQWxpYXMobm9kZSwgbmFtZSkge1xuICAgICAgICBpZiAoIW5vZGUuYW5jaG9yKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gYW5jaG9yTmFtZXModGhpcyk7XG4gICAgICAgICAgICBub2RlLmFuY2hvciA9XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgICAgICAgICAgIW5hbWUgfHwgcHJldi5oYXMobmFtZSkgPyBmaW5kTmV3QW5jaG9yKG5hbWUgfHwgJ2EnLCBwcmV2KSA6IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBbGlhcyhub2RlLmFuY2hvcik7XG4gICAgfVxuICAgIGNyZWF0ZU5vZGUodmFsdWUsIHJlcGxhY2VyLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBfcmVwbGFjZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbCh7ICcnOiB2YWx1ZSB9LCAnJywgdmFsdWUpO1xuICAgICAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleVRvU3RyID0gKHYpID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fCB2IGluc3RhbmNlb2YgU3RyaW5nIHx8IHYgaW5zdGFuY2VvZiBOdW1iZXI7XG4gICAgICAgICAgICBjb25zdCBhc1N0ciA9IHJlcGxhY2VyLmZpbHRlcihrZXlUb1N0cikubWFwKFN0cmluZyk7XG4gICAgICAgICAgICBpZiAoYXNTdHIubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICByZXBsYWNlciA9IHJlcGxhY2VyLmNvbmNhdChhc1N0cik7XG4gICAgICAgICAgICBfcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZXBsYWNlcjtcbiAgICAgICAgICAgIHJlcGxhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYWxpYXNEdXBsaWNhdGVPYmplY3RzLCBhbmNob3JQcmVmaXgsIGZsb3csIGtlZXBVbmRlZmluZWQsIG9uVGFnT2JqLCB0YWcgfSA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IHsgb25BbmNob3IsIHNldEFuY2hvcnMsIHNvdXJjZU9iamVjdHMgfSA9IGNyZWF0ZU5vZGVBbmNob3JzKHRoaXMsIFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgYW5jaG9yUHJlZml4IHx8ICdhJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICAgIGFsaWFzRHVwbGljYXRlT2JqZWN0czogYWxpYXNEdXBsaWNhdGVPYmplY3RzID8/IHRydWUsXG4gICAgICAgICAgICBrZWVwVW5kZWZpbmVkOiBrZWVwVW5kZWZpbmVkID8/IGZhbHNlLFxuICAgICAgICAgICAgb25BbmNob3IsXG4gICAgICAgICAgICBvblRhZ09iaixcbiAgICAgICAgICAgIHJlcGxhY2VyOiBfcmVwbGFjZXIsXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hLFxuICAgICAgICAgICAgc291cmNlT2JqZWN0c1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub2RlID0gY3JlYXRlTm9kZSh2YWx1ZSwgdGFnLCBjdHgpO1xuICAgICAgICBpZiAoZmxvdyAmJiBpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICBub2RlLmZsb3cgPSB0cnVlO1xuICAgICAgICBzZXRBbmNob3JzKCk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEga2V5IGFuZCBhIHZhbHVlIGludG8gYSBgUGFpcmAgdXNpbmcgdGhlIGN1cnJlbnQgc2NoZW1hLFxuICAgICAqIHJlY3Vyc2l2ZWx5IHdyYXBwaW5nIGFsbCB2YWx1ZXMgYXMgYFNjYWxhcmAgb3IgYENvbGxlY3Rpb25gIG5vZGVzLlxuICAgICAqL1xuICAgIGNyZWF0ZVBhaXIoa2V5LCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGsgPSB0aGlzLmNyZWF0ZU5vZGUoa2V5LCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdiA9IHRoaXMuY3JlYXRlTm9kZSh2YWx1ZSwgbnVsbCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXcgUGFpcihrLCB2KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSA/IHRoaXMuY29udGVudHMuZGVsZXRlKGtleSkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlSW4ocGF0aCkge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRzID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQcmVzdW1lZCBpbXBvc3NpYmxlIGlmIFN0cmljdCBleHRlbmRzIGZhbHNlXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuZGVsZXRlSW4ocGF0aClcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaXRlbSBhdCBga2V5YCwgb3IgYHVuZGVmaW5lZGAgaWYgbm90IGZvdW5kLiBCeSBkZWZhdWx0IHVud3JhcHNcbiAgICAgKiBzY2FsYXIgdmFsdWVzIGZyb20gdGhlaXIgc3Vycm91bmRpbmcgbm9kZTsgdG8gZGlzYWJsZSBzZXQgYGtlZXBTY2FsYXJgIHRvXG4gICAgICogYHRydWVgIChjb2xsZWN0aW9ucyBhcmUgYWx3YXlzIHJldHVybmVkIGludGFjdCkuXG4gICAgICovXG4gICAgZ2V0KGtleSwga2VlcFNjYWxhcikge1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuZ2V0KGtleSwga2VlcFNjYWxhcilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGl0ZW0gYXQgYHBhdGhgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXRJbihwYXRoLCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSlcbiAgICAgICAgICAgIHJldHVybiAha2VlcFNjYWxhciAmJiBpc1NjYWxhcih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy52YWx1ZVxuICAgICAgICAgICAgICAgIDogdGhpcy5jb250ZW50cztcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmdldEluKHBhdGgsIGtlZXBTY2FsYXIpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBkb2N1bWVudCBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKi9cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb250ZW50cykgPyB0aGlzLmNvbnRlbnRzLmhhcyhrZXkpIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZG9jdW1lbnQgaW5jbHVkZXMgYSB2YWx1ZSBhdCBgcGF0aGAuXG4gICAgICovXG4gICAgaGFzSW4ocGF0aCkge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpID8gdGhpcy5jb250ZW50cy5oYXNJbihwYXRoKSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBkb2N1bWVudC4gRm9yIGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgICAqIGJvb2xlYW4gdG8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG4gICAgICovXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIFtrZXldLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgZG9jdW1lbnQuIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqL1xuICAgIHNldEluKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRlbnRzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gY29sbGVjdGlvbkZyb21QYXRoKHRoaXMuc2NoZW1hLCBBcnJheS5mcm9tKHBhdGgpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5zZXRJbihwYXRoLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBZQU1MIHZlcnNpb24gYW5kIHNjaGVtYSB1c2VkIGJ5IHRoZSBkb2N1bWVudC5cbiAgICAgKiBBIGBudWxsYCB2ZXJzaW9uIGRpc2FibGVzIHN1cHBvcnQgZm9yIGRpcmVjdGl2ZXMsIGV4cGxpY2l0IHRhZ3MsIGFuY2hvcnMsIGFuZCBhbGlhc2VzLlxuICAgICAqIEl0IGFsc28gcmVxdWlyZXMgdGhlIGBzY2hlbWFgIG9wdGlvbiB0byBiZSBnaXZlbiBhcyBhIGBTY2hlbWFgIGluc3RhbmNlIHZhbHVlLlxuICAgICAqXG4gICAgICogT3ZlcnJpZGVzIGFsbCBwcmV2aW91c2x5IHNldCBzY2hlbWEgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBzZXRTY2hlbWEodmVyc2lvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pO1xuICAgICAgICBsZXQgb3B0O1xuICAgICAgICBzd2l0Y2ggKHZlcnNpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJzEuMSc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLnlhbWwudmVyc2lvbiA9ICcxLjEnO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uOiAnMS4xJyB9KTtcbiAgICAgICAgICAgICAgICBvcHQgPSB7IHJlc29sdmVLbm93blRhZ3M6IGZhbHNlLCBzY2hlbWE6ICd5YW1sLTEuMScgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMueWFtbC52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbiB9KTtcbiAgICAgICAgICAgICAgICBvcHQgPSB7IHJlc29sdmVLbm93blRhZ3M6IHRydWUsIHNjaGVtYTogJ2NvcmUnIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGlyZWN0aXZlcztcbiAgICAgICAgICAgICAgICBvcHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gSlNPTi5zdHJpbmdpZnkodmVyc2lvbik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAnMS4xJywgJzEuMicgb3IgbnVsbCBhcyBmaXJzdCBhcmd1bWVudCwgYnV0IGZvdW5kOiAke3N2fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5vdCB1c2luZyBgaW5zdGFuY2VvZiBTY2hlbWFgIHRvIGFsbG93IGZvciBkdWNrIHR5cGluZ1xuICAgICAgICBpZiAob3B0aW9ucy5zY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpXG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IG9wdGlvbnMuc2NoZW1hO1xuICAgICAgICBlbHNlIGlmIChvcHQpXG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IG5ldyBTY2hlbWEoT2JqZWN0LmFzc2lnbihvcHQsIG9wdGlvbnMpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXaXRoIGEgbnVsbCBZQU1MIHZlcnNpb24sIHRoZSB7IHNjaGVtYTogU2NoZW1hIH0gb3B0aW9uIGlzIHJlcXVpcmVkYCk7XG4gICAgfVxuICAgIC8vIGpzb24gJiBqc29uQXJnIGFyZSBvbmx5IHVzZWQgZnJvbSB0b0pTT04oKVxuICAgIHRvSlMoeyBqc29uLCBqc29uQXJnLCBtYXBBc01hcCwgbWF4QWxpYXNDb3VudCwgb25BbmNob3IsIHJldml2ZXIgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICAgIGFuY2hvcnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGRvYzogdGhpcyxcbiAgICAgICAgICAgIGtlZXA6ICFqc29uLFxuICAgICAgICAgICAgbWFwQXNNYXA6IG1hcEFzTWFwID09PSB0cnVlLFxuICAgICAgICAgICAgbWFwS2V5V2FybmVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heEFsaWFzQ291bnQ6IHR5cGVvZiBtYXhBbGlhc0NvdW50ID09PSAnbnVtYmVyJyA/IG1heEFsaWFzQ291bnQgOiAxMDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdG9KUyh0aGlzLmNvbnRlbnRzLCBqc29uQXJnID8/ICcnLCBjdHgpO1xuICAgICAgICBpZiAodHlwZW9mIG9uQW5jaG9yID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgZm9yIChjb25zdCB7IGNvdW50LCByZXMgfSBvZiBjdHguYW5jaG9ycy52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICBvbkFuY2hvcihyZXMsIGNvdW50KTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB7ICcnOiByZXMgfSwgJycsIHJlcylcbiAgICAgICAgICAgIDogcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGRvY3VtZW50IGBjb250ZW50c2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ganNvbkFyZyBVc2VkIGJ5IGBKU09OLnN0cmluZ2lmeWAgdG8gaW5kaWNhdGUgdGhlIGFycmF5IGluZGV4IG9yXG4gICAgICogICBwcm9wZXJ0eSBuYW1lLlxuICAgICAqL1xuICAgIHRvSlNPTihqc29uQXJnLCBvbkFuY2hvcikge1xuICAgICAgICByZXR1cm4gdGhpcy50b0pTKHsganNvbjogdHJ1ZSwganNvbkFyZywgbWFwQXNNYXA6IGZhbHNlLCBvbkFuY2hvciB9KTtcbiAgICB9XG4gICAgLyoqIEEgWUFNTCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZG9jdW1lbnQuICovXG4gICAgdG9TdHJpbmcob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEb2N1bWVudCB3aXRoIGVycm9ycyBjYW5ub3QgYmUgc3RyaW5naWZpZWQnKTtcbiAgICAgICAgaWYgKCdpbmRlbnQnIGluIG9wdGlvbnMgJiZcbiAgICAgICAgICAgICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmluZGVudCkgfHwgTnVtYmVyKG9wdGlvbnMuaW5kZW50KSA8PSAwKSkge1xuICAgICAgICAgICAgY29uc3QgcyA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuaW5kZW50KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJpbmRlbnRcIiBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIG5vdCAke3N9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeURvY3VtZW50KHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydENvbGxlY3Rpb24oY29udGVudHMpIHtcbiAgICBpZiAoaXNDb2xsZWN0aW9uKGNvbnRlbnRzKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIFlBTUwgY29sbGVjdGlvbiBhcyBkb2N1bWVudCBjb250ZW50cycpO1xufVxuXG5leHBvcnQgeyBEb2N1bWVudCB9O1xuIiwiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaW5kZW50Q29tbWVudCwgbGluZUNvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlEb2N1bWVudChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGxldCBoYXNEaXJlY3RpdmVzID0gb3B0aW9ucy5kaXJlY3RpdmVzID09PSB0cnVlO1xuICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMgIT09IGZhbHNlICYmIGRvYy5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvbnN0IGRpciA9IGRvYy5kaXJlY3RpdmVzLnRvU3RyaW5nKGRvYyk7XG4gICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goZGlyKTtcbiAgICAgICAgICAgIGhhc0RpcmVjdGl2ZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0KVxuICAgICAgICAgICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgfVxuICAgIGlmIChoYXNEaXJlY3RpdmVzKVxuICAgICAgICBsaW5lcy5wdXNoKCctLS0nKTtcbiAgICBjb25zdCBjdHggPSBjcmVhdGVTdHJpbmdpZnlDb250ZXh0KGRvYywgb3B0aW9ucyk7XG4gICAgY29uc3QgeyBjb21tZW50U3RyaW5nIH0gPSBjdHgub3B0aW9ucztcbiAgICBpZiAoZG9jLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIGxpbmVzLnVuc2hpZnQoJycpO1xuICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICBsaW5lcy51bnNoaWZ0KGluZGVudENvbW1lbnQoY3MsICcnKSk7XG4gICAgfVxuICAgIGxldCBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICBsZXQgY29udGVudENvbW1lbnQgPSBudWxsO1xuICAgIGlmIChkb2MuY29udGVudHMpIHtcbiAgICAgICAgaWYgKGlzTm9kZShkb2MuY29udGVudHMpKSB7XG4gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLnNwYWNlQmVmb3JlICYmIGhhc0RpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50Q29tbWVudChjcywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRvcC1sZXZlbCBibG9jayBzY2FsYXJzIG5lZWQgdG8gYmUgaW5kZW50ZWQgaWYgZm9sbG93ZWQgYnkgYSBjb21tZW50XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9ICEhZG9jLmNvbW1lbnQ7XG4gICAgICAgICAgICBjb250ZW50Q29tbWVudCA9IGRvYy5jb250ZW50cy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9uQ2hvbXBLZWVwID0gY29udGVudENvbW1lbnQgPyB1bmRlZmluZWQgOiAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSk7XG4gICAgICAgIGxldCBib2R5ID0gc3RyaW5naWZ5KGRvYy5jb250ZW50cywgY3R4LCAoKSA9PiAoY29udGVudENvbW1lbnQgPSBudWxsKSwgb25DaG9tcEtlZXApO1xuICAgICAgICBpZiAoY29udGVudENvbW1lbnQpXG4gICAgICAgICAgICBib2R5ICs9IGxpbmVDb21tZW50KGJvZHksICcnLCBjb21tZW50U3RyaW5nKGNvbnRlbnRDb21tZW50KSk7XG4gICAgICAgIGlmICgoYm9keVswXSA9PT0gJ3wnIHx8IGJvZHlbMF0gPT09ICc+JykgJiZcbiAgICAgICAgICAgIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID09PSAnLS0tJykge1xuICAgICAgICAgICAgLy8gVG9wLWxldmVsIGJsb2NrIHNjYWxhcnMgd2l0aCBhIHByZWNlZGluZyBkb2MgbWFya2VyIG91Z2h0IHRvIHVzZSB0aGVcbiAgICAgICAgICAgIC8vIHNhbWUgbGluZSBmb3IgdGhlaXIgaGVhZGVyLlxuICAgICAgICAgICAgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPSBgLS0tICR7Ym9keX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYm9keSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsaW5lcy5wdXNoKHN0cmluZ2lmeShkb2MuY29udGVudHMsIGN0eCkpO1xuICAgIH1cbiAgICBpZiAoZG9jLmRpcmVjdGl2ZXM/LmRvY0VuZCkge1xuICAgICAgICBpZiAoZG9jLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gY29tbWVudFN0cmluZyhkb2MuY29tbWVudCk7XG4gICAgICAgICAgICBpZiAoY3MuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnLi4uJyk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNzLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChgLi4uICR7Y3N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCcuLi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGRjID0gZG9jLmNvbW1lbnQ7XG4gICAgICAgIGlmIChkYyAmJiBjaG9tcEtlZXApXG4gICAgICAgICAgICBkYyA9IGRjLnJlcGxhY2UoL15cXG4rLywgJycpO1xuICAgICAgICBpZiAoZGMpIHtcbiAgICAgICAgICAgIGlmICgoIWNob21wS2VlcCB8fCBjb250ZW50Q29tbWVudCkgJiYgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gIT09ICcnKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoZGMpLCAnJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKSArICdcXG4nO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9O1xuIiwiY2xhc3MgWUFNTEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHBvcywgY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICB9XG59XG5jbGFzcyBZQU1MUGFyc2VFcnJvciBleHRlbmRzIFlBTUxFcnJvciB7XG4gICAgY29uc3RydWN0b3IocG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCdZQU1MUGFyc2VFcnJvcicsIHBvcywgY29kZSwgbWVzc2FnZSk7XG4gICAgfVxufVxuY2xhc3MgWUFNTFdhcm5pbmcgZXh0ZW5kcyBZQU1MRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHBvcywgY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcignWUFNTFdhcm5pbmcnLCBwb3MsIGNvZGUsIG1lc3NhZ2UpO1xuICAgIH1cbn1cbmNvbnN0IHByZXR0aWZ5RXJyb3IgPSAoc3JjLCBsYykgPT4gKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yLnBvc1swXSA9PT0gLTEpXG4gICAgICAgIHJldHVybjtcbiAgICBlcnJvci5saW5lUG9zID0gZXJyb3IucG9zLm1hcChwb3MgPT4gbGMubGluZVBvcyhwb3MpKTtcbiAgICBjb25zdCB7IGxpbmUsIGNvbCB9ID0gZXJyb3IubGluZVBvc1swXTtcbiAgICBlcnJvci5tZXNzYWdlICs9IGAgYXQgbGluZSAke2xpbmV9LCBjb2x1bW4gJHtjb2x9YDtcbiAgICBsZXQgY2kgPSBjb2wgLSAxO1xuICAgIGxldCBsaW5lU3RyID0gc3JjXG4gICAgICAgIC5zdWJzdHJpbmcobGMubGluZVN0YXJ0c1tsaW5lIC0gMV0sIGxjLmxpbmVTdGFydHNbbGluZV0pXG4gICAgICAgIC5yZXBsYWNlKC9bXFxuXFxyXSskLywgJycpO1xuICAgIC8vIFRyaW0gdG8gbWF4IDgwIGNoYXJzLCBrZWVwaW5nIGNvbCBwb3NpdGlvbiBuZWFyIHRoZSBtaWRkbGVcbiAgICBpZiAoY2kgPj0gNjAgJiYgbGluZVN0ci5sZW5ndGggPiA4MCkge1xuICAgICAgICBjb25zdCB0cmltU3RhcnQgPSBNYXRoLm1pbihjaSAtIDM5LCBsaW5lU3RyLmxlbmd0aCAtIDc5KTtcbiAgICAgICAgbGluZVN0ciA9ICfigKYnICsgbGluZVN0ci5zdWJzdHJpbmcodHJpbVN0YXJ0KTtcbiAgICAgICAgY2kgLT0gdHJpbVN0YXJ0IC0gMTtcbiAgICB9XG4gICAgaWYgKGxpbmVTdHIubGVuZ3RoID4gODApXG4gICAgICAgIGxpbmVTdHIgPSBsaW5lU3RyLnN1YnN0cmluZygwLCA3OSkgKyAn4oCmJztcbiAgICAvLyBJbmNsdWRlIHByZXZpb3VzIGxpbmUgaW4gY29udGV4dCBpZiBwb2ludGluZyBhdCBsaW5lIHN0YXJ0XG4gICAgaWYgKGxpbmUgPiAxICYmIC9eICokLy50ZXN0KGxpbmVTdHIuc3Vic3RyaW5nKDAsIGNpKSkpIHtcbiAgICAgICAgLy8gUmVnZXhwIHdvbid0IG1hdGNoIGlmIHN0YXJ0IGlzIHRyaW1tZWRcbiAgICAgICAgbGV0IHByZXYgPSBzcmMuc3Vic3RyaW5nKGxjLmxpbmVTdGFydHNbbGluZSAtIDJdLCBsYy5saW5lU3RhcnRzW2xpbmUgLSAxXSk7XG4gICAgICAgIGlmIChwcmV2Lmxlbmd0aCA+IDgwKVxuICAgICAgICAgICAgcHJldiA9IHByZXYuc3Vic3RyaW5nKDAsIDc5KSArICfigKZcXG4nO1xuICAgICAgICBsaW5lU3RyID0gcHJldiArIGxpbmVTdHI7XG4gICAgfVxuICAgIGlmICgvW14gXS8udGVzdChsaW5lU3RyKSkge1xuICAgICAgICBsZXQgY291bnQgPSAxO1xuICAgICAgICBjb25zdCBlbmQgPSBlcnJvci5saW5lUG9zWzFdO1xuICAgICAgICBpZiAoZW5kICYmIGVuZC5saW5lID09PSBsaW5lICYmIGVuZC5jb2wgPiBjb2wpIHtcbiAgICAgICAgICAgIGNvdW50ID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oZW5kLmNvbCAtIGNvbCwgODAgLSBjaSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSAnICcucmVwZWF0KGNpKSArICdeJy5yZXBlYXQoY291bnQpO1xuICAgICAgICBlcnJvci5tZXNzYWdlICs9IGA6XFxuXFxuJHtsaW5lU3RyfVxcbiR7cG9pbnRlcn1cXG5gO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFlBTUxFcnJvciwgWUFNTFBhcnNlRXJyb3IsIFlBTUxXYXJuaW5nLCBwcmV0dGlmeUVycm9yIH07XG4iLCJmdW5jdGlvbiByZXNvbHZlUHJvcHModG9rZW5zLCB7IGZsb3csIGluZGljYXRvciwgbmV4dCwgb2Zmc2V0LCBvbkVycm9yLCBwYXJlbnRJbmRlbnQsIHN0YXJ0T25OZXdsaW5lIH0pIHtcbiAgICBsZXQgc3BhY2VCZWZvcmUgPSBmYWxzZTtcbiAgICBsZXQgYXROZXdsaW5lID0gc3RhcnRPbk5ld2xpbmU7XG4gICAgbGV0IGhhc1NwYWNlID0gc3RhcnRPbk5ld2xpbmU7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgY29tbWVudFNlcCA9ICcnO1xuICAgIGxldCBoYXNOZXdsaW5lID0gZmFsc2U7XG4gICAgbGV0IHJlcVNwYWNlID0gZmFsc2U7XG4gICAgbGV0IHRhYiA9IG51bGw7XG4gICAgbGV0IGFuY2hvciA9IG51bGw7XG4gICAgbGV0IHRhZyA9IG51bGw7XG4gICAgbGV0IG5ld2xpbmVBZnRlclByb3AgPSBudWxsO1xuICAgIGxldCBjb21tYSA9IG51bGw7XG4gICAgbGV0IGZvdW5kID0gbnVsbDtcbiAgICBsZXQgc3RhcnQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgICAgIGlmIChyZXFTcGFjZSkge1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09ICdzcGFjZScgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi50eXBlICE9PSAnbmV3bGluZScgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi50eXBlICE9PSAnY29tbWEnKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4ub2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ1RhZ3MgYW5kIGFuY2hvcnMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSB0aGUgbmV4dCB0b2tlbiBieSB3aGl0ZSBzcGFjZScpO1xuICAgICAgICAgICAgcmVxU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFiKSB7XG4gICAgICAgICAgICBpZiAoYXROZXdsaW5lICYmIHRva2VuLnR5cGUgIT09ICdjb21tZW50JyAmJiB0b2tlbi50eXBlICE9PSAnbmV3bGluZScpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRhYiwgJ1RBQl9BU19JTkRFTlQnLCAnVGFicyBhcmUgbm90IGFsbG93ZWQgYXMgaW5kZW50YXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgLy8gQXQgdGhlIGRvYyBsZXZlbCwgdGFicyBhdCBsaW5lIHN0YXJ0IG1heSBiZSBwYXJzZWRcbiAgICAgICAgICAgICAgICAvLyBhcyBsZWFkaW5nIHdoaXRlIHNwYWNlIHJhdGhlciB0aGFuIGluZGVudGF0aW9uLlxuICAgICAgICAgICAgICAgIC8vIEluIGEgZmxvdyBjb2xsZWN0aW9uLCBvbmx5IHRoZSBwYXJzZXIgaGFuZGxlcyBpbmRlbnQuXG4gICAgICAgICAgICAgICAgaWYgKCFmbG93ICYmXG4gICAgICAgICAgICAgICAgICAgIChpbmRpY2F0b3IgIT09ICdkb2Mtc3RhcnQnIHx8IG5leHQ/LnR5cGUgIT09ICdmbG93LWNvbGxlY3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5zb3VyY2UuaW5jbHVkZXMoJ1xcdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50Jzoge1xuICAgICAgICAgICAgICAgIGlmICghaGFzU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCAnQ29tbWVudHMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gdG9rZW4uc291cmNlLnN1YnN0cmluZygxKSB8fCAnICc7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY2I7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IGNvbW1lbnRTZXAgKyBjYjtcbiAgICAgICAgICAgICAgICBjb21tZW50U2VwID0gJyc7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBpZiAoYXROZXdsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFmb3VuZCB8fCBpbmRpY2F0b3IgIT09ICdzZXEtaXRlbS1pbmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VCZWZvcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRTZXAgKz0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaGFzTmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvciB8fCB0YWcpXG4gICAgICAgICAgICAgICAgICAgIG5ld2xpbmVBZnRlclByb3AgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNVUxUSVBMRV9BTkNIT1JTJywgJ0Egbm9kZSBjYW4gaGF2ZSBhdCBtb3N0IG9uZSBhbmNob3InKTtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4uc291cmNlLmVuZHNXaXRoKCc6JykpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCAtIDEsICdCQURfQUxJQVMnLCAnQW5jaG9yIGVuZGluZyBpbiA6IGlzIGFtYmlndW91cycsIHRydWUpO1xuICAgICAgICAgICAgICAgIGFuY2hvciA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID8/IChzdGFydCA9IHRva2VuLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXFTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0YWcnOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01VTFRJUExFX1RBR1MnLCAnQSBub2RlIGNhbiBoYXZlIGF0IG1vc3Qgb25lIHRhZycpO1xuICAgICAgICAgICAgICAgIHRhZyA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID8/IChzdGFydCA9IHRva2VuLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXFTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGluZGljYXRvcjpcbiAgICAgICAgICAgICAgICAvLyBDb3VsZCBoZXJlIGhhbmRsZSBwcmVjZWRpbmcgY29tbWVudHMgZGlmZmVyZW50bHlcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yIHx8IHRhZylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ0JBRF9QUk9QX09SREVSJywgYEFuY2hvcnMgYW5kIHRhZ3MgbXVzdCBiZSBhZnRlciB0aGUgJHt0b2tlbi5zb3VyY2V9IGluZGljYXRvcmApO1xuICAgICAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAke3Rva2VuLnNvdXJjZX0gaW4gJHtmbG93ID8/ICdjb2xsZWN0aW9uJ31gKTtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9XG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvciA9PT0gJ3NlcS1pdGVtLWluZCcgfHwgaW5kaWNhdG9yID09PSAnZXhwbGljaXQta2V5LWluZCc7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgICAgICBpZiAoZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICwgaW4gJHtmbG93fWApO1xuICAgICAgICAgICAgICAgICAgICBjb21tYSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dG9rZW4udHlwZX0gdG9rZW5gKTtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IGVuZCA9IGxhc3QgPyBsYXN0Lm9mZnNldCArIGxhc3Quc291cmNlLmxlbmd0aCA6IG9mZnNldDtcbiAgICBpZiAocmVxU3BhY2UgJiZcbiAgICAgICAgbmV4dCAmJlxuICAgICAgICBuZXh0LnR5cGUgIT09ICdzcGFjZScgJiZcbiAgICAgICAgbmV4dC50eXBlICE9PSAnbmV3bGluZScgJiZcbiAgICAgICAgbmV4dC50eXBlICE9PSAnY29tbWEnICYmXG4gICAgICAgIChuZXh0LnR5cGUgIT09ICdzY2FsYXInIHx8IG5leHQuc291cmNlICE9PSAnJykpIHtcbiAgICAgICAgb25FcnJvcihuZXh0Lm9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdUYWdzIGFuZCBhbmNob3JzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gdGhlIG5leHQgdG9rZW4gYnkgd2hpdGUgc3BhY2UnKTtcbiAgICB9XG4gICAgaWYgKHRhYiAmJlxuICAgICAgICAoKGF0TmV3bGluZSAmJiB0YWIuaW5kZW50IDw9IHBhcmVudEluZGVudCkgfHxcbiAgICAgICAgICAgIG5leHQ/LnR5cGUgPT09ICdibG9jay1tYXAnIHx8XG4gICAgICAgICAgICBuZXh0Py50eXBlID09PSAnYmxvY2stc2VxJykpXG4gICAgICAgIG9uRXJyb3IodGFiLCAnVEFCX0FTX0lOREVOVCcsICdUYWJzIGFyZSBub3QgYWxsb3dlZCBhcyBpbmRlbnRhdGlvbicpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbW1hLFxuICAgICAgICBmb3VuZCxcbiAgICAgICAgc3BhY2VCZWZvcmUsXG4gICAgICAgIGNvbW1lbnQsXG4gICAgICAgIGhhc05ld2xpbmUsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgdGFnLFxuICAgICAgICBuZXdsaW5lQWZ0ZXJQcm9wLFxuICAgICAgICBlbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydCA/PyBlbmRcbiAgICB9O1xufVxuXG5leHBvcnQgeyByZXNvbHZlUHJvcHMgfTtcbiIsImZ1bmN0aW9uIGNvbnRhaW5zTmV3bGluZShrZXkpIHtcbiAgICBpZiAoIWtleSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgc3dpdGNoIChrZXkudHlwZSkge1xuICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgaWYgKGtleS5zb3VyY2UuaW5jbHVkZXMoJ1xcbicpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKGtleS5lbmQpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBrZXkuZW5kKVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0IG9mIGtleS5pdGVtcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgaXQuc3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5zTmV3bGluZShpdC5rZXkpIHx8IGNvbnRhaW5zTmV3bGluZShpdC52YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBjb250YWluc05ld2xpbmUgfTtcbiIsImltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZyb20gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcblxuZnVuY3Rpb24gZmxvd0luZGVudENoZWNrKGluZGVudCwgZmMsIG9uRXJyb3IpIHtcbiAgICBpZiAoZmM/LnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IGZjLmVuZFswXTtcbiAgICAgICAgaWYgKGVuZC5pbmRlbnQgPT09IGluZGVudCAmJlxuICAgICAgICAgICAgKGVuZC5zb3VyY2UgPT09ICddJyB8fCBlbmQuc291cmNlID09PSAnfScpICYmXG4gICAgICAgICAgICBjb250YWluc05ld2xpbmUoZmMpKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSAnRmxvdyBlbmQgaW5kaWNhdG9yIHNob3VsZCBiZSBtb3JlIGluZGVudGVkIHRoYW4gcGFyZW50JztcbiAgICAgICAgICAgIG9uRXJyb3IoZW5kLCAnQkFEX0lOREVOVCcsIG1zZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5cbmZ1bmN0aW9uIG1hcEluY2x1ZGVzKGN0eCwgaXRlbXMsIHNlYXJjaCkge1xuICAgIGNvbnN0IHsgdW5pcXVlS2V5cyB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgaWYgKHVuaXF1ZUtleXMgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgaXNFcXVhbCA9IHR5cGVvZiB1bmlxdWVLZXlzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdW5pcXVlS2V5c1xuICAgICAgICA6IChhLCBiKSA9PiBhID09PSBiIHx8IChpc1NjYWxhcihhKSAmJiBpc1NjYWxhcihiKSAmJiBhLnZhbHVlID09PSBiLnZhbHVlKTtcbiAgICByZXR1cm4gaXRlbXMuc29tZShwYWlyID0+IGlzRXF1YWwocGFpci5rZXksIHNlYXJjaCkpO1xufVxuXG5leHBvcnQgeyBtYXBJbmNsdWRlcyB9O1xuIiwiaW1wb3J0IHsgUGFpciB9IGZyb20gJy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uL25vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZyb20gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcbmltcG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9IGZyb20gJy4vdXRpbC1mbG93LWluZGVudC1jaGVjay5qcyc7XG5pbXBvcnQgeyBtYXBJbmNsdWRlcyB9IGZyb20gJy4vdXRpbC1tYXAtaW5jbHVkZXMuanMnO1xuXG5jb25zdCBzdGFydENvbE1zZyA9ICdBbGwgbWFwcGluZyBpdGVtcyBtdXN0IHN0YXJ0IGF0IHRoZSBzYW1lIGNvbHVtbic7XG5mdW5jdGlvbiByZXNvbHZlQmxvY2tNYXAoeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9LCBjdHgsIGJtLCBvbkVycm9yLCB0YWcpIHtcbiAgICBjb25zdCBOb2RlQ2xhc3MgPSB0YWc/Lm5vZGVDbGFzcyA/PyBZQU1MTWFwO1xuICAgIGNvbnN0IG1hcCA9IG5ldyBOb2RlQ2xhc3MoY3R4LnNjaGVtYSk7XG4gICAgaWYgKGN0eC5hdFJvb3QpXG4gICAgICAgIGN0eC5hdFJvb3QgPSBmYWxzZTtcbiAgICBsZXQgb2Zmc2V0ID0gYm0ub2Zmc2V0O1xuICAgIGxldCBjb21tZW50RW5kID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNvbGxJdGVtIG9mIGJtLml0ZW1zKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIGtleSwgc2VwLCB2YWx1ZSB9ID0gY29sbEl0ZW07XG4gICAgICAgIC8vIGtleSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IGtleVByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdleHBsaWNpdC1rZXktaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IGtleSA/PyBzZXA/LlswXSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGJtLmluZGVudCxcbiAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpbXBsaWNpdEtleSA9ICFrZXlQcm9wcy5mb3VuZDtcbiAgICAgICAgaWYgKGltcGxpY2l0S2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS50eXBlID09PSAnYmxvY2stc2VxJylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCTE9DS19BU19JTVBMSUNJVF9LRVknLCAnQSBibG9jayBzZXF1ZW5jZSBtYXkgbm90IGJlIHVzZWQgYXMgYW4gaW1wbGljaXQgbWFwIGtleScpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdpbmRlbnQnIGluIGtleSAmJiBrZXkuaW5kZW50ICE9PSBibS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIHN0YXJ0Q29sTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgha2V5UHJvcHMuYW5jaG9yICYmICFrZXlQcm9wcy50YWcgJiYgIXNlcCkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBrZXlQcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgaWYgKGtleVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcC5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLmNvbW1lbnQgKz0gJ1xcbicgKyBrZXlQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuY29tbWVudCA9IGtleVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtleVByb3BzLm5ld2xpbmVBZnRlclByb3AgfHwgY29udGFpbnNOZXdsaW5lKGtleSkpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleSA/PyBzdGFydFtzdGFydC5sZW5ndGggLSAxXSwgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlQcm9wcy5mb3VuZD8uaW5kZW50ICE9PSBibS5pbmRlbnQpIHtcbiAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIHN0YXJ0Q29sTXNnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBrZXkgdmFsdWVcbiAgICAgICAgY3R4LmF0S2V5ID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qga2V5U3RhcnQgPSBrZXlQcm9wcy5lbmQ7XG4gICAgICAgIGNvbnN0IGtleU5vZGUgPSBrZXlcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCBrZXksIGtleVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwga2V5U3RhcnQsIHN0YXJ0LCBudWxsLCBrZXlQcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhibS5pbmRlbnQsIGtleSwgb25FcnJvcik7XG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgICAgICBpZiAobWFwSW5jbHVkZXMoY3R4LCBtYXAuaXRlbXMsIGtleU5vZGUpKVxuICAgICAgICAgICAgb25FcnJvcihrZXlTdGFydCwgJ0RVUExJQ0FURV9LRVknLCAnTWFwIGtleXMgbXVzdCBiZSB1bmlxdWUnKTtcbiAgICAgICAgLy8gdmFsdWUgcHJvcGVydGllc1xuICAgICAgICBjb25zdCB2YWx1ZVByb3BzID0gcmVzb2x2ZVByb3BzKHNlcCA/PyBbXSwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnbWFwLXZhbHVlLWluZCcsXG4gICAgICAgICAgICBuZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgIG9mZnNldDoga2V5Tm9kZS5yYW5nZVsyXSxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGJtLmluZGVudCxcbiAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiAha2V5IHx8IGtleS50eXBlID09PSAnYmxvY2stc2NhbGFyJ1xuICAgICAgICB9KTtcbiAgICAgICAgb2Zmc2V0ID0gdmFsdWVQcm9wcy5lbmQ7XG4gICAgICAgIGlmICh2YWx1ZVByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICBpZiAoaW1wbGljaXRLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWU/LnR5cGUgPT09ICdibG9jay1tYXAnICYmICF2YWx1ZVByb3BzLmhhc05ld2xpbmUpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkxPQ0tfQVNfSU1QTElDSVRfS0VZJywgJ05lc3RlZCBtYXBwaW5ncyBhcmUgbm90IGFsbG93ZWQgaW4gY29tcGFjdCBtYXBwaW5ncycpO1xuICAgICAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5zdHJpY3QgJiZcbiAgICAgICAgICAgICAgICAgICAga2V5UHJvcHMuc3RhcnQgPCB2YWx1ZVByb3BzLmZvdW5kLm9mZnNldCAtIDEwMjQpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ0tFWV9PVkVSXzEwMjRfQ0hBUlMnLCAnVGhlIDogaW5kaWNhdG9yIG11c3QgYmUgYXQgbW9zdCAxMDI0IGNoYXJzIGFmdGVyIHRoZSBzdGFydCBvZiBhbiBpbXBsaWNpdCBibG9jayBtYXBwaW5nIGtleScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmFsdWUgdmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCB2YWx1ZVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIG9mZnNldCwgc2VwLCBudWxsLCB2YWx1ZVByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgICAgICBmbG93SW5kZW50Q2hlY2soYm0uaW5kZW50LCB2YWx1ZSwgb25FcnJvcik7XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUucmFuZ2VbMl07XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIoa2V5Tm9kZSwgdmFsdWVOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3JjVG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8ga2V5IHdpdGggbm8gdmFsdWVcbiAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleU5vZGUucmFuZ2UsICdNSVNTSU5HX0NIQVInLCAnSW1wbGljaXQgbWFwIGtleXMgbmVlZCB0byBiZSBmb2xsb3dlZCBieSBtYXAgdmFsdWVzJyk7XG4gICAgICAgICAgICBpZiAodmFsdWVQcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleU5vZGUuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ICs9ICdcXG4nICsgdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ID0gdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFpciA9IG5ldyBQYWlyKGtleU5vZGUpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgICAgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbW1lbnRFbmQgJiYgY29tbWVudEVuZCA8IG9mZnNldClcbiAgICAgICAgb25FcnJvcihjb21tZW50RW5kLCAnSU1QT1NTSUJMRScsICdNYXAgY29tbWVudCB3aXRoIHRyYWlsaW5nIGNvbnRlbnQnKTtcbiAgICBtYXAucmFuZ2UgPSBbYm0ub2Zmc2V0LCBvZmZzZXQsIGNvbW1lbnRFbmQgPz8gb2Zmc2V0XTtcbiAgICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgeyByZXNvbHZlQmxvY2tNYXAgfTtcbiIsImZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBvZmZzZXQsIHJlcVNwYWNlLCBvbkVycm9yKSB7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBpZiAoZW5kKSB7XG4gICAgICAgIGxldCBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICBsZXQgc2VwID0gJyc7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB7IHNvdXJjZSwgdHlwZSB9ID0gdG9rZW47XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcVNwYWNlICYmICFoYXNTcGFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCAnQ29tbWVudHMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYiA9IHNvdXJjZS5zdWJzdHJpbmcoMSkgfHwgJyAnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY2I7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gc2VwICsgY2I7XG4gICAgICAgICAgICAgICAgICAgIHNlcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VwICs9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dHlwZX0gYXQgbm9kZSBlbmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGNvbW1lbnQsIG9mZnNldCB9O1xufVxuXG5leHBvcnQgeyByZXNvbHZlRW5kIH07XG4iLCJpbXBvcnQgeyBpc1BhaXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnO1xuaW1wb3J0IHsgbWFwSW5jbHVkZXMgfSBmcm9tICcuL3V0aWwtbWFwLWluY2x1ZGVzLmpzJztcblxuY29uc3QgYmxvY2tNc2cgPSAnQmxvY2sgY29sbGVjdGlvbnMgYXJlIG5vdCBhbGxvd2VkIHdpdGhpbiBmbG93IGNvbGxlY3Rpb25zJztcbmNvbnN0IGlzQmxvY2sgPSAodG9rZW4pID0+IHRva2VuICYmICh0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJyB8fCB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJyk7XG5mdW5jdGlvbiByZXNvbHZlRmxvd0NvbGxlY3Rpb24oeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9LCBjdHgsIGZjLCBvbkVycm9yLCB0YWcpIHtcbiAgICBjb25zdCBpc01hcCA9IGZjLnN0YXJ0LnNvdXJjZSA9PT0gJ3snO1xuICAgIGNvbnN0IGZjTmFtZSA9IGlzTWFwID8gJ2Zsb3cgbWFwJyA6ICdmbG93IHNlcXVlbmNlJztcbiAgICBjb25zdCBOb2RlQ2xhc3MgPSAodGFnPy5ub2RlQ2xhc3MgPz8gKGlzTWFwID8gWUFNTE1hcCA6IFlBTUxTZXEpKTtcbiAgICBjb25zdCBjb2xsID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBjb2xsLmZsb3cgPSB0cnVlO1xuICAgIGNvbnN0IGF0Um9vdCA9IGN0eC5hdFJvb3Q7XG4gICAgaWYgKGF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGlmIChjdHguYXRLZXkpXG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBmYy5vZmZzZXQgKyBmYy5zdGFydC5zb3VyY2UubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmMuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgY29sbEl0ZW0gPSBmYy5pdGVtc1tpXTtcbiAgICAgICAgY29uc3QgeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0gPSBjb2xsSXRlbTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgICAgIGZsb3c6IGZjTmFtZSxcbiAgICAgICAgICAgIGluZGljYXRvcjogJ2V4cGxpY2l0LWtleS1pbmQnLFxuICAgICAgICAgICAgbmV4dDoga2V5ID8/IHNlcD8uWzBdLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogZmMuaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BzLmFuY2hvciAmJiAhcHJvcHMudGFnICYmICFzZXAgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgJiYgcHJvcHMuY29tbWEpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuY29tbWEsICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgLCBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpIDwgZmMuaXRlbXMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5zdGFydCwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCBlbXB0eSBpdGVtIGluICR7ZmNOYW1lfWApO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgKz0gJ1xcbicgKyBwcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgPSBwcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTWFwICYmIGN0eC5vcHRpb25zLnN0cmljdCAmJiBjb250YWluc05ld2xpbmUoa2V5KSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleSwgLy8gY2hlY2tlZCBieSBjb250YWluc05ld2xpbmUoKVxuICAgICAgICAgICAgICAgICdNVUxUSUxJTkVfSU1QTElDSVRfS0VZJywgJ0ltcGxpY2l0IGtleXMgb2YgZmxvdyBzZXF1ZW5jZSBwYWlycyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1hKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuY29tbWEsICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgLCBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghcHJvcHMuY29tbWEpXG4gICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5zdGFydCwgJ01JU1NJTkdfQ0hBUicsIGBNaXNzaW5nICwgYmV0d2VlbiAke2ZjTmFtZX0gaXRlbXNgKTtcbiAgICAgICAgICAgIGlmIChwcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZXZJdGVtQ29tbWVudCA9ICcnO1xuICAgICAgICAgICAgICAgIGxvb3A6IGZvciAoY29uc3Qgc3Qgb2Ygc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2SXRlbUNvbW1lbnQgPSBzdC5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZXZJdGVtQ29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IGNvbGwuaXRlbXNbY29sbC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUGFpcihwcmV2KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBwcmV2LnZhbHVlID8/IHByZXYua2V5O1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldi5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5jb21tZW50ICs9ICdcXG4nICsgcHJldkl0ZW1Db21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNvbW1lbnQgPSBwcmV2SXRlbUNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmNvbW1lbnQgPSBwcm9wcy5jb21tZW50LnN1YnN0cmluZyhwcmV2SXRlbUNvbW1lbnQubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNNYXAgJiYgIXNlcCAmJiAhcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIC8vIGl0ZW0gaXMgYSB2YWx1ZSBpbiBhIHNlcVxuICAgICAgICAgICAgLy8g4oaSIGtleSAmIHNlcCBhcmUgZW1wdHksIHN0YXJ0IGRvZXMgbm90IGluY2x1ZGUgPyBvciA6XG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgcHJvcHMuZW5kLCBzZXAsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGNvbGwuaXRlbXMucHVzaCh2YWx1ZU5vZGUpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlLnJhbmdlWzJdO1xuICAgICAgICAgICAgaWYgKGlzQmxvY2sodmFsdWUpKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVOb2RlLnJhbmdlLCAnQkxPQ0tfSU5fRkxPVycsIGJsb2NrTXNnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZW0gaXMgYSBrZXkrdmFsdWUgcGFpclxuICAgICAgICAgICAgLy8ga2V5IHZhbHVlXG4gICAgICAgICAgICBjdHguYXRLZXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3Qga2V5U3RhcnQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICBjb25zdCBrZXlOb2RlID0ga2V5XG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIGtleSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwga2V5U3RhcnQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoaXNCbG9jayhrZXkpKVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ0JMT0NLX0lOX0ZMT1cnLCBibG9ja01zZyk7XG4gICAgICAgICAgICBjdHguYXRLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHZhbHVlIHByb3BlcnRpZXNcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlUHJvcHMgPSByZXNvbHZlUHJvcHMoc2VwID8/IFtdLCB7XG4gICAgICAgICAgICAgICAgZmxvdzogZmNOYW1lLFxuICAgICAgICAgICAgICAgIGluZGljYXRvcjogJ21hcC12YWx1ZS1pbmQnLFxuICAgICAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG9mZnNldDoga2V5Tm9kZS5yYW5nZVsyXSxcbiAgICAgICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgICAgIHBhcmVudEluZGVudDogZmMuaW5kZW50LFxuICAgICAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodmFsdWVQcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNNYXAgJiYgIXByb3BzLmZvdW5kICYmIGN0eC5vcHRpb25zLnN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBzZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPT09IHZhbHVlUHJvcHMuZm91bmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihzdCwgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBvZiBmbG93IHNlcXVlbmNlIHBhaXJzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5zdGFydCA8IHZhbHVlUHJvcHMuZm91bmQub2Zmc2V0IC0gMTAyNClcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVQcm9wcy5mb3VuZCwgJ0tFWV9PVkVSXzEwMjRfQ0hBUlMnLCAnVGhlIDogaW5kaWNhdG9yIG11c3QgYmUgYXQgbW9zdCAxMDI0IGNoYXJzIGFmdGVyIHRoZSBzdGFydCBvZiBhbiBpbXBsaWNpdCBmbG93IHNlcXVlbmNlIGtleScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdzb3VyY2UnIGluIHZhbHVlICYmIHZhbHVlLnNvdXJjZSAmJiB2YWx1ZS5zb3VyY2VbMF0gPT09ICc6JylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZSwgJ01JU1NJTkdfQ0hBUicsIGBNaXNzaW5nIHNwYWNlIGFmdGVyIDogaW4gJHtmY05hbWV9YCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlUHJvcHMuc3RhcnQsICdNSVNTSU5HX0NIQVInLCBgTWlzc2luZyAsIG9yIDogYmV0d2VlbiAke2ZjTmFtZX0gaXRlbXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZhbHVlIHZhbHVlXG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgdmFsdWVQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IHZhbHVlUHJvcHMuZm91bmRcbiAgICAgICAgICAgICAgICAgICAgPyBjb21wb3NlRW1wdHlOb2RlKGN0eCwgdmFsdWVQcm9wcy5lbmQsIHNlcCwgbnVsbCwgdmFsdWVQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgaWYgKHZhbHVlTm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0Jsb2NrKHZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZU5vZGUucmFuZ2UsICdCTE9DS19JTl9GTE9XJywgYmxvY2tNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWVQcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleU5vZGUuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ICs9ICdcXG4nICsgdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ID0gdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFpciA9IG5ldyBQYWlyKGtleU5vZGUsIHZhbHVlTm9kZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucylcbiAgICAgICAgICAgICAgICBwYWlyLnNyY1Rva2VuID0gY29sbEl0ZW07XG4gICAgICAgICAgICBpZiAoaXNNYXApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBjb2xsO1xuICAgICAgICAgICAgICAgIGlmIChtYXBJbmNsdWRlcyhjdHgsIG1hcC5pdGVtcywga2V5Tm9kZSkpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5U3RhcnQsICdEVVBMSUNBVEVfS0VZJywgJ01hcCBrZXlzIG11c3QgYmUgdW5pcXVlJyk7XG4gICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgWUFNTE1hcChjdHguc2NoZW1hKTtcbiAgICAgICAgICAgICAgICBtYXAuZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kUmFuZ2UgPSAodmFsdWVOb2RlID8/IGtleU5vZGUpLnJhbmdlO1xuICAgICAgICAgICAgICAgIG1hcC5yYW5nZSA9IFtrZXlOb2RlLnJhbmdlWzBdLCBlbmRSYW5nZVsxXSwgZW5kUmFuZ2VbMl1dO1xuICAgICAgICAgICAgICAgIGNvbGwuaXRlbXMucHVzaChtYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlID8gdmFsdWVOb2RlLnJhbmdlWzJdIDogdmFsdWVQcm9wcy5lbmQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXhwZWN0ZWRFbmQgPSBpc01hcCA/ICd9JyA6ICddJztcbiAgICBjb25zdCBbY2UsIC4uLmVlXSA9IGZjLmVuZDtcbiAgICBsZXQgY2VQb3MgPSBvZmZzZXQ7XG4gICAgaWYgKGNlICYmIGNlLnNvdXJjZSA9PT0gZXhwZWN0ZWRFbmQpXG4gICAgICAgIGNlUG9zID0gY2Uub2Zmc2V0ICsgY2Uuc291cmNlLmxlbmd0aDtcbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZjTmFtZVswXS50b1VwcGVyQ2FzZSgpICsgZmNOYW1lLnN1YnN0cmluZygxKTtcbiAgICAgICAgY29uc3QgbXNnID0gYXRSb290XG4gICAgICAgICAgICA/IGAke25hbWV9IG11c3QgZW5kIHdpdGggYSAke2V4cGVjdGVkRW5kfWBcbiAgICAgICAgICAgIDogYCR7bmFtZX0gaW4gYmxvY2sgY29sbGVjdGlvbiBtdXN0IGJlIHN1ZmZpY2llbnRseSBpbmRlbnRlZCBhbmQgZW5kIHdpdGggYSAke2V4cGVjdGVkRW5kfWA7XG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0LCBhdFJvb3QgPyAnTUlTU0lOR19DSEFSJyA6ICdCQURfSU5ERU5UJywgbXNnKTtcbiAgICAgICAgaWYgKGNlICYmIGNlLnNvdXJjZS5sZW5ndGggIT09IDEpXG4gICAgICAgICAgICBlZS51bnNoaWZ0KGNlKTtcbiAgICB9XG4gICAgaWYgKGVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZW5kID0gcmVzb2x2ZUVuZChlZSwgY2VQb3MsIGN0eC5vcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgICAgIGlmIChlbmQuY29tbWVudCkge1xuICAgICAgICAgICAgaWYgKGNvbGwuY29tbWVudClcbiAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgKz0gJ1xcbicgKyBlbmQuY29tbWVudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgPSBlbmQuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb2xsLnJhbmdlID0gW2ZjLm9mZnNldCwgY2VQb3MsIGVuZC5vZmZzZXRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29sbC5yYW5nZSA9IFtmYy5vZmZzZXQsIGNlUG9zLCBjZVBvc107XG4gICAgfVxuICAgIHJldHVybiBjb2xsO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRmxvd0NvbGxlY3Rpb24gfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tNYXAgfSBmcm9tICcuL3Jlc29sdmUtYmxvY2stbWFwLmpzJztcbmltcG9ydCB7IHJlc29sdmVCbG9ja1NlcSB9IGZyb20gJy4vcmVzb2x2ZS1ibG9jay1zZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZsb3dDb2xsZWN0aW9uIH0gZnJvbSAnLi9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lLCB0YWcpIHtcbiAgICBjb25zdCBjb2xsID0gdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCdcbiAgICAgICAgPyByZXNvbHZlQmxvY2tNYXAoQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZylcbiAgICAgICAgOiB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJ1xuICAgICAgICAgICAgPyByZXNvbHZlQmxvY2tTZXEoQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZylcbiAgICAgICAgICAgIDogcmVzb2x2ZUZsb3dDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWcpO1xuICAgIGNvbnN0IENvbGwgPSBjb2xsLmNvbnN0cnVjdG9yO1xuICAgIC8vIElmIHdlIGdvdCBhIHRhZ05hbWUgbWF0Y2hpbmcgdGhlIGNsYXNzLCBvciB0aGUgdGFnIG5hbWUgaXMgJyEnLFxuICAgIC8vIHRoZW4gdXNlIHRoZSB0YWdOYW1lIGZyb20gdGhlIG5vZGUgY2xhc3MgdXNlZCB0byBjcmVhdGUgaXQuXG4gICAgaWYgKHRhZ05hbWUgPT09ICchJyB8fCB0YWdOYW1lID09PSBDb2xsLnRhZ05hbWUpIHtcbiAgICAgICAgY29sbC50YWcgPSBDb2xsLnRhZ05hbWU7XG4gICAgICAgIHJldHVybiBjb2xsO1xuICAgIH1cbiAgICBpZiAodGFnTmFtZSlcbiAgICAgICAgY29sbC50YWcgPSB0YWdOYW1lO1xuICAgIHJldHVybiBjb2xsO1xufVxuZnVuY3Rpb24gY29tcG9zZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIHByb3BzLCBvbkVycm9yKSB7XG4gICAgY29uc3QgdGFnVG9rZW4gPSBwcm9wcy50YWc7XG4gICAgY29uc3QgdGFnTmFtZSA9ICF0YWdUb2tlblxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBjdHguZGlyZWN0aXZlcy50YWdOYW1lKHRhZ1Rva2VuLnNvdXJjZSwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpKTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcScpIHtcbiAgICAgICAgY29uc3QgeyBhbmNob3IsIG5ld2xpbmVBZnRlclByb3A6IG5sIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgbGFzdFByb3AgPSBhbmNob3IgJiYgdGFnVG9rZW5cbiAgICAgICAgICAgID8gYW5jaG9yLm9mZnNldCA+IHRhZ1Rva2VuLm9mZnNldFxuICAgICAgICAgICAgICAgID8gYW5jaG9yXG4gICAgICAgICAgICAgICAgOiB0YWdUb2tlblxuICAgICAgICAgICAgOiAoYW5jaG9yID8/IHRhZ1Rva2VuKTtcbiAgICAgICAgaWYgKGxhc3RQcm9wICYmICghbmwgfHwgbmwub2Zmc2V0IDwgbGFzdFByb3Aub2Zmc2V0KSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdNaXNzaW5nIG5ld2xpbmUgYWZ0ZXIgYmxvY2sgc2VxdWVuY2UgcHJvcHMnO1xuICAgICAgICAgICAgb25FcnJvcihsYXN0UHJvcCwgJ01JU1NJTkdfQ0hBUicsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGV4cFR5cGUgPSB0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJ1xuICAgICAgICA/ICdtYXAnXG4gICAgICAgIDogdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcSdcbiAgICAgICAgICAgID8gJ3NlcSdcbiAgICAgICAgICAgIDogdG9rZW4uc3RhcnQuc291cmNlID09PSAneydcbiAgICAgICAgICAgICAgICA/ICdtYXAnXG4gICAgICAgICAgICAgICAgOiAnc2VxJztcbiAgICAvLyBzaG9ydGN1dDogY2hlY2sgaWYgaXQncyBhIGdlbmVyaWMgWUFNTE1hcCBvciBZQU1MU2VxXG4gICAgLy8gYmVmb3JlIGp1bXBpbmcgaW50byB0aGUgY3VzdG9tIHRhZyBsb2dpYy5cbiAgICBpZiAoIXRhZ1Rva2VuIHx8XG4gICAgICAgICF0YWdOYW1lIHx8XG4gICAgICAgIHRhZ05hbWUgPT09ICchJyB8fFxuICAgICAgICAodGFnTmFtZSA9PT0gWUFNTE1hcC50YWdOYW1lICYmIGV4cFR5cGUgPT09ICdtYXAnKSB8fFxuICAgICAgICAodGFnTmFtZSA9PT0gWUFNTFNlcS50YWdOYW1lICYmIGV4cFR5cGUgPT09ICdzZXEnKSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUpO1xuICAgIH1cbiAgICBsZXQgdGFnID0gY3R4LnNjaGVtYS50YWdzLmZpbmQodCA9PiB0LnRhZyA9PT0gdGFnTmFtZSAmJiB0LmNvbGxlY3Rpb24gPT09IGV4cFR5cGUpO1xuICAgIGlmICghdGFnKSB7XG4gICAgICAgIGNvbnN0IGt0ID0gY3R4LnNjaGVtYS5rbm93blRhZ3NbdGFnTmFtZV07XG4gICAgICAgIGlmIChrdCAmJiBrdC5jb2xsZWN0aW9uID09PSBleHBUeXBlKSB7XG4gICAgICAgICAgICBjdHguc2NoZW1hLnRhZ3MucHVzaChPYmplY3QuYXNzaWduKHt9LCBrdCwgeyBkZWZhdWx0OiBmYWxzZSB9KSk7XG4gICAgICAgICAgICB0YWcgPSBrdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrdCkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodGFnVG9rZW4sICdCQURfQ09MTEVDVElPTl9UWVBFJywgYCR7a3QudGFnfSB1c2VkIGZvciAke2V4cFR5cGV9IGNvbGxlY3Rpb24sIGJ1dCBleHBlY3RzICR7a3QuY29sbGVjdGlvbiA/PyAnc2NhbGFyJ31gLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBgVW5yZXNvbHZlZCB0YWc6ICR7dGFnTmFtZX1gLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29sbCA9IHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lLCB0YWcpO1xuICAgIGNvbnN0IHJlcyA9IHRhZy5yZXNvbHZlPy4oY29sbCwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpLCBjdHgub3B0aW9ucykgPz8gY29sbDtcbiAgICBjb25zdCBub2RlID0gaXNOb2RlKHJlcylcbiAgICAgICAgPyByZXNcbiAgICAgICAgOiBuZXcgU2NhbGFyKHJlcyk7XG4gICAgbm9kZS5yYW5nZSA9IGNvbGwucmFuZ2U7XG4gICAgbm9kZS50YWcgPSB0YWdOYW1lO1xuICAgIGlmICh0YWc/LmZvcm1hdClcbiAgICAgICAgbm9kZS5mb3JtYXQgPSB0YWcuZm9ybWF0O1xuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgeyBjb21wb3NlQ29sbGVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9IGZyb20gJy4vdXRpbC1mbG93LWluZGVudC1jaGVjay5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVCbG9ja1NlcSh7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgYnMsIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9IHRhZz8ubm9kZUNsYXNzID8/IFlBTUxTZXE7XG4gICAgY29uc3Qgc2VxID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGlmIChjdHguYXRLZXkpXG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBicy5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbmQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgeyBzdGFydCwgdmFsdWUgfSBvZiBicy5pdGVtcykge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnc2VxLWl0ZW0taW5kJyxcbiAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYnMuaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5hbmNob3IgfHwgcHJvcHMudGFnIHx8IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLmVuZCwgJ0JBRF9JTkRFTlQnLCAnQWxsIHNlcXVlbmNlIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhlIHNhbWUgY29sdW1uJyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdTZXF1ZW5jZSBpdGVtIHdpdGhvdXQgLSBpbmRpY2F0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5jb21tZW50ID0gcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gdmFsdWVcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhicy5pbmRlbnQsIHZhbHVlLCBvbkVycm9yKTtcbiAgICAgICAgb2Zmc2V0ID0gbm9kZS5yYW5nZVsyXTtcbiAgICAgICAgc2VxLml0ZW1zLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHNlcS5yYW5nZSA9IFticy5vZmZzZXQsIG9mZnNldCwgY29tbWVudEVuZCA/PyBvZmZzZXRdO1xuICAgIHJldHVybiBzZXE7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja1NlcSB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrU2NhbGFyKGN0eCwgc2NhbGFyLCBvbkVycm9yKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBzY2FsYXIub2Zmc2V0O1xuICAgIGNvbnN0IGhlYWRlciA9IHBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoc2NhbGFyLCBjdHgub3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGlmICghaGVhZGVyKVxuICAgICAgICByZXR1cm4geyB2YWx1ZTogJycsIHR5cGU6IG51bGwsIGNvbW1lbnQ6ICcnLCByYW5nZTogW3N0YXJ0LCBzdGFydCwgc3RhcnRdIH07XG4gICAgY29uc3QgdHlwZSA9IGhlYWRlci5tb2RlID09PSAnPicgPyBTY2FsYXIuQkxPQ0tfRk9MREVEIDogU2NhbGFyLkJMT0NLX0xJVEVSQUw7XG4gICAgY29uc3QgbGluZXMgPSBzY2FsYXIuc291cmNlID8gc3BsaXRMaW5lcyhzY2FsYXIuc291cmNlKSA6IFtdO1xuICAgIC8vIGRldGVybWluZSB0aGUgZW5kIG9mIGNvbnRlbnQgJiBzdGFydCBvZiBjaG9tcGluZ1xuICAgIGxldCBjaG9tcFN0YXJ0ID0gbGluZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSBsaW5lcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gbGluZXNbaV1bMV07XG4gICAgICAgIGlmIChjb250ZW50ID09PSAnJyB8fCBjb250ZW50ID09PSAnXFxyJylcbiAgICAgICAgICAgIGNob21wU3RhcnQgPSBpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gc2hvcnRjdXQgZm9yIGVtcHR5IGNvbnRlbnRzXG4gICAgaWYgKGNob21wU3RhcnQgPT09IDApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuY2hvbXAgPT09ICcrJyAmJiBsaW5lcy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/ICdcXG4nLnJlcGVhdChNYXRoLm1heCgxLCBsaW5lcy5sZW5ndGggLSAxKSlcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIGxldCBlbmQgPSBzdGFydCArIGhlYWRlci5sZW5ndGg7XG4gICAgICAgIGlmIChzY2FsYXIuc291cmNlKVxuICAgICAgICAgICAgZW5kICs9IHNjYWxhci5zb3VyY2UubGVuZ3RoO1xuICAgICAgICByZXR1cm4geyB2YWx1ZSwgdHlwZSwgY29tbWVudDogaGVhZGVyLmNvbW1lbnQsIHJhbmdlOiBbc3RhcnQsIGVuZCwgZW5kXSB9O1xuICAgIH1cbiAgICAvLyBmaW5kIHRoZSBpbmRlbnRhdGlvbiBsZXZlbCB0byB0cmltIGZyb20gc3RhcnRcbiAgICBsZXQgdHJpbUluZGVudCA9IHNjYWxhci5pbmRlbnQgKyBoZWFkZXIuaW5kZW50O1xuICAgIGxldCBvZmZzZXQgPSBzY2FsYXIub2Zmc2V0ICsgaGVhZGVyLmxlbmd0aDtcbiAgICBsZXQgY29udGVudFN0YXJ0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNob21wU3RhcnQ7ICsraSkge1xuICAgICAgICBjb25zdCBbaW5kZW50LCBjb250ZW50XSA9IGxpbmVzW2ldO1xuICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgIGlmIChoZWFkZXIuaW5kZW50ID09PSAwICYmIGluZGVudC5sZW5ndGggPiB0cmltSW5kZW50KVxuICAgICAgICAgICAgICAgIHRyaW1JbmRlbnQgPSBpbmRlbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGluZGVudC5sZW5ndGggPCB0cmltSW5kZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdCbG9jayBzY2FsYXJzIHdpdGggbW9yZS1pbmRlbnRlZCBsZWFkaW5nIGVtcHR5IGxpbmVzIG11c3QgdXNlIGFuIGV4cGxpY2l0IGluZGVudGF0aW9uIGluZGljYXRvcic7XG4gICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQgKyBpbmRlbnQubGVuZ3RoLCAnTUlTU0lOR19DSEFSJywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGVhZGVyLmluZGVudCA9PT0gMClcbiAgICAgICAgICAgICAgICB0cmltSW5kZW50ID0gaW5kZW50Lmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnRlbnRTdGFydCA9IGk7XG4gICAgICAgICAgICBpZiAodHJpbUluZGVudCA9PT0gMCAmJiAhY3R4LmF0Um9vdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQmxvY2sgc2NhbGFyIHZhbHVlcyBpbiBjb2xsZWN0aW9ucyBtdXN0IGJlIGluZGVudGVkJztcbiAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9JTkRFTlQnLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9mZnNldCArPSBpbmRlbnQubGVuZ3RoICsgY29udGVudC5sZW5ndGggKyAxO1xuICAgIH1cbiAgICAvLyBpbmNsdWRlIHRyYWlsaW5nIG1vcmUtaW5kZW50ZWQgZW1wdHkgbGluZXMgaW4gY29udGVudFxuICAgIGZvciAobGV0IGkgPSBsaW5lcy5sZW5ndGggLSAxOyBpID49IGNob21wU3RhcnQ7IC0taSkge1xuICAgICAgICBpZiAobGluZXNbaV1bMF0ubGVuZ3RoID4gdHJpbUluZGVudClcbiAgICAgICAgICAgIGNob21wU3RhcnQgPSBpICsgMTtcbiAgICB9XG4gICAgbGV0IHZhbHVlID0gJyc7XG4gICAgbGV0IHNlcCA9ICcnO1xuICAgIGxldCBwcmV2TW9yZUluZGVudGVkID0gZmFsc2U7XG4gICAgLy8gbGVhZGluZyB3aGl0ZXNwYWNlIGlzIGtlcHQgaW50YWN0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50U3RhcnQ7ICsraSlcbiAgICAgICAgdmFsdWUgKz0gbGluZXNbaV1bMF0uc2xpY2UodHJpbUluZGVudCkgKyAnXFxuJztcbiAgICBmb3IgKGxldCBpID0gY29udGVudFN0YXJ0OyBpIDwgY2hvbXBTdGFydDsgKytpKSB7XG4gICAgICAgIGxldCBbaW5kZW50LCBjb250ZW50XSA9IGxpbmVzW2ldO1xuICAgICAgICBvZmZzZXQgKz0gaW5kZW50Lmxlbmd0aCArIGNvbnRlbnQubGVuZ3RoICsgMTtcbiAgICAgICAgY29uc3QgY3JsZiA9IGNvbnRlbnRbY29udGVudC5sZW5ndGggLSAxXSA9PT0gJ1xccic7XG4gICAgICAgIGlmIChjcmxmKVxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMCwgLTEpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgYWxyZWFkeSBjYXVnaHQgaW4gbGV4ZXIgKi9cbiAgICAgICAgaWYgKGNvbnRlbnQgJiYgaW5kZW50Lmxlbmd0aCA8IHRyaW1JbmRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9IGhlYWRlci5pbmRlbnRcbiAgICAgICAgICAgICAgICA/ICdleHBsaWNpdCBpbmRlbnRhdGlvbiBpbmRpY2F0b3InXG4gICAgICAgICAgICAgICAgOiAnZmlyc3QgbGluZSc7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYEJsb2NrIHNjYWxhciBsaW5lcyBtdXN0IG5vdCBiZSBsZXNzIGluZGVudGVkIHRoYW4gdGhlaXIgJHtzcmN9YDtcbiAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0IC0gY29udGVudC5sZW5ndGggLSAoY3JsZiA/IDIgOiAxKSwgJ0JBRF9JTkRFTlQnLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIGluZGVudCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gc2VwICsgaW5kZW50LnNsaWNlKHRyaW1JbmRlbnQpICsgY29udGVudDtcbiAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGVudC5sZW5ndGggPiB0cmltSW5kZW50IHx8IGNvbnRlbnRbMF0gPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAvLyBtb3JlLWluZGVudGVkIGNvbnRlbnQgd2l0aGluIGEgZm9sZGVkIGJsb2NrXG4gICAgICAgICAgICBpZiAoc2VwID09PSAnICcpXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgICAgICBlbHNlIGlmICghcHJldk1vcmVJbmRlbnRlZCAmJiBzZXAgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHNlcCA9ICdcXG5cXG4nO1xuICAgICAgICAgICAgdmFsdWUgKz0gc2VwICsgaW5kZW50LnNsaWNlKHRyaW1JbmRlbnQpICsgY29udGVudDtcbiAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICAgICAgcHJldk1vcmVJbmRlbnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGVudCA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIGVtcHR5IGxpbmVcbiAgICAgICAgICAgIGlmIChzZXAgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgKz0gc2VwICsgY29udGVudDtcbiAgICAgICAgICAgIHNlcCA9ICcgJztcbiAgICAgICAgICAgIHByZXZNb3JlSW5kZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGhlYWRlci5jaG9tcCkge1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjaG9tcFN0YXJ0OyBpIDwgbGluZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbicgKyBsaW5lc1tpXVswXS5zbGljZSh0cmltSW5kZW50KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSAhPT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgIH1cbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGhlYWRlci5sZW5ndGggKyBzY2FsYXIuc291cmNlLmxlbmd0aDtcbiAgICByZXR1cm4geyB2YWx1ZSwgdHlwZSwgY29tbWVudDogaGVhZGVyLmNvbW1lbnQsIHJhbmdlOiBbc3RhcnQsIGVuZCwgZW5kXSB9O1xufVxuZnVuY3Rpb24gcGFyc2VCbG9ja1NjYWxhckhlYWRlcih7IG9mZnNldCwgcHJvcHMgfSwgc3RyaWN0LCBvbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgaWYgKHByb3BzWzBdLnR5cGUgIT09ICdibG9jay1zY2FsYXItaGVhZGVyJykge1xuICAgICAgICBvbkVycm9yKHByb3BzWzBdLCAnSU1QT1NTSUJMRScsICdCbG9jayBzY2FsYXIgaGVhZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyBzb3VyY2UgfSA9IHByb3BzWzBdO1xuICAgIGNvbnN0IG1vZGUgPSBzb3VyY2VbMF07XG4gICAgbGV0IGluZGVudCA9IDA7XG4gICAgbGV0IGNob21wID0gJyc7XG4gICAgbGV0IGVycm9yID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgY2ggPSBzb3VyY2VbaV07XG4gICAgICAgIGlmICghY2hvbXAgJiYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykpXG4gICAgICAgICAgICBjaG9tcCA9IGNoO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBOdW1iZXIoY2gpO1xuICAgICAgICAgICAgaWYgKCFpbmRlbnQgJiYgbilcbiAgICAgICAgICAgICAgICBpbmRlbnQgPSBuO1xuICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IgPT09IC0xKVxuICAgICAgICAgICAgICAgIGVycm9yID0gb2Zmc2V0ICsgaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyb3IgIT09IC0xKVxuICAgICAgICBvbkVycm9yKGVycm9yLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBCbG9jayBzY2FsYXIgaGVhZGVyIGluY2x1ZGVzIGV4dHJhIGNoYXJhY3RlcnM6ICR7c291cmNlfWApO1xuICAgIGxldCBoYXNTcGFjZSA9IGZhbHNlO1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAgbGV0IGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwcm9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHByb3BzW2ldO1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRva2VuLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBpZiAoc3RyaWN0ICYmICFoYXNTcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0NvbW1lbnRzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gb3RoZXIgdG9rZW5zIGJ5IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMnO1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTUlTU0lOR19DSEFSJywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0b2tlbi5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSB0b2tlbi5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgdG9rZW4ubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRva2VuLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgVW5leHBlY3RlZCB0b2tlbiBpbiBibG9jayBzY2FsYXIgaGVhZGVyOiAke3Rva2VuLnR5cGV9YDtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRzID0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgICAgIGlmICh0cyAmJiB0eXBlb2YgdHMgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gdHMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IG1vZGUsIGluZGVudCwgY2hvbXAsIGNvbW1lbnQsIGxlbmd0aCB9O1xufVxuLyoqIEByZXR1cm5zIEFycmF5IG9mIGxpbmVzIHNwbGl0IHVwIGFzIGBbaW5kZW50LCBjb250ZW50XWAgKi9cbmZ1bmN0aW9uIHNwbGl0TGluZXMoc291cmNlKSB7XG4gICAgY29uc3Qgc3BsaXQgPSBzb3VyY2Uuc3BsaXQoL1xcbiggKikvKTtcbiAgICBjb25zdCBmaXJzdCA9IHNwbGl0WzBdO1xuICAgIGNvbnN0IG0gPSBmaXJzdC5tYXRjaCgvXiggKikvKTtcbiAgICBjb25zdCBsaW5lMCA9IG0/LlsxXVxuICAgICAgICA/IFttWzFdLCBmaXJzdC5zbGljZShtWzFdLmxlbmd0aCldXG4gICAgICAgIDogWycnLCBmaXJzdF07XG4gICAgY29uc3QgbGluZXMgPSBbbGluZTBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3BsaXQubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIGxpbmVzLnB1c2goW3NwbGl0W2ldLCBzcGxpdFtpICsgMV1dKTtcbiAgICByZXR1cm4gbGluZXM7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja1NjYWxhciB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUZsb3dTY2FsYXIoc2NhbGFyLCBzdHJpY3QsIG9uRXJyb3IpIHtcbiAgICBjb25zdCB7IG9mZnNldCwgdHlwZSwgc291cmNlLCBlbmQgfSA9IHNjYWxhcjtcbiAgICBsZXQgX3R5cGU7XG4gICAgbGV0IHZhbHVlO1xuICAgIGNvbnN0IF9vbkVycm9yID0gKHJlbCwgY29kZSwgbXNnKSA9PiBvbkVycm9yKG9mZnNldCArIHJlbCwgY29kZSwgbXNnKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIF90eXBlID0gU2NhbGFyLlBMQUlOO1xuICAgICAgICAgICAgdmFsdWUgPSBwbGFpblZhbHVlKHNvdXJjZSwgX29uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIF90eXBlID0gU2NhbGFyLlFVT1RFX1NJTkdMRTtcbiAgICAgICAgICAgIHZhbHVlID0gc2luZ2xlUXVvdGVkVmFsdWUoc291cmNlLCBfb25FcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgX3R5cGUgPSBTY2FsYXIuUVVPVEVfRE9VQkxFO1xuICAgICAgICAgICAgdmFsdWUgPSBkb3VibGVRdW90ZWRWYWx1ZShzb3VyY2UsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgb25FcnJvcihzY2FsYXIsICdVTkVYUEVDVEVEX1RPS0VOJywgYEV4cGVjdGVkIGEgZmxvdyBzY2FsYXIgdmFsdWUsIGJ1dCBmb3VuZDogJHt0eXBlfWApO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjb21tZW50OiAnJyxcbiAgICAgICAgICAgICAgICByYW5nZTogW29mZnNldCwgb2Zmc2V0ICsgc291cmNlLmxlbmd0aCwgb2Zmc2V0ICsgc291cmNlLmxlbmd0aF1cbiAgICAgICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlRW5kID0gb2Zmc2V0ICsgc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCByZSA9IHJlc29sdmVFbmQoZW5kLCB2YWx1ZUVuZCwgc3RyaWN0LCBvbkVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZTogX3R5cGUsXG4gICAgICAgIGNvbW1lbnQ6IHJlLmNvbW1lbnQsXG4gICAgICAgIHJhbmdlOiBbb2Zmc2V0LCB2YWx1ZUVuZCwgcmUub2Zmc2V0XVxuICAgIH07XG59XG5mdW5jdGlvbiBwbGFpblZhbHVlKHNvdXJjZSwgb25FcnJvcikge1xuICAgIGxldCBiYWRDaGFyID0gJyc7XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIGJhZENoYXIgPSAnYSB0YWIgY2hhcmFjdGVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgIGJhZENoYXIgPSAnZmxvdyBpbmRpY2F0b3IgY2hhcmFjdGVyICwnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgYmFkQ2hhciA9ICdkaXJlY3RpdmUgaW5kaWNhdG9yIGNoYXJhY3RlciAlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6IHtcbiAgICAgICAgICAgIGJhZENoYXIgPSBgYmxvY2sgc2NhbGFyIGluZGljYXRvciAke3NvdXJjZVswXX1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgIGNhc2UgJ2AnOiB7XG4gICAgICAgICAgICBiYWRDaGFyID0gYHJlc2VydmVkIGNoYXJhY3RlciAke3NvdXJjZVswXX1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJhZENoYXIpXG4gICAgICAgIG9uRXJyb3IoMCwgJ0JBRF9TQ0FMQVJfU1RBUlQnLCBgUGxhaW4gdmFsdWUgY2Fubm90IHN0YXJ0IHdpdGggJHtiYWRDaGFyfWApO1xuICAgIHJldHVybiBmb2xkTGluZXMoc291cmNlKTtcbn1cbmZ1bmN0aW9uIHNpbmdsZVF1b3RlZFZhbHVlKHNvdXJjZSwgb25FcnJvcikge1xuICAgIGlmIChzb3VyY2Vbc291cmNlLmxlbmd0aCAtIDFdICE9PSBcIidcIiB8fCBzb3VyY2UubGVuZ3RoID09PSAxKVxuICAgICAgICBvbkVycm9yKHNvdXJjZS5sZW5ndGgsICdNSVNTSU5HX0NIQVInLCBcIk1pc3NpbmcgY2xvc2luZyAncXVvdGVcIik7XG4gICAgcmV0dXJuIGZvbGRMaW5lcyhzb3VyY2Uuc2xpY2UoMSwgLTEpKS5yZXBsYWNlKC8nJy9nLCBcIidcIik7XG59XG5mdW5jdGlvbiBmb2xkTGluZXMoc291cmNlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgaGVyZSBhbmQgaW4gdGhlIGByZWAgUmVnRXhwIGlzIHRvXG4gICAgICogcHJldmVudCBjYXVzaW5nIGEgcG9seW5vbWlhbCBzZWFyY2ggdGltZSBpbiBjZXJ0YWluIGNhc2VzLlxuICAgICAqXG4gICAgICogVGhlIHRyeS1jYXRjaCBpcyBmb3IgU2FmYXJpLCB3aGljaCBkb2Vzbid0IHN1cHBvcnQgdGhpcyB5ZXQ6XG4gICAgICogaHR0cHM6Ly9jYW5pdXNlLmNvbS9qcy1yZWdleHAtbG9va2JlaGluZFxuICAgICAqL1xuICAgIGxldCBmaXJzdCwgbGluZTtcbiAgICB0cnkge1xuICAgICAgICBmaXJzdCA9IG5ldyBSZWdFeHAoJyguKj8pKD88IVsgXFx0XSlbIFxcdF0qXFxyP1xcbicsICdzeScpO1xuICAgICAgICBsaW5lID0gbmV3IFJlZ0V4cCgnWyBcXHRdKiguKj8pKD86KD88IVsgXFx0XSlbIFxcdF0qKT9cXHI/XFxuJywgJ3N5Jyk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgZmlyc3QgPSAvKC4qPylbIFxcdF0qXFxyP1xcbi9zeTtcbiAgICAgICAgbGluZSA9IC9bIFxcdF0qKC4qPylbIFxcdF0qXFxyP1xcbi9zeTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZmlyc3QuZXhlYyhzb3VyY2UpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgbGV0IHJlcyA9IG1hdGNoWzFdO1xuICAgIGxldCBzZXAgPSAnICc7XG4gICAgbGV0IHBvcyA9IGZpcnN0Lmxhc3RJbmRleDtcbiAgICBsaW5lLmxhc3RJbmRleCA9IHBvcztcbiAgICB3aGlsZSAoKG1hdGNoID0gbGluZS5leGVjKHNvdXJjZSkpKSB7XG4gICAgICAgIGlmIChtYXRjaFsxXSA9PT0gJycpIHtcbiAgICAgICAgICAgIGlmIChzZXAgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzZXA7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMgKz0gc2VwICsgbWF0Y2hbMV07XG4gICAgICAgICAgICBzZXAgPSAnICc7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gbGluZS5sYXN0SW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSAvWyBcXHRdKiguKikvc3k7XG4gICAgbGFzdC5sYXN0SW5kZXggPSBwb3M7XG4gICAgbWF0Y2ggPSBsYXN0LmV4ZWMoc291cmNlKTtcbiAgICByZXR1cm4gcmVzICsgc2VwICsgKG1hdGNoPy5bMV0gPz8gJycpO1xufVxuZnVuY3Rpb24gZG91YmxlUXVvdGVkVmFsdWUoc291cmNlLCBvbkVycm9yKSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc291cmNlLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBjb25zdCBjaCA9IHNvdXJjZVtpXTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiBzb3VyY2VbaSArIDFdID09PSAnXFxuJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZvbGQsIG9mZnNldCB9ID0gZm9sZE5ld2xpbmUoc291cmNlLCBpKTtcbiAgICAgICAgICAgIHJlcyArPSBmb2xkO1xuICAgICAgICAgICAgaSA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHNvdXJjZVsrK2ldO1xuICAgICAgICAgICAgY29uc3QgY2MgPSBlc2NhcGVDb2Rlc1tuZXh0XTtcbiAgICAgICAgICAgIGlmIChjYylcbiAgICAgICAgICAgICAgICByZXMgKz0gY2M7XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0ID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgZXNjYXBlZCBuZXdsaW5lcywgYnV0IHN0aWxsIHRyaW0gdGhlIGZvbGxvd2luZyBsaW5lXG4gICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVtpICsgMV07XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQgPT09ICcgJyB8fCBuZXh0ID09PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICdcXHInICYmIHNvdXJjZVtpICsgMV0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBlc2NhcGVkIENSTEYgbmV3bGluZXMsIGJ1dCBzdGlsbCB0cmltIHRoZSBmb2xsb3dpbmcgbGluZVxuICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbKytpICsgMV07XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQgPT09ICcgJyB8fCBuZXh0ID09PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICd4JyB8fCBuZXh0ID09PSAndScgfHwgbmV4dCA9PT0gJ1UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0geyB4OiAyLCB1OiA0LCBVOiA4IH1bbmV4dF07XG4gICAgICAgICAgICAgICAgcmVzICs9IHBhcnNlQ2hhckNvZGUoc291cmNlLCBpICsgMSwgbGVuZ3RoLCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICBpICs9IGxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdyA9IHNvdXJjZS5zdWJzdHIoaSAtIDEsIDIpO1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoaSAtIDEsICdCQURfRFFfRVNDQVBFJywgYEludmFsaWQgZXNjYXBlIHNlcXVlbmNlICR7cmF3fWApO1xuICAgICAgICAgICAgICAgIHJlcyArPSByYXc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIC8vIHRyaW0gdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgY29uc3Qgd3NTdGFydCA9IGk7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHNvdXJjZVtpICsgMV07XG4gICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbKytpICsgMV07XG4gICAgICAgICAgICBpZiAobmV4dCAhPT0gJ1xcbicgJiYgIShuZXh0ID09PSAnXFxyJyAmJiBzb3VyY2VbaSArIDJdID09PSAnXFxuJykpXG4gICAgICAgICAgICAgICAgcmVzICs9IGkgPiB3c1N0YXJ0ID8gc291cmNlLnNsaWNlKHdzU3RhcnQsIGkgKyAxKSA6IGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzICs9IGNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzb3VyY2Vbc291cmNlLmxlbmd0aCAtIDFdICE9PSAnXCInIHx8IHNvdXJjZS5sZW5ndGggPT09IDEpXG4gICAgICAgIG9uRXJyb3Ioc291cmNlLmxlbmd0aCwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGNsb3NpbmcgXCJxdW90ZScpO1xuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIEZvbGQgYSBzaW5nbGUgbmV3bGluZSBpbnRvIGEgc3BhY2UsIG11bHRpcGxlIG5ld2xpbmVzIHRvIE4gLSAxIG5ld2xpbmVzLlxuICogUHJlc3VtZXMgYHNvdXJjZVtvZmZzZXRdID09PSAnXFxuJ2BcbiAqL1xuZnVuY3Rpb24gZm9sZE5ld2xpbmUoc291cmNlLCBvZmZzZXQpIHtcbiAgICBsZXQgZm9sZCA9ICcnO1xuICAgIGxldCBjaCA9IHNvdXJjZVtvZmZzZXQgKyAxXTtcbiAgICB3aGlsZSAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcgfHwgY2ggPT09ICdcXG4nIHx8IGNoID09PSAnXFxyJykge1xuICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIHNvdXJjZVtvZmZzZXQgKyAyXSAhPT0gJ1xcbicpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKGNoID09PSAnXFxuJylcbiAgICAgICAgICAgIGZvbGQgKz0gJ1xcbic7XG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICBjaCA9IHNvdXJjZVtvZmZzZXQgKyAxXTtcbiAgICB9XG4gICAgaWYgKCFmb2xkKVxuICAgICAgICBmb2xkID0gJyAnO1xuICAgIHJldHVybiB7IGZvbGQsIG9mZnNldCB9O1xufVxuY29uc3QgZXNjYXBlQ29kZXMgPSB7XG4gICAgJzAnOiAnXFwwJywgLy8gbnVsbCBjaGFyYWN0ZXJcbiAgICBhOiAnXFx4MDcnLCAvLyBiZWxsIGNoYXJhY3RlclxuICAgIGI6ICdcXGInLCAvLyBiYWNrc3BhY2VcbiAgICBlOiAnXFx4MWInLCAvLyBlc2NhcGUgY2hhcmFjdGVyXG4gICAgZjogJ1xcZicsIC8vIGZvcm0gZmVlZFxuICAgIG46ICdcXG4nLCAvLyBsaW5lIGZlZWRcbiAgICByOiAnXFxyJywgLy8gY2FycmlhZ2UgcmV0dXJuXG4gICAgdDogJ1xcdCcsIC8vIGhvcml6b250YWwgdGFiXG4gICAgdjogJ1xcdicsIC8vIHZlcnRpY2FsIHRhYlxuICAgIE46ICdcXHUwMDg1JywgLy8gVW5pY29kZSBuZXh0IGxpbmVcbiAgICBfOiAnXFx1MDBhMCcsIC8vIFVuaWNvZGUgbm9uLWJyZWFraW5nIHNwYWNlXG4gICAgTDogJ1xcdTIwMjgnLCAvLyBVbmljb2RlIGxpbmUgc2VwYXJhdG9yXG4gICAgUDogJ1xcdTIwMjknLCAvLyBVbmljb2RlIHBhcmFncmFwaCBzZXBhcmF0b3JcbiAgICAnICc6ICcgJyxcbiAgICAnXCInOiAnXCInLFxuICAgICcvJzogJy8nLFxuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgICdcXHQnOiAnXFx0J1xufTtcbmZ1bmN0aW9uIHBhcnNlQ2hhckNvZGUoc291cmNlLCBvZmZzZXQsIGxlbmd0aCwgb25FcnJvcikge1xuICAgIGNvbnN0IGNjID0gc291cmNlLnN1YnN0cihvZmZzZXQsIGxlbmd0aCk7XG4gICAgY29uc3Qgb2sgPSBjYy5sZW5ndGggPT09IGxlbmd0aCAmJiAvXlswLTlhLWZBLUZdKyQvLnRlc3QoY2MpO1xuICAgIGNvbnN0IGNvZGUgPSBvayA/IHBhcnNlSW50KGNjLCAxNikgOiBOYU47XG4gICAgaWYgKGlzTmFOKGNvZGUpKSB7XG4gICAgICAgIGNvbnN0IHJhdyA9IHNvdXJjZS5zdWJzdHIob2Zmc2V0IC0gMiwgbGVuZ3RoICsgMik7XG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0IC0gMiwgJ0JBRF9EUV9FU0NBUEUnLCBgSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgJHtyYXd9YCk7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlKTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUZsb3dTY2FsYXIgfTtcbiIsImltcG9ydCB7IGlzU2NhbGFyLCBTQ0FMQVIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUJsb2NrU2NhbGFyIH0gZnJvbSAnLi9yZXNvbHZlLWJsb2NrLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmxvd1NjYWxhciB9IGZyb20gJy4vcmVzb2x2ZS1mbG93LXNjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnVG9rZW4sIG9uRXJyb3IpIHtcbiAgICBjb25zdCB7IHZhbHVlLCB0eXBlLCBjb21tZW50LCByYW5nZSB9ID0gdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcidcbiAgICAgICAgPyByZXNvbHZlQmxvY2tTY2FsYXIoY3R4LCB0b2tlbiwgb25FcnJvcilcbiAgICAgICAgOiByZXNvbHZlRmxvd1NjYWxhcih0b2tlbiwgY3R4Lm9wdGlvbnMuc3RyaWN0LCBvbkVycm9yKTtcbiAgICBjb25zdCB0YWdOYW1lID0gdGFnVG9rZW5cbiAgICAgICAgPyBjdHguZGlyZWN0aXZlcy50YWdOYW1lKHRhZ1Rva2VuLnNvdXJjZSwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpKVxuICAgICAgICA6IG51bGw7XG4gICAgbGV0IHRhZztcbiAgICBpZiAoY3R4Lm9wdGlvbnMuc3RyaW5nS2V5cyAmJiBjdHguYXRLZXkpIHtcbiAgICAgICAgdGFnID0gY3R4LnNjaGVtYVtTQ0FMQVJdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YWdOYW1lKVxuICAgICAgICB0YWcgPSBmaW5kU2NhbGFyVGFnQnlOYW1lKGN0eC5zY2hlbWEsIHZhbHVlLCB0YWdOYW1lLCB0YWdUb2tlbiwgb25FcnJvcik7XG4gICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicpXG4gICAgICAgIHRhZyA9IGZpbmRTY2FsYXJUYWdCeVRlc3QoY3R4LCB2YWx1ZSwgdG9rZW4sIG9uRXJyb3IpO1xuICAgIGVsc2VcbiAgICAgICAgdGFnID0gY3R4LnNjaGVtYVtTQ0FMQVJdO1xuICAgIGxldCBzY2FsYXI7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gdGFnLnJlc29sdmUodmFsdWUsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuID8/IHRva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSwgY3R4Lm9wdGlvbnMpO1xuICAgICAgICBzY2FsYXIgPSBpc1NjYWxhcihyZXMpID8gcmVzIDogbmV3IFNjYWxhcihyZXMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICAgICAgICBvbkVycm9yKHRhZ1Rva2VuID8/IHRva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKTtcbiAgICAgICAgc2NhbGFyID0gbmV3IFNjYWxhcih2YWx1ZSk7XG4gICAgfVxuICAgIHNjYWxhci5yYW5nZSA9IHJhbmdlO1xuICAgIHNjYWxhci5zb3VyY2UgPSB2YWx1ZTtcbiAgICBpZiAodHlwZSlcbiAgICAgICAgc2NhbGFyLnR5cGUgPSB0eXBlO1xuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBzY2FsYXIudGFnID0gdGFnTmFtZTtcbiAgICBpZiAodGFnLmZvcm1hdClcbiAgICAgICAgc2NhbGFyLmZvcm1hdCA9IHRhZy5mb3JtYXQ7XG4gICAgaWYgKGNvbW1lbnQpXG4gICAgICAgIHNjYWxhci5jb21tZW50ID0gY29tbWVudDtcbiAgICByZXR1cm4gc2NhbGFyO1xufVxuZnVuY3Rpb24gZmluZFNjYWxhclRhZ0J5TmFtZShzY2hlbWEsIHZhbHVlLCB0YWdOYW1lLCB0YWdUb2tlbiwgb25FcnJvcikge1xuICAgIGlmICh0YWdOYW1lID09PSAnIScpXG4gICAgICAgIHJldHVybiBzY2hlbWFbU0NBTEFSXTsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgIGNvbnN0IG1hdGNoV2l0aFRlc3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBzY2hlbWEudGFncykge1xuICAgICAgICBpZiAoIXRhZy5jb2xsZWN0aW9uICYmIHRhZy50YWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgICAgIGlmICh0YWcuZGVmYXVsdCAmJiB0YWcudGVzdClcbiAgICAgICAgICAgICAgICBtYXRjaFdpdGhUZXN0LnB1c2godGFnKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgdGFnIG9mIG1hdGNoV2l0aFRlc3QpXG4gICAgICAgIGlmICh0YWcudGVzdD8udGVzdCh2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgIGNvbnN0IGt0ID0gc2NoZW1hLmtub3duVGFnc1t0YWdOYW1lXTtcbiAgICBpZiAoa3QgJiYgIWt0LmNvbGxlY3Rpb24pIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGtub3duIHRhZyBpcyBhdmFpbGFibGUgZm9yIHN0cmluZ2lmeWluZyxcbiAgICAgICAgLy8gYnV0IGRvZXMgbm90IGdldCB1c2VkIGJ5IGRlZmF1bHQuXG4gICAgICAgIHNjaGVtYS50YWdzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwga3QsIHsgZGVmYXVsdDogZmFsc2UsIHRlc3Q6IHVuZGVmaW5lZCB9KSk7XG4gICAgICAgIHJldHVybiBrdDtcbiAgICB9XG4gICAgb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIGBVbnJlc29sdmVkIHRhZzogJHt0YWdOYW1lfWAsIHRhZ05hbWUgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInKTtcbiAgICByZXR1cm4gc2NoZW1hW1NDQUxBUl07XG59XG5mdW5jdGlvbiBmaW5kU2NhbGFyVGFnQnlUZXN0KHsgYXRLZXksIGRpcmVjdGl2ZXMsIHNjaGVtYSB9LCB2YWx1ZSwgdG9rZW4sIG9uRXJyb3IpIHtcbiAgICBjb25zdCB0YWcgPSBzY2hlbWEudGFncy5maW5kKHRhZyA9PiAodGFnLmRlZmF1bHQgPT09IHRydWUgfHwgKGF0S2V5ICYmIHRhZy5kZWZhdWx0ID09PSAna2V5JykpICYmXG4gICAgICAgIHRhZy50ZXN0Py50ZXN0KHZhbHVlKSkgfHwgc2NoZW1hW1NDQUxBUl07XG4gICAgaWYgKHNjaGVtYS5jb21wYXQpIHtcbiAgICAgICAgY29uc3QgY29tcGF0ID0gc2NoZW1hLmNvbXBhdC5maW5kKHRhZyA9PiB0YWcuZGVmYXVsdCAmJiB0YWcudGVzdD8udGVzdCh2YWx1ZSkpID8/XG4gICAgICAgICAgICBzY2hlbWFbU0NBTEFSXTtcbiAgICAgICAgaWYgKHRhZy50YWcgIT09IGNvbXBhdC50YWcpIHtcbiAgICAgICAgICAgIGNvbnN0IHRzID0gZGlyZWN0aXZlcy50YWdTdHJpbmcodGFnLnRhZyk7XG4gICAgICAgICAgICBjb25zdCBjcyA9IGRpcmVjdGl2ZXMudGFnU3RyaW5nKGNvbXBhdC50YWcpO1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFZhbHVlIG1heSBiZSBwYXJzZWQgYXMgZWl0aGVyICR7dHN9IG9yICR7Y3N9YDtcbiAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2csIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VTY2FsYXIgfTtcbiIsImZ1bmN0aW9uIGVtcHR5U2NhbGFyUG9zaXRpb24ob2Zmc2V0LCBiZWZvcmUsIHBvcykge1xuICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgcG9zID8/IChwb3MgPSBiZWZvcmUubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvcyAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBsZXQgc3QgPSBiZWZvcmVbaV07XG4gICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCAtPSBzdC5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5LCBhbiBlbXB0eSBzY2FsYXIgaXMgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGxhc3Qgbm9uLWVtcHR5XG4gICAgICAgICAgICAvLyBub2RlLCBidXQgaXQncyBtb3JlIHVzZWZ1bCB0byBwbGFjZSBpdCBhZnRlciBhbnkgd2hpdGVzcGFjZS5cbiAgICAgICAgICAgIHN0ID0gYmVmb3JlWysraV07XG4gICAgICAgICAgICB3aGlsZSAoc3Q/LnR5cGUgPT09ICdzcGFjZScpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gc3Quc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBzdCA9IGJlZm9yZVsrK2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuZXhwb3J0IHsgZW1wdHlTY2FsYXJQb3NpdGlvbiB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc1NjYWxhciB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGNvbXBvc2VDb2xsZWN0aW9uIH0gZnJvbSAnLi9jb21wb3NlLWNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgY29tcG9zZVNjYWxhciB9IGZyb20gJy4vY29tcG9zZS1zY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuaW1wb3J0IHsgZW1wdHlTY2FsYXJQb3NpdGlvbiB9IGZyb20gJy4vdXRpbC1lbXB0eS1zY2FsYXItcG9zaXRpb24uanMnO1xuXG5jb25zdCBDTiA9IHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfTtcbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKGN0eCwgdG9rZW4sIHByb3BzLCBvbkVycm9yKSB7XG4gICAgY29uc3QgYXRLZXkgPSBjdHguYXRLZXk7XG4gICAgY29uc3QgeyBzcGFjZUJlZm9yZSwgY29tbWVudCwgYW5jaG9yLCB0YWcgfSA9IHByb3BzO1xuICAgIGxldCBub2RlO1xuICAgIGxldCBpc1NyY1Rva2VuID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VBbGlhcyhjdHgsIHRva2VuLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChhbmNob3IgfHwgdGFnKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdBTElBU19QUk9QUycsICdBbiBhbGlhcyBub2RlIG11c3Qgbm90IHNwZWNpZnkgYW55IHByb3BlcnRpZXMnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlU2NhbGFyKGN0eCwgdG9rZW4sIHRhZywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yKVxuICAgICAgICAgICAgICAgIG5vZGUuYW5jaG9yID0gYW5jaG9yLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzpcbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvcilcbiAgICAgICAgICAgICAgICBub2RlLmFuY2hvciA9IGFuY2hvci5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0b2tlbi50eXBlID09PSAnZXJyb3InXG4gICAgICAgICAgICAgICAgPyB0b2tlbi5tZXNzYWdlXG4gICAgICAgICAgICAgICAgOiBgVW5zdXBwb3J0ZWQgdG9rZW4gKHR5cGU6ICR7dG9rZW4udHlwZX0pYDtcbiAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgbWVzc2FnZSk7XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZUVtcHR5Tm9kZShjdHgsIHRva2VuLm9mZnNldCwgdW5kZWZpbmVkLCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpc1NyY1Rva2VuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFuY2hvciAmJiBub2RlLmFuY2hvciA9PT0gJycpXG4gICAgICAgIG9uRXJyb3IoYW5jaG9yLCAnQkFEX0FMSUFTJywgJ0FuY2hvciBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgaWYgKGF0S2V5ICYmXG4gICAgICAgIGN0eC5vcHRpb25zLnN0cmluZ0tleXMgJiZcbiAgICAgICAgKCFpc1NjYWxhcihub2RlKSB8fFxuICAgICAgICAgICAgdHlwZW9mIG5vZGUudmFsdWUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAobm9kZS50YWcgJiYgbm9kZS50YWcgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInKSkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gJ1dpdGggc3RyaW5nS2V5cywgYWxsIGtleXMgbXVzdCBiZSBzdHJpbmdzJztcbiAgICAgICAgb25FcnJvcih0YWcgPz8gdG9rZW4sICdOT05fU1RSSU5HX0tFWScsIG1zZyk7XG4gICAgfVxuICAgIGlmIChzcGFjZUJlZm9yZSlcbiAgICAgICAgbm9kZS5zcGFjZUJlZm9yZSA9IHRydWU7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdzY2FsYXInICYmIHRva2VuLnNvdXJjZSA9PT0gJycpXG4gICAgICAgICAgICBub2RlLmNvbW1lbnQgPSBjb21tZW50O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBub2RlLmNvbW1lbnRCZWZvcmUgPSBjb21tZW50O1xuICAgIH1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFR5cGUgY2hlY2tpbmcgbWlzc2VzIG1lYW5pbmcgb2YgaXNTcmNUb2tlblxuICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zICYmIGlzU3JjVG9rZW4pXG4gICAgICAgIG5vZGUuc3JjVG9rZW4gPSB0b2tlbjtcbiAgICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBvZmZzZXQsIGJlZm9yZSwgcG9zLCB7IHNwYWNlQmVmb3JlLCBjb21tZW50LCBhbmNob3IsIHRhZywgZW5kIH0sIG9uRXJyb3IpIHtcbiAgICBjb25zdCB0b2tlbiA9IHtcbiAgICAgICAgdHlwZTogJ3NjYWxhcicsXG4gICAgICAgIG9mZnNldDogZW1wdHlTY2FsYXJQb3NpdGlvbihvZmZzZXQsIGJlZm9yZSwgcG9zKSxcbiAgICAgICAgaW5kZW50OiAtMSxcbiAgICAgICAgc291cmNlOiAnJ1xuICAgIH07XG4gICAgY29uc3Qgbm9kZSA9IGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnLCBvbkVycm9yKTtcbiAgICBpZiAoYW5jaG9yKSB7XG4gICAgICAgIG5vZGUuYW5jaG9yID0gYW5jaG9yLnNvdXJjZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGlmIChub2RlLmFuY2hvciA9PT0gJycpXG4gICAgICAgICAgICBvbkVycm9yKGFuY2hvciwgJ0JBRF9BTElBUycsICdBbmNob3IgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuICAgIH1cbiAgICBpZiAoc3BhY2VCZWZvcmUpXG4gICAgICAgIG5vZGUuc3BhY2VCZWZvcmUgPSB0cnVlO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIG5vZGUuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIG5vZGUucmFuZ2VbMl0gPSBlbmQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gY29tcG9zZUFsaWFzKHsgb3B0aW9ucyB9LCB7IG9mZnNldCwgc291cmNlLCBlbmQgfSwgb25FcnJvcikge1xuICAgIGNvbnN0IGFsaWFzID0gbmV3IEFsaWFzKHNvdXJjZS5zdWJzdHJpbmcoMSkpO1xuICAgIGlmIChhbGlhcy5zb3VyY2UgPT09ICcnKVxuICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9BTElBUycsICdBbGlhcyBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgaWYgKGFsaWFzLnNvdXJjZS5lbmRzV2l0aCgnOicpKVxuICAgICAgICBvbkVycm9yKG9mZnNldCArIHNvdXJjZS5sZW5ndGggLSAxLCAnQkFEX0FMSUFTJywgJ0FsaWFzIGVuZGluZyBpbiA6IGlzIGFtYmlndW91cycsIHRydWUpO1xuICAgIGNvbnN0IHZhbHVlRW5kID0gb2Zmc2V0ICsgc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCByZSA9IHJlc29sdmVFbmQoZW5kLCB2YWx1ZUVuZCwgb3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGFsaWFzLnJhbmdlID0gW29mZnNldCwgdmFsdWVFbmQsIHJlLm9mZnNldF07XG4gICAgaWYgKHJlLmNvbW1lbnQpXG4gICAgICAgIGFsaWFzLmNvbW1lbnQgPSByZS5jb21tZW50O1xuICAgIHJldHVybiBhbGlhcztcbn1cblxuZXhwb3J0IHsgY29tcG9zZUVtcHR5Tm9kZSwgY29tcG9zZU5vZGUgfTtcbiIsImltcG9ydCB7IERpcmVjdGl2ZXMgfSBmcm9tICcuLi9kb2MvZGlyZWN0aXZlcy5qcyc7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJy4uL2RvYy9Eb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBZQU1MV2FybmluZywgWUFNTFBhcnNlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgaXNDb2xsZWN0aW9uLCBpc1BhaXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBjb21wb3NlRG9jIH0gZnJvbSAnLi9jb21wb3NlLWRvYy5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5cbmZ1bmN0aW9uIGdldEVycm9yUG9zKHNyYykge1xuICAgIGlmICh0eXBlb2Ygc3JjID09PSAnbnVtYmVyJylcbiAgICAgICAgcmV0dXJuIFtzcmMsIHNyYyArIDFdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNyYykpXG4gICAgICAgIHJldHVybiBzcmMubGVuZ3RoID09PSAyID8gc3JjIDogW3NyY1swXSwgc3JjWzFdXTtcbiAgICBjb25zdCB7IG9mZnNldCwgc291cmNlIH0gPSBzcmM7XG4gICAgcmV0dXJuIFtvZmZzZXQsIG9mZnNldCArICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJyA/IHNvdXJjZS5sZW5ndGggOiAxKV07XG59XG5mdW5jdGlvbiBwYXJzZVByZWx1ZGUocHJlbHVkZSkge1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAgbGV0IGF0Q29tbWVudCA9IGZhbHNlO1xuICAgIGxldCBhZnRlckVtcHR5TGluZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlbHVkZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBwcmVsdWRlW2ldO1xuICAgICAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICAgICAgY29tbWVudCArPVxuICAgICAgICAgICAgICAgICAgICAoY29tbWVudCA9PT0gJycgPyAnJyA6IGFmdGVyRW1wdHlMaW5lID8gJ1xcblxcbicgOiAnXFxuJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNvdXJjZS5zdWJzdHJpbmcoMSkgfHwgJyAnKTtcbiAgICAgICAgICAgICAgICBhdENvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFmdGVyRW1wdHlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgICAgICBpZiAocHJlbHVkZVtpICsgMV0/LlswXSAhPT0gJyMnKVxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgYXRDb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF5IGJlIHdyb25nIGFmdGVyIGRvYy1lbmQsIGJ1dCBpbiB0aGF0IGNhc2UgaXQgZG9lc24ndCBtYXR0ZXJcbiAgICAgICAgICAgICAgICBpZiAoIWF0Q29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJFbXB0eUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGF0Q29tbWVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGNvbW1lbnQsIGFmdGVyRW1wdHlMaW5lIH07XG59XG4vKipcbiAqIENvbXBvc2UgYSBzdHJlYW0gb2YgQ1NUIG5vZGVzIGludG8gYSBzdHJlYW0gb2YgWUFNTCBEb2N1bWVudHMuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IENvbXBvc2VyLCBQYXJzZXIgfSBmcm9tICd5YW1sJ1xuICpcbiAqIGNvbnN0IHNyYzogc3RyaW5nID0gLi4uXG4gKiBjb25zdCB0b2tlbnMgPSBuZXcgUGFyc2VyKCkucGFyc2Uoc3JjKVxuICogY29uc3QgZG9jcyA9IG5ldyBDb21wb3NlcigpLmNvbXBvc2UodG9rZW5zKVxuICogYGBgXG4gKi9cbmNsYXNzIENvbXBvc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5kb2MgPSBudWxsO1xuICAgICAgICB0aGlzLmF0RGlyZWN0aXZlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZWx1ZGUgPSBbXTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5ncyA9IFtdO1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSAoc291cmNlLCBjb2RlLCBtZXNzYWdlLCB3YXJuaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSBnZXRFcnJvclBvcyhzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKHdhcm5pbmcpXG4gICAgICAgICAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKG5ldyBZQU1MV2FybmluZyhwb3MsIGNvZGUsIG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKG5ldyBZQU1MUGFyc2VFcnJvcihwb3MsIGNvZGUsIG1lc3NhZ2UpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbjogb3B0aW9ucy52ZXJzaW9uIHx8ICcxLjInIH0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBkZWNvcmF0ZShkb2MsIGFmdGVyRG9jKSB7XG4gICAgICAgIGNvbnN0IHsgY29tbWVudCwgYWZ0ZXJFbXB0eUxpbmUgfSA9IHBhcnNlUHJlbHVkZSh0aGlzLnByZWx1ZGUpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHsgZGM6IGRvYy5jb21tZW50LCBwcmVsdWRlLCBjb21tZW50IH0pXG4gICAgICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgICAgICBjb25zdCBkYyA9IGRvYy5jb250ZW50cztcbiAgICAgICAgICAgIGlmIChhZnRlckRvYykge1xuICAgICAgICAgICAgICAgIGRvYy5jb21tZW50ID0gZG9jLmNvbW1lbnQgPyBgJHtkb2MuY29tbWVudH1cXG4ke2NvbW1lbnR9YCA6IGNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhZnRlckVtcHR5TGluZSB8fCBkb2MuZGlyZWN0aXZlcy5kb2NTdGFydCB8fCAhZGMpIHtcbiAgICAgICAgICAgICAgICBkb2MuY29tbWVudEJlZm9yZSA9IGNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0NvbGxlY3Rpb24oZGMpICYmICFkYy5mbG93ICYmIGRjLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBkYy5pdGVtc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQYWlyKGl0KSlcbiAgICAgICAgICAgICAgICAgICAgaXQgPSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSBpdC5jb21tZW50QmVmb3JlO1xuICAgICAgICAgICAgICAgIGl0LmNvbW1lbnRCZWZvcmUgPSBjYiA/IGAke2NvbW1lbnR9XFxuJHtjYn1gIDogY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gZGMuY29tbWVudEJlZm9yZTtcbiAgICAgICAgICAgICAgICBkYy5jb21tZW50QmVmb3JlID0gY2IgPyBgJHtjb21tZW50fVxcbiR7Y2J9YCA6IGNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFmdGVyRG9jKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShkb2MuZXJyb3JzLCB0aGlzLmVycm9ycyk7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShkb2Mud2FybmluZ3MsIHRoaXMud2FybmluZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG9jLmVycm9ycyA9IHRoaXMuZXJyb3JzO1xuICAgICAgICAgICAgZG9jLndhcm5pbmdzID0gdGhpcy53YXJuaW5ncztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZWx1ZGUgPSBbXTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy53YXJuaW5ncyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0cmVhbSBzdGF0dXMgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBNb3N0bHkgdXNlZnVsIGF0IHRoZSBlbmQgb2YgaW5wdXQgZm9yIGFuIGVtcHR5IHN0cmVhbS5cbiAgICAgKi9cbiAgICBzdHJlYW1JbmZvKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tbWVudDogcGFyc2VQcmVsdWRlKHRoaXMucHJlbHVkZSkuY29tbWVudCxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IHRoaXMuZGlyZWN0aXZlcyxcbiAgICAgICAgICAgIGVycm9yczogdGhpcy5lcnJvcnMsXG4gICAgICAgICAgICB3YXJuaW5nczogdGhpcy53YXJuaW5nc1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wb3NlIHRva2VucyBpbnRvIGRvY3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3JjZURvYyAtIElmIHRoZSBzdHJlYW0gY29udGFpbnMgbm8gZG9jdW1lbnQsIHN0aWxsIGVtaXQgYSBmaW5hbCBkb2N1bWVudCBpbmNsdWRpbmcgYW55IGNvbW1lbnRzIGFuZCBkaXJlY3RpdmVzIHRoYXQgd291bGQgYmUgYXBwbGllZCB0byBhIHN1YnNlcXVlbnQgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIGVuZE9mZnNldCAtIFNob3VsZCBiZSBzZXQgaWYgYGZvcmNlRG9jYCBpcyBhbHNvIHNldCwgdG8gc2V0IHRoZSBkb2N1bWVudCByYW5nZSBlbmQgYW5kIHRvIGluZGljYXRlIGVycm9ycyBjb3JyZWN0bHkuXG4gICAgICovXG4gICAgKmNvbXBvc2UodG9rZW5zLCBmb3JjZURvYyA9IGZhbHNlLCBlbmRPZmZzZXQgPSAtMSkge1xuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2VucylcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLm5leHQodG9rZW4pO1xuICAgICAgICB5aWVsZCogdGhpcy5lbmQoZm9yY2VEb2MsIGVuZE9mZnNldCk7XG4gICAgfVxuICAgIC8qKiBBZHZhbmNlIHRoZSBjb21wb3NlciBieSBvbmUgQ1NUIHRva2VuLiAqL1xuICAgICpuZXh0KHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZGlyZWN0aXZlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMuYWRkKHRva2VuLnNvdXJjZSwgKG9mZnNldCwgbWVzc2FnZSwgd2FybmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBnZXRFcnJvclBvcyh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHBvc1swXSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihwb3MsICdCQURfRElSRUNUSVZFJywgbWVzc2FnZSwgd2FybmluZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsdWRlLnB1c2godG9rZW4uc291cmNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmF0RGlyZWN0aXZlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2MgPSBjb21wb3NlRG9jKHRoaXMub3B0aW9ucywgdGhpcy5kaXJlY3RpdmVzLCB0b2tlbiwgdGhpcy5vbkVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdERpcmVjdGl2ZXMgJiYgIWRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCAnTWlzc2luZyBkaXJlY3RpdmVzLWVuZC9kb2Mtc3RhcnQgaW5kaWNhdG9yIGxpbmUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29yYXRlKGRvYywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvYylcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy5kb2M7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgICAgICAgICAgICAgdGhpcy5hdERpcmVjdGl2ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2J5dGUtb3JkZXItbWFyayc6XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHRoaXMucHJlbHVkZS5wdXNoKHRva2VuLnNvdXJjZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSB0b2tlbi5zb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt0b2tlbi5tZXNzYWdlfTogJHtKU09OLnN0cmluZ2lmeSh0b2tlbi5zb3VyY2UpfWBcbiAgICAgICAgICAgICAgICAgICAgOiB0b2tlbi5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFlBTUxQYXJzZUVycm9yKGdldEVycm9yUG9zKHRva2VuKSwgJ1VORVhQRUNURURfVE9LRU4nLCBtc2cpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0RGlyZWN0aXZlcyB8fCAhdGhpcy5kb2MpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2MuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZG9jLWVuZCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdVbmV4cGVjdGVkIGRvYy1lbmQgd2l0aG91dCBwcmVjZWRpbmcgZG9jdW1lbnQnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKG5ldyBZQU1MUGFyc2VFcnJvcihnZXRFcnJvclBvcyh0b2tlbiksICdVTkVYUEVDVEVEX1RPS0VOJywgbXNnKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmRvYy5kaXJlY3RpdmVzLmRvY0VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcmVzb2x2ZUVuZCh0b2tlbi5lbmQsIHRva2VuLm9mZnNldCArIHRva2VuLnNvdXJjZS5sZW5ndGgsIHRoaXMuZG9jLm9wdGlvbnMuc3RyaWN0LCB0aGlzLm9uRXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUodGhpcy5kb2MsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChlbmQuY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYyA9IHRoaXMuZG9jLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jLmNvbW1lbnQgPSBkYyA/IGAke2RjfVxcbiR7ZW5kLmNvbW1lbnR9YCA6IGVuZC5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmRvYy5yYW5nZVsyXSA9IGVuZC5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2gobmV3IFlBTUxQYXJzZUVycm9yKGdldEVycm9yUG9zKHRva2VuKSwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5zdXBwb3J0ZWQgdG9rZW4gJHt0b2tlbi50eXBlfWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIGF0IGVuZCBvZiBpbnB1dCB0byB5aWVsZCBhbnkgcmVtYWluaW5nIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvcmNlRG9jIC0gSWYgdGhlIHN0cmVhbSBjb250YWlucyBubyBkb2N1bWVudCwgc3RpbGwgZW1pdCBhIGZpbmFsIGRvY3VtZW50IGluY2x1ZGluZyBhbnkgY29tbWVudHMgYW5kIGRpcmVjdGl2ZXMgdGhhdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGEgc3Vic2VxdWVudCBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0gZW5kT2Zmc2V0IC0gU2hvdWxkIGJlIHNldCBpZiBgZm9yY2VEb2NgIGlzIGFsc28gc2V0LCB0byBzZXQgdGhlIGRvY3VtZW50IHJhbmdlIGVuZCBhbmQgdG8gaW5kaWNhdGUgZXJyb3JzIGNvcnJlY3RseS5cbiAgICAgKi9cbiAgICAqZW5kKGZvcmNlRG9jID0gZmFsc2UsIGVuZE9mZnNldCA9IC0xKSB7XG4gICAgICAgIGlmICh0aGlzLmRvYykge1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZSh0aGlzLmRvYywgdHJ1ZSk7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmRvYztcbiAgICAgICAgICAgIHRoaXMuZG9jID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmb3JjZURvYykge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oeyBfZGlyZWN0aXZlczogdGhpcy5kaXJlY3RpdmVzIH0sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBuZXcgRG9jdW1lbnQodW5kZWZpbmVkLCBvcHRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0RGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoZW5kT2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ01pc3NpbmcgZGlyZWN0aXZlcy1lbmQgaW5kaWNhdG9yIGxpbmUnKTtcbiAgICAgICAgICAgIGRvYy5yYW5nZSA9IFswLCBlbmRPZmZzZXQsIGVuZE9mZnNldF07XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRlKGRvYywgZmFsc2UpO1xuICAgICAgICAgICAgeWllbGQgZG9jO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBDb21wb3NlciB9O1xuIiwiaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICcuLi9kb2MvRG9jdW1lbnQuanMnO1xuaW1wb3J0IHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSBmcm9tICcuL2NvbXBvc2Utbm9kZS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuXG5mdW5jdGlvbiBjb21wb3NlRG9jKG9wdGlvbnMsIGRpcmVjdGl2ZXMsIHsgb2Zmc2V0LCBzdGFydCwgdmFsdWUsIGVuZCB9LCBvbkVycm9yKSB7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oeyBfZGlyZWN0aXZlczogZGlyZWN0aXZlcyB9LCBvcHRpb25zKTtcbiAgICBjb25zdCBkb2MgPSBuZXcgRG9jdW1lbnQodW5kZWZpbmVkLCBvcHRzKTtcbiAgICBjb25zdCBjdHggPSB7XG4gICAgICAgIGF0S2V5OiBmYWxzZSxcbiAgICAgICAgYXRSb290OiB0cnVlLFxuICAgICAgICBkaXJlY3RpdmVzOiBkb2MuZGlyZWN0aXZlcyxcbiAgICAgICAgb3B0aW9uczogZG9jLm9wdGlvbnMsXG4gICAgICAgIHNjaGVtYTogZG9jLnNjaGVtYVxuICAgIH07XG4gICAgY29uc3QgcHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgaW5kaWNhdG9yOiAnZG9jLXN0YXJ0JyxcbiAgICAgICAgbmV4dDogdmFsdWUgPz8gZW5kPy5bMF0sXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgb25FcnJvcixcbiAgICAgICAgcGFyZW50SW5kZW50OiAwLFxuICAgICAgICBzdGFydE9uTmV3bGluZTogdHJ1ZVxuICAgIH0pO1xuICAgIGlmIChwcm9wcy5mb3VuZCkge1xuICAgICAgICBkb2MuZGlyZWN0aXZlcy5kb2NTdGFydCA9IHRydWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgKHZhbHVlLnR5cGUgPT09ICdibG9jay1tYXAnIHx8IHZhbHVlLnR5cGUgPT09ICdibG9jay1zZXEnKSAmJlxuICAgICAgICAgICAgIXByb3BzLmhhc05ld2xpbmUpXG4gICAgICAgICAgICBvbkVycm9yKHByb3BzLmVuZCwgJ01JU1NJTkdfQ0hBUicsICdCbG9jayBjb2xsZWN0aW9uIGNhbm5vdCBzdGFydCBvbiBzYW1lIGxpbmUgd2l0aCBkaXJlY3RpdmVzLWVuZCBtYXJrZXInKTtcbiAgICB9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJZiBDb250ZW50cyBpcyBzZXQsIGxldCdzIHRydXN0IHRoZSB1c2VyXG4gICAgZG9jLmNvbnRlbnRzID0gdmFsdWVcbiAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCBwcm9wcywgb25FcnJvcilcbiAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgcHJvcHMuZW5kLCBzdGFydCwgbnVsbCwgcHJvcHMsIG9uRXJyb3IpO1xuICAgIGNvbnN0IGNvbnRlbnRFbmQgPSBkb2MuY29udGVudHMucmFuZ2VbMl07XG4gICAgY29uc3QgcmUgPSByZXNvbHZlRW5kKGVuZCwgY29udGVudEVuZCwgZmFsc2UsIG9uRXJyb3IpO1xuICAgIGlmIChyZS5jb21tZW50KVxuICAgICAgICBkb2MuY29tbWVudCA9IHJlLmNvbW1lbnQ7XG4gICAgZG9jLnJhbmdlID0gW29mZnNldCwgY29udGVudEVuZCwgcmUub2Zmc2V0XTtcbiAgICByZXR1cm4gZG9jO1xufVxuXG5leHBvcnQgeyBjb21wb3NlRG9jIH07XG4iLCJpbXBvcnQgeyByZXNvbHZlQmxvY2tTY2FsYXIgfSBmcm9tICcuLi9jb21wb3NlL3Jlc29sdmUtYmxvY2stc2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVGbG93U2NhbGFyIH0gZnJvbSAnLi4vY29tcG9zZS9yZXNvbHZlLWZsb3ctc2NhbGFyLmpzJztcbmltcG9ydCB7IFlBTUxQYXJzZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlTdHJpbmcuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlQXNTY2FsYXIodG9rZW4sIHN0cmljdCA9IHRydWUsIG9uRXJyb3IpIHtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgY29uc3QgX29uRXJyb3IgPSAocG9zLCBjb2RlLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0eXBlb2YgcG9zID09PSAnbnVtYmVyJyA/IHBvcyA6IEFycmF5LmlzQXJyYXkocG9zKSA/IHBvc1swXSA6IHBvcy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAob25FcnJvcilcbiAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgY29kZSwgbWVzc2FnZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFlBTUxQYXJzZUVycm9yKFtvZmZzZXQsIG9mZnNldCArIDFdLCBjb2RlLCBtZXNzYWdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlRmxvd1NjYWxhcih0b2tlbiwgc3RyaWN0LCBfb25FcnJvcik7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQmxvY2tTY2FsYXIoeyBvcHRpb25zOiB7IHN0cmljdCB9IH0sIHRva2VuLCBfb25FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzY2FsYXIgdG9rZW4gd2l0aCBgdmFsdWVgXG4gKlxuICogVmFsdWVzIHRoYXQgcmVwcmVzZW50IGFuIGFjdHVhbCBzdHJpbmcgYnV0IG1heSBiZSBwYXJzZWQgYXMgYSBkaWZmZXJlbnQgdHlwZSBzaG91bGQgdXNlIGEgYHR5cGVgIG90aGVyIHRoYW4gYCdQTEFJTidgLFxuICogYXMgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGFueSBzY2hlbWEgb3BlcmF0aW9ucyBhbmQgd29uJ3QgY2hlY2sgZm9yIHN1Y2ggY29uZmxpY3RzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2YWx1ZSwgd2hpY2ggd2lsbCBoYXZlIGl0cyBjb250ZW50IHByb3Blcmx5IGluZGVudGVkLlxuICogQHBhcmFtIGNvbnRleHQuZW5kIENvbW1lbnRzIGFuZCB3aGl0ZXNwYWNlIGFmdGVyIHRoZSBlbmQgb2YgdGhlIHZhbHVlLCBvciBhZnRlciB0aGUgYmxvY2sgc2NhbGFyIGhlYWRlci4gSWYgdW5kZWZpbmVkLCBhIG5ld2xpbmUgd2lsbCBiZSBhZGRlZC5cbiAqIEBwYXJhbSBjb250ZXh0LmltcGxpY2l0S2V5IEJlaW5nIHdpdGhpbiBhbiBpbXBsaWNpdCBrZXkgbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0LmluZGVudCBUaGUgaW5kZW50IGxldmVsIG9mIHRoZSB0b2tlbi5cbiAqIEBwYXJhbSBjb250ZXh0LmluRmxvdyBJcyB0aGlzIHNjYWxhciB3aXRoaW4gYSBmbG93IGNvbGxlY3Rpb24/IFRoaXMgbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0Lm9mZnNldCBUaGUgb2Zmc2V0IHBvc2l0aW9uIG9mIHRoZSB0b2tlbi5cbiAqIEBwYXJhbSBjb250ZXh0LnR5cGUgVGhlIHByZWZlcnJlZCB0eXBlIG9mIHRoZSBzY2FsYXIgdG9rZW4uIElmIHVuZGVmaW5lZCwgdGhlIHByZXZpb3VzIHR5cGUgb2YgdGhlIGB0b2tlbmAgd2lsbCBiZSB1c2VkLCBkZWZhdWx0aW5nIHRvIGAnUExBSU4nYC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2NhbGFyVG9rZW4odmFsdWUsIGNvbnRleHQpIHtcbiAgICBjb25zdCB7IGltcGxpY2l0S2V5ID0gZmFsc2UsIGluZGVudCwgaW5GbG93ID0gZmFsc2UsIG9mZnNldCA9IC0xLCB0eXBlID0gJ1BMQUlOJyB9ID0gY29udGV4dDtcbiAgICBjb25zdCBzb3VyY2UgPSBzdHJpbmdpZnlTdHJpbmcoeyB0eXBlLCB2YWx1ZSB9LCB7XG4gICAgICAgIGltcGxpY2l0S2V5LFxuICAgICAgICBpbmRlbnQ6IGluZGVudCA+IDAgPyAnICcucmVwZWF0KGluZGVudCkgOiAnJyxcbiAgICAgICAgaW5GbG93LFxuICAgICAgICBvcHRpb25zOiB7IGJsb2NrUXVvdGU6IHRydWUsIGxpbmVXaWR0aDogLTEgfVxuICAgIH0pO1xuICAgIGNvbnN0IGVuZCA9IGNvbnRleHQuZW5kID8/IFtcbiAgICAgICAgeyB0eXBlOiAnbmV3bGluZScsIG9mZnNldDogLTEsIGluZGVudCwgc291cmNlOiAnXFxuJyB9XG4gICAgXTtcbiAgICBzd2l0Y2ggKHNvdXJjZVswXSkge1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6IHtcbiAgICAgICAgICAgIGNvbnN0IGhlID0gc291cmNlLmluZGV4T2YoJ1xcbicpO1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgaGUpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHNvdXJjZS5zdWJzdHJpbmcoaGUgKyAxKSArICdcXG4nO1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAgICAgICAgICAgeyB0eXBlOiAnYmxvY2stc2NhbGFyLWhlYWRlcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2U6IGhlYWQgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICghYWRkRW5kdG9CbG9ja1Byb3BzKHByb3BzLCBlbmQpKVxuICAgICAgICAgICAgICAgIHByb3BzLnB1c2goeyB0eXBlOiAnbmV3bGluZScsIG9mZnNldDogLTEsIGluZGVudCwgc291cmNlOiAnXFxuJyB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdibG9jay1zY2FsYXInLCBvZmZzZXQsIGluZGVudCwgcHJvcHMsIHNvdXJjZTogYm9keSB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdkb3VibGUtcXVvdGVkLXNjYWxhcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2UsIGVuZCB9O1xuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZSwgZW5kIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZSwgZW5kIH07XG4gICAgfVxufVxuLyoqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGB0b2tlbmAgdG8gdGhlIGdpdmVuIHN0cmluZyBgdmFsdWVgLCBvdmVyd3JpdGluZyBhbnkgcHJldmlvdXMgY29udGVudHMgYW5kIHR5cGUgdGhhdCBpdCBtYXkgaGF2ZS5cbiAqXG4gKiBCZXN0IGVmZm9ydHMgYXJlIG1hZGUgdG8gcmV0YWluIGFueSBjb21tZW50cyBwcmV2aW91c2x5IGFzc29jaWF0ZWQgd2l0aCB0aGUgYHRva2VuYCxcbiAqIHRob3VnaCBhbGwgY29udGVudHMgd2l0aGluIGEgY29sbGVjdGlvbidzIGBpdGVtc2Agd2lsbCBiZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBWYWx1ZXMgdGhhdCByZXByZXNlbnQgYW4gYWN0dWFsIHN0cmluZyBidXQgbWF5IGJlIHBhcnNlZCBhcyBhIGRpZmZlcmVudCB0eXBlIHNob3VsZCB1c2UgYSBgdHlwZWAgb3RoZXIgdGhhbiBgJ1BMQUlOJ2AsXG4gKiBhcyB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgYW55IHNjaGVtYSBvcGVyYXRpb25zIGFuZCB3b24ndCBjaGVjayBmb3Igc3VjaCBjb25mbGljdHMuXG4gKlxuICogQHBhcmFtIHRva2VuIEFueSB0b2tlbi4gSWYgaXQgZG9lcyBub3QgaW5jbHVkZSBhbiBgaW5kZW50YCB2YWx1ZSwgdGhlIHZhbHVlIHdpbGwgYmUgc3RyaW5naWZpZWQgYXMgaWYgaXQgd2VyZSBhbiBpbXBsaWNpdCBrZXkuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmFsdWUsIHdoaWNoIHdpbGwgaGF2ZSBpdHMgY29udGVudCBwcm9wZXJseSBpbmRlbnRlZC5cbiAqIEBwYXJhbSBjb250ZXh0LmFmdGVyS2V5IEluIG1vc3QgY2FzZXMsIHZhbHVlcyBhZnRlciBhIGtleSBzaG91bGQgaGF2ZSBhbiBhZGRpdGlvbmFsIGxldmVsIG9mIGluZGVudGF0aW9uLlxuICogQHBhcmFtIGNvbnRleHQuaW1wbGljaXRLZXkgQmVpbmcgd2l0aGluIGFuIGltcGxpY2l0IGtleSBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQuaW5GbG93IEJlaW5nIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbiBtYXkgYWZmZWN0IHRoZSByZXNvbHZlZCB0eXBlIG9mIHRoZSB0b2tlbidzIHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQudHlwZSBUaGUgcHJlZmVycmVkIHR5cGUgb2YgdGhlIHNjYWxhciB0b2tlbi4gSWYgdW5kZWZpbmVkLCB0aGUgcHJldmlvdXMgdHlwZSBvZiB0aGUgYHRva2VuYCB3aWxsIGJlIHVzZWQsIGRlZmF1bHRpbmcgdG8gYCdQTEFJTidgLlxuICovXG5mdW5jdGlvbiBzZXRTY2FsYXJWYWx1ZSh0b2tlbiwgdmFsdWUsIGNvbnRleHQgPSB7fSkge1xuICAgIGxldCB7IGFmdGVyS2V5ID0gZmFsc2UsIGltcGxpY2l0S2V5ID0gZmFsc2UsIGluRmxvdyA9IGZhbHNlLCB0eXBlIH0gPSBjb250ZXh0O1xuICAgIGxldCBpbmRlbnQgPSAnaW5kZW50JyBpbiB0b2tlbiA/IHRva2VuLmluZGVudCA6IG51bGw7XG4gICAgaWYgKGFmdGVyS2V5ICYmIHR5cGVvZiBpbmRlbnQgPT09ICdudW1iZXInKVxuICAgICAgICBpbmRlbnQgKz0gMjtcbiAgICBpZiAoIXR5cGUpXG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHR5cGUgPSAnUVVPVEVfU0lOR0xFJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICB0eXBlID0gJ1FVT1RFX0RPVUJMRSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gdG9rZW4ucHJvcHNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBibG9jayBzY2FsYXIgaGVhZGVyJyk7XG4gICAgICAgICAgICAgICAgdHlwZSA9IGhlYWRlci5zb3VyY2VbMF0gPT09ICc+JyA/ICdCTE9DS19GT0xERUQnIDogJ0JMT0NLX0xJVEVSQUwnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0eXBlID0gJ1BMQUlOJztcbiAgICAgICAgfVxuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmluZ2lmeVN0cmluZyh7IHR5cGUsIHZhbHVlIH0sIHtcbiAgICAgICAgaW1wbGljaXRLZXk6IGltcGxpY2l0S2V5IHx8IGluZGVudCA9PT0gbnVsbCxcbiAgICAgICAgaW5kZW50OiBpbmRlbnQgIT09IG51bGwgJiYgaW5kZW50ID4gMCA/ICcgJy5yZXBlYXQoaW5kZW50KSA6ICcnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IHsgYmxvY2tRdW90ZTogdHJ1ZSwgbGluZVdpZHRoOiAtMSB9XG4gICAgfSk7XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgc2V0QmxvY2tTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCAnc2luZ2xlLXF1b3RlZC1zY2FsYXInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsICdzY2FsYXInKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRCbG9ja1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UpIHtcbiAgICBjb25zdCBoZSA9IHNvdXJjZS5pbmRleE9mKCdcXG4nKTtcbiAgICBjb25zdCBoZWFkID0gc291cmNlLnN1YnN0cmluZygwLCBoZSk7XG4gICAgY29uc3QgYm9keSA9IHNvdXJjZS5zdWJzdHJpbmcoaGUgKyAxKSArICdcXG4nO1xuICAgIGlmICh0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJykge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSB0b2tlbi5wcm9wc1swXTtcbiAgICAgICAgaWYgKGhlYWRlci50eXBlICE9PSAnYmxvY2stc2NhbGFyLWhlYWRlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYmxvY2sgc2NhbGFyIGhlYWRlcicpO1xuICAgICAgICBoZWFkZXIuc291cmNlID0gaGVhZDtcbiAgICAgICAgdG9rZW4uc291cmNlID0gYm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgb2Zmc2V0IH0gPSB0b2tlbjtcbiAgICAgICAgY29uc3QgaW5kZW50ID0gJ2luZGVudCcgaW4gdG9rZW4gPyB0b2tlbi5pbmRlbnQgOiAtMTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6ICdibG9jay1zY2FsYXItaGVhZGVyJywgb2Zmc2V0LCBpbmRlbnQsIHNvdXJjZTogaGVhZCB9XG4gICAgICAgIF07XG4gICAgICAgIGlmICghYWRkRW5kdG9CbG9ja1Byb3BzKHByb3BzLCAnZW5kJyBpbiB0b2tlbiA/IHRva2VuLmVuZCA6IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICBwcm9wcy5wdXNoKHsgdHlwZTogJ25ld2xpbmUnLCBvZmZzZXQ6IC0xLCBpbmRlbnQsIHNvdXJjZTogJ1xcbicgfSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRva2VuKSlcbiAgICAgICAgICAgIGlmIChrZXkgIT09ICd0eXBlJyAmJiBrZXkgIT09ICdvZmZzZXQnKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0b2tlbltrZXldO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGU6ICdibG9jay1zY2FsYXInLCBpbmRlbnQsIHByb3BzLCBzb3VyY2U6IGJvZHkgfSk7XG4gICAgfVxufVxuLyoqIEByZXR1cm5zIGB0cnVlYCBpZiBsYXN0IHRva2VuIGlzIGEgbmV3bGluZSAqL1xuZnVuY3Rpb24gYWRkRW5kdG9CbG9ja1Byb3BzKHByb3BzLCBlbmQpIHtcbiAgICBpZiAoZW5kKVxuICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGVuZClcbiAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucHVzaChzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHN0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsIHR5cGUpIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICB0b2tlbi50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIHRva2VuLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOiB7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSB0b2tlbi5wcm9wcy5zbGljZSgxKTtcbiAgICAgICAgICAgIGxldCBvYSA9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAodG9rZW4ucHJvcHNbMF0udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKVxuICAgICAgICAgICAgICAgIG9hIC09IHRva2VuLnByb3BzWzBdLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvayBvZiBlbmQpXG4gICAgICAgICAgICAgICAgdG9rLm9mZnNldCArPSBvYTtcbiAgICAgICAgICAgIGRlbGV0ZSB0b2tlbi5wcm9wcztcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZSwgc291cmNlLCBlbmQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXNlICdibG9jay1zZXEnOiB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0b2tlbi5vZmZzZXQgKyBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbmwgPSB7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0LCBpbmRlbnQ6IHRva2VuLmluZGVudCwgc291cmNlOiAnXFxuJyB9O1xuICAgICAgICAgICAgZGVsZXRlIHRva2VuLml0ZW1zO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlLCBzb3VyY2UsIGVuZDogW25sXSB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGVudCA9ICdpbmRlbnQnIGluIHRva2VuID8gdG9rZW4uaW5kZW50IDogLTE7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSAnZW5kJyBpbiB0b2tlbiAmJiBBcnJheS5pc0FycmF5KHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICA/IHRva2VuLmVuZC5maWx0ZXIoc3QgPT4gc3QudHlwZSA9PT0gJ3NwYWNlJyB8fFxuICAgICAgICAgICAgICAgICAgICBzdC50eXBlID09PSAnY29tbWVudCcgfHxcbiAgICAgICAgICAgICAgICAgICAgc3QudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0b2tlbikpXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3R5cGUnICYmIGtleSAhPT0gJ29mZnNldCcpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0b2tlbltrZXldO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlLCBpbmRlbnQsIHNvdXJjZSwgZW5kIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBjcmVhdGVTY2FsYXJUb2tlbiwgcmVzb2x2ZUFzU2NhbGFyLCBzZXRTY2FsYXJWYWx1ZSB9O1xuIiwiLyoqXG4gKiBTdHJpbmdpZnkgYSBDU1QgZG9jdW1lbnQsIHRva2VuLCBvciBjb2xsZWN0aW9uIGl0ZW1cbiAqXG4gKiBGYWlyIHdhcm5pbmc6IFRoaXMgYXBwbGllcyBubyB2YWxpZGF0aW9uIHdoYXRzb2V2ZXIsIGFuZFxuICogc2ltcGx5IGNvbmNhdGVuYXRlcyB0aGUgc291cmNlcyBpbiB0aGVpciBsb2dpY2FsIG9yZGVyLlxuICovXG5jb25zdCBzdHJpbmdpZnkgPSAoY3N0KSA9PiAndHlwZScgaW4gY3N0ID8gc3RyaW5naWZ5VG9rZW4oY3N0KSA6IHN0cmluZ2lmeUl0ZW0oY3N0KTtcbmZ1bmN0aW9uIHN0cmluZ2lmeVRva2VuKHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSAnJztcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rIG9mIHRva2VuLnByb3BzKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlUb2tlbih0b2spO1xuICAgICAgICAgICAgcmV0dXJuIHJlcyArIHRva2VuLnNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdibG9jay1tYXAnOlxuICAgICAgICBjYXNlICdibG9jay1zZXEnOiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdG9rZW4uaXRlbXMpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0cmluZ2lmeUl0ZW0oaXRlbSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSB0b2tlbi5zdGFydC5zb3VyY2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdG9rZW4uaXRlbXMpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0cmluZ2lmeUl0ZW0oaXRlbSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdkb2N1bWVudCc6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSBzdHJpbmdpZnlJdGVtKHRva2VuKTtcbiAgICAgICAgICAgIGlmICh0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGxldCByZXMgPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoJ2VuZCcgaW4gdG9rZW4gJiYgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUl0ZW0oeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0pIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgZm9yIChjb25zdCBzdCBvZiBzdGFydClcbiAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICBpZiAoa2V5KVxuICAgICAgICByZXMgKz0gc3RyaW5naWZ5VG9rZW4oa2V5KTtcbiAgICBpZiAoc2VwKVxuICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHNlcClcbiAgICAgICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgaWYgKHZhbHVlKVxuICAgICAgICByZXMgKz0gc3RyaW5naWZ5VG9rZW4odmFsdWUpO1xuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeSB9O1xuIiwiY29uc3QgQlJFQUsgPSBTeW1ib2woJ2JyZWFrIHZpc2l0Jyk7XG5jb25zdCBTS0lQID0gU3ltYm9sKCdza2lwIGNoaWxkcmVuJyk7XG5jb25zdCBSRU1PVkUgPSBTeW1ib2woJ3JlbW92ZSBpdGVtJyk7XG4vKipcbiAqIEFwcGx5IGEgdmlzaXRvciB0byBhIENTVCBkb2N1bWVudCBvciBpdGVtLlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIHRoZSByb290LCBjYWxsaW5nIGFcbiAqIGB2aXNpdG9yYCBmdW5jdGlvbiB3aXRoIHR3byBhcmd1bWVudHMgd2hlbiBlbnRlcmluZyBlYWNoIGl0ZW06XG4gKiAgIC0gYGl0ZW1gOiBUaGUgY3VycmVudCBpdGVtLCB3aGljaCBpbmNsdWRlZCB0aGUgZm9sbG93aW5nIG1lbWJlcnM6XG4gKiAgICAgLSBgc3RhcnQ6IFNvdXJjZVRva2VuW11gIOKAkyBTb3VyY2UgdG9rZW5zIGJlZm9yZSB0aGUga2V5IG9yIHZhbHVlLFxuICogICAgICAgcG9zc2libHkgaW5jbHVkaW5nIGl0cyBhbmNob3Igb3IgdGFnLlxuICogICAgIC0gYGtleT86IFRva2VuIHwgbnVsbGAg4oCTIFNldCBmb3IgcGFpciB2YWx1ZXMuIE1heSB0aGVuIGJlIGBudWxsYCwgaWZcbiAqICAgICAgIHRoZSBrZXkgYmVmb3JlIHRoZSBgOmAgc2VwYXJhdG9yIGlzIGVtcHR5LlxuICogICAgIC0gYHNlcD86IFNvdXJjZVRva2VuW11gIOKAkyBTb3VyY2UgdG9rZW5zIGJldHdlZW4gdGhlIGtleSBhbmQgdGhlIHZhbHVlLFxuICogICAgICAgd2hpY2ggc2hvdWxkIGluY2x1ZGUgdGhlIGA6YCBtYXAgdmFsdWUgaW5kaWNhdG9yIGlmIGB2YWx1ZWAgaXMgc2V0LlxuICogICAgIC0gYHZhbHVlPzogVG9rZW5gIOKAkyBUaGUgdmFsdWUgb2YgYSBzZXF1ZW5jZSBpdGVtLCBvciBvZiBhIG1hcCBwYWlyLlxuICogICAtIGBwYXRoYDogVGhlIHN0ZXBzIGZyb20gdGhlIHJvb3QgdG8gdGhlIGN1cnJlbnQgbm9kZSwgYXMgYW4gYXJyYXkgb2ZcbiAqICAgICBgWydrZXknIHwgJ3ZhbHVlJywgbnVtYmVyXWAgdHVwbGVzLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHZpc2l0b3IgbWF5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgdHJhdmVyc2FsOlxuICogICAtIGB1bmRlZmluZWRgIChkZWZhdWx0KTogRG8gbm90aGluZyBhbmQgY29udGludWVcbiAqICAgLSBgdmlzaXQuU0tJUGA6IERvIG5vdCB2aXNpdCB0aGUgY2hpbGRyZW4gb2YgdGhpcyB0b2tlbiwgY29udGludWUgd2l0aFxuICogICAgICBuZXh0IHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQUtgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQuUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IGl0ZW0sIHRoZW4gY29udGludWUgd2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgbnVtYmVyYDogU2V0IHRoZSBpbmRleCBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmXG4gKiAgICAgdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHRva2VuIGhhcyBjaGFuZ2VkLlxuICogICAtIGBmdW5jdGlvbmA6IERlZmluZSB0aGUgbmV4dCB2aXNpdG9yIGZvciB0aGlzIGl0ZW0uIEFmdGVyIHRoZSBvcmlnaW5hbFxuICogICAgIHZpc2l0b3IgaXMgY2FsbGVkIG9uIGl0ZW0gZW50cnksIG5leHQgdmlzaXRvcnMgYXJlIGNhbGxlZCBhZnRlciBoYW5kbGluZ1xuICogICAgIGEgbm9uLWVtcHR5IGBrZXlgIGFuZCB3aGVuIGV4aXRpbmcgdGhlIGl0ZW0uXG4gKi9cbmZ1bmN0aW9uIHZpc2l0KGNzdCwgdmlzaXRvcikge1xuICAgIGlmICgndHlwZScgaW4gY3N0ICYmIGNzdC50eXBlID09PSAnZG9jdW1lbnQnKVxuICAgICAgICBjc3QgPSB7IHN0YXJ0OiBjc3Quc3RhcnQsIHZhbHVlOiBjc3QudmFsdWUgfTtcbiAgICBfdmlzaXQoT2JqZWN0LmZyZWV6ZShbXSksIGNzdCwgdmlzaXRvcik7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBpdGVtICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdmUgdGhlIGN1cnJlbnQgaXRlbSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuLyoqIEZpbmQgdGhlIGl0ZW0gYXQgYHBhdGhgIGZyb20gYGNzdGAgYXMgdGhlIHJvb3QgKi9cbnZpc2l0Lml0ZW1BdFBhdGggPSAoY3N0LCBwYXRoKSA9PiB7XG4gICAgbGV0IGl0ZW0gPSBjc3Q7XG4gICAgZm9yIChjb25zdCBbZmllbGQsIGluZGV4XSBvZiBwYXRoKSB7XG4gICAgICAgIGNvbnN0IHRvayA9IGl0ZW0/LltmaWVsZF07XG4gICAgICAgIGlmICh0b2sgJiYgJ2l0ZW1zJyBpbiB0b2spIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0b2suaXRlbXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufTtcbi8qKlxuICogR2V0IHRoZSBpbW1lZGlhdGUgcGFyZW50IGNvbGxlY3Rpb24gb2YgdGhlIGl0ZW0gYXQgYHBhdGhgIGZyb20gYGNzdGAgYXMgdGhlIHJvb3QuXG4gKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBjb2xsZWN0aW9uIGlzIG5vdCBmb3VuZCwgd2hpY2ggc2hvdWxkIG5ldmVyIGhhcHBlbiBpZiB0aGUgaXRlbSBpdHNlbGYgZXhpc3RzLlxuICovXG52aXNpdC5wYXJlbnRDb2xsZWN0aW9uID0gKGNzdCwgcGF0aCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudCA9IHZpc2l0Lml0ZW1BdFBhdGgoY3N0LCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgY29uc3QgZmllbGQgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV1bMF07XG4gICAgY29uc3QgY29sbCA9IHBhcmVudD8uW2ZpZWxkXTtcbiAgICBpZiAoY29sbCAmJiAnaXRlbXMnIGluIGNvbGwpXG4gICAgICAgIHJldHVybiBjb2xsO1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyZW50IGNvbGxlY3Rpb24gbm90IGZvdW5kJyk7XG59O1xuZnVuY3Rpb24gX3Zpc2l0KHBhdGgsIGl0ZW0sIHZpc2l0b3IpIHtcbiAgICBsZXQgY3RybCA9IHZpc2l0b3IoaXRlbSwgcGF0aCk7XG4gICAgaWYgKHR5cGVvZiBjdHJsID09PSAnc3ltYm9sJylcbiAgICAgICAgcmV0dXJuIGN0cmw7XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBbJ2tleScsICd2YWx1ZSddKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gaXRlbVtmaWVsZF07XG4gICAgICAgIGlmICh0b2tlbiAmJiAnaXRlbXMnIGluIHRva2VuKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2kgPSBfdmlzaXQoT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChbW2ZpZWxkLCBpXV0pKSwgdG9rZW4uaXRlbXNbaV0sIHZpc2l0b3IpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2kgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICBpID0gY2kgLSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNpID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNpID09PSBSRU1PVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdHJsID09PSAnZnVuY3Rpb24nICYmIGZpZWxkID09PSAna2V5JylcbiAgICAgICAgICAgICAgICBjdHJsID0gY3RybChpdGVtLCBwYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIGN0cmwgPT09ICdmdW5jdGlvbicgPyBjdHJsKGl0ZW0sIHBhdGgpIDogY3RybDtcbn1cblxuZXhwb3J0IHsgdmlzaXQgfTtcbiIsImV4cG9ydCB7IGNyZWF0ZVNjYWxhclRva2VuLCByZXNvbHZlQXNTY2FsYXIsIHNldFNjYWxhclZhbHVlIH0gZnJvbSAnLi9jc3Qtc2NhbGFyLmpzJztcbmV4cG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vY3N0LXN0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyB2aXNpdCB9IGZyb20gJy4vY3N0LXZpc2l0LmpzJztcblxuLyoqIFRoZSBieXRlIG9yZGVyIG1hcmsgKi9cbmNvbnN0IEJPTSA9ICdcXHV7RkVGRn0nO1xuLyoqIFN0YXJ0IG9mIGRvYy1tb2RlICovXG5jb25zdCBET0NVTUVOVCA9ICdcXHgwMic7IC8vIEMwOiBTdGFydCBvZiBUZXh0XG4vKiogVW5leHBlY3RlZCBlbmQgb2YgZmxvdy1tb2RlICovXG5jb25zdCBGTE9XX0VORCA9ICdcXHgxOCc7IC8vIEMwOiBDYW5jZWxcbi8qKiBOZXh0IHRva2VuIGlzIGEgc2NhbGFyIHZhbHVlICovXG5jb25zdCBTQ0FMQVIgPSAnXFx4MWYnOyAvLyBDMDogVW5pdCBTZXBhcmF0b3Jcbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHRva2VuYCBpcyBhIGZsb3cgb3IgYmxvY2sgY29sbGVjdGlvbiAqL1xuY29uc3QgaXNDb2xsZWN0aW9uID0gKHRva2VuKSA9PiAhIXRva2VuICYmICdpdGVtcycgaW4gdG9rZW47XG4vKiogQHJldHVybnMgYHRydWVgIGlmIGB0b2tlbmAgaXMgYSBmbG93IG9yIGJsb2NrIHNjYWxhcjsgbm90IGFuIGFsaWFzICovXG5jb25zdCBpc1NjYWxhciA9ICh0b2tlbikgPT4gISF0b2tlbiAmJlxuICAgICh0b2tlbi50eXBlID09PSAnc2NhbGFyJyB8fFxuICAgICAgICB0b2tlbi50eXBlID09PSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInIHx8XG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdkb3VibGUtcXVvdGVkLXNjYWxhcicgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKiBHZXQgYSBwcmludGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBsZXhlciB0b2tlbiAqL1xuZnVuY3Rpb24gcHJldHR5VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgQk9NOlxuICAgICAgICAgICAgcmV0dXJuICc8Qk9NPic7XG4gICAgICAgIGNhc2UgRE9DVU1FTlQ6XG4gICAgICAgICAgICByZXR1cm4gJzxET0M+JztcbiAgICAgICAgY2FzZSBGTE9XX0VORDpcbiAgICAgICAgICAgIHJldHVybiAnPEZMT1dfRU5EPic7XG4gICAgICAgIGNhc2UgU0NBTEFSOlxuICAgICAgICAgICAgcmV0dXJuICc8U0NBTEFSPic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodG9rZW4pO1xuICAgIH1cbn1cbi8qKiBJZGVudGlmeSB0aGUgdHlwZSBvZiBhIGxleGVyIHRva2VuLiBNYXkgcmV0dXJuIGBudWxsYCBmb3IgdW5rbm93biB0b2tlbnMuICovXG5mdW5jdGlvbiB0b2tlblR5cGUoc291cmNlKSB7XG4gICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgICAgY2FzZSBCT006XG4gICAgICAgICAgICByZXR1cm4gJ2J5dGUtb3JkZXItbWFyayc7XG4gICAgICAgIGNhc2UgRE9DVU1FTlQ6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1tb2RlJztcbiAgICAgICAgY2FzZSBGTE9XX0VORDpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1lcnJvci1lbmQnO1xuICAgICAgICBjYXNlIFNDQUxBUjpcbiAgICAgICAgICAgIHJldHVybiAnc2NhbGFyJztcbiAgICAgICAgY2FzZSAnLS0tJzpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLXN0YXJ0JztcbiAgICAgICAgY2FzZSAnLi4uJzpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLWVuZCc7XG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgIGNhc2UgJ1xcclxcbic6XG4gICAgICAgICAgICByZXR1cm4gJ25ld2xpbmUnO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIHJldHVybiAnc2VxLWl0ZW0taW5kJztcbiAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgICByZXR1cm4gJ2V4cGxpY2l0LWtleS1pbmQnO1xuICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgIHJldHVybiAnbWFwLXZhbHVlLWluZCc7XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LW1hcC1zdGFydCc7XG4gICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LW1hcC1lbmQnO1xuICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1zZXEtc3RhcnQnO1xuICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1zZXEtZW5kJztcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1hJztcbiAgICB9XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NwYWNlJztcbiAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIHJldHVybiAnZGlyZWN0aXZlLWxpbmUnO1xuICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgIHJldHVybiAnYWxpYXMnO1xuICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgIHJldHVybiAnYW5jaG9yJztcbiAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICByZXR1cm4gJ3RhZyc7XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICByZXR1cm4gJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJztcbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgcmV0dXJuICdkb3VibGUtcXVvdGVkLXNjYWxhcic7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgIHJldHVybiAnYmxvY2stc2NhbGFyLWhlYWRlcic7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBCT00sIERPQ1VNRU5ULCBGTE9XX0VORCwgU0NBTEFSLCBpc0NvbGxlY3Rpb24sIGlzU2NhbGFyLCBwcmV0dHlUb2tlbiwgdG9rZW5UeXBlIH07XG4iLCJpbXBvcnQgeyBCT00sIERPQ1VNRU5ULCBGTE9XX0VORCwgU0NBTEFSIH0gZnJvbSAnLi9jc3QuanMnO1xuXG4vKlxuU1RBUlQgLT4gc3RyZWFtXG5cbnN0cmVhbVxuICBkaXJlY3RpdmUgLT4gbGluZS1lbmQgLT4gc3RyZWFtXG4gIGluZGVudCArIGxpbmUtZW5kIC0+IHN0cmVhbVxuICBbZWxzZV0gLT4gbGluZS1zdGFydFxuXG5saW5lLWVuZFxuICBjb21tZW50IC0+IGxpbmUtZW5kXG4gIG5ld2xpbmUgLT4gLlxuICBpbnB1dC1lbmQgLT4gRU5EXG5cbmxpbmUtc3RhcnRcbiAgZG9jLXN0YXJ0IC0+IGRvY1xuICBkb2MtZW5kIC0+IHN0cmVhbVxuICBbZWxzZV0gLT4gaW5kZW50IC0+IGJsb2NrLXN0YXJ0XG5cbmJsb2NrLXN0YXJ0XG4gIHNlcS1pdGVtLXN0YXJ0IC0+IGJsb2NrLXN0YXJ0XG4gIGV4cGxpY2l0LWtleS1zdGFydCAtPiBibG9jay1zdGFydFxuICBtYXAtdmFsdWUtc3RhcnQgLT4gYmxvY2stc3RhcnRcbiAgW2Vsc2VdIC0+IGRvY1xuXG5kb2NcbiAgbGluZS1lbmQgLT4gbGluZS1zdGFydFxuICBzcGFjZXMgLT4gZG9jXG4gIGFuY2hvciAtPiBkb2NcbiAgdGFnIC0+IGRvY1xuICBmbG93LXN0YXJ0IC0+IGZsb3cgLT4gZG9jXG4gIGZsb3ctZW5kIC0+IGVycm9yIC0+IGRvY1xuICBzZXEtaXRlbS1zdGFydCAtPiBlcnJvciAtPiBkb2NcbiAgZXhwbGljaXQta2V5LXN0YXJ0IC0+IGVycm9yIC0+IGRvY1xuICBtYXAtdmFsdWUtc3RhcnQgLT4gZG9jXG4gIGFsaWFzIC0+IGRvY1xuICBxdW90ZS1zdGFydCAtPiBxdW90ZWQtc2NhbGFyIC0+IGRvY1xuICBibG9jay1zY2FsYXItaGVhZGVyIC0+IGxpbmUtZW5kIC0+IGJsb2NrLXNjYWxhcihtaW4pIC0+IGxpbmUtc3RhcnRcbiAgW2Vsc2VdIC0+IHBsYWluLXNjYWxhcihmYWxzZSwgbWluKSAtPiBkb2NcblxuZmxvd1xuICBsaW5lLWVuZCAtPiBmbG93XG4gIHNwYWNlcyAtPiBmbG93XG4gIGFuY2hvciAtPiBmbG93XG4gIHRhZyAtPiBmbG93XG4gIGZsb3ctc3RhcnQgLT4gZmxvdyAtPiBmbG93XG4gIGZsb3ctZW5kIC0+IC5cbiAgc2VxLWl0ZW0tc3RhcnQgLT4gZXJyb3IgLT4gZmxvd1xuICBleHBsaWNpdC1rZXktc3RhcnQgLT4gZmxvd1xuICBtYXAtdmFsdWUtc3RhcnQgLT4gZmxvd1xuICBhbGlhcyAtPiBmbG93XG4gIHF1b3RlLXN0YXJ0IC0+IHF1b3RlZC1zY2FsYXIgLT4gZmxvd1xuICBjb21tYSAtPiBmbG93XG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIodHJ1ZSwgMCkgLT4gZmxvd1xuXG5xdW90ZWQtc2NhbGFyXG4gIHF1b3RlLWVuZCAtPiAuXG4gIFtlbHNlXSAtPiBxdW90ZWQtc2NhbGFyXG5cbmJsb2NrLXNjYWxhcihtaW4pXG4gIG5ld2xpbmUgKyBwZWVrKGluZGVudCA8IG1pbikgLT4gLlxuICBbZWxzZV0gLT4gYmxvY2stc2NhbGFyKG1pbilcblxucGxhaW4tc2NhbGFyKGlzLWZsb3csIG1pbilcbiAgc2NhbGFyLWVuZChpcy1mbG93KSAtPiAuXG4gIHBlZWsobmV3bGluZSArIChpbmRlbnQgPCBtaW4pKSAtPiAuXG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIobWluKVxuKi9cbmZ1bmN0aW9uIGlzRW1wdHkoY2gpIHtcbiAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmNvbnN0IGhleERpZ2l0cyA9IG5ldyBTZXQoJzAxMjM0NTY3ODlBQkNERUZhYmNkZWYnKTtcbmNvbnN0IHRhZ0NoYXJzID0gbmV3IFNldChcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LSM7Lz86QCY9KyRfLiF+KicoKVwiKTtcbmNvbnN0IGZsb3dJbmRpY2F0b3JDaGFycyA9IG5ldyBTZXQoJyxbXXt9Jyk7XG5jb25zdCBpbnZhbGlkQW5jaG9yQ2hhcnMgPSBuZXcgU2V0KCcgLFtde31cXG5cXHJcXHQnKTtcbmNvbnN0IGlzTm90QW5jaG9yQ2hhciA9IChjaCkgPT4gIWNoIHx8IGludmFsaWRBbmNob3JDaGFycy5oYXMoY2gpO1xuLyoqXG4gKiBTcGxpdHMgYW4gaW5wdXQgc3RyaW5nIGludG8gbGV4aWNhbCB0b2tlbnMsIGkuZS4gc21hbGxlciBzdHJpbmdzIHRoYXQgYXJlXG4gKiBlYXNpbHkgaWRlbnRpZmlhYmxlIGJ5IGB0b2tlbnMudG9rZW5UeXBlKClgLlxuICpcbiAqIExleGluZyBzdGFydHMgYWx3YXlzIGluIGEgXCJzdHJlYW1cIiBjb250ZXh0LiBJbmNvbXBsZXRlIGlucHV0IG1heSBiZSBidWZmZXJlZFxuICogdW50aWwgYSBjb21wbGV0ZSB0b2tlbiBjYW4gYmUgZW1pdHRlZC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBzbGljZXMgb2YgdGhlIG9yaWdpbmFsIGlucHV0LCB0aGUgZm9sbG93aW5nIGNvbnRyb2wgY2hhcmFjdGVyc1xuICogbWF5IGFsc28gYmUgZW1pdHRlZDpcbiAqXG4gKiAtIGBcXHgwMmAgKFN0YXJ0IG9mIFRleHQpOiBBIGRvY3VtZW50IHN0YXJ0cyB3aXRoIHRoZSBuZXh0IHRva2VuXG4gKiAtIGBcXHgxOGAgKENhbmNlbCk6IFVuZXhwZWN0ZWQgZW5kIG9mIGZsb3ctbW9kZSAoaW5kaWNhdGVzIGFuIGVycm9yKVxuICogLSBgXFx4MWZgIChVbml0IFNlcGFyYXRvcik6IE5leHQgdG9rZW4gaXMgYSBzY2FsYXIgdmFsdWVcbiAqIC0gYFxcdXtGRUZGfWAgKEJ5dGUgb3JkZXIgbWFyayk6IEVtaXR0ZWQgc2VwYXJhdGVseSBvdXRzaWRlIGRvY3VtZW50c1xuICovXG5jbGFzcyBMZXhlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJ1ZmZlciBtYXJrcyB0aGUgZW5kIG9mXG4gICAgICAgICAqIGFsbCBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hdEVuZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXhwbGljaXQgaW5kZW50IHNldCBpbiBibG9jayBzY2FsYXIgaGVhZGVyLCBhcyBhbiBvZmZzZXQgZnJvbSB0aGUgY3VycmVudFxuICAgICAgICAgKiBtaW5pbXVtIGluZGVudCwgc28gZS5nLiBzZXQgdG8gMSBmcm9tIGEgaGVhZGVyIGB8MitgLiBTZXQgdG8gLTEgaWYgbm90XG4gICAgICAgICAqIGV4cGxpY2l0bHkgc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCA9IC0xO1xuICAgICAgICAvKipcbiAgICAgICAgICogQmxvY2sgc2NhbGFycyB0aGF0IGluY2x1ZGUgYSArIChrZWVwKSBjaG9tcGluZyBpbmRpY2F0b3IgaW4gdGhlaXIgaGVhZGVyXG4gICAgICAgICAqIGluY2x1ZGUgdHJhaWxpbmcgZW1wdHkgbGluZXMsIHdoaWNoIGFyZSBvdGhlcndpc2UgZXhjbHVkZWQgZnJvbSB0aGVcbiAgICAgICAgICogc2NhbGFyJ3MgY29udGVudHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFyS2VlcCA9IGZhbHNlO1xuICAgICAgICAvKiogQ3VycmVudCBpbnB1dCAqL1xuICAgICAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBub3Rpbmcgd2hldGhlciB0aGUgbWFwIHZhbHVlIGluZGljYXRvciA6IGNhbiBpbW1lZGlhdGVseSBmb2xsb3cgdGhpc1xuICAgICAgICAgKiBub2RlIHdpdGhpbiBhIGZsb3cgY29udGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAvKiogQ291bnQgb2Ygc3Vycm91bmRpbmcgZmxvdyBjb2xsZWN0aW9uIGxldmVscy4gKi9cbiAgICAgICAgdGhpcy5mbG93TGV2ZWwgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWluaW11bSBsZXZlbCBvZiBpbmRlbnRhdGlvbiByZXF1aXJlZCBmb3IgbmV4dCBsaW5lcyB0byBiZSBwYXJzZWQgYXMgYVxuICAgICAgICAgKiBwYXJ0IG9mIHRoZSBjdXJyZW50IHNjYWxhciB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IDA7XG4gICAgICAgIC8qKiBJbmRlbnRhdGlvbiBsZXZlbCBvZiB0aGUgY3VycmVudCBsaW5lLiAqL1xuICAgICAgICB0aGlzLmluZGVudFZhbHVlID0gMDtcbiAgICAgICAgLyoqIFBvc2l0aW9uIG9mIHRoZSBuZXh0IFxcbiBjaGFyYWN0ZXIuICovXG4gICAgICAgIHRoaXMubGluZUVuZFBvcyA9IG51bGw7XG4gICAgICAgIC8qKiBTdG9yZXMgdGhlIHN0YXRlIG9mIHRoZSBsZXhlciBpZiByZWFjaGluZyB0aGUgZW5kIG9mIGluY3BvbXBsZXRlIGlucHV0ICovXG4gICAgICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgICAgIC8qKiBBIHBvaW50ZXIgdG8gYGJ1ZmZlcmA7IHRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBsZXhlci4gKi9cbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBZQU1MIHRva2VucyBmcm9tIHRoZSBgc291cmNlYCBzdHJpbmcuIElmIGBpbmNvbXBsZXRlYCxcbiAgICAgKiBhIHBhcnQgb2YgdGhlIGxhc3QgbGluZSBtYXkgYmUgbGVmdCBhcyBhIGJ1ZmZlciBmb3IgdGhlIG5leHQgY2FsbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgZ2VuZXJhdG9yIG9mIGxleGljYWwgdG9rZW5zXG4gICAgICovXG4gICAgKmxleChzb3VyY2UsIGluY29tcGxldGUgPSBmYWxzZSkge1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzb3VyY2UgaXMgbm90IGEgc3RyaW5nJyk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyID8gdGhpcy5idWZmZXIgKyBzb3VyY2UgOiBzb3VyY2U7XG4gICAgICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXRFbmQgPSAhaW5jb21wbGV0ZTtcbiAgICAgICAgbGV0IG5leHQgPSB0aGlzLm5leHQgPz8gJ3N0cmVhbSc7XG4gICAgICAgIHdoaWxlIChuZXh0ICYmIChpbmNvbXBsZXRlIHx8IHRoaXMuaGFzQ2hhcnMoMSkpKVxuICAgICAgICAgICAgbmV4dCA9IHlpZWxkKiB0aGlzLnBhcnNlTmV4dChuZXh0KTtcbiAgICB9XG4gICAgYXRMaW5lRW5kKCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zO1xuICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKVxuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICBpZiAoIWNoIHx8IGNoID09PSAnIycgfHwgY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChjaCA9PT0gJ1xccicpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbaSArIDFdID09PSAnXFxuJztcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjaGFyQXQobikge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5wb3MgKyBuXTtcbiAgICB9XG4gICAgY29udGludWVTY2FsYXIob2Zmc2V0KSB7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW29mZnNldF07XG4gICAgICAgIGlmICh0aGlzLmluZGVudE5leHQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgaW5kZW50ID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpbmRlbnQgKyBvZmZzZXRdO1xuICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmJ1ZmZlcltpbmRlbnQgKyBvZmZzZXQgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJ1xcbicgfHwgKCFuZXh0ICYmICF0aGlzLmF0RW5kKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldCArIGluZGVudCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2ggPT09ICdcXG4nIHx8IGluZGVudCA+PSB0aGlzLmluZGVudE5leHQgfHwgKCFjaCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICA/IG9mZnNldCArIGluZGVudFxuICAgICAgICAgICAgICAgIDogLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcuJykge1xuICAgICAgICAgICAgY29uc3QgZHQgPSB0aGlzLmJ1ZmZlci5zdWJzdHIob2Zmc2V0LCAzKTtcbiAgICAgICAgICAgIGlmICgoZHQgPT09ICctLS0nIHx8IGR0ID09PSAnLi4uJykgJiYgaXNFbXB0eSh0aGlzLmJ1ZmZlcltvZmZzZXQgKyAzXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIGdldExpbmUoKSB7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLmxpbmVFbmRQb3M7XG4gICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyB8fCAoZW5kICE9PSAtMSAmJiBlbmQgPCB0aGlzLnBvcykpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1xcbicsIHRoaXMucG9zKTtcbiAgICAgICAgICAgIHRoaXMubGluZUVuZFBvcyA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0RW5kID8gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMucG9zKSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcltlbmQgLSAxXSA9PT0gJ1xccicpXG4gICAgICAgICAgICBlbmQgLT0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnBvcywgZW5kKTtcbiAgICB9XG4gICAgaGFzQ2hhcnMobikge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3MgKyBuIDw9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgc2V0TmV4dChzdGF0ZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5uZXh0ID0gc3RhdGU7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwZWVrKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnBvcywgbik7XG4gICAgfVxuICAgICpwYXJzZU5leHQobmV4dCkge1xuICAgICAgICBzd2l0Y2ggKG5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmVhbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlU3RyZWFtKCk7XG4gICAgICAgICAgICBjYXNlICdsaW5lLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1N0YXJ0KCk7XG4gICAgICAgICAgICBjYXNlICdkb2MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZURvY3VtZW50KCk7XG4gICAgICAgICAgICBjYXNlICdmbG93JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VGbG93Q29sbGVjdGlvbigpO1xuICAgICAgICAgICAgY2FzZSAncXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUXVvdGVkU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICdwbGFpbi1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVBsYWluU2NhbGFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnBhcnNlU3RyZWFtKCkge1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ3N0cmVhbScpO1xuICAgICAgICBpZiAobGluZVswXSA9PT0gQk9NKSB7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICBsaW5lID0gbGluZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmVbMF0gPT09ICclJykge1xuICAgICAgICAgICAgbGV0IGRpckVuZCA9IGxpbmUubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGNzID0gbGluZS5pbmRleE9mKCcjJyk7XG4gICAgICAgICAgICB3aGlsZSAoY3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2ggPSBsaW5lW2NzIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpckVuZCA9IGNzIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjcyA9IGxpbmUuaW5kZXhPZignIycsIGNzICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGxpbmVbZGlyRW5kIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgICAgICBkaXJFbmQgLT0gMTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbiA9ICh5aWVsZCogdGhpcy5wdXNoQ291bnQoZGlyRW5kKSkgKyAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTsgLy8gcG9zc2libGUgY29tbWVudFxuICAgICAgICAgICAgdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgcmV0dXJuICdzdHJlYW0nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF0TGluZUVuZCgpKSB7XG4gICAgICAgICAgICBjb25zdCBzcCA9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBzcCk7XG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgcmV0dXJuICdzdHJlYW0nO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIERPQ1VNRU5UO1xuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICB9XG4gICAgKnBhcnNlTGluZVN0YXJ0KCkge1xuICAgICAgICBjb25zdCBjaCA9IHRoaXMuY2hhckF0KDApO1xuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnbGluZS1zdGFydCcpO1xuICAgICAgICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQgJiYgIXRoaXMuaGFzQ2hhcnMoNCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnbGluZS1zdGFydCcpO1xuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMucGVlaygzKTtcbiAgICAgICAgICAgIGlmICgocyA9PT0gJy0tLScgfHwgcyA9PT0gJy4uLicpICYmIGlzRW1wdHkodGhpcy5jaGFyQXQoMykpKSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMgPT09ICctLS0nID8gJ2RvYycgOiAnc3RyZWFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGVudFZhbHVlID0geWllbGQqIHRoaXMucHVzaFNwYWNlcyhmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmluZGVudE5leHQgPiB0aGlzLmluZGVudFZhbHVlICYmICFpc0VtcHR5KHRoaXMuY2hhckF0KDEpKSlcbiAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZW50VmFsdWU7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU3RhcnQoKTtcbiAgICB9XG4gICAgKnBhcnNlQmxvY2tTdGFydCgpIHtcbiAgICAgICAgY29uc3QgW2NoMCwgY2gxXSA9IHRoaXMucGVlaygyKTtcbiAgICAgICAgaWYgKCFjaDEgJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zdGFydCcpO1xuICAgICAgICBpZiAoKGNoMCA9PT0gJy0nIHx8IGNoMCA9PT0gJz8nIHx8IGNoMCA9PT0gJzonKSAmJiBpc0VtcHR5KGNoMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSAoeWllbGQqIHRoaXMucHVzaENvdW50KDEpKSArICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKTtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZW50VmFsdWUgKyAxO1xuICAgICAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSArPSBuO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnZG9jJztcbiAgICB9XG4gICAgKnBhcnNlRG9jdW1lbnQoKSB7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgaWYgKGxpbmUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdkb2MnKTtcbiAgICAgICAgbGV0IG4gPSB5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpO1xuICAgICAgICBzd2l0Y2ggKGxpbmVbbl0pIHtcbiAgICAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pO1xuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCA9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoVW50aWwoaXNOb3RBbmNob3JDaGFyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvYyc7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVF1b3RlZFNjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1NjYWxhcigpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwYXJzZUZsb3dDb2xsZWN0aW9uKCkge1xuICAgICAgICBsZXQgbmwsIHNwO1xuICAgICAgICBsZXQgaW5kZW50ID0gLTE7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG5sID0geWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgIGlmIChubCA+IDApIHtcbiAgICAgICAgICAgICAgICBzcCA9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50VmFsdWUgPSBpbmRlbnQgPSBzcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNwICs9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgIH0gd2hpbGUgKG5sICsgc3AgPiAwKTtcbiAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuZ2V0TGluZSgpO1xuICAgICAgICBpZiAobGluZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Zsb3cnKTtcbiAgICAgICAgaWYgKChpbmRlbnQgIT09IC0xICYmIGluZGVudCA8IHRoaXMuaW5kZW50TmV4dCAmJiBsaW5lWzBdICE9PSAnIycpIHx8XG4gICAgICAgICAgICAoaW5kZW50ID09PSAwICYmXG4gICAgICAgICAgICAgICAgKGxpbmUuc3RhcnRzV2l0aCgnLS0tJykgfHwgbGluZS5zdGFydHNXaXRoKCcuLi4nKSkgJiZcbiAgICAgICAgICAgICAgICBpc0VtcHR5KGxpbmVbM10pKSkge1xuICAgICAgICAgICAgLy8gQWxsb3dpbmcgZm9yIHRoZSB0ZXJtaW5hbCBdIG9yIH0gYXQgdGhlIHNhbWUgKHJhdGhlciB0aGFuIGdyZWF0ZXIpXG4gICAgICAgICAgICAvLyBpbmRlbnQgbGV2ZWwgYXMgdGhlIGluaXRpYWwgWyBvciB7IGlzIHRlY2huaWNhbGx5IGludmFsaWQsIGJ1dFxuICAgICAgICAgICAgLy8gZmFpbGluZyBoZXJlIHdvdWxkIGJlIHN1cnByaXNpbmcgdG8gdXNlcnMuXG4gICAgICAgICAgICBjb25zdCBhdEZsb3dFbmRNYXJrZXIgPSBpbmRlbnQgPT09IHRoaXMuaW5kZW50TmV4dCAtIDEgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCA9PT0gMSAmJlxuICAgICAgICAgICAgICAgIChsaW5lWzBdID09PSAnXScgfHwgbGluZVswXSA9PT0gJ30nKTtcbiAgICAgICAgICAgIGlmICghYXRGbG93RW5kTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsID0gMDtcbiAgICAgICAgICAgICAgICB5aWVsZCBGTE9XX0VORDtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgIHdoaWxlIChsaW5lW25dID09PSAnLCcpIHtcbiAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpO1xuICAgICAgICBzd2l0Y2ggKGxpbmVbbl0pIHtcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnfSc6XG4gICAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCAtPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dMZXZlbCA/ICdmbG93JyA6ICdkb2MnO1xuICAgICAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VRdW90ZWRTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJzonOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuY2hhckF0KDEpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZsb3dLZXkgfHwgaXNFbXB0eShuZXh0KSB8fCBuZXh0ID09PSAnLCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwYXJzZVF1b3RlZFNjYWxhcigpIHtcbiAgICAgICAgY29uc3QgcXVvdGUgPSB0aGlzLmNoYXJBdCgwKTtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMuYnVmZmVyLmluZGV4T2YocXVvdGUsIHRoaXMucG9zICsgMSk7XG4gICAgICAgIGlmIChxdW90ZSA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIHdoaWxlIChlbmQgIT09IC0xICYmIHRoaXMuYnVmZmVyW2VuZCArIDFdID09PSBcIidcIilcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKFwiJ1wiLCBlbmQgKyAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRvdWJsZS1xdW90ZVxuICAgICAgICAgICAgd2hpbGUgKGVuZCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuYnVmZmVyW2VuZCAtIDEgLSBuXSA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgICAgICAgICBuICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKG4gJSAyID09PSAwKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcIicsIGVuZCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE9ubHkgbG9va2luZyBmb3IgbmV3bGluZXMgd2l0aGluIHRoZSBxdW90ZXNcbiAgICAgICAgY29uc3QgcWIgPSB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcoMCwgZW5kKTtcbiAgICAgICAgbGV0IG5sID0gcWIuaW5kZXhPZignXFxuJywgdGhpcy5wb3MpO1xuICAgICAgICBpZiAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICB3aGlsZSAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3MgPSB0aGlzLmNvbnRpbnVlU2NhbGFyKG5sICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNzID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgbmwgPSBxYi5pbmRleE9mKCdcXG4nLCBjcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmwgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBlcnJvciBjYXVzZWQgYnkgYW4gdW5leHBlY3RlZCB1bmluZGVudFxuICAgICAgICAgICAgICAgIGVuZCA9IG5sIC0gKHFiW25sIC0gMV0gPT09ICdcXHInID8gMiA6IDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgncXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGVuZCArIDEsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvd0xldmVsID8gJ2Zsb3cnIDogJ2RvYyc7XG4gICAgfVxuICAgICpwYXJzZUJsb2NrU2NhbGFySGVhZGVyKCkge1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFySW5kZW50ID0gLTE7XG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJLZWVwID0gZmFsc2U7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3M7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgICAgICBpZiAoY2ggPT09ICcrJylcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrU2NhbGFyS2VlcCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjaCA+ICcwJyAmJiBjaCA8PSAnOScpXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCA9IE51bWJlcihjaCkgLSAxO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2ggIT09ICctJylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaFVudGlsKGNoID0+IGlzRW1wdHkoY2gpIHx8IGNoID09PSAnIycpO1xuICAgIH1cbiAgICAqcGFyc2VCbG9ja1NjYWxhcigpIHtcbiAgICAgICAgbGV0IG5sID0gdGhpcy5wb3MgLSAxOyAvLyBtYXkgYmUgLTEgaWYgdGhpcy5wb3MgPT09IDBcbiAgICAgICAgbGV0IGluZGVudCA9IDA7XG4gICAgICAgIGxldCBjaDtcbiAgICAgICAgbG9vcDogZm9yIChsZXQgaSA9IHRoaXMucG9zOyAoY2ggPSB0aGlzLmJ1ZmZlcltpXSk7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgICAgICAgbmwgPSBpO1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdcXHInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXNjYWxhcicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc2NhbGFyJyk7XG4gICAgICAgIGlmIChpbmRlbnQgPj0gdGhpcy5pbmRlbnROZXh0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ibG9ja1NjYWxhckluZGVudCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gaW5kZW50O1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCArICh0aGlzLmluZGVudE5leHQgPT09IDAgPyAxIDogdGhpcy5pbmRlbnROZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IHRoaXMuY29udGludWVTY2FsYXIobmwgKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY3MgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBubCA9IHRoaXMuYnVmZmVyLmluZGV4T2YoJ1xcbicsIGNzKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKG5sICE9PSAtMSk7XG4gICAgICAgICAgICBpZiAobmwgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zY2FsYXInKTtcbiAgICAgICAgICAgICAgICBubCA9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFpbGluZyBpbnN1ZmZpY2llbnRseSBpbmRlbnRlZCB0YWJzIGFyZSBpbnZhbGlkLlxuICAgICAgICAvLyBUbyBjYXRjaCB0aGF0IGR1cmluZyBwYXJzaW5nLCB3ZSBpbmNsdWRlIHRoZW0gaW4gdGhlIGJsb2NrIHNjYWxhciB2YWx1ZS5cbiAgICAgICAgbGV0IGkgPSBubCArIDE7XG4gICAgICAgIGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgIHdoaWxlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICBpZiAoY2ggPT09ICdcXHQnKSB7XG4gICAgICAgICAgICB3aGlsZSAoY2ggPT09ICdcXHQnIHx8IGNoID09PSAnICcgfHwgY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgICAgICBubCA9IGkgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLmJsb2NrU2NhbGFyS2VlcCkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGxldCBpID0gbmwgLSAxO1xuICAgICAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbLS1pXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2hhciA9IGk7IC8vIERyb3AgdGhlIGxpbmUgaWYgbGFzdCBjaGFyIG5vdCBtb3JlIGluZGVudGVkXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNoID09PSAnICcpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbLS1pXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXG4nICYmIGkgPj0gdGhpcy5wb3MgJiYgaSArIDEgKyBpbmRlbnQgPiBsYXN0Q2hhcilcbiAgICAgICAgICAgICAgICAgICAgbmwgPSBpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCBTQ0FMQVI7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KG5sICsgMSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgIH1cbiAgICAqcGFyc2VQbGFpblNjYWxhcigpIHtcbiAgICAgICAgY29uc3QgaW5GbG93ID0gdGhpcy5mbG93TGV2ZWwgPiAwO1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5wb3MgLSAxO1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zIC0gMTtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICB3aGlsZSAoKGNoID0gdGhpcy5idWZmZXJbKytpXSkpIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJzonKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eShuZXh0KSB8fCAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMobmV4dCkpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNFbXB0eShjaCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMuYnVmZmVyW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICcjJyB8fCAoaW5GbG93ICYmIGZsb3dJbmRpY2F0b3JDaGFycy5oYXMobmV4dCkpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb250aW51ZVNjYWxhcihpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcyA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaSA9IE1hdGgubWF4KGksIGNzIC0gMik7IC8vIHRvIGFkdmFuY2UsIGJ1dCBzdGlsbCBhY2NvdW50IGZvciAnICMnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGluRmxvdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKGNoKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgncGxhaW4tc2NhbGFyJyk7XG4gICAgICAgIHlpZWxkIFNDQUxBUjtcbiAgICAgICAgeWllbGQqIHRoaXMucHVzaFRvSW5kZXgoZW5kICsgMSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBpbkZsb3cgPyAnZmxvdycgOiAnZG9jJztcbiAgICB9XG4gICAgKnB1c2hDb3VudChuKSB7XG4gICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMucG9zLCBuKTtcbiAgICAgICAgICAgIHRoaXMucG9zICs9IG47XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hUb0luZGV4KGksIGFsbG93RW1wdHkpIHtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMucG9zLCBpKTtcbiAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHlpZWxkIHM7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSBzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiBzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGxvd0VtcHR5KVxuICAgICAgICAgICAgeWllbGQgJyc7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaEluZGljYXRvcnMoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoKHlpZWxkKiB0aGlzLnB1c2hUYWcoKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSkgK1xuICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuICAgICAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoeWllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcikpICtcbiAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpICtcbiAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCkpKTtcbiAgICAgICAgICAgIGNhc2UgJy0nOiAvLyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICBjYXNlICc/JzogLy8gdGhpcyBpcyBhbiBlcnJvciBvdXRzaWRlIGZsb3cgY29sbGVjdGlvbnNcbiAgICAgICAgICAgIGNhc2UgJzonOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5GbG93ID0gdGhpcy5mbG93TGV2ZWwgPiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoMSA9IHRoaXMuY2hhckF0KDEpO1xuICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5KGNoMSkgfHwgKGluRmxvdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKGNoMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5GbG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnROZXh0ID0gdGhpcy5pbmRlbnRWYWx1ZSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZmxvd0tleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh5aWVsZCogdGhpcy5wdXNoQ291bnQoMSkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hUYWcoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJBdCgxKSA9PT0gJzwnKSB7XG4gICAgICAgICAgICBsZXQgaSA9IHRoaXMucG9zICsgMjtcbiAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgd2hpbGUgKCFpc0VtcHR5KGNoKSAmJiBjaCAhPT0gJz4nKVxuICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChjaCA9PT0gJz4nID8gaSArIDEgOiBpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgaSA9IHRoaXMucG9zICsgMTtcbiAgICAgICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICAgICAgd2hpbGUgKGNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZ0NoYXJzLmhhcyhjaCkpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaCA9PT0gJyUnICYmXG4gICAgICAgICAgICAgICAgICAgIGhleERpZ2l0cy5oYXModGhpcy5idWZmZXJbaSArIDFdKSAmJlxuICAgICAgICAgICAgICAgICAgICBoZXhEaWdpdHMuaGFzKHRoaXMuYnVmZmVyW2kgKyAyXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsoaSArPSAzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaFRvSW5kZXgoaSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwdXNoTmV3bGluZSgpIHtcbiAgICAgICAgY29uc3QgY2ggPSB0aGlzLmJ1ZmZlclt0aGlzLnBvc107XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xccicgJiYgdGhpcy5jaGFyQXQoMSkgPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgICpwdXNoU3BhY2VzKGFsbG93VGFicykge1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zIC0gMTtcbiAgICAgICAgbGV0IGNoO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIH0gd2hpbGUgKGNoID09PSAnICcgfHwgKGFsbG93VGFicyAmJiBjaCA9PT0gJ1xcdCcpKTtcbiAgICAgICAgY29uc3QgbiA9IGkgLSB0aGlzLnBvcztcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5wb3MsIG4pO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICAqcHVzaFVudGlsKHRlc3QpIHtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcztcbiAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgIHdoaWxlICghdGVzdChjaCkpXG4gICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChpLCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBMZXhlciB9O1xuIiwiLyoqXG4gKiBUcmFja3MgbmV3bGluZXMgZHVyaW5nIHBhcnNpbmcgaW4gb3JkZXIgdG8gcHJvdmlkZSBhbiBlZmZpY2llbnQgQVBJIGZvclxuICogZGV0ZXJtaW5pbmcgdGhlIG9uZS1pbmRleGVkIGB7IGxpbmUsIGNvbCB9YCBwb3NpdGlvbiBmb3IgYW55IG9mZnNldFxuICogd2l0aGluIHRoZSBpbnB1dC5cbiAqL1xuY2xhc3MgTGluZUNvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpbmVTdGFydHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCBiZSBjYWxsZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIGNhbGxcbiAgICAgICAgICogYGxpbmVDb3VudGVyLmxpbmVTdGFydHMuc29ydCgpYCBiZWZvcmUgY2FsbGluZyBgbGluZVBvcygpYC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRkTmV3TGluZSA9IChvZmZzZXQpID0+IHRoaXMubGluZVN0YXJ0cy5wdXNoKG9mZnNldCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggYW5kIHJldHVybnMgdGhlIDEtaW5kZXhlZCB7IGxpbmUsIGNvbCB9XG4gICAgICAgICAqIHBvc2l0aW9uIG9mIGBvZmZzZXRgLiBJZiBgbGluZSA9PT0gMGAsIGBhZGROZXdMaW5lYCBoYXMgbmV2ZXIgYmVlblxuICAgICAgICAgKiBjYWxsZWQgb3IgYG9mZnNldGAgaXMgYmVmb3JlIHRoZSBmaXJzdCBrbm93biBuZXdsaW5lLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saW5lUG9zID0gKG9mZnNldCkgPT4ge1xuICAgICAgICAgICAgbGV0IGxvdyA9IDA7XG4gICAgICAgICAgICBsZXQgaGlnaCA9IHRoaXMubGluZVN0YXJ0cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pZCA9IChsb3cgKyBoaWdoKSA+PiAxOyAvLyBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZVN0YXJ0c1ttaWRdIDwgb2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmVTdGFydHNbbG93XSA9PT0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmU6IGxvdyArIDEsIGNvbDogMSB9O1xuICAgICAgICAgICAgaWYgKGxvdyA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5lOiAwLCBjb2w6IG9mZnNldCB9O1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmxpbmVTdGFydHNbbG93IC0gMV07XG4gICAgICAgICAgICByZXR1cm4geyBsaW5lOiBsb3csIGNvbDogb2Zmc2V0IC0gc3RhcnQgKyAxIH07XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBMaW5lQ291bnRlciB9O1xuIiwiaW1wb3J0IHsgdG9rZW5UeXBlIH0gZnJvbSAnLi9jc3QuanMnO1xuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tICcuL2xleGVyLmpzJztcblxuZnVuY3Rpb24gaW5jbHVkZXNUb2tlbihsaXN0LCB0eXBlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAobGlzdFtpXS50eXBlID09PSB0eXBlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZmluZE5vbkVtcHR5SW5kZXgobGlzdCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICBzd2l0Y2ggKGxpc3RbaV0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gaXNGbG93VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuPy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRQcmV2UHJvcHMocGFyZW50KSB7XG4gICAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnN0YXJ0O1xuICAgICAgICBjYXNlICdibG9jay1tYXAnOiB7XG4gICAgICAgICAgICBjb25zdCBpdCA9IHBhcmVudC5pdGVtc1twYXJlbnQuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICByZXR1cm4gaXQuc2VwID8/IGl0LnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50Lml0ZW1zW3BhcmVudC5pdGVtcy5sZW5ndGggLSAxXS5zdGFydDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4vKiogTm90ZTogTWF5IG1vZGlmeSBpbnB1dCBhcnJheSAqL1xuZnVuY3Rpb24gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpIHtcbiAgICBpZiAocHJldi5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBsZXQgaSA9IHByZXYubGVuZ3RoO1xuICAgIGxvb3A6IHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICBzd2l0Y2ggKHByZXZbaV0udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICBjYXNlICdzZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAocHJldlsrK2ldPy50eXBlID09PSAnc3BhY2UnKSB7XG4gICAgICAgIC8qIGxvb3AgKi9cbiAgICB9XG4gICAgcmV0dXJuIHByZXYuc3BsaWNlKGksIHByZXYubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGZpeEZsb3dTZXFJdGVtcyhmYykge1xuICAgIGlmIChmYy5zdGFydC50eXBlID09PSAnZmxvdy1zZXEtc3RhcnQnKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXQgb2YgZmMuaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdC5zZXAgJiZcbiAgICAgICAgICAgICAgICAhaXQudmFsdWUgJiZcbiAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ2V4cGxpY2l0LWtleS1pbmQnKSAmJlxuICAgICAgICAgICAgICAgICFpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgIGlmIChpdC5rZXkpXG4gICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gaXQua2V5O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmxvd1Rva2VuKGl0LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUuZW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaXQudmFsdWUuZW5kLCBpdC5zZXApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZS5lbmQgPSBpdC5zZXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaXQuc3RhcnQsIGl0LnNlcCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGl0LnNlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQSBZQU1MIGNvbmNyZXRlIHN5bnRheCB0cmVlIChDU1QpIHBhcnNlclxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBzcmM6IHN0cmluZyA9IC4uLlxuICogZm9yIChjb25zdCB0b2tlbiBvZiBuZXcgUGFyc2VyKCkucGFyc2Uoc3JjKSkge1xuICogICAvLyB0b2tlbjogVG9rZW5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRvIHVzZSB0aGUgcGFyc2VyIHdpdGggYSB1c2VyLXByb3ZpZGVkIGxleGVyOlxuICpcbiAqIGBgYHRzXG4gKiBmdW5jdGlvbiogcGFyc2Uoc291cmNlOiBzdHJpbmcsIGxleGVyOiBMZXhlcikge1xuICogICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKClcbiAqICAgZm9yIChjb25zdCBsZXhlbWUgb2YgbGV4ZXIubGV4KHNvdXJjZSkpXG4gKiAgICAgeWllbGQqIHBhcnNlci5uZXh0KGxleGVtZSlcbiAqICAgeWllbGQqIHBhcnNlci5lbmQoKVxuICogfVxuICpcbiAqIGNvbnN0IHNyYzogc3RyaW5nID0gLi4uXG4gKiBjb25zdCBsZXhlciA9IG5ldyBMZXhlcigpXG4gKiBmb3IgKGNvbnN0IHRva2VuIG9mIHBhcnNlKHNyYywgbGV4ZXIpKSB7XG4gKiAgIC8vIHRva2VuOiBUb2tlblxuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIFBhcnNlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9uTmV3TGluZSAtIElmIGRlZmluZWQsIGNhbGxlZCBzZXBhcmF0ZWx5IHdpdGggdGhlIHN0YXJ0IHBvc2l0aW9uIG9mXG4gICAgICogICBlYWNoIG5ldyBsaW5lIChpbiBgcGFyc2UoKWAsIGluY2x1ZGluZyB0aGUgc3RhcnQgb2YgaW5wdXQpLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9uTmV3TGluZSkge1xuICAgICAgICAvKiogSWYgdHJ1ZSwgc3BhY2UgYW5kIHNlcXVlbmNlIGluZGljYXRvcnMgY291bnQgYXMgaW5kZW50YXRpb24gKi9cbiAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAvKiogSWYgdHJ1ZSwgbmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx1ZSAqL1xuICAgICAgICB0aGlzLmF0U2NhbGFyID0gZmFsc2U7XG4gICAgICAgIC8qKiBDdXJyZW50IGluZGVudGF0aW9uIGxldmVsICovXG4gICAgICAgIHRoaXMuaW5kZW50ID0gMDtcbiAgICAgICAgLyoqIEN1cnJlbnQgb2Zmc2V0IHNpbmNlIHRoZSBzdGFydCBvZiBwYXJzaW5nICovXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgLyoqIE9uIHRoZSBzYW1lIGxpbmUgd2l0aCBhIGJsb2NrIG1hcCBrZXkgKi9cbiAgICAgICAgdGhpcy5vbktleUxpbmUgPSBmYWxzZTtcbiAgICAgICAgLyoqIFRvcCBpbmRpY2F0ZXMgdGhlIG5vZGUgdGhhdCdzIGN1cnJlbnRseSBiZWluZyBidWlsdCAqL1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIC8qKiBUaGUgc291cmNlIG9mIHRoZSBjdXJyZW50IHRva2VuLCBzZXQgaW4gcGFyc2UoKSAqL1xuICAgICAgICB0aGlzLnNvdXJjZSA9ICcnO1xuICAgICAgICAvKiogVGhlIHR5cGUgb2YgdGhlIGN1cnJlbnQgdG9rZW4sIHNldCBpbiBwYXJzZSgpICovXG4gICAgICAgIHRoaXMudHlwZSA9ICcnO1xuICAgICAgICAvLyBNdXN0IGJlIGRlZmluZWQgYWZ0ZXIgYG5leHQoKWBcbiAgICAgICAgdGhpcy5sZXhlciA9IG5ldyBMZXhlcigpO1xuICAgICAgICB0aGlzLm9uTmV3TGluZSA9IG9uTmV3TGluZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgYHNvdXJjZWAgYXMgYSBZQU1MIHN0cmVhbS5cbiAgICAgKiBJZiBgaW5jb21wbGV0ZWAsIGEgcGFydCBvZiB0aGUgbGFzdCBsaW5lIG1heSBiZSBsZWZ0IGFzIGEgYnVmZmVyIGZvciB0aGUgbmV4dCBjYWxsLlxuICAgICAqXG4gICAgICogRXJyb3JzIGFyZSBub3QgdGhyb3duLCBidXQgeWllbGRlZCBhcyBgeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlIH1gIHRva2Vucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgZ2VuZXJhdG9yIG9mIHRva2VucyByZXByZXNlbnRpbmcgZWFjaCBkaXJlY3RpdmUsIGRvY3VtZW50LCBhbmQgb3RoZXIgc3RydWN0dXJlLlxuICAgICAqL1xuICAgICpwYXJzZShzb3VyY2UsIGluY29tcGxldGUgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUgJiYgdGhpcy5vZmZzZXQgPT09IDApXG4gICAgICAgICAgICB0aGlzLm9uTmV3TGluZSgwKTtcbiAgICAgICAgZm9yIChjb25zdCBsZXhlbWUgb2YgdGhpcy5sZXhlci5sZXgoc291cmNlLCBpbmNvbXBsZXRlKSlcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLm5leHQobGV4ZW1lKTtcbiAgICAgICAgaWYgKCFpbmNvbXBsZXRlKVxuICAgICAgICAgICAgeWllbGQqIHRoaXMuZW5kKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkdmFuY2UgdGhlIHBhcnNlciBieSB0aGUgYHNvdXJjZWAgb2Ygb25lIGxleGljYWwgdG9rZW4uXG4gICAgICovXG4gICAgKm5leHQoc291cmNlKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBpZiAodGhpcy5hdFNjYWxhcikge1xuICAgICAgICAgICAgdGhpcy5hdFNjYWxhciA9IGZhbHNlO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gdG9rZW5UeXBlKHNvdXJjZSk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBOb3QgYSBZQU1MIHRva2VuOiAke3NvdXJjZX1gO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKHsgdHlwZTogJ2Vycm9yJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgbWVzc2FnZSwgc291cmNlIH0pO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnc2NhbGFyJykge1xuICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYXRTY2FsYXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gJ3NjYWxhcic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTmV3TGluZSh0aGlzLm9mZnNldCArIHNvdXJjZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0TmV3TGluZSAmJiBzb3VyY2VbMF0gPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4cGxpY2l0LWtleS1pbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0TmV3TGluZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RvYy1tb2RlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LWVycm9yLWVuZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQ2FsbCBhdCBlbmQgb2YgaW5wdXQgdG8gcHVzaCBvdXQgYW55IHJlbWFpbmluZyBjb25zdHJ1Y3Rpb25zICovXG4gICAgKmVuZCgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gMClcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgIH1cbiAgICBnZXQgc291cmNlVG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IHN0ID0ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzdDtcbiAgICB9XG4gICAgKnN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RvYy1lbmQnICYmICghdG9wIHx8IHRvcC50eXBlICE9PSAnZG9jLWVuZCcpKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZG9jLWVuZCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRvcClcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5zdHJlYW0oKTtcbiAgICAgICAgc3dpdGNoICh0b3AudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5kb2N1bWVudCh0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuc2NhbGFyKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5ibG9ja1NjYWxhcih0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuYmxvY2tNYXAodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmJsb2NrU2VxdWVuY2UodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmZsb3dDb2xsZWN0aW9uKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdkb2MtZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuZG9jdW1lbnRFbmQodG9wKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICB9XG4gICAgcGVlayhuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gbl07XG4gICAgfVxuICAgICpwb3AoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBlcnJvciA/PyB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdUcmllZCB0byBwb3AgYW4gZW1wdHkgc3RhY2snO1xuICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAnZXJyb3InLCBvZmZzZXQ6IHRoaXMub2Zmc2V0LCBzb3VyY2U6ICcnLCBtZXNzYWdlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHlpZWxkIHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdG9wID0gdGhpcy5wZWVrKDEpO1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInKSB7XG4gICAgICAgICAgICAgICAgLy8gQmxvY2sgc2NhbGFycyB1c2UgdGhlaXIgcGFyZW50IHJhdGhlciB0aGFuIGhlYWRlciBpbmRlbnRcbiAgICAgICAgICAgICAgICB0b2tlbi5pbmRlbnQgPSAnaW5kZW50JyBpbiB0b3AgPyB0b3AuaW5kZW50IDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nICYmIHRvcC50eXBlID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIGFsbCBpbmRlbnQgZm9yIHRvcC1sZXZlbCBmbG93IGNvbGxlY3Rpb25zXG4gICAgICAgICAgICAgICAgdG9rZW4uaW5kZW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZmxvdy1jb2xsZWN0aW9uJylcbiAgICAgICAgICAgICAgICBmaXhGbG93U2VxSXRlbXModG9rZW4pO1xuICAgICAgICAgICAgc3dpdGNoICh0b3AudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgICAgICAgICAgdG9wLnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgICAgIHRvcC5wcm9wcy5wdXNoKHRva2VuKTsgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2stbWFwJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSAhaXQuZXhwbGljaXRLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXQgPSB0b3AuaXRlbXNbdG9wLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwgdmFsdWU6IHRva2VuIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdCA9IHRvcC5pdGVtc1t0b3AuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiB0b2tlbiwgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRvcC50eXBlID09PSAnZG9jdW1lbnQnIHx8XG4gICAgICAgICAgICAgICAgdG9wLnR5cGUgPT09ICdibG9jay1tYXAnIHx8XG4gICAgICAgICAgICAgICAgdG9wLnR5cGUgPT09ICdibG9jay1zZXEnKSAmJlxuICAgICAgICAgICAgICAgICh0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJyB8fCB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gdG9rZW4uaXRlbXNbdG9rZW4uaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QgJiZcbiAgICAgICAgICAgICAgICAgICAgIWxhc3Quc2VwICYmXG4gICAgICAgICAgICAgICAgICAgICFsYXN0LnZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIGxhc3Quc3RhcnQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmaW5kTm9uRW1wdHlJbmRleChsYXN0LnN0YXJ0KSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRva2VuLmluZGVudCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC5zdGFydC5ldmVyeShzdCA9PiBzdC50eXBlICE9PSAnY29tbWVudCcgfHwgc3QuaW5kZW50IDwgdG9rZW4uaW5kZW50KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcC50eXBlID09PSAnZG9jdW1lbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLmVuZCA9IGxhc3Quc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IGxhc3Quc3RhcnQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLml0ZW1zLnNwbGljZSgtMSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgICpzdHJlYW0oKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkaXJlY3RpdmUtbGluZSc6XG4gICAgICAgICAgICAgICAgeWllbGQgeyB0eXBlOiAnZGlyZWN0aXZlJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgc291cmNlOiB0aGlzLnNvdXJjZSB9O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2J5dGUtb3JkZXItbWFyayc6XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuc291cmNlVG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnZG9jLW1vZGUnOlxuICAgICAgICAgICAgY2FzZSAnZG9jLXN0YXJ0Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RvY3VtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZG9jLXN0YXJ0JylcbiAgICAgICAgICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGRvYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgbWVzc2FnZTogYFVuZXhwZWN0ZWQgJHt0aGlzLnR5cGV9IHRva2VuIGluIFlBTUwgc3RyZWFtYCxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgKmRvY3VtZW50KGRvYykge1xuICAgICAgICBpZiAoZG9jLnZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmxpbmVFbmQoZG9jKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6IHtcbiAgICAgICAgICAgICAgICBpZiAoZmluZE5vbkVtcHR5SW5kZXgoZG9jLnN0YXJ0KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkb2Muc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUoZG9jKTtcbiAgICAgICAgaWYgKGJ2KVxuICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGJ2KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmV4cGVjdGVkICR7dGhpcy50eXBlfSB0b2tlbiBpbiBZQU1MIGRvY3VtZW50YCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgICpzY2FsYXIoc2NhbGFyKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdtYXAtdmFsdWUtaW5kJykge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGdldFByZXZQcm9wcyh0aGlzLnBlZWsoMikpO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICBsZXQgc2VwO1xuICAgICAgICAgICAgaWYgKHNjYWxhci5lbmQpIHtcbiAgICAgICAgICAgICAgICBzZXAgPSBzY2FsYXIuZW5kO1xuICAgICAgICAgICAgICAgIHNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2FsYXIuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlcCA9IFt0aGlzLnNvdXJjZVRva2VuXTtcbiAgICAgICAgICAgIGNvbnN0IG1hcCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHNjYWxhci5vZmZzZXQsXG4gICAgICAgICAgICAgICAgaW5kZW50OiBzY2FsYXIuaW5kZW50LFxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBzY2FsYXIsIHNlcCB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSA9IG1hcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5saW5lRW5kKHNjYWxhcik7XG4gICAgfVxuICAgICpibG9ja1NjYWxhcihzY2FsYXIpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgc2NhbGFyLnByb3BzLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBzY2FsYXIuc291cmNlID0gdGhpcy5zb3VyY2U7XG4gICAgICAgICAgICAgICAgLy8gYmxvY2stc2NhbGFyIHNvdXJjZSBpbmNsdWRlcyB0cmFpbGluZyBuZXdsaW5lXG4gICAgICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJykgKyAxO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmwgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKHRoaXMub2Zmc2V0ICsgbmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmwgPSB0aGlzLnNvdXJjZS5pbmRleE9mKCdcXG4nLCBubCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpibG9ja01hcChtYXApIHtcbiAgICAgICAgY29uc3QgaXQgPSBtYXAuaXRlbXNbbWFwLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAvLyBpdC5zZXAgaXMgdHJ1ZS1pc2ggaWYgcGFpciBhbHJlYWR5IGhhcyBrZXkgb3IgOiBzZXBhcmF0b3JcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9ICdlbmQnIGluIGl0LnZhbHVlID8gaXQudmFsdWUuZW5kIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gQXJyYXkuaXNBcnJheShlbmQpID8gZW5kW2VuZC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3Q/LnR5cGUgPT09ICdjb21tZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZD8ucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdEluZGVudGVkQ29tbWVudChpdC5zdGFydCwgbWFwLmluZGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBtYXAuaXRlbXNbbWFwLml0ZW1zLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcHJldj8udmFsdWU/LmVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbmQsIGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmRlbnQgPj0gbWFwLmluZGVudCkge1xuICAgICAgICAgICAgY29uc3QgYXRNYXBJbmRlbnQgPSAhdGhpcy5vbktleUxpbmUgJiYgdGhpcy5pbmRlbnQgPT09IG1hcC5pbmRlbnQ7XG4gICAgICAgICAgICBjb25zdCBhdE5leHRJdGVtID0gYXRNYXBJbmRlbnQgJiZcbiAgICAgICAgICAgICAgICAoaXQuc2VwIHx8IGl0LmV4cGxpY2l0S2V5KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSAhPT0gJ3NlcS1pdGVtLWluZCc7XG4gICAgICAgICAgICAvLyBGb3IgZW1wdHkgbm9kZXMsIGFzc2lnbiBuZXdsaW5lLXNlcGFyYXRlZCBub3QgaW5kZW50ZWQgZW1wdHkgdG9rZW5zIHRvIGZvbGxvd2luZyBub2RlXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBbXTtcbiAgICAgICAgICAgIGlmIChhdE5leHRJdGVtICYmIGl0LnNlcCAmJiAhaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBubCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXQuc2VwLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ID0gaXQuc2VwW2ldO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5sLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3QuaW5kZW50ID4gbWFwLmluZGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmwubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmwubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmwubGVuZ3RoID49IDIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaXQuc2VwLnNwbGljZShubFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndGFnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0TmV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdC5zZXAgJiYgIWl0LmV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuZXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF0TmV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBleHBsaWNpdEtleTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dLCBleHBsaWNpdEtleTogdHJ1ZSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFwLXZhbHVlLWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5leHBsaWNpdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ25ld2xpbmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmNsdWRlc1Rva2VuKGl0LnNlcCwgJ21hcC12YWx1ZS1pbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRmxvd1Rva2VuKGl0LmtleSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlbihpdC5zZXAsICduZXdsaW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaXQua2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcCA9IGl0LnNlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgZ3VhcmQgaXMgd3JvbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlIGd1YXJkIGlzIHdyb25nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaXQuc2VwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleSwgc2VwIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGFydC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGFjdHVhbGx5IGF0IG5leHQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcCA9IGl0LnNlcC5jb25jYXQoc3RhcnQsIHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnZhbHVlIHx8IGF0TmV4dEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaCh7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5jbHVkZXNUb2tlbihpdC5zZXAsICdtYXAtdmFsdWUtaW5kJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0OiBbXSwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnYWxpYXMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcyA9IHRoaXMuZmxvd1NjYWxhcih0aGlzLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXROZXh0SXRlbSB8fCBpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCwga2V5OiBmcywgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ2ID0gdGhpcy5zdGFydEJsb2NrVmFsdWUobWFwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnYudHlwZSA9PT0gJ2Jsb2NrLXNlcScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0LmV4cGxpY2l0S2V5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlbihpdC5zZXAsICduZXdsaW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYmxvY2stc2VxLWluZCBvbiBzYW1lIGxpbmUgd2l0aCBrZXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF0TWFwSW5kZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICB9XG4gICAgKmJsb2NrU2VxdWVuY2Uoc2VxKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gc2VxLml0ZW1zW3NlcS5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSAnZW5kJyBpbiBpdC52YWx1ZSA/IGl0LnZhbHVlLmVuZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IEFycmF5LmlzQXJyYXkoZW5kKSA/IGVuZFtlbmQubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Py50eXBlID09PSAnY29tbWVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ/LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdEluZGVudGVkQ29tbWVudChpdC5zdGFydCwgc2VxLmluZGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBzZXEuaXRlbXNbc2VxLml0ZW1zLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcHJldj8udmFsdWU/LmVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbmQsIGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSB8fCB0aGlzLmluZGVudCA8PSBzZXEuaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZW50ICE9PSBzZXEuaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUgfHwgaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ3NlcS1pdGVtLWluZCcpKVxuICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmRlbnQgPiBzZXEuaW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKHNlcSk7XG4gICAgICAgICAgICBpZiAoYnYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goYnYpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgIH1cbiAgICAqZmxvd0NvbGxlY3Rpb24oZmMpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmYy5pdGVtc1tmYy5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2Zsb3ctZXJyb3ItZW5kJykge1xuICAgICAgICAgICAgbGV0IHRvcDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB0b3AgPSB0aGlzLnBlZWsoMSk7XG4gICAgICAgICAgICB9IHdoaWxlICh0b3AgJiYgdG9wLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmYy5lbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0IHx8IGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmMuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gdGhpcy5mbG93U2NhbGFyKHRoaXMudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goZnMpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtZW5kJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LXNlcS1lbmQnOlxuICAgICAgICAgICAgICAgICAgICBmYy5lbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShmYyk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgaWYgKGJ2KVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnBlZWsoMik7XG4gICAgICAgICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdibG9jay1tYXAnICYmXG4gICAgICAgICAgICAgICAgKCh0aGlzLnR5cGUgPT09ICdtYXAtdmFsdWUtaW5kJyAmJiBwYXJlbnQuaW5kZW50ID09PSBmYy5pbmRlbnQpIHx8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnR5cGUgPT09ICduZXdsaW5lJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXBhcmVudC5pdGVtc1twYXJlbnQuaXRlbXMubGVuZ3RoIC0gMV0uc2VwKSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT09ICdtYXAtdmFsdWUtaW5kJyAmJlxuICAgICAgICAgICAgICAgIHBhcmVudC50eXBlICE9PSAnZmxvdy1jb2xsZWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICBmaXhGbG93U2VxSXRlbXMoZmMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcCA9IGZjLmVuZC5zcGxpY2UoMSwgZmMuZW5kLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBmYy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogZmMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogZmMsIHNlcCB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSA9IG1hcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLmxpbmVFbmQoZmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZsb3dTY2FsYXIodHlwZSkge1xuICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUpIHtcbiAgICAgICAgICAgIGxldCBubCA9IHRoaXMuc291cmNlLmluZGV4T2YoJ1xcbicpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChubCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKHRoaXMub2Zmc2V0ICsgbmwpO1xuICAgICAgICAgICAgICAgIG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJywgbmwpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGFydEJsb2NrVmFsdWUocGFyZW50KSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dTY2FsYXIodGhpcy50eXBlKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhci1oZWFkZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1zY2FsYXInLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBwcm9wczogW3RoaXMuc291cmNlVG9rZW5dLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctbWFwLXN0YXJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmxvdy1jb2xsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc291cmNlVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdzZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1zZXEnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzoge1xuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJldlByb3BzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICAgICAgc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBleHBsaWNpdEtleTogdHJ1ZSB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzoge1xuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJldlByb3BzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGF0SW5kZW50ZWRDb21tZW50KHN0YXJ0LCBpbmRlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ2NvbW1lbnQnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5pbmRlbnQgPD0gaW5kZW50KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gc3RhcnQuZXZlcnkoc3QgPT4gc3QudHlwZSA9PT0gJ25ld2xpbmUnIHx8IHN0LnR5cGUgPT09ICdzcGFjZScpO1xuICAgIH1cbiAgICAqZG9jdW1lbnRFbmQoZG9jRW5kKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09ICdkb2MtbW9kZScpIHtcbiAgICAgICAgICAgIGlmIChkb2NFbmQuZW5kKVxuICAgICAgICAgICAgICAgIGRvY0VuZC5lbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkb2NFbmQuZW5kID0gW3RoaXMuc291cmNlVG9rZW5dO1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpsaW5lRW5kKHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdjb21tYSc6XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZG9jLWVuZCc6XG4gICAgICAgICAgICBjYXNlICdmbG93LXNlcS1lbmQnOlxuICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtZW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIGFsbCBvdGhlciB2YWx1ZXMgYXJlIGVycm9yc1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZW5kID0gW3RoaXMuc291cmNlVG9rZW5dO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IFBhcnNlciB9O1xuIiwiaW1wb3J0IHsgQ29tcG9zZXIgfSBmcm9tICcuL2NvbXBvc2UvY29tcG9zZXIuanMnO1xuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICcuL2RvYy9Eb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBwcmV0dGlmeUVycm9yLCBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuL2xvZy5qcyc7XG5pbXBvcnQgeyBpc0RvY3VtZW50IH0gZnJvbSAnLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBMaW5lQ291bnRlciB9IGZyb20gJy4vcGFyc2UvbGluZS1jb3VudGVyLmpzJztcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJy4vcGFyc2UvcGFyc2VyLmpzJztcblxuZnVuY3Rpb24gcGFyc2VPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV0dHlFcnJvcnMgPSBvcHRpb25zLnByZXR0eUVycm9ycyAhPT0gZmFsc2U7XG4gICAgY29uc3QgbGluZUNvdW50ZXIgPSBvcHRpb25zLmxpbmVDb3VudGVyIHx8IChwcmV0dHlFcnJvcnMgJiYgbmV3IExpbmVDb3VudGVyKCkpIHx8IG51bGw7XG4gICAgcmV0dXJuIHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9O1xufVxuLyoqXG4gKiBQYXJzZSB0aGUgaW5wdXQgYXMgYSBzdHJlYW0gb2YgWUFNTCBkb2N1bWVudHMuXG4gKlxuICogRG9jdW1lbnRzIHNob3VsZCBiZSBzZXBhcmF0ZWQgZnJvbSBlYWNoIG90aGVyIGJ5IGAuLi5gIG9yIGAtLS1gIG1hcmtlciBsaW5lcy5cbiAqXG4gKiBAcmV0dXJucyBJZiBhbiBlbXB0eSBgZG9jc2AgYXJyYXkgaXMgcmV0dXJuZWQsIGl0IHdpbGwgYmUgb2YgdHlwZVxuICogICBFbXB0eVN0cmVhbSBhbmQgY29udGFpbiBhZGRpdGlvbmFsIHN0cmVhbSBpbmZvcm1hdGlvbi4gSW5cbiAqICAgVHlwZVNjcmlwdCwgeW91IHNob3VsZCB1c2UgYCdlbXB0eScgaW4gZG9jc2AgYXMgYSB0eXBlIGd1YXJkIGZvciBpdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VBbGxEb2N1bWVudHMoc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxpbmVDb3VudGVyLCBwcmV0dHlFcnJvcnMgfSA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKGxpbmVDb3VudGVyPy5hZGROZXdMaW5lKTtcbiAgICBjb25zdCBjb21wb3NlciA9IG5ldyBDb21wb3NlcihvcHRpb25zKTtcbiAgICBjb25zdCBkb2NzID0gQXJyYXkuZnJvbShjb21wb3Nlci5jb21wb3NlKHBhcnNlci5wYXJzZShzb3VyY2UpKSk7XG4gICAgaWYgKHByZXR0eUVycm9ycyAmJiBsaW5lQ291bnRlcilcbiAgICAgICAgZm9yIChjb25zdCBkb2Mgb2YgZG9jcykge1xuICAgICAgICAgICAgZG9jLmVycm9ycy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgICAgICAgICAgZG9jLndhcm5pbmdzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgIH1cbiAgICBpZiAoZG9jcy5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gZG9jcztcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgeyBlbXB0eTogdHJ1ZSB9LCBjb21wb3Nlci5zdHJlYW1JbmZvKCkpO1xufVxuLyoqIFBhcnNlIGFuIGlucHV0IHN0cmluZyBpbnRvIGEgc2luZ2xlIFlBTUwuRG9jdW1lbnQgKi9cbmZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxpbmVDb3VudGVyLCBwcmV0dHlFcnJvcnMgfSA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKGxpbmVDb3VudGVyPy5hZGROZXdMaW5lKTtcbiAgICBjb25zdCBjb21wb3NlciA9IG5ldyBDb21wb3NlcihvcHRpb25zKTtcbiAgICAvLyBgZG9jYCBpcyBhbHdheXMgc2V0IGJ5IGNvbXBvc2UuZW5kKHRydWUpIGF0IHRoZSB2ZXJ5IGxhdGVzdFxuICAgIGxldCBkb2MgPSBudWxsO1xuICAgIGZvciAoY29uc3QgX2RvYyBvZiBjb21wb3Nlci5jb21wb3NlKHBhcnNlci5wYXJzZShzb3VyY2UpLCB0cnVlLCBzb3VyY2UubGVuZ3RoKSkge1xuICAgICAgICBpZiAoIWRvYylcbiAgICAgICAgICAgIGRvYyA9IF9kb2M7XG4gICAgICAgIGVsc2UgaWYgKGRvYy5vcHRpb25zLmxvZ0xldmVsICE9PSAnc2lsZW50Jykge1xuICAgICAgICAgICAgZG9jLmVycm9ycy5wdXNoKG5ldyBZQU1MUGFyc2VFcnJvcihfZG9jLnJhbmdlLnNsaWNlKDAsIDIpLCAnTVVMVElQTEVfRE9DUycsICdTb3VyY2UgY29udGFpbnMgbXVsdGlwbGUgZG9jdW1lbnRzOyBwbGVhc2UgdXNlIFlBTUwucGFyc2VBbGxEb2N1bWVudHMoKScpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV0dHlFcnJvcnMgJiYgbGluZUNvdW50ZXIpIHtcbiAgICAgICAgZG9jLmVycm9ycy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgICAgICBkb2Mud2FybmluZ3MuZm9yRWFjaChwcmV0dGlmeUVycm9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvYztcbn1cbmZ1bmN0aW9uIHBhcnNlKHNyYywgcmV2aXZlciwgb3B0aW9ucykge1xuICAgIGxldCBfcmV2aXZlciA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3Jldml2ZXIgPSByZXZpdmVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmV2aXZlciAmJiB0eXBlb2YgcmV2aXZlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJldml2ZXI7XG4gICAgfVxuICAgIGNvbnN0IGRvYyA9IHBhcnNlRG9jdW1lbnQoc3JjLCBvcHRpb25zKTtcbiAgICBpZiAoIWRvYylcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgZG9jLndhcm5pbmdzLmZvckVhY2god2FybmluZyA9PiB3YXJuKGRvYy5vcHRpb25zLmxvZ0xldmVsLCB3YXJuaW5nKSk7XG4gICAgaWYgKGRvYy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKVxuICAgICAgICAgICAgdGhyb3cgZG9jLmVycm9yc1swXTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZG9jLmVycm9ycyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gZG9jLnRvSlMoT2JqZWN0LmFzc2lnbih7IHJldml2ZXI6IF9yZXZpdmVyIH0sIG9wdGlvbnMpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgX3JlcGxhY2VyID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nIHx8IEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucy5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zdCBpbmRlbnQgPSBNYXRoLnJvdW5kKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zID0gaW5kZW50IDwgMSA/IHVuZGVmaW5lZCA6IGluZGVudCA+IDggPyB7IGluZGVudDogOCB9IDogeyBpbmRlbnQgfTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgeyBrZWVwVW5kZWZpbmVkIH0gPSBvcHRpb25zID8/IHJlcGxhY2VyID8/IHt9O1xuICAgICAgICBpZiAoIWtlZXBVbmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNEb2N1bWVudCh2YWx1ZSkgJiYgIV9yZXBsYWNlcilcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgRG9jdW1lbnQodmFsdWUsIF9yZXBsYWNlciwgb3B0aW9ucykudG9TdHJpbmcob3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IHBhcnNlLCBwYXJzZUFsbERvY3VtZW50cywgcGFyc2VEb2N1bWVudCwgc3RyaW5naWZ5IH07XG4iLCJpbXBvcnQgdHlwZSB7IFJlYXNvbmluZ0VmZm9ydCB9IGZyb20gJy4vdHlwZXMnO1xuXG50eXBlIE1lc3NhZ2UgPSB7IGNvbnRlbnQ6IHN0cmluZzsgcm9sZTogJ3N5c3RlbScgfCAndXNlcicgfCAnYXNzaXN0YW50JyB9O1xuXG5jb25zdCBPUEVOQUlfTU9ERUxfUFJFRklYRVMgPSBbJ2dwdC0nLCAnbzEnLCAnbzMnLCAnbzQnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwaVVybEFuZEtleShtb2RlbDogc3RyaW5nKTogeyB1cmw6IHN0cmluZzsgYXBpS2V5OiBzdHJpbmcgfSB7XG4gIGxldCB1cmw6IHN0cmluZztcbiAgbGV0IGFwaUtleTogc3RyaW5nO1xuICBpZiAobW9kZWwuc3RhcnRzV2l0aCgnZ2VtaW5pLScpKSB7XG4gICAgdXJsID0gJ2h0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS9vcGVuYWkvY2hhdC9jb21wbGV0aW9ucyc7XG4gICAgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVkgfHwgJyc7XG4gIH0gZWxzZSBpZiAoT1BFTkFJX01PREVMX1BSRUZJWEVTLnNvbWUoKHApID0+IG1vZGVsLnN0YXJ0c1dpdGgocCkpKSB7XG4gICAgdXJsID0gJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucyc7XG4gICAgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVkgfHwgJyc7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihgVW5rbm93biBtb2RlbDogJHttb2RlbH1gKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbiAgcmV0dXJuIHsgdXJsLCBhcGlLZXkgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGxMbG1BcGkoXG4gIHVybDogc3RyaW5nLFxuICBhcGlLZXk6IHN0cmluZyxcbiAgbW9kZWw6IHN0cmluZyxcbiAgbWVzc2FnZXM6IE1lc3NhZ2VbXSxcbiAgcmVhc29uaW5nRWZmb3J0PzogUmVhc29uaW5nRWZmb3J0XG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIWFwaUtleSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYEFQSSBrZXkgZm9yICR7bW9kZWx9IGlzIG5vdCBzZXQuYCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG5cbiAgY29uc3QgcmVxdWVzdEJvZHk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge1xuICAgIG1vZGVsLFxuICAgIG1lc3NhZ2VzLFxuICB9O1xuICBpZiAocmVhc29uaW5nRWZmb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXF1ZXN0Qm9keS5yZWFzb25pbmdfZWZmb3J0ID0gcmVhc29uaW5nRWZmb3J0O1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2FwaUtleX1gLFxuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICB9KTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIGNvbnNvbGUuZXJyb3IoYExMTSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gKCR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7ZXJyb3JUZXh0fWApO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgY29uc29sZS5sb2coYCR7bW9kZWx9OmAsIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpO1xuICByZXR1cm4gcmVzdWx0LmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50O1xufVxuIiwiLyoqXG4gKiBQYXJzZXMgYSBjb21tYW5kIGxpbmUgc3RyaW5nIGludG8gYW4gYXJyYXkgb2YgYXJndW1lbnRzLCBwcmVzZXJ2aW5nIHF1b3RlZCBzdHJpbmdzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlczpcbiAqIC0gU3BhY2Utc2VwYXJhdGVkIGFyZ3VtZW50c1xuICogLSBEb3VibGUtcXVvdGVkIHN0cmluZ3MgKHByZXNlcnZlcyBzcGFjZXMgd2l0aGluKVxuICogLSBTaW5nbGUtcXVvdGVkIHN0cmluZ3MgKHByZXNlcnZlcyBzcGFjZXMgd2l0aGluKVxuICpcbiAqIEBwYXJhbSBhcmdzU3RyaW5nIFRoZSBjb21tYW5kIGxpbmUgc3RyaW5nIHRvIHBhcnNlXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwYXJzZWQgYXJndW1lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbW1hbmRMaW5lQXJncyhhcmdzU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGlmICghYXJnc1N0cmluZykgcmV0dXJuIFtdO1xuXG4gIGNvbnN0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcbiAgbGV0IGN1cnJlbnQgPSAnJztcbiAgbGV0IGluRG91YmxlUXVvdGUgPSBmYWxzZTtcbiAgbGV0IGluU2luZ2xlUXVvdGUgPSBmYWxzZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3NTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gYXJnc1N0cmluZ1tpXTtcblxuICAgIC8vIEhhbmRsZSBxdW90ZXNcbiAgICBpZiAoY2hhciA9PT0gJ1wiJyAmJiAhaW5TaW5nbGVRdW90ZSkge1xuICAgICAgaW5Eb3VibGVRdW90ZSA9ICFpbkRvdWJsZVF1b3RlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGNoYXIgPT09IFwiJ1wiICYmICFpbkRvdWJsZVF1b3RlKSB7XG4gICAgICBpblNpbmdsZVF1b3RlID0gIWluU2luZ2xlUXVvdGU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgc3BhY2VzIChvbmx5IHNwbGl0IG9uIHNwYWNlcyBvdXRzaWRlIG9mIHF1b3RlcylcbiAgICBpZiAoY2hhciA9PT0gJyAnICYmICFpbkRvdWJsZVF1b3RlICYmICFpblNpbmdsZVF1b3RlKSB7XG4gICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9ICcnO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIGNoYXJhY3RlciB0byBjdXJyZW50IGFyZ3VtZW50XG4gICAgY3VycmVudCArPSBjaGFyO1xuICB9XG5cbiAgLy8gQWRkIHRoZSBsYXN0IGFyZ3VtZW50IGlmIHRoZXJlIGlzIG9uZVxuICBpZiAoY3VycmVudCkge1xuICAgIHJlc3VsdC5wdXNoKGN1cnJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIEhUTUwtc3R5bGUgY29tbWVudHMgZnJvbSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gbWFya2Rvd25Db250ZW50IFRoZSBzdHJpbmcgY29udGFpbmluZyBtYXJrZG93biBjb250ZW50XG4gKiBAcmV0dXJucyBUaGUgc3RyaW5nIHdpdGggSFRNTCBjb21tZW50cyByZW1vdmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEh0bWxDb21tZW50cyhtYXJrZG93bkNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBtYXJrZG93bkNvbnRlbnQucmVwbGFjZSgvPCEtLVtcXHNcXFNdKj8tLT4vZywgJycpO1xufVxuIiwiLy8gV2Ugc2hvdWxkIHNwZWNpZnkgdGhlIGxhbmd1YWdlLiBjZi4gaHR0cHM6Ly9naXRodWIuY29tL0FpZGVyLUFJL2FpZGVyL2lzc3Vlcy8zOTcxXG5leHBvcnQgY29uc3QgREVGQVVMVF9BSURFUl9FWFRSQV9BUkdTID1cbiAgJy0tbW9kZWwgZ2VtaW5pL2dlbWluaS0yLjUtcHJvLXByZXZpZXctMDUtMDYgLS1lZGl0LWZvcm1hdCBkaWZmLWZlbmNlZCAtLWNoYXQtbGFuZ3VhZ2UgRW5nbGlzaCc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVBPTUlYX0VYVFJBX0FSR1MgPSAnLS1jb21wcmVzcyAtLXJlbW92ZS1lbXB0eS1saW5lcyAtLWluY2x1ZGUgXCJzcmMvKiovKi57dHMsdHN4fSwqKi8qLm1kXCInO1xuIiwiaW1wb3J0IHR5cGUgeyBTcGF3bk9wdGlvbnNXaXRob3V0U3RkaW8gfSBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHR5cGUgeyBTcGF3blN5bmNSZXR1cm5zIH0gZnJvbSAnbm9kZTpjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IHNwYXduIH0gZnJvbSAnbm9kZTpjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBhbnNpcyBmcm9tICdhbnNpcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5Db21tYW5kKFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M6IHN0cmluZ1tdLFxuICBvcHRpb25zPzogU3Bhd25PcHRpb25zV2l0aG91dFN0ZGlvICYgeyBpZ25vcmVFeGl0U3RhdHVzPzogYm9vbGVhbiB9XG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB7IGlnbm9yZUV4aXRTdGF0dXMsIC4uLnNwYXduT3B0aW9ucyB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgY29uc29sZS5pbmZvKGFuc2lzLmdyZWVuKGAkICR7Y29tbWFuZH0gJHthcmdzfWApKTtcbiAgY29uc29sZS5pbmZvKCdzdGRvdXQ6IC0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICBjb25zdCByZXQgPSBhd2FpdCBzcGF3bkFzeW5jKGNvbW1hbmQsIGFyZ3MsIHNwYXduT3B0aW9ucyk7XG4gIGNvbnN0IHN0ZGVyciA9IHJldC5zdGRlcnIudHJpbSgpO1xuICBpZiAoc3RkZXJyKSB7XG4gICAgY29uc29sZS5pbmZvKCdzdGRlcnI6IC0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICAgIGNvbnNvbGUuaW5mbyhhbnNpcy55ZWxsb3coc3RkZXJyKSk7XG4gIH1cbiAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICBjb25zb2xlLmluZm8oYW5zaXMubWFnZW50YShgRXhpdCBjb2RlOiAke3JldC5zdGF0dXN9XFxuYCkpO1xuICBpZiAoIWlnbm9yZUV4aXRTdGF0dXMgJiYgcmV0LnN0YXR1cyAhPT0gMCAmJiByZXQuc3RhdHVzICE9PSBudWxsKSB7XG4gICAgcHJvY2Vzcy5leGl0KHJldC5zdGF0dXMpO1xuICB9XG4gIHJldHVybiByZXQuc3Rkb3V0O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3Bhd25Bc3luYyhcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzPzogUmVhZG9ubHlBcnJheTxzdHJpbmc+LFxuICBvcHRpb25zPzogU3Bhd25PcHRpb25zV2l0aG91dFN0ZGlvXG4pOiBQcm9taXNlPE9taXQ8U3Bhd25TeW5jUmV0dXJuczxzdHJpbmc+LCAnb3V0cHV0JyB8ICdlcnJvcic+PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb2MgPSBzcGF3bihjb21tYW5kLCBhcmdzID8/IFtdLCBvcHRpb25zKTtcbiAgICAgIC8vIGBzZXRFbmNvZGluZ2AgaXMgdW5kZWZpbmVkIGluIEJ1blxuICAgICAgcHJvYy5zdGRvdXQ/LnNldEVuY29kaW5nPy4oJ3V0ZjgnKTtcbiAgICAgIHByb2Muc3RkZXJyPy5zZXRFbmNvZGluZz8uKCd1dGY4Jyk7XG5cbiAgICAgIGxldCBzdGRvdXQgPSAnJztcbiAgICAgIGxldCBzdGRlcnIgPSAnJztcbiAgICAgIHByb2Muc3Rkb3V0Py5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGRhdGEpO1xuICAgICAgICBzdGRvdXQgKz0gZGF0YTtcbiAgICAgIH0pO1xuICAgICAgcHJvYy5zdGRlcnI/Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgc3RkZXJyICs9IGRhdGE7XG4gICAgICB9KTtcblxuICAgICAgcHJvYy5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgICAgcHJvYy5vbignY2xvc2UnLCAoY29kZTogbnVtYmVyIHwgbnVsbCwgc2lnbmFsOiBOb2RlSlMuU2lnbmFscyB8IG51bGwpID0+IHtcbiAgICAgICAgaWYgKHByb2MucGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdQcm9jZXNzIGhhcyBubyBwaWQuJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgcGlkOiBwcm9jLnBpZCxcbiAgICAgICAgICAgIHN0ZG91dCxcbiAgICAgICAgICAgIHN0ZGVycixcbiAgICAgICAgICAgIHN0YXR1czogY29kZSxcbiAgICAgICAgICAgIHNpZ25hbCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLXByb21pc2UtcmVqZWN0LWVycm9yc1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IFlBTUwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyBjYWxsTGxtQXBpLCBnZXRBcGlVcmxBbmRLZXkgfSBmcm9tICcuL2xsbSc7XG5pbXBvcnQgdHlwZSB7IFJlYXNvbmluZ0VmZm9ydCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDb21tYW5kTGluZUFyZ3MgfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgREVGQVVMVF9SRVBPTUlYX0VYVFJBX0FSR1MgfSBmcm9tICcuL2RlZmF1bHRPcHRpb25zJztcbmltcG9ydCB7IHJ1bkNvbW1hbmQgfSBmcm9tICcuL3NwYXduJztcblxuY29uc3QgUkVQT01JWF9GSUxFX05BTUUgPSAncmVwb21peC5yZXN1bHQnO1xuXG5leHBvcnQgdHlwZSBSZXNvbHV0aW9uUGxhbiA9IHtcbiAgcGxhbj86IHN0cmluZztcbiAgZmlsZVBhdGhzOiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwbGFuQ29kZUNoYW5nZXMoXG4gIG1vZGVsOiBzdHJpbmcsXG4gIGlzc3VlQ29udGVudDogc3RyaW5nLFxuICBkZXRhaWxlZFBsYW46IGJvb2xlYW4sXG4gIHJlYXNvbmluZ0VmZm9ydD86IFJlYXNvbmluZ0VmZm9ydCxcbiAgcmVwb21peEV4dHJhQXJncz86IHN0cmluZ1xuKTogUHJvbWlzZTxSZXNvbHV0aW9uUGxhbj4ge1xuICBjb25zdCB7IHVybCwgYXBpS2V5IH0gPSBnZXRBcGlVcmxBbmRLZXkobW9kZWwpO1xuXG4gIC8vIEJhc2UgcmVwb21peCBjb21tYW5kIGFyZ3VtZW50c1xuICBjb25zdCByZXBvbWl4QXJncyA9IFsnLS15ZXMnLCAncmVwb21peEBsYXRlc3QnLCAnLS1vdXRwdXQnLCBSRVBPTUlYX0ZJTEVfTkFNRV07XG4gIHJlcG9taXhBcmdzLnB1c2goLi4ucGFyc2VDb21tYW5kTGluZUFyZ3MocmVwb21peEV4dHJhQXJncyB8fCBERUZBVUxUX1JFUE9NSVhfRVhUUkFfQVJHUykpO1xuXG4gIGF3YWl0IHJ1bkNvbW1hbmQoJ25weCcsIHJlcG9taXhBcmdzKTtcbiAgY29uc3QgY29udGV4dCA9IGZzLnJlYWRGaWxlU3luYyhSRVBPTUlYX0ZJTEVfTkFNRSwgJ3V0ZjgnKTtcbiAgdm9pZCBmcy5wcm9taXNlcy5ybShSRVBPTUlYX0ZJTEVfTkFNRSwgeyBmb3JjZTogdHJ1ZSB9KTtcblxuICBjb25zdCBwbGFubmluZ1Rhc2sgPSBkZXRhaWxlZFBsYW5cbiAgICA/IGBcbi0gSWRlbnRpZnkgdGhlIGZpbGVzIGZyb20gdGhlIHByb3ZpZGVkIGxpc3QgdGhhdCB3aWxsIG5lZWQgdG8gYmUgbW9kaWZpZWQgdG8gaW1wbGVtZW50IHRoZSBwbGFuIGFuZCByZXNvbHZlIHRoZSBpc3N1ZS5gXG4gICAgOiAnJztcbiAgY29uc3QgcGxhbkZvcm1hdCA9IGRldGFpbGVkUGxhblxuICAgID8gYCMgUGxhbiB0byBSZXNvbHZlIHRoZSBJc3N1ZVxuXG4xLiA8RGVzY3JpcHRpb24gb2Ygc3RlcCAxPlxuMi4gPERlc2NyaXB0aW9uIG9mIHN0ZXAgMj5cbjMuIC4uLlxuXG5gXG4gICAgOiAnJztcblxuICBjb25zdCBwcm9tcHQgPSBgXG5SZXZpZXcgdGhlIGZvbGxvd2luZyBHaXRIdWIgaXNzdWUgYW5kIHRoZSBmb2xsb3dpbmcgbGlzdCBvZiBhdmFpbGFibGUgZmlsZSBwYXRocyBhbmQgdGhlaXIgY29udGVudHMuXG5CYXNlZCBvbiB0aGlzIGluZm9ybWF0aW9uLCBwbGVhc2UgcGVyZm9ybSB0aGUgZm9sbG93aW5nIHRhc2tzOlxuXG4tIENyZWF0ZSBhIHN0ZXAtYnktc3RlcCBwbGFuIG91dGxpbmluZyBob3cgdG8gYWRkcmVzcyB0aGUgR2l0SHViIGlzc3VlLiBUaGUgcGxhbiBtdXN0IGZvY3VzIG9uIHdyaXRpbmcgY29kZSBleGNsdWRpbmcgdGVzdHMuXG4ke3BsYW5uaW5nVGFza31cblxuR2l0SHViIElzc3VlOlxuXFxgXFxgXFxgXFxgeW1sXG4ke1lBTUwuc3RyaW5naWZ5KGlzc3VlQ29udGVudCkudHJpbSgpfVxuXFxgXFxgXFxgXFxgXG5cbkF2YWlsYWJsZSBmaWxlczogVGhlIHVzZXIgd2lsbCBwcm92aWRlIHRoaXMgYXMgYSBzZXBhcmF0ZSBtZXNzYWdlLlxuXG5QbGVhc2UgZm9ybWF0IHlvdXIgcmVzcG9uc2UgYXMgZm9sbG93czpcblxcYFxcYFxcYFxuJHtwbGFuRm9ybWF0fSMgRmlsZSBQYXRocyB0byBiZSBNb2RpZmllZFxuXG4tIFxcYDxmaWxlUGF0aDE+XFxgXG4tIFxcYDxmaWxlUGF0aDI+XFxgXG4tIC4uLlxuXFxgXFxgXFxgXG5cbkVuc3VyZSB0aGF0IHRoZSBmaWxlIHBhdGhzIGFyZSBleGFjdGx5IGFzIHByb3ZpZGVkIGluIHRoZSBpbnB1dC5cbmAudHJpbSgpO1xuXG4gIGNvbnNvbGUuaW5mbyhgR2VuZXJhdGluZyBwbGFuIHdpdGggJHttb2RlbH0gKHJlYXNvbmluZyBlZmZvcnQ6ICR7cmVhc29uaW5nRWZmb3J0fSkgLi4uYCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FsbExsbUFwaShcbiAgICB1cmwsXG4gICAgYXBpS2V5LFxuICAgIG1vZGVsLFxuICAgIFtcbiAgICAgIHtcbiAgICAgICAgcm9sZTogJ3N5c3RlbScsXG4gICAgICAgIGNvbnRlbnQ6IHByb21wdCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgY29udGVudDogY29udGV4dCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZWFzb25pbmdFZmZvcnRcbiAgKTtcbiAgY29uc29sZS5pbmZvKCdQbGFubmluZyBjb21wbGV0ZSEnKTtcblxuICBjb25zdCBwbGFuSGVhZGVyID0gJyMgUGxhbiB0byBSZXNvbHZlIHRoZSBJc3N1ZSc7XG4gIGNvbnN0IGZpbGVzSGVhZGVyID0gJyMgRmlsZSBQYXRocyB0byBiZSBNb2RpZmllZCc7XG5cbiAgbGV0IHBsYW46IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgbGV0IGZpbGVQYXRoczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdCBwbGFuSGVhZGVySW5kZXggPSByZXNwb25zZS5pbmRleE9mKHBsYW5IZWFkZXIpO1xuICBjb25zdCBmaWxlc0hlYWRlckluZGV4ID0gcmVzcG9uc2UuaW5kZXhPZihmaWxlc0hlYWRlcik7XG5cbiAgaWYgKHBsYW5IZWFkZXJJbmRleCAhPT0gLTEpIHtcbiAgICBjb25zdCBwbGFuQ29udGVudFN0YXJ0SW5kZXggPSBwbGFuSGVhZGVySW5kZXggKyBwbGFuSGVhZGVyLmxlbmd0aDtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGVuZCBvZiB0aGUgcGxhbiBjb250ZW50LiBJdCdzIGVpdGhlciB0aGUgc3RhcnQgb2YgdGhlIGZpbGVzIGhlYWRlciBvciBlbmQgb2YgdGhlIHJlc3BvbnNlLlxuICAgIGNvbnN0IHBsYW5Db250ZW50RW5kSW5kZXggPSBmaWxlc0hlYWRlckluZGV4ICE9PSAtMSA/IGZpbGVzSGVhZGVySW5kZXggOiByZXNwb25zZS5sZW5ndGg7XG4gICAgcGxhbiA9IHJlc3BvbnNlLnNsaWNlKHBsYW5Db250ZW50U3RhcnRJbmRleCwgcGxhbkNvbnRlbnRFbmRJbmRleCkudHJpbSgpO1xuICB9XG5cbiAgaWYgKGZpbGVzSGVhZGVySW5kZXggIT09IC0xKSB7XG4gICAgY29uc3QgZmlsZXNDb250ZW50U3RhcnRJbmRleCA9IGZpbGVzSGVhZGVySW5kZXggKyBmaWxlc0hlYWRlci5sZW5ndGg7XG4gICAgLy8gVGhlIGZpbGVzIHNlY3Rpb24gZ29lcyBmcm9tIGFmdGVyIGl0cyBoZWFkZXIgdG8gdGhlIGVuZCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgY29uc3QgZmlsZXNTZWN0aW9uVGV4dCA9IHJlc3BvbnNlLnNsaWNlKGZpbGVzQ29udGVudFN0YXJ0SW5kZXgpLnRyaW0oKTtcblxuICAgIGNvbnN0IGZpbGVQYXRoUmVnZXggPSAvXFxCLVxccypgPyhbXmBcXG5dKylgPy9nO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBbLi4uZmlsZXNTZWN0aW9uVGV4dC5tYXRjaEFsbChmaWxlUGF0aFJlZ2V4KV07XG4gICAgZmlsZVBhdGhzID0gbWF0Y2hlcy5tYXAoKG1hdGNoKSA9PiBtYXRjaFsxXS50cmltKCkpO1xuICB9XG5cbiAgcmV0dXJuIHsgcGxhbiwgZmlsZVBhdGhzIH07XG59XG4iLCJpbXBvcnQgY2hpbGRfcHJvY2VzcyBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGFuc2lzIGZyb20gJ2Fuc2lzJztcbmltcG9ydCBZQU1MIGZyb20gJ3lhbWwnO1xuaW1wb3J0IHsgcGxhbkNvZGVDaGFuZ2VzIH0gZnJvbSAnLi9wbGFuJztcbmltcG9ydCB0eXBlIHsgR2l0SHViSXNzdWUsIFJlYXNvbmluZ0VmZm9ydCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDb21tYW5kTGluZUFyZ3MsIHN0cmlwSHRtbENvbW1lbnRzIH0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7IERFRkFVTFRfQUlERVJfRVhUUkFfQVJHUyB9IGZyb20gJy4vZGVmYXVsdE9wdGlvbnMnO1xuaW1wb3J0IHsgY29uZmlndXJlR2l0VXNlckRldGFpbHNJZk5lZWRlZCB9IGZyb20gJy4vcHJvZmlsZSc7XG5pbXBvcnQgeyBydW5Db21tYW5kIH0gZnJvbSAnLi9zcGF3bic7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIG1haW4gZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYWluT3B0aW9ucyB7XG4gIC8qKiBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBhaWRlciBjb21tYW5kICovXG4gIGFpZGVyRXh0cmFBcmdzPzogc3RyaW5nO1xuICAvKiogV2hldGhlciB0byBnZW5lcmF0ZSBhIGRldGFpbGVkIHBsYW4gKi9cbiAgZGV0YWlsZWRQbGFuOiBib29sZWFuO1xuICAvKiogUnVuIHdpdGhvdXQgbWFraW5nIGFjdHVhbCBjaGFuZ2VzIChubyBicmFuY2ggY3JlYXRpb24sIG5vIFBSKSAqL1xuICBkcnlSdW46IGJvb2xlYW47XG4gIC8qKiBHaXRIdWIgaXNzdWUgbnVtYmVyIHRvIHByb2Nlc3MgKi9cbiAgaXNzdWVOdW1iZXI6IG51bWJlcjtcbiAgLyoqIExMTSBtb2RlbCB0byB1c2UgZm9yIHBsYW5uaW5nIGNvZGUgY2hhbmdlcyAqL1xuICBwbGFubmluZ01vZGVsPzogc3RyaW5nO1xuICAvKiogTGV2ZWwgb2YgcmVhc29uaW5nIGVmZm9ydCBmb3IgdGhlIExMTSAqL1xuICByZWFzb25pbmdFZmZvcnQ/OiBSZWFzb25pbmdFZmZvcnQ7XG4gIC8qKiBFeHRyYSBhcmd1bWVudHMgZm9yIHJlcG9taXggd2hlbiBnZW5lcmF0aW5nIGNvbnRleHQgKi9cbiAgcmVwb21peEV4dHJhQXJncz86IHN0cmluZztcbn1cblxuY29uc3QgTUFYX0FOU1dFUl9MRU5HVEggPSA2NTAwMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4oe1xuICBhaWRlckV4dHJhQXJncyxcbiAgZGV0YWlsZWRQbGFuLFxuICBkcnlSdW4sXG4gIGlzc3VlTnVtYmVyLFxuICBwbGFubmluZ01vZGVsLFxuICByZWFzb25pbmdFZmZvcnQsXG4gIHJlcG9taXhFeHRyYUFyZ3MsXG59OiBNYWluT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoZHJ5UnVuKSB7XG4gICAgY29uc29sZS5pbmZvKGFuc2lzLnllbGxvdygnUnVubmluZyBpbiBkcnktcnVuIG1vZGUuIE5vIGJyYW5jaGVzIG9yIFBScyB3aWxsIGJlIGNyZWF0ZWQuJykpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGNvbmZpZ3VyZUdpdFVzZXJEZXRhaWxzSWZOZWVkZWQoKTtcbiAgfVxuXG4gIGF3YWl0IHJ1bkNvbW1hbmQoJ3B5dGhvbicsIFsnLW0nLCAncGlwJywgJ2luc3RhbGwnLCAnYWlkZXItaW5zdGFsbCddKTtcbiAgYXdhaXQgcnVuQ29tbWFuZCgndXYnLCBbJ3Rvb2wnLCAndW5pbnN0YWxsJywgJ2FpZGVyLWNoYXQnXSwgeyBpZ25vcmVFeGl0U3RhdHVzOiB0cnVlIH0pO1xuICBhd2FpdCBydW5Db21tYW5kKCdhaWRlci1pbnN0YWxsJywgW10pO1xuICBhd2FpdCBydW5Db21tYW5kKCd1dicsIFsndG9vbCcsICdydW4nLCAnLS1mcm9tJywgJ2FpZGVyLWNoYXQnLCAncGlwJywgJ2luc3RhbGwnLCAnYm90bzMnXSk7XG4gIC8vIGF3YWl0IHJ1bkNvbW1hbmQoJ2FpZGVyJywgWyctLWluc3RhbGwtbWFpbi1icmFuY2gnLCAnLS15ZXMtYWx3YXlzJ10pO1xuXG4gIGNvbnN0IGlzc3VlUmVzdWx0ID0gYXdhaXQgcnVuQ29tbWFuZCgnZ2gnLCBbXG4gICAgJ2lzc3VlJyxcbiAgICAndmlldycsXG4gICAgaXNzdWVOdW1iZXIudG9TdHJpbmcoKSxcbiAgICAnLS1qc29uJyxcbiAgICAnYXV0aG9yLHRpdGxlLGJvZHksbGFiZWxzLGNvbW1lbnRzJyxcbiAgXSk7XG4gIGNvbnN0IGlzc3VlOiBHaXRIdWJJc3N1ZSA9IEpTT04ucGFyc2UoaXNzdWVSZXN1bHQpO1xuXG4gIC8vIGlmICghaXNzdWUubGFiZWxzLnNvbWUoKGxhYmVsKSA9PiBsYWJlbC5uYW1lLmluY2x1ZGVzKCdhaS1wcicpKSkge1xuICAvLyAgIGNvbnNvbGUud2FybihhbnNpcy55ZWxsb3coYElzc3VlICMke2lzc3VlTnVtYmVyfSBpcyBtaXNzaW5nIHRoZSByZXF1aXJlZCAnYWktcHInIGxhYmVsLiBQcm9jZXNzaW5nIHNraXBwZWQuYCkpO1xuICAvLyAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgLy8gfVxuXG4gIGNvbnN0IGNsZWFuZWRJc3N1ZUJvZHkgPSBzdHJpcEh0bWxDb21tZW50cyhpc3N1ZS5ib2R5KTtcbiAgY29uc3QgaXNzdWVPYmplY3QgPSB7XG4gICAgYXV0aG9yOiBpc3N1ZS5hdXRob3IubG9naW4sXG4gICAgdGl0bGU6IGlzc3VlLnRpdGxlLFxuICAgIGRlc2NyaXB0aW9uOiBjbGVhbmVkSXNzdWVCb2R5LFxuICAgIGNvbW1lbnRzOiBpc3N1ZS5jb21tZW50cy5tYXAoKGMpID0+ICh7XG4gICAgICBhdXRob3I6IGMuYXV0aG9yLmxvZ2luLFxuICAgICAgYm9keTogYy5ib2R5LFxuICAgIH0pKSxcbiAgfTtcbiAgY29uc3QgaXNzdWVUZXh0ID0gWUFNTC5zdHJpbmdpZnkoaXNzdWVPYmplY3QpLnRyaW0oKTtcbiAgY29uc3QgcmVzb2x1dGlvblBsYW4gPVxuICAgIHBsYW5uaW5nTW9kZWwgJiYgKGF3YWl0IHBsYW5Db2RlQ2hhbmdlcyhwbGFubmluZ01vZGVsLCBpc3N1ZVRleHQsIGRldGFpbGVkUGxhbiwgcmVhc29uaW5nRWZmb3J0LCByZXBvbWl4RXh0cmFBcmdzKSk7XG4gIGNvbnN0IHBsYW5UZXh0ID1cbiAgICByZXNvbHV0aW9uUGxhbiAmJiAncGxhbicgaW4gcmVzb2x1dGlvblBsYW4gJiYgcmVzb2x1dGlvblBsYW4ucGxhblxuICAgICAgPyBgXG4jIFBsYW5cblxuJHtyZXNvbHV0aW9uUGxhbi5wbGFufVxuYC50cmltKClcbiAgICAgIDogJyc7XG4gIGNvbnN0IHByb21wdCA9IGBcbk1vZGlmeSB0aGUgY29kZSB0byByZXNvbHZlIHRoZSBmb2xsb3dpbmcgR2l0SHViIGlzc3VlOlxuXFxgXFxgXFxgXFxgeW1sXG4ke2lzc3VlVGV4dH1cblxcYFxcYFxcYFxcYFxuXG4ke3BsYW5UZXh0fVxuYC50cmltKCk7XG4gIGNvbnNvbGUubG9nKCdSZXNvbHV0aW9uIHBsYW46JywgcmVzb2x1dGlvblBsYW4pO1xuXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgY29uc3QgYnJhbmNoTmFtZSA9IGBhaS1wci0ke2lzc3VlTnVtYmVyfS0ke25vdy5nZXRGdWxsWWVhcigpfV8ke2dldFR3b0RpZ2l0cyhub3cuZ2V0TW9udGgoKSArIDEpfSR7Z2V0VHdvRGlnaXRzKG5vdy5nZXREYXRlKCkpfV8ke2dldFR3b0RpZ2l0cyhub3cuZ2V0SG91cnMoKSl9JHtnZXRUd29EaWdpdHMobm93LmdldE1pbnV0ZXMoKSl9JHtnZXRUd29EaWdpdHMobm93LmdldFNlY29uZHMoKSl9YDtcbiAgaWYgKCFkcnlSdW4pIHtcbiAgICBhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ3N3aXRjaCcsICctQycsIGJyYW5jaE5hbWVdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KGBXb3VsZCBjcmVhdGUgYnJhbmNoOiAke2JyYW5jaE5hbWV9YCkpO1xuICB9XG5cbiAgLy8gQnVpbGQgYWlkZXIgY29tbWFuZCBhcmd1bWVudHNcbiAgY29uc3QgYWlkZXJBcmdzID0gW1xuICAgICctLXllcy1hbHdheXMnLFxuICAgICctLW5vLWNoZWNrLXVwZGF0ZScsXG4gICAgJy0tbm8tZ2l0aWdub3JlJyxcbiAgICAnLS1uby1zaG93LW1vZGVsLXdhcm5pbmdzJyxcbiAgICAnLS1uby1zaG93LXJlbGVhc2Utbm90ZXMnLFxuICBdO1xuICBhaWRlckFyZ3MucHVzaCguLi5wYXJzZUNvbW1hbmRMaW5lQXJncyhhaWRlckV4dHJhQXJncyB8fCBERUZBVUxUX0FJREVSX0VYVFJBX0FSR1MpKTtcbiAgaWYgKGRyeVJ1bikge1xuICAgIGFpZGVyQXJncy5wdXNoKCctLWRyeS1ydW4nKTtcbiAgfVxuICBhaWRlckFyZ3MucHVzaCgnLS1tZXNzYWdlJywgcHJvbXB0KTtcbiAgaWYgKHJlc29sdXRpb25QbGFuICYmICdmaWxlUGF0aHMnIGluIHJlc29sdXRpb25QbGFuKSB7XG4gICAgYWlkZXJBcmdzLnB1c2goLi4ucmVzb2x1dGlvblBsYW4uZmlsZVBhdGhzKTtcbiAgfVxuICBjb25zdCBhaWRlclJlc3VsdCA9IGF3YWl0IHJ1bkNvbW1hbmQoJ2FpZGVyJywgYWlkZXJBcmdzLCB7XG4gICAgZW52OiB7IC4uLnByb2Nlc3MuZW52LCBOT19DT0xPUjogJzEnIH0sXG4gIH0pO1xuICBjb25zdCBhaWRlckFuc3dlciA9IGFpZGVyUmVzdWx0LnRyaW0oKTtcblxuICAvLyBUcnkgY29tbWl0aW5nIGNoYW5nZXMgYmVjYXVzZSBhaWRlciBtYXkgZmFpbCB0byBjb21taXQgY2hhbmdlcyBkdWUgdG8gcHJlLWNvbW1pdCBob29rc1xuICBhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ2NvbW1pdCcsICctbScsIGBmaXg6IGNsb3NlICMke2lzc3VlTnVtYmVyfWAsICctLW5vLXZlcmlmeSddLCB7IGlnbm9yZUV4aXRTdGF0dXM6IHRydWUgfSk7XG4gIGlmICghZHJ5UnVuKSB7XG4gICAgYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydwdXNoJywgJ29yaWdpbicsIGJyYW5jaE5hbWUsICctLW5vLXZlcmlmeSddKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KGBXb3VsZCBwdXNoIGJyYW5jaDogJHticmFuY2hOYW1lfSB0byBvcmlnaW5gKSk7XG4gIH1cblxuICAvLyBDcmVhdGUgYSBQUiB1c2luZyBHaXRIdWIgQ0xJXG4gIGNvbnN0IHByVGl0bGUgPSBnZXRIZWFkZXJPZkZpcnN0Q29tbWl0KCk7XG4gIGxldCBwckJvZHkgPSBgQ2xvc2VzICMke2lzc3VlTnVtYmVyfVxuXG4ke3BsYW5UZXh0fVxuYDtcbiAgcHJCb2R5ICs9IGBcbiMgQWlkZXIgTG9nXG5cblxcYFxcYFxcYFxcYFxuJHthaWRlckFuc3dlci5zbGljZSgwLCBNQVhfQU5TV0VSX0xFTkdUSCAtIHByQm9keS5sZW5ndGgpfVxuXFxgXFxgXFxgXFxgYDtcbiAgcHJCb2R5ID0gcHJCb2R5LnJlcGxhY2VBbGwoLyg/OlxccypcXG4pezIsfS9nLCAnXFxuXFxuJykudHJpbSgpO1xuICBpZiAoIWRyeVJ1bikge1xuICAgIGNvbnN0IHJlcG9OYW1lID0gZ2V0R2l0UmVwb05hbWUoKTtcbiAgICBhd2FpdCBydW5Db21tYW5kKCdnaCcsIFsncHInLCAnY3JlYXRlJywgJy0tdGl0bGUnLCBwclRpdGxlLCAnLS1ib2R5JywgcHJCb2R5LCAnLS1yZXBvJywgcmVwb05hbWVdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KGBXb3VsZCBjcmVhdGUgUFIgd2l0aCB0aXRsZTogJHtwclRpdGxlfWApKTtcbiAgICBjb25zb2xlLmluZm8oYW5zaXMueWVsbG93KGBQUiBib2R5IHdvdWxkIGluY2x1ZGUgdGhlIGFpZGVyIHJlc3BvbnNlIGFuZCBjbG9zZSBpc3N1ZSAjJHtpc3N1ZU51bWJlcn1gKSk7XG4gIH1cblxuICBjb25zb2xlLmluZm8oYFxcbklzc3VlICMke2lzc3VlTnVtYmVyfSBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LmApO1xuICBjb25zb2xlLmluZm8oJ0FXU19SRUdJT05fTkFNRTonLCBwcm9jZXNzLmVudi5BV1NfUkVHSU9OX05BTUUpO1xufVxuXG5mdW5jdGlvbiBnZXRUd29EaWdpdHModmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnBhZFN0YXJ0KDIsICcwJyk7XG59XG5cbmZ1bmN0aW9uIGdldEdpdFJlcG9OYW1lKCk6IHN0cmluZyB7XG4gIGNvbnN0IHJlcG9VcmxSZXN1bHQgPSBjaGlsZF9wcm9jZXNzLnNwYXduU3luYygnZ2l0JywgWydyZW1vdGUnLCAnZ2V0LXVybCcsICdvcmlnaW4nXSwge1xuICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgc3RkaW86ICdwaXBlJyxcbiAgfSk7XG4gIGNvbnN0IHJlcG9VcmwgPSByZXBvVXJsUmVzdWx0LnN0ZG91dC50cmltKCk7XG4gIGNvbnN0IHJlcG9NYXRjaCA9IHJlcG9VcmwubWF0Y2goL2dpdGh1YlxcLmNvbVtcXC86XShbXFx3LV0rXFwvW1xcdy1dKykoXFwuZ2l0KT8kLyk7XG4gIHJldHVybiByZXBvTWF0Y2ggPyByZXBvTWF0Y2hbMV0gOiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0SGVhZGVyT2ZGaXJzdENvbW1pdCgpOiBzdHJpbmcge1xuICBjb25zdCBmaXJzdENvbW1pdFJlc3VsdCA9IGNoaWxkX3Byb2Nlc3Muc3Bhd25TeW5jKCdnaXQnLCBbJ2xvZycsICdtYWluLi5IRUFEJywgJy0tcmV2ZXJzZScsICctLXByZXR0eT0lcyddLCB7XG4gICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICBzdGRpbzogJ3BpcGUnLFxuICB9KTtcbiAgcmV0dXJuIGZpcnN0Q29tbWl0UmVzdWx0LnN0ZG91dC50cmltKCkuc3BsaXQoJ1xcbicpWzBdO1xufVxuIiwiaW1wb3J0IGFuc2lzIGZyb20gJ2Fuc2lzJztcbmltcG9ydCB7IHJ1bkNvbW1hbmQgfSBmcm9tICcuL3NwYXduJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpZ3VyZUdpdFVzZXJEZXRhaWxzSWZOZWVkZWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGdpdFVzZXJOYW1lID0gKGF3YWl0IHJ1bkNvbW1hbmQoJ2dpdCcsIFsnY29uZmlnJywgJ3VzZXIubmFtZSddLCB7IGlnbm9yZUV4aXRTdGF0dXM6IHRydWUgfSkpLnRyaW0oKTtcbiAgaWYgKCFnaXRVc2VyTmFtZSkge1xuICAgIGNvbnNvbGUubG9nKGFuc2lzLmRpbSgnR2l0IHVzZXIubmFtZSBub3Qgc2V0LiBBdHRlbXB0aW5nIHRvIGNvbmZpZ3VyZSBmcm9tIEdpdEh1YiBwcm9maWxlLi4uJykpO1xuICAgIGNvbnN0IGdpdGh1Yk5hbWVPdXRwdXQgPSAoYXdhaXQgcnVuQ29tbWFuZCgnZ2gnLCBbJ2FwaScsICd1c2VyJywgJy0tanEnLCAnLm5hbWUnXSkpLnRyaW0oKTtcbiAgICBpZiAoZ2l0aHViTmFtZU91dHB1dCAmJiBnaXRodWJOYW1lT3V0cHV0ICE9PSAnbnVsbCcpIHtcbiAgICAgIGNvbnN0IG5hbWVUb1NldCA9IGdpdGh1Yk5hbWVPdXRwdXQucmVwbGFjZSgvXlwifFwiJC9nLCAnJyk7IC8vIFJlbW92ZSBwb3RlbnRpYWwgc3Vycm91bmRpbmcgcXVvdGVzXG4gICAgICBhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ2NvbmZpZycsICd1c2VyLm5hbWUnLCBuYW1lVG9TZXRdKTtcbiAgICAgIGNvbnNvbGUubG9nKGFuc2lzLmdyZWVuKGBTdWNjZXNzZnVsbHkgY29uZmlndXJlZCBnaXQgdXNlci5uYW1lIHRvIFwiJHtuYW1lVG9TZXR9XCJgKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihhbnNpcy55ZWxsb3coJ0NvdWxkIG5vdCByZXRyaWV2ZSB1c2VyIG5hbWUgZnJvbSBHaXRIdWIgcHJvZmlsZSAoaXQgbWlnaHQgYmUgXCJudWxsXCIgb3Igbm90IHNldCkuJykpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGdpdFVzZXJFbWFpbCA9IChhd2FpdCBydW5Db21tYW5kKCdnaXQnLCBbJ2NvbmZpZycsICd1c2VyLmVtYWlsJ10sIHsgaWdub3JlRXhpdFN0YXR1czogdHJ1ZSB9KSkudHJpbSgpO1xuICBpZiAoIWdpdFVzZXJFbWFpbCkge1xuICAgIGNvbnNvbGUubG9nKGFuc2lzLmRpbSgnR2l0IHVzZXIuZW1haWwgbm90IHNldC4gQXR0ZW1wdGluZyB0byBjb25maWd1cmUgZnJvbSBHaXRIdWIgcHJvZmlsZS4uLicpKTtcbiAgICBjb25zdCBnaXRodWJFbWFpbE91dHB1dCA9IChhd2FpdCBydW5Db21tYW5kKCdnaCcsIFsnYXBpJywgJ3VzZXInLCAnLS1qcScsICcuZW1haWwnXSkpLnRyaW0oKTtcbiAgICBpZiAoZ2l0aHViRW1haWxPdXRwdXQgJiYgZ2l0aHViRW1haWxPdXRwdXQgIT09ICdudWxsJykge1xuICAgICAgY29uc3QgZW1haWxUb1NldCA9IGdpdGh1YkVtYWlsT3V0cHV0LnJlcGxhY2UoL15cInxcIiQvZywgJycpOyAvLyBSZW1vdmUgcG90ZW50aWFsIHN1cnJvdW5kaW5nIHF1b3Rlc1xuICAgICAgYXdhaXQgcnVuQ29tbWFuZCgnZ2l0JywgWydjb25maWcnLCAndXNlci5lbWFpbCcsIGVtYWlsVG9TZXRdKTtcbiAgICAgIGNvbnNvbGUubG9nKGFuc2lzLmdyZWVuKGBTdWNjZXNzZnVsbHkgY29uZmlndXJlZCBnaXQgdXNlci5lbWFpbCB0byBcIiR7ZW1haWxUb1NldH1cImApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBhbnNpcy55ZWxsb3coJ0NvdWxkIG5vdCByZXRyaWV2ZSB1c2VyIGVtYWlsIGZyb20gR2l0SHViIHByb2ZpbGUgKGl0IG1pZ2h0IGJlIFwibnVsbFwiLCBwcml2YXRlLCBvciBub3Qgc2V0KS4nKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJlIiwidCIsInIiLCJkZWZpbmVQcm9wZXJ0eSIsIm4iLCJzZXRQcm90b3R5cGVPZiIsImwiLCJjcmVhdGUiLCJvIiwia2V5cyIsInMiLCJPYmplY3QiLCJpIiwicm91bmQiLCJjIiwibWF4IiwiYSIsIk1hdGgiLCJwIiwiZXhlYyIsImxlbmd0aCIsInBhcnNlSW50IiwidSIsImQiLCJnIiwic29tZSIsInRlc3QiLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImFyZ3YiLCJlbnYiLCJqb2luIiwiZmFsc2UiLCJURVJNIiwidHJ1ZWNvbG9yIiwiYW5zaTI1NiIsImFuc2kiLCJDT0xPUlRFUk0iLCJDSSIsIlBNMl9IT01FIiwiTkVYVF9SVU5USU1FIiwiaW5jbHVkZXMiLCJzdGRvdXQiLCJpc1RUWSIsInBsYXRmb3JtIiwiTk9fQ09MT1IiLCJ3aW5kb3ciLCJjaHJvbWUiLCJmIiwib3BlbiIsImNsb3NlIiwiaCIsImIiLCJPIiwibSIsInJhdyIsIlN0cmluZyIsImluZGV4T2YiLCJzbGljZSIsInJlcGxhY2UiLCJ3IiwiQW5zaXMiLCJpc1N1cHBvcnRlZCIsInN0cmlwIiwiZXh0ZW5kIiwieCIsImdldCIsInRoaXMiLCJ2YWx1ZSIsInkiLCJSIiwiJCIsIlQiLCJ2IiwiQyIsIkUiLCJNIiwiZmciLCJiZyIsInJnYiIsImJnUmdiIiwiaGV4IiwiYmdIZXgiLCJ2aXNpYmxlIiwicmVzZXQiLCJib2xkIiwiZGltIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaW52ZXJzZSIsImhpZGRlbiIsInN0cmlrZXRocm91Z2giLCJJIiwic3BsaXQiLCJtYXAiLCJ0b1VwcGVyQ2FzZSIsImFuc2lzTW9kdWxlIiwiZGVmYXVsdCIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJ3aGl0ZSIsImdyYXkiLCJyZWRCcmlnaHQiLCJncmVlbkJyaWdodCIsInllbGxvd0JyaWdodCIsImJsdWVCcmlnaHQiLCJtYWdlbnRhQnJpZ2h0IiwiY3lhbkJyaWdodCIsIndoaXRlQnJpZ2h0IiwiYmdCbGFjayIsImJnUmVkIiwiYmdHcmVlbiIsImJnWWVsbG93IiwiYmdCbHVlIiwiYmdNYWdlbnRhIiwiYmdDeWFuIiwiYmdXaGl0ZSIsImJnR3JheSIsImJnUmVkQnJpZ2h0IiwiYmdHcmVlbkJyaWdodCIsImJnWWVsbG93QnJpZ2h0IiwiYmdCbHVlQnJpZ2h0IiwiYmdNYWdlbnRhQnJpZ2h0IiwiYmdDeWFuQnJpZ2h0IiwiYmdXaGl0ZUJyaWdodCIsIkFMSUFTIiwiU3ltYm9sIiwiZm9yIiwiRE9DIiwiTUFQIiwiUEFJUiIsIlNDQUxBUiIsIlNFUSIsIk5PREVfVFlQRSIsImlzQWxpYXMiLCJub2RlIiwiaXNEb2N1bWVudCIsImlzTWFwIiwiaXNQYWlyIiwiaXNTY2FsYXIiLCJpc1NlcSIsImlzQ29sbGVjdGlvbiIsImlzTm9kZSIsImhhc0FuY2hvciIsImFuY2hvciIsIkJSRUFLIiwiU0tJUCIsIlJFTU9WRSIsInZpc2l0IiwidmlzaXRvciIsInZpc2l0b3JfIiwiaW5pdFZpc2l0b3IiLCJ2aXNpdF8iLCJjb250ZW50cyIsImZyZWV6ZSIsImtleSIsInBhdGgiLCJjdHJsIiwiY2FsbFZpc2l0b3IiLCJyZXBsYWNlTm9kZSIsImNvbmNhdCIsIml0ZW1zIiwiY2kiLCJzcGxpY2UiLCJjayIsImN2IiwiYXN5bmMiLCJ2aXNpdEFzeW5jIiwidmlzaXRBc3luY18iLCJDb2xsZWN0aW9uIiwiTm9kZSIsIlZhbHVlIiwiYXNzaWduIiwiQWxpYXMiLCJNYXAiLCJTY2FsYXIiLCJTZXEiLCJQYWlyIiwicGFyZW50IiwicHQiLCJFcnJvciIsImVzY2FwZUNoYXJzIiwiRGlyZWN0aXZlcyIsImNvbnN0cnVjdG9yIiwieWFtbCIsInRhZ3MiLCJkb2NTdGFydCIsImRvY0VuZCIsImRlZmF1bHRZYW1sIiwiZGVmYXVsdFRhZ3MiLCJjbG9uZSIsImNvcHkiLCJhdERvY3VtZW50IiwicmVzIiwidmVyc2lvbiIsImF0TmV4dERvY3VtZW50IiwiZXhwbGljaXQiLCJhZGQiLCJsaW5lIiwib25FcnJvciIsInBhcnRzIiwidHJpbSIsIm5hbWUiLCJzaGlmdCIsImhhbmRsZSIsInByZWZpeCIsInRhZ05hbWUiLCJzb3VyY2UiLCJ2ZXJiYXRpbSIsInN1ZmZpeCIsIm1hdGNoIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXJyb3IiLCJ0YWdTdHJpbmciLCJ0YWciLCJlbnRyaWVzIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImNoIiwidG9TdHJpbmciLCJkb2MiLCJsaW5lcyIsInRhZ0VudHJpZXMiLCJ0YWdOYW1lcyIsIl9rZXkiLCJ0biIsInB1c2giLCJhbmNob3JJc1ZhbGlkIiwic2EiLCJKU09OIiwic3RyaW5naWZ5IiwiYW5jaG9yTmFtZXMiLCJyb290IiwiYW5jaG9ycyIsIlNldCIsImZpbmROZXdBbmNob3IiLCJleGNsdWRlIiwiaGFzIiwiYXBwbHlSZXZpdmVyIiwicmV2aXZlciIsIm9iaiIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImxlbiIsInYwIiwidjEiLCJ1bmRlZmluZWQiLCJrIiwiZnJvbSIsImRlbGV0ZSIsInNldCIsImNhbGwiLCJ0b0pTIiwiYXJnIiwiY3R4IiwidG9KU09OIiwiZGF0YSIsImFsaWFzQ291bnQiLCJjb3VudCIsIm9uQ3JlYXRlIiwia2VlcCIsIk51bWJlciIsIk5vZGVCYXNlIiwidHlwZSIsImdldFByb3RvdHlwZU9mIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJhbmdlIiwibWFwQXNNYXAiLCJtYXhBbGlhc0NvdW50Iiwib25BbmNob3IiLCJUeXBlRXJyb3IiLCJtYXBLZXlXYXJuZWQiLCJ2YWx1ZXMiLCJzdXBlciIsInJlc29sdmUiLCJub2RlcyIsImZvdW5kIiwiYWxpYXNSZXNvbHZlQ2FjaGUiLCJfYXJnIiwibXNnIiwiUmVmZXJlbmNlRXJyb3IiLCJnZXRBbGlhc0NvdW50IiwiX29uQ29tbWVudCIsIl9vbkNob21wS2VlcCIsInNyYyIsIm9wdGlvbnMiLCJ2ZXJpZnlBbGlhc09yZGVyIiwiaW1wbGljaXRLZXkiLCJpdGVtIiwia2MiLCJ2YyIsImlzU2NhbGFyVmFsdWUiLCJCTE9DS19GT0xERUQiLCJCTE9DS19MSVRFUkFMIiwiUExBSU4iLCJRVU9URV9ET1VCTEUiLCJRVU9URV9TSU5HTEUiLCJjcmVhdGVOb2RlIiwic2NoZW1hIiwiQm9vbGVhbiIsIkJpZ0ludCIsInZhbHVlT2YiLCJhbGlhc0R1cGxpY2F0ZU9iamVjdHMiLCJvblRhZ09iaiIsInNvdXJjZU9iamVjdHMiLCJyZWYiLCJ0YWdPYmoiLCJmaWx0ZXIiLCJmaW5kIiwiZm9ybWF0IiwiaWRlbnRpZnkiLCJmaW5kVGFnT2JqZWN0IiwiaXRlcmF0b3IiLCJub2RlQ2xhc3MiLCJjb2xsZWN0aW9uRnJvbVBhdGgiLCJpc0ludGVnZXIiLCJrZWVwVW5kZWZpbmVkIiwiaXNFbXB0eVBhdGgiLCJuZXh0IiwiZG9uZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsIml0IiwiYWRkSW4iLCJyZXN0IiwiZGVsZXRlSW4iLCJnZXRJbiIsImtlZXBTY2FsYXIiLCJoYXNBbGxOdWxsVmFsdWVzIiwiYWxsb3dTY2FsYXIiLCJldmVyeSIsImNvbW1lbnRCZWZvcmUiLCJjb21tZW50IiwiaGFzSW4iLCJzZXRJbiIsInN0cmluZ2lmeUNvbW1lbnQiLCJzdHIiLCJpbmRlbnRDb21tZW50IiwiaW5kZW50IiwibGluZUNvbW1lbnQiLCJlbmRzV2l0aCIsIkZPTERfRkxPVyIsIkZPTERfQkxPQ0siLCJGT0xEX1FVT1RFRCIsImZvbGRGbG93TGluZXMiLCJ0ZXh0IiwibW9kZSIsImluZGVudEF0U3RhcnQiLCJsaW5lV2lkdGgiLCJtaW5Db250ZW50V2lkdGgiLCJvbkZvbGQiLCJvbk92ZXJmbG93IiwiZW5kU3RlcCIsImZvbGRzIiwiZXNjYXBlZEZvbGRzIiwicHJldiIsImVuZCIsIm92ZXJmbG93IiwiZXNjU3RhcnQiLCJlc2NFbmQiLCJjb25zdW1lTW9yZUluZGVudGVkTGluZXMiLCJqIiwiZm9sZCIsInN0YXJ0IiwiZ2V0Rm9sZE9wdGlvbnMiLCJpc0Jsb2NrIiwiY29udGFpbnNEb2N1bWVudE1hcmtlciIsImRvdWJsZVF1b3RlZFN0cmluZyIsImpzb24iLCJkb3VibGVRdW90ZWRBc0pTT04iLCJtaW5NdWx0aUxpbmVMZW5ndGgiLCJkb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGgiLCJjb2RlIiwic3Vic3RyIiwic2luZ2xlUXVvdGVkU3RyaW5nIiwic2luZ2xlUXVvdGUiLCJxdW90ZWRTdHJpbmciLCJxcyIsImhhc0RvdWJsZSIsImhhc1NpbmdsZSIsImJsb2NrRW5kTmV3bGluZXMiLCJSZWdFeHAiLCJibG9ja1N0cmluZyIsIm9uQ29tbWVudCIsIm9uQ2hvbXBLZWVwIiwiYmxvY2tRdW90ZSIsImNvbW1lbnRTdHJpbmciLCJmb3JjZUJsb2NrSW5kZW50IiwibGl0ZXJhbCIsImluZGVudExlbmd0aCIsImxpbWl0Iiwic3RyTGVuIiwibGluZUxlbmd0aE92ZXJMaW1pdCIsImNob21wIiwiZW5kU3RhcnQiLCJlbmRObFBvcyIsInN0YXJ0RW5kIiwic3RhcnRXaXRoU3BhY2UiLCJzdGFydE5sUG9zIiwiaGVhZGVyIiwiZm9sZGVkVmFsdWUiLCJsaXRlcmFsRmFsbGJhY2siLCJmb2xkT3B0aW9ucyIsImJvZHkiLCJzdHJpbmdpZnlTdHJpbmciLCJpbkZsb3ciLCJzcyIsIl9zdHJpbmdpZnkiLCJfdHlwZSIsImFjdHVhbFN0cmluZyIsImluZGVudFN0ZXAiLCJjb21wYXQiLCJwbGFpblN0cmluZyIsImRlZmF1bHRLZXlUeXBlIiwiZGVmYXVsdFN0cmluZ1R5cGUiLCJjcmVhdGVTdHJpbmdpZnlDb250ZXh0Iiwib3B0IiwiZGlyZWN0aXZlcyIsImZhbHNlU3RyIiwiZmxvd0NvbGxlY3Rpb25QYWRkaW5nIiwiaW5kZW50U2VxIiwibnVsbFN0ciIsInNpbXBsZUtleXMiLCJ0cnVlU3RyIiwidG9TdHJpbmdPcHRpb25zIiwiY29sbGVjdGlvblN0eWxlIiwicmVwZWF0IiwicmVzb2x2ZWRBbGlhc2VzIiwidGVzdE1hdGNoIiwiZ2V0VGFnT2JqZWN0IiwicHJvcHMiLCJzdHJpbmdpZnlQcm9wcyIsIndhcm4iLCJsb2dMZXZlbCIsIndhcm5pbmciLCJjb25zb2xlIiwiTUVSR0VfS0VZIiwibWVyZ2UiLCJkZXNjcmlwdGlvbiIsImFkZFRvSlNNYXAiLCJhZGRNZXJnZVRvSlNNYXAiLCJtZXJnZVZhbHVlIiwic3JjTWFwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJhZGRQYWlyVG9KU01hcCIsImlzTWVyZ2VLZXkiLCJqc0tleSIsInN0cmluZ0tleSIsInN0ckN0eCIsImluU3RyaW5naWZ5S2V5Iiwic3RyS2V5IiwianNvblN0ciIsInN0cmluZ2lmeUtleSIsImpzVmFsdWUiLCJjcmVhdGVQYWlyIiwiXyIsImFsbE51bGxWYWx1ZXMiLCJrZXlDb21tZW50IiwiZXhwbGljaXRLZXkiLCJ2c2IiLCJ2Y2IiLCJ2YWx1ZUNvbW1lbnQiLCJrZXlDb21tZW50RG9uZSIsImNob21wS2VlcCIsInNwYWNlQmVmb3JlIiwiZmxvdyIsInZhbHVlQ29tbWVudERvbmUiLCJ2YWx1ZVN0ciIsIndzIiwidnMwIiwibmwwIiwiaGFzTmV3bGluZSIsImhhc1Byb3BzTGluZSIsInNwMCIsInN0cmluZ2lmeVBhaXIiLCJzdHJpbmdpZnlDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsInN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uIiwic3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uIiwiYmxvY2tJdGVtUHJlZml4IiwiZmxvd0NoYXJzIiwiaXRlbUluZGVudCIsIml0ZW1DdHgiLCJhZGRDb21tZW50QmVmb3JlIiwiaWsiLCJmY1BhZGRpbmciLCJyZXFOZXdsaW5lIiwibGluZXNBdFZhbHVlIiwiaXYiLCJyZWR1Y2UiLCJzdW0iLCJpYyIsInRyaW1TdGFydCIsImZpbmRQYWlyIiwiWUFNTE1hcCIsInJlcGxhY2VyIiwic29ydE1hcEVudHJpZXMiLCJzb3J0IiwicGFpciIsIm92ZXJ3cml0ZSIsIl9wYWlyIiwic29ydEVudHJpZXMiLCJmaW5kSW5kZXgiLCJUeXBlIiwiWUFNTFNlcSIsImlkeCIsImFzSXRlbUluZGV4Iiwic2VxIiwic3RyaW5nIiwibnVsbFRhZyIsImJvb2xUYWciLCJzdHJpbmdpZnlOdW1iZXIiLCJtaW5GcmFjdGlvbkRpZ2l0cyIsIm51bSIsImlzRmluaXRlIiwiaXNOYU4iLCJmbG9hdE5hTiIsInRvTG93ZXJDYXNlIiwiTmFOIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsImZsb2F0RXhwIiwicGFyc2VGbG9hdCIsInRvRXhwb25lbnRpYWwiLCJmbG9hdCIsImRvdCIsImludElkZW50aWZ5IiwiaW50UmVzb2x2ZSIsIm9mZnNldCIsInJhZGl4IiwiaW50QXNCaWdJbnQiLCJpbnRTdHJpbmdpZnkiLCJpbnRPY3QiLCJfb25FcnJvciIsImludCIsImludEhleCIsInN0cmluZ2lmeUpTT04iLCJiaW5hcnkiLCJVaW50OEFycmF5IiwiYXRvYiIsImJ1ZmZlciIsImNoYXJDb2RlQXQiLCJidWYiLCJidG9hIiwiZnJvbUNoYXJDb2RlIiwiY2VpbCIsInJlc29sdmVQYWlycyIsImNuIiwiY3JlYXRlUGFpcnMiLCJpdGVyYWJsZSIsInBhaXJzIiwiWUFNTE9NYXAiLCJiaW5kIiwib21hcCIsInNlZW5LZXlzIiwiYm9vbFN0cmluZ2lmeSIsInRydWVUYWciLCJmYWxzZVRhZyIsInNpZ24iLCJpbnRCaW4iLCJZQU1MU2V0Iiwia2VlcFBhaXIiLCJwYXJzZVNleGFnZXNpbWFsIiwiYXNCaWdJbnQiLCJzdHJpbmdpZnlTZXhhZ2VzaW1hbCIsIl82MCIsInVuc2hpZnQiLCJwYWRTdGFydCIsImludFRpbWUiLCJmbG9hdFRpbWUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2VjIiwiZGF0ZSIsIlVUQyIsInR6IiwiYWJzIiwidG9JU09TdHJpbmciLCJzY2hlbWFzIiwic2NoZW1hJDEiLCJzY2hlbWEkMiIsInRhZ3NCeU5hbWUiLCJib29sIiwibnVsbCIsImNvcmVLbm93blRhZ3MiLCJnZXRUYWdzIiwiY3VzdG9tVGFncyIsInNjaGVtYU5hbWUiLCJhZGRNZXJnZVRhZyIsInNjaGVtYVRhZ3MiLCJzb3J0TWFwRW50cmllc0J5S2V5IiwiU2NoZW1hIiwicmVzb2x2ZUtub3duVGFncyIsInRvU3RyaW5nRGVmYXVsdHMiLCJrbm93blRhZ3MiLCJEb2N1bWVudCIsImVycm9ycyIsIndhcm5pbmdzIiwiX3JlcGxhY2VyIiwia2VlcFNvdXJjZVRva2VucyIsInByZXR0eUVycm9ycyIsInN0cmljdCIsInN0cmluZ0tleXMiLCJ1bmlxdWVLZXlzIiwiX2RpcmVjdGl2ZXMiLCJzZXRTY2hlbWEiLCJhc3NlcnRDb2xsZWN0aW9uIiwiY3JlYXRlQWxpYXMiLCJrZXlUb1N0ciIsImFzU3RyIiwiYW5jaG9yUHJlZml4Iiwic2V0QW5jaG9ycyIsImFsaWFzT2JqZWN0cyIsInByZXZBbmNob3JzIiwiY3JlYXRlTm9kZUFuY2hvcnMiLCJzdiIsImpzb25BcmciLCJoYXNEaXJlY3RpdmVzIiwiZGlyIiwiY3MiLCJjb250ZW50Q29tbWVudCIsImRjIiwic3RyaW5naWZ5RG9jdW1lbnQiLCJZQU1MRXJyb3IiLCJwb3MiLCJtZXNzYWdlIiwiWUFNTFBhcnNlRXJyb3IiLCJZQU1MV2FybmluZyIsInByZXR0aWZ5RXJyb3IiLCJsYyIsImxpbmVQb3MiLCJjb2wiLCJsaW5lU3RyIiwibGluZVN0YXJ0cyIsIm1pbiIsInBvaW50ZXIiLCJyZXNvbHZlUHJvcHMiLCJ0b2tlbnMiLCJpbmRpY2F0b3IiLCJwYXJlbnRJbmRlbnQiLCJzdGFydE9uTmV3bGluZSIsImF0TmV3bGluZSIsImhhc1NwYWNlIiwiY29tbWVudFNlcCIsInJlcVNwYWNlIiwidGFiIiwibmV3bGluZUFmdGVyUHJvcCIsImNvbW1hIiwidG9rZW4iLCJjYiIsImxhc3QiLCJjb250YWluc05ld2xpbmUiLCJzdCIsInNlcCIsImZsb3dJbmRlbnRDaGVjayIsImZjIiwibWFwSW5jbHVkZXMiLCJzZWFyY2giLCJpc0VxdWFsIiwic3RhcnRDb2xNc2ciLCJyZXNvbHZlRW5kIiwiYmxvY2tNc2ciLCJyZXNvbHZlQ29sbGVjdGlvbiIsIkNOIiwiY29sbCIsImNvbXBvc2VOb2RlIiwiY29tcG9zZUVtcHR5Tm9kZSIsImJtIiwiYXRSb290IiwiY29tbWVudEVuZCIsImNvbGxJdGVtIiwia2V5UHJvcHMiLCJhdEtleSIsImtleVN0YXJ0Iiwia2V5Tm9kZSIsInZhbHVlUHJvcHMiLCJ2YWx1ZU5vZGUiLCJzcmNUb2tlbiIsInJlc29sdmVCbG9ja01hcCIsImJzIiwicmVzb2x2ZUJsb2NrU2VxIiwiZmNOYW1lIiwicHJldkl0ZW1Db21tZW50IiwibG9vcCIsImVuZFJhbmdlIiwiZXhwZWN0ZWRFbmQiLCJjZSIsImVlIiwiY2VQb3MiLCJyZXNvbHZlRmxvd0NvbGxlY3Rpb24iLCJDb2xsIiwicmVzb2x2ZUJsb2NrU2NhbGFyIiwic2NhbGFyIiwidHMiLCJwYXJzZUJsb2NrU2NhbGFySGVhZGVyIiwiZmlyc3QiLCJzcGxpdExpbmVzIiwiY2hvbXBTdGFydCIsImNvbnRlbnQiLCJ0cmltSW5kZW50IiwiY29udGVudFN0YXJ0IiwicHJldk1vcmVJbmRlbnRlZCIsImNybGYiLCJyZXNvbHZlRmxvd1NjYWxhciIsInJlbCIsImJhZENoYXIiLCJmb2xkTGluZXMiLCJwbGFpblZhbHVlIiwic2luZ2xlUXVvdGVkVmFsdWUiLCJmb2xkTmV3bGluZSIsImNjIiwiZXNjYXBlQ29kZXMiLCJVIiwicGFyc2VDaGFyQ29kZSIsIndzU3RhcnQiLCJkb3VibGVRdW90ZWRWYWx1ZSIsInZhbHVlRW5kIiwicmUiLCJsYXN0SW5kZXgiLCJOIiwiTCIsIlAiLCJmcm9tQ29kZVBvaW50IiwiY29tcG9zZVNjYWxhciIsInRhZ1Rva2VuIiwibWF0Y2hXaXRoVGVzdCIsImt0IiwiZmluZFNjYWxhclRhZ0J5TmFtZSIsImZpbmRTY2FsYXJUYWdCeVRlc3QiLCJlbXB0eVNjYWxhclBvc2l0aW9uIiwiYmVmb3JlIiwiaXNTcmNUb2tlbiIsImFsaWFzIiwiY29tcG9zZUFsaWFzIiwibmwiLCJsYXN0UHJvcCIsImV4cFR5cGUiLCJjb21wb3NlQ29sbGVjdGlvbiIsImdldEVycm9yUG9zIiwicGFyc2VQcmVsdWRlIiwicHJlbHVkZSIsImF0Q29tbWVudCIsImFmdGVyRW1wdHlMaW5lIiwiQ29tcG9zZXIiLCJhdERpcmVjdGl2ZXMiLCJkZWNvcmF0ZSIsImFmdGVyRG9jIiwiYXBwbHkiLCJzdHJlYW1JbmZvIiwiY29tcG9zZSIsImZvcmNlRG9jIiwiZW5kT2Zmc2V0Iiwib3B0cyIsImNvbnRlbnRFbmQiLCJjb21wb3NlRG9jIiwiYWRkRW5kdG9CbG9ja1Byb3BzIiwic2V0Rmxvd1NjYWxhclZhbHVlIiwib2EiLCJ0b2siLCJzdHJpbmdpZnlUb2tlbiIsInN0cmluZ2lmeUl0ZW0iLCJjc3QiLCJfdmlzaXQiLCJmaWVsZCIsIml0ZW1BdFBhdGgiLCJpbmRleCIsInBhcmVudENvbGxlY3Rpb24iLCJCT00iLCJET0NVTUVOVCIsIkZMT1dfRU5EIiwidG9rZW5UeXBlIiwiY29udGV4dCIsImhlIiwiaGVhZCIsImFmdGVyS2V5Iiwic2V0QmxvY2tTY2FsYXJWYWx1ZSIsImlzRW1wdHkiLCJoZXhEaWdpdHMiLCJ0YWdDaGFycyIsImZsb3dJbmRpY2F0b3JDaGFycyIsImludmFsaWRBbmNob3JDaGFycyIsImlzTm90QW5jaG9yQ2hhciIsIkxleGVyIiwiYXRFbmQiLCJibG9ja1NjYWxhckluZGVudCIsImJsb2NrU2NhbGFyS2VlcCIsImZsb3dLZXkiLCJmbG93TGV2ZWwiLCJpbmRlbnROZXh0IiwiaW5kZW50VmFsdWUiLCJsaW5lRW5kUG9zIiwibGV4IiwiaW5jb21wbGV0ZSIsImhhc0NoYXJzIiwicGFyc2VOZXh0IiwiYXRMaW5lRW5kIiwiY2hhckF0IiwiY29udGludWVTY2FsYXIiLCJkdCIsImdldExpbmUiLCJzZXROZXh0Iiwic3RhdGUiLCJwZWVrIiwicGFyc2VTdHJlYW0iLCJwYXJzZUxpbmVTdGFydCIsInBhcnNlQmxvY2tTdGFydCIsInBhcnNlRG9jdW1lbnQiLCJwYXJzZUZsb3dDb2xsZWN0aW9uIiwicGFyc2VRdW90ZWRTY2FsYXIiLCJwYXJzZUJsb2NrU2NhbGFyIiwicGFyc2VQbGFpblNjYWxhciIsInB1c2hDb3VudCIsImRpckVuZCIsInB1c2hTcGFjZXMiLCJwdXNoTmV3bGluZSIsInNwIiwiY2gwIiwiY2gxIiwicHVzaEluZGljYXRvcnMiLCJwdXNoVW50aWwiLCJxdW90ZSIsInFiIiwicHVzaFRvSW5kZXgiLCJsYXN0Q2hhciIsImFsbG93RW1wdHkiLCJwdXNoVGFnIiwiYWxsb3dUYWJzIiwiTGluZUNvdW50ZXIiLCJhZGROZXdMaW5lIiwibG93IiwiaGlnaCIsIm1pZCIsImluY2x1ZGVzVG9rZW4iLCJsaXN0IiwiZmluZE5vbkVtcHR5SW5kZXgiLCJpc0Zsb3dUb2tlbiIsImdldFByZXZQcm9wcyIsImdldEZpcnN0S2V5U3RhcnRQcm9wcyIsImZpeEZsb3dTZXFJdGVtcyIsIlBhcnNlciIsIm9uTmV3TGluZSIsImF0TmV3TGluZSIsImF0U2NhbGFyIiwib25LZXlMaW5lIiwic3RhY2siLCJsZXhlciIsInBhcnNlIiwibGV4ZW1lIiwic3RlcCIsInBvcCIsInNvdXJjZVRva2VuIiwidG9wIiwic3RyZWFtIiwiZG9jdW1lbnQiLCJibG9ja1NjYWxhciIsImJsb2NrTWFwIiwiYmxvY2tTZXF1ZW5jZSIsImZsb3dDb2xsZWN0aW9uIiwiZG9jdW1lbnRFbmQiLCJsaW5lRW5kIiwiYnYiLCJzdGFydEJsb2NrVmFsdWUiLCJhdEluZGVudGVkQ29tbWVudCIsImF0TWFwSW5kZW50IiwiYXROZXh0SXRlbSIsImZzIiwiZmxvd1NjYWxhciIsInBhcnNlT3B0aW9ucyIsImxpbmVDb3VudGVyIiwicGFyc2VyIiwiY29tcG9zZXIiLCJfZG9jIiwiZm9yRWFjaCIsIl9yZXZpdmVyIiwiZG9jcyIsImVtcHR5IiwiT1BFTkFJX01PREVMX1BSRUZJWEVTIiwicGFyc2VDb21tYW5kTGluZUFyZ3MiLCJhcmdzU3RyaW5nIiwicmVzdWx0IiwiY3VycmVudCIsImluRG91YmxlUXVvdGUiLCJpblNpbmdsZVF1b3RlIiwiY2hhciIsIkRFRkFVTFRfQUlERVJfRVhUUkFfQVJHUyIsIkRFRkFVTFRfUkVQT01JWF9FWFRSQV9BUkdTIiwicnVuQ29tbWFuZCIsImNvbW1hbmQiLCJhcmdzIiwiaWdub3JlRXhpdFN0YXR1cyIsInNwYXduT3B0aW9ucyIsImluZm8iLCJhbnNpcyIsInJldCIsIlByb21pc2UiLCJyZWplY3QiLCJwcm9jIiwic3Bhd24iLCJzZXRFbmNvZGluZyIsInN0ZGVyciIsIm9uIiwid3JpdGUiLCJzaWduYWwiLCJwaWQiLCJzdGF0dXMiLCJzcGF3bkFzeW5jIiwiZXhpdCIsIlJFUE9NSVhfRklMRV9OQU1FIiwicGxhbkNvZGVDaGFuZ2VzIiwibW9kZWwiLCJpc3N1ZUNvbnRlbnQiLCJkZXRhaWxlZFBsYW4iLCJyZWFzb25pbmdFZmZvcnQiLCJyZXBvbWl4RXh0cmFBcmdzIiwidXJsIiwiYXBpS2V5IiwiR0VNSU5JX0FQSV9LRVkiLCJPUEVOQUlfQVBJX0tFWSIsImdldEFwaVVybEFuZEtleSIsInJlcG9taXhBcmdzIiwicmVhZEZpbGVTeW5jIiwicHJvbWlzZXMiLCJybSIsImZvcmNlIiwicGxhbkZvcm1hdCIsInByb21wdCIsIllBTUwiLCJyZXNwb25zZSIsIm1lc3NhZ2VzIiwicmVxdWVzdEJvZHkiLCJyZWFzb25pbmdfZWZmb3J0IiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsIm9rIiwiZXJyb3JUZXh0Iiwic3RhdHVzVGV4dCIsImNob2ljZXMiLCJjYWxsTGxtQXBpIiwicm9sZSIsInBsYW5IZWFkZXIiLCJmaWxlc0hlYWRlciIsInBsYW4iLCJmaWxlUGF0aHMiLCJwbGFuSGVhZGVySW5kZXgiLCJmaWxlc0hlYWRlckluZGV4IiwicGxhbkNvbnRlbnRTdGFydEluZGV4IiwicGxhbkNvbnRlbnRFbmRJbmRleCIsImZpbGVzQ29udGVudFN0YXJ0SW5kZXgiLCJmaWxlUGF0aFJlZ2V4IiwibWF0Y2hBbGwiLCJtYWluIiwiYWlkZXJFeHRyYUFyZ3MiLCJkcnlSdW4iLCJpc3N1ZU51bWJlciIsInBsYW5uaW5nTW9kZWwiLCJnaXRodWJOYW1lT3V0cHV0IiwibmFtZVRvU2V0IiwiZ2l0aHViRW1haWxPdXRwdXQiLCJlbWFpbFRvU2V0IiwiY29uZmlndXJlR2l0VXNlckRldGFpbHNJZk5lZWRlZCIsImlzc3VlUmVzdWx0IiwiaXNzdWUiLCJjbGVhbmVkSXNzdWVCb2R5IiwiaXNzdWVPYmplY3QiLCJhdXRob3IiLCJsb2dpbiIsInRpdGxlIiwiY29tbWVudHMiLCJpc3N1ZVRleHQiLCJyZXNvbHV0aW9uUGxhbiIsInBsYW5UZXh0Iiwibm93IiwiYnJhbmNoTmFtZSIsImdldEZ1bGxZZWFyIiwiZ2V0VHdvRGlnaXRzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImFpZGVyQXJncyIsImFpZGVyQW5zd2VyIiwicHJUaXRsZSIsImNoaWxkX3Byb2Nlc3MiLCJzcGF3blN5bmMiLCJlbmNvZGluZyIsInN0ZGlvIiwicHJCb2R5IiwicmVwbGFjZUFsbCIsInJlcG9OYW1lIiwicmVwb1VybFJlc3VsdCIsInJlcG9NYXRjaCIsImdldEdpdFJlcG9OYW1lIiwiQVdTX1JFR0lPTl9OQU1FIl0sIm1hcHBpbmdzIjoiMFhBQUEsSUFBSUEsRUFBRUMsRUFBRUMsR0FBR0MsZUFBZUMsRUFBRUMsZUFBZUMsRUFBRUMsT0FBT0MsRUFBRUMsS0FBS0MsR0FBR0MsT0FBT0MsRUFBRSxJQUFJQyxNQUFNQyxFQUFFQyxJQUFJQyxHQUFHQyxLQUFLQyxFQUFFbEIsSUFBSSxJQUFJQyxFQUFFLGtCQUFrQmtCLEtBQUtuQixLQUFLLEdBQUdFLEVBQUVELEdBQUdtQixPQUFPaEIsRUFBRWlCLFNBQVMsRUFBRW5CLEVBQUUsRUFBRUEsRUFBRSxJQUFJRCxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLElBQUksTUFBTSxDQUFDRyxHQUFHLEdBQUcsSUFBSUEsR0FBRyxFQUFFLElBQUksSUFBSUEsRUFBQyxFQUFHa0IsRUFBRSxDQUFDdEIsRUFBRUMsRUFBRUMsSUFBSUYsRUFBRUMsR0FBR0EsRUFBRUMsRUFBRSxHQUFHLEdBQUdZLEVBQUVkLEVBQUUsSUFBSSxFQUFFYyxFQUFFYixFQUFFLElBQUlhLEVBQUVaLEVBQUUsSUFBSSxFQUFFRixFQUFFLEdBQUdB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QUNFLE1BQU1DLEVBQWdCUCxFQUFjQyxVQUFVLE1BQU8sQ0FBQyxTQUFVLFVBQVcsVUFBVyxDQUNwRkMsU0FBVSxPQUNWQyxNQUFPLFNBR0hLLEVBRFVELEVBQWNwOEIsT0FBT29LLE9BQ1hTLE1BQU0sNkNBQ2hDLE9BQU93eEIsRUFBWUEsRUFBVSxHQUFLLEVBQ3BDLENBdkJxQkMsU0FDWDVHLEdBQVcsS0FBTSxDQUFDLEtBQU0sU0FBVSxVQUFXa0csRUFBUyxTQUFVSyxFQUFRLFNBQVVFLEdBQzFGLENBS0FuakIsUUFBUStjLEtBQUssWUFBWWdFLDZCQUN6Qi9nQixRQUFRK2MsS0FBSyxtQkFBb0I3MkIsUUFBUUUsSUFBSW05QixnQkFDL0MsQ0FFQSxTQUFTbkIsR0FBYTE1QixHQUNwQixPQUFPWixPQUFPWSxHQUFPMmYsU0FBUyxFQUFHLElBQ25DIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzJdfQ==
