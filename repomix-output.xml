This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: *ignore, .aider.*, .env*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    generate-pr.yml
    release.yml
    semantic-pr.yml
    test.yml
  pull_request_template.md
.lefthook/
  post-merge/
    prepare.sh
  pre-push/
    check.sh
src/
  action.ts
  cli.ts
  defaultOptions.ts
  llm.ts
  main.ts
  plan.ts
  spawn.ts
  types.ts
  utils.ts
.browserslistrc
.editorconfig
.gitattributes
.releaserc.json
.tool-versions
action.yml
biome.jsonc
bunfig.toml
lefthook.yml
LICENSE
NOTICE
package.json
README.md
renovate.json5
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/plan.ts">
import fs from 'node:fs';
import YAML from 'yaml';
import { callLlmApi, getApiUrlAndKey } from './llm';
import type { ReasoningEffort } from './types';
import { parseCommandLineArgs } from './utils';
import { DEFAULT_REPOMIX_EXTRA_ARGS } from './defaultOptions';
import { runCommand } from './spawn';
⋮----
export type ResolutionPlan = {
  plan: string;
  filePaths: string[];
};
export async function planHowToResolveIssue(
  model: string,
  issueContent: string,
  reasoningEffort?: ReasoningEffort,
  repomixExtraArgs?: string
): Promise<ResolutionPlan>
⋮----
// Base repomix command arguments
⋮----
// Determine the end of the plan content. It's either the start of the files header or end of the response.
⋮----
// The files section goes from after its header to the end of the response.
</file>

<file path=".github/workflows/release.yml">
name: Release
on:
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  release:
    uses: WillBooster/reusable-workflows/.github/workflows/release.yml@main
    with:
      github_hosted_runner: true
    secrets:
      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
</file>

<file path=".github/workflows/semantic-pr.yml">
name: Lint PR title
on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize
jobs:
  semantic-pr:
    uses: WillBooster/reusable-workflows/.github/workflows/semantic-pr.yml@main
</file>

<file path=".lefthook/post-merge/prepare.sh">
#!/bin/bash
changed_files="$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)"
run_if_changed() {
  if echo "$changed_files" | grep --quiet -E "$1"; then
    eval "$2"
  fi
}
run_if_changed "\..+-version" "awk '{print \$1}' .tool-versions | xargs -I{} asdf plugin add {}"
run_if_changed "\..+-version" "asdf plugin update --all"
run_if_changed "\..+-version" "asdf install python"
run_if_changed "\..+-version" "asdf install"
run_if_changed "package\.json" "bun install"
</file>

<file path=".lefthook/pre-push/check.sh">
bun --bun node_modules/.bin/wb typecheck
</file>

<file path="src/action.ts">
import fs from 'node:fs';
import os from 'node:os';
import path from 'node:path';
import core from '@actions/core';
import { main } from './main';
import type { ReasoningEffort } from './types';
// Get inputs
⋮----
// cf. https://github.com/cli/cli/issues/8441#issuecomment-1870271857
</file>

<file path="src/cli.ts">
import process from 'node:process';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import { DEFAULT_AIDER_EXTRA_ARGS, DEFAULT_REPOMIX_EXTRA_ARGS } from './defaultOptions';
import { main } from './main';
import type { ReasoningEffort } from './types';
// Parse command line arguments using yargs
⋮----
// Options same with the GitHub Actions workflow
⋮----
// Options only for this standalone tool --------------------
⋮----
// ----------------------------------------------------------
</file>

<file path="src/defaultOptions.ts">

</file>

<file path="src/llm.ts">
import type { ReasoningEffort } from './types';
type Message = { content: string; role: 'system' | 'user' | 'assistant' };
⋮----
export function getApiUrlAndKey(model: string):
export async function callLlmApi(
  url: string,
  apiKey: string,
  model: string,
  messages: Message[],
  reasoningEffort?: ReasoningEffort
): Promise<string>
</file>

<file path="src/spawn.ts">
import type { SpawnOptionsWithoutStdio } from 'child_process';
import type { SpawnSyncReturns } from 'node:child_process';
import { spawn } from 'node:child_process';
import ansis from 'ansis';
export async function runCommand(command: string, args: string[], options?: SpawnOptionsWithoutStdio): Promise<string>
export async function spawnAsync(
  command: string,
  args?: ReadonlyArray<string>,
  options?: SpawnOptionsWithoutStdio
): Promise<Omit<SpawnSyncReturns<string>, 'output' | 'error'>>
⋮----
// `setEncoding` is undefined in Bun
⋮----
// eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors
</file>

<file path="src/utils.ts">
/**
 * Parses a command line string into an array of arguments, preserving quoted strings.
 *
 * This function handles:
 * - Space-separated arguments
 * - Double-quoted strings (preserves spaces within)
 * - Single-quoted strings (preserves spaces within)
 *
 * @param argsString The command line string to parse
 * @returns An array of parsed arguments
 */
export function parseCommandLineArgs(argsString: string): string[]
⋮----
// Handle quotes
⋮----
// Handle spaces (only split on spaces outside of quotes)
⋮----
// Add character to current argument
⋮----
// Add the last argument if there is one
</file>

<file path=".browserslistrc">
node 20
</file>

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

[*.{cjs,cpp,cts,dart,htm,html,js,json,json5,jsonc,jsx,mjs,mts,pu,puml,rb,sh,ts,tsx,vue,xml,yaml,yml}]
indent_size = 2
indent_style = space

[*.{go,gradle,py}]
indent_size = 4
indent_style = space

[*.md]
max_line_length = off
trim_trailing_whitespace = false

[{Makefile,*.mk}]
indent_style = tab
</file>

<file path=".gitattributes">
* text=auto

*.lockb binary diff=lockb
*.vcproj text eol=crlf

*.cjs text eol=lf
*.cpp text eol=lf
*.cts text eol=lf
*.dart text eol=lf
*.htm text eol=lf
*.html text eol=lf
*.js text eol=lf
*.json text eol=lf
*.json5 text eol=lf
*.jsonc text eol=lf
*.jsx text eol=lf
*.mjs text eol=lf
*.mts text eol=lf
*.pu text eol=lf
*.puml text eol=lf
*.rb text eol=lf
*.sh text eol=lf
*.ts text eol=lf
*.tsx text eol=lf
*.vue text eol=lf
*.xml text eol=lf
*.yaml text eol=lf
*.yml text eol=lf
*.go text eol=lf
*.gradle text eol=lf
*.py text eol=lf
*.md text eol=lf

dist/** linguist-generated=true
</file>

<file path=".releaserc.json">
{
  "branches": ["main"],
  "plugins": [
    ["@semantic-release/commit-analyzer", { "preset": "conventionalcommits" }],
    "@semantic-release/release-notes-generator",
    "@semantic-release/npm",
    [
      "@semantic-release/github",
      {
        "successComment": false,
        "labels": ["r: semantic-release"],
        "releasedLabels": ["released :bookmark:"],
        "failComment": false
      }
    ]
  ]
}
</file>

<file path="biome.jsonc">
{ "$schema": "./node_modules/@biomejs/biome/configuration_schema.json", "extends": ["@willbooster/biome-config"] }
</file>

<file path="bunfig.toml">
telemetry = false

[install]
exact = true

[run]
bun = true
</file>

<file path="lefthook.yml">
post-merge:
  scripts:
    prepare.sh:
      runner: bash
pre-commit:
  commands:
    cleanup:
      glob: '*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}'
      run: bun --bun wb lint --fix --format {staged_files} && git add {staged_files}
    check-migrations:
      glob: '**/migration.sql'
      run: |-
        if grep -q 'Warnings:' {staged_files}; then
          echo "Migration SQL files ({staged_files}) contain warnings! Please solve the warnings and commit again."
          exit 1
        fi
pre-push:
  scripts:
    check.sh:
      runner: bash
</file>

<file path="LICENSE">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="renovate.json5">
{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: ['github>WillBooster/willbooster-configs:renovate.json5'],
  packageRules: [
    // Don't upgrade Python.
    {
      matchPackageNames: [
        /** for docker */ 'python',
        /** for asdf */ 'python/cpython',
        /** for poetry */ 'containerbase/python-prebuild',
      ],
      enabled: false,
    },
  ],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": true,
    "erasableSyntaxOnly": true,
    "esModuleInterop": true,
    "importHelpers": false,
    "module": "ESNext",
    "moduleResolution": "Node",
    "outDir": "dist",
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "target": "ES2022",
    "typeRoots": ["./node_modules/@types", "./@types"]
  },
  "include": ["scripts/**/*", "src/**/*", "tests/**/*"]
}
</file>

<file path=".github/workflows/test.yml">
name: Test
on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '**/docs/**'
  push:
    branches:
      - main
      - wbfy
    paths-ignore:
      - '**.md'
      - '**/docs/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    uses: WillBooster/reusable-workflows/.github/workflows/test.yml@main
    with:
      github_hosted_runner: true
    secrets:
      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
</file>

<file path=".github/pull_request_template.md">
Close #<IssueNumber>

## Self Check

- [ ] I've confirmed `All checks have passed` on this page.
  - PR title follows [Angular's commit message format](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format).
  - PR title doesn't have `WIP:`.
  - The test command (e.g., `yarn test`) passed.
  - The lint command (e.g., `yarn lint`) passed.
  - You may leave this box unchecked due to long workflows.
- [ ] I've reviewed my changes on the GitHub diff view.
- [ ] I've written the steps to test my changes.
- [ ] I've added screenshots (if the UI changed).
  - You may leave this box unchecked if you didn't modify the UI.

<!-- Please add screenshots if you modify the UI.
| Current                  | In coming                |
| ------------------------ | ------------------------ |
| <img src="" width="400"> | <img src="" width="400"> |
-->

<!-- Please add steps to test your changes.
## Steps to Test

1. Open http://localhost-exercode.willbooster.net:3000/ja-JP/courses/_example/lessons/_example_a_plus_b/problems/_example_a_plus_b after login.
2. Select the language `C`.
3. Write the following code:
   ```c
   #include <stdio.h>

   int main(void) {
     int a, b;

     scanf("%d %d", &a, &b);
     printf("%d", a + b);
     return 0;
   }
   ```
4. Push `Submit` button.
5. ...
-->

<!-- 日本語で記述しても大丈夫です。 -->
</file>

<file path="NOTICE">
generate-pr-with-llm

Copyright (c) 2025 WillBooster Inc. and contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</file>

<file path="src/types.ts">
/**
 * Represents a GitHub user
 */
export interface GitHubUser {
  /** The user's GitHub ID */
  id: string;
  /** Whether the user is a bot */
  is_bot: boolean;
  /** The user's GitHub username */
  login: string;
  /** The user's full name */
  name?: string;
}
⋮----
/** The user's GitHub ID */
⋮----
/** Whether the user is a bot */
⋮----
/** The user's GitHub username */
⋮----
/** The user's full name */
⋮----
/**
 * Represents a comment author with minimal information
 */
export interface CommentAuthor {
  /** The author's GitHub username */
  login: string;
}
⋮----
/** The author's GitHub username */
⋮----
/**
 * Represents users who reacted with a specific reaction
 */
export interface ReactionUsers {
  /** The total count of users who reacted */
  totalCount: number;
}
⋮----
/** The total count of users who reacted */
⋮----
/**
 * Represents a reaction group on a comment or issue
 */
export interface ReactionGroup {
  /** The type of reaction (e.g., THUMBS_UP, LAUGH) */
  content: string;
  /** Users who reacted */
  users: ReactionUsers;
}
⋮----
/** The type of reaction (e.g., THUMBS_UP, LAUGH) */
⋮----
/** Users who reacted */
⋮----
/**
 * Represents a GitHub issue comment
 */
export interface GitHubComment {
  /** The comment's unique ID */
  id: string;
  /** The comment's author */
  author: CommentAuthor;
  /** The author's association with the repository */
  authorAssociation: string;
  /** The comment's content */
  body: string;
  /** When the comment was created */
  createdAt: string;
  /** Whether the comment includes an edit made at creation time */
  includesCreatedEdit: boolean;
  /** Whether the comment is minimized */
  isMinimized: boolean;
  /** The reason the comment was minimized, if applicable */
  minimizedReason: string;
  /** Reaction groups on the comment */
  reactionGroups: ReactionGroup[];
  /** URL to the comment */
  url: string;
  /** Whether the current viewer authored the comment */
  viewerDidAuthor: boolean;
}
⋮----
/** The comment's unique ID */
⋮----
/** The comment's author */
⋮----
/** The author's association with the repository */
⋮----
/** The comment's content */
⋮----
/** When the comment was created */
⋮----
/** Whether the comment includes an edit made at creation time */
⋮----
/** Whether the comment is minimized */
⋮----
/** The reason the comment was minimized, if applicable */
⋮----
/** Reaction groups on the comment */
⋮----
/** URL to the comment */
⋮----
/** Whether the current viewer authored the comment */
⋮----
/**
 * Represents a GitHub label
 */
export interface GitHubLabel {
  /** The label's unique ID */
  id: string;
  /** The label's name */
  name: string;
  /** The label's description (optional) */
  description?: string;
  /** The label's color (hex code without #) */
  color: string;
}
⋮----
/** The label's unique ID */
⋮----
/** The label's name */
⋮----
/** The label's description (optional) */
⋮----
/** The label's color (hex code without #) */
⋮----
/**
 * Represents a GitHub issue
 */
export interface GitHubIssue {
  /** The issue's author */
  author: GitHubUser;
  /** The issue's description */
  body: string;
  /** Comments on the issue */
  comments: GitHubComment[];
  /** Labels attached to the issue */
  labels: GitHubLabel[];
  /** The issue's title */
  title: string;
}
⋮----
/** The issue's author */
⋮----
/** The issue's description */
⋮----
/** Comments on the issue */
⋮----
/** Labels attached to the issue */
⋮----
/** The issue's title */
⋮----
/**
 * Represents the level of reasoning effort for LLM API calls
 *
 * - 'low': Faster responses with less reasoning
 * - 'medium': Balanced reasoning and response time
 * - 'high': More thorough reasoning (may be slower and use more tokens)
 */
export type ReasoningEffort = 'low' | 'medium' | 'high';
</file>

<file path=".github/workflows/generate-pr.yml">
name: Generate PR (example)
on:
  issues:
    types:
      - labeled
jobs:
  generate-pr:
    runs-on: ubuntu-latest
    # Only run if the label name includes 'llm-pr' and an issue number is available
    if: contains(github.event.label.name, 'llm-pr') && github.event.issue.number != null
    steps:
      - uses: actions/checkout@v4
      - name: Generate PR with LLMs
        uses: ./ # This references the action in the current repository
        with:
          issue-number: ${{ github.event.issue.number }}
          # Uncomment to run in dry-run mode (no branches or PRs will be created)
          # dry-run: 'true'
        env:
          # for Amazon (Bedrock)
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION_NAME: us-west-2
          # for Google (AI Studio)
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # for OpenAI
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ github.token }}
</file>

<file path=".tool-versions">
bun 1.2.10
nodejs 20.19.1
python 3.12.10
</file>

<file path="README.md">
# generate-pr-with-llm

[![Test](https://github.com/WillBooster/generate-pr-with-llm/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/generate-pr-with-llm/actions/workflows/test.yml)
[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)

A GitHub Action that automatically generates pull requests using Large Language Models (LLMs).

## License

Apache License 2.0
</file>

<file path="src/main.ts">
import child_process from 'node:child_process';
import ansis from 'ansis';
import YAML from 'yaml';
import { planHowToResolveIssue } from './plan';
import type { GitHubIssue, ReasoningEffort } from './types';
import { parseCommandLineArgs } from './utils';
import { DEFAULT_AIDER_EXTRA_ARGS } from './defaultOptions';
import { runCommand } from './spawn';
/**
 * Options for the main function
 */
export interface MainOptions {
  /** Additional arguments to pass to the aider command */
  aiderExtraArgs?: string;
  /** Run without making actual changes (no branch creation, no PR) */
  dryRun?: boolean;
  /** GitHub issue number to process */
  issueNumber: number;
  /** LLM model to use for selecting files to be modified */
  model?: string;
  /** Level of reasoning effort for the LLM */
  reasoningEffort?: ReasoningEffort;
  /** Extra arguments for repomix when generating context */
  repomixExtraArgs?: string;
}
⋮----
/** Additional arguments to pass to the aider command */
⋮----
/** Run without making actual changes (no branch creation, no PR) */
⋮----
/** GitHub issue number to process */
⋮----
/** LLM model to use for selecting files to be modified */
⋮----
/** Level of reasoning effort for the LLM */
⋮----
/** Extra arguments for repomix when generating context */
⋮----
export async function main(options: MainOptions): Promise<void>
⋮----
// if (!issue.labels.some((label) => label.name.includes('llm-pr'))) {
//   console.warn(ansis.yellow(`Issue #${issueNumber} is missing the required 'llm-pr' label. Processing skipped.`));
//   process.exit(0);
// }
⋮----
// Build aider command arguments
⋮----
// Create a PR using GitHub CLI
⋮----
function getTwoDigits(value: number): string
function getGitRepoName(): string
function getHeaderOfFirstCommit(): string
</file>

<file path="package.json">
{
  "name": "generate-pr-with-llm",
  "version": "0.0.0-semantically-released",
  "private": true,
  "repository": "github:WillBooster/generate-pr-with-llm",
  "license": "Apache-2.0",
  "author": "WillBooster Inc.",
  "scripts": {
    "build": "build-ts app --input src/action.ts --bundleBuiltins undici --no-auto-cascade-env",
    "check-all": "bun run cleanup && bun run typecheck && bun run test",
    "cleanup": "bun --bun wb lint --fix --format",
    "format": "bun --bun wb lint --format",
    "lint": "bun --bun wb lint",
    "lint-fix": "bun --bun wb lint --fix",
    "prepare": "lefthook install || true",
    "start": "bun --env-file=.env src/cli.ts",
    "test": "bun wb test",
    "typecheck": "bun --bun wb typecheck"
  },
  "prettier": "@willbooster/prettier-config",
  "devDependencies": {
    "@actions/core": "1.11.1",
    "@biomejs/biome": "1.9.4",
    "@types/bun": "1.2.10",
    "@types/micromatch": "4.0.9",
    "@types/yargs": "17.0.33",
    "@willbooster/biome-config": "2.1.0",
    "@willbooster/prettier-config": "10.0.0",
    "@willbooster/wb": "8.0.42",
    "ansis": "3.17.0",
    "build-ts": "13.2.1",
    "conventional-changelog-conventionalcommits": "8.0.0",
    "lefthook": "1.11.12",
    "prettier": "3.5.3",
    "semantic-release": "24.2.3",
    "sort-package-json": "3.0.0",
    "typescript": "5.8.3",
    "undici": "7.8.0",
    "yaml": "2.7.1",
    "yargs": "17.7.2"
  }
}
</file>

<file path="action.yml">
name: 'Generate PR with LLM'
description: 'A GitHub Action that generates pull requests using LLMs.'
author: 'WillBooster Inc.'
# Define the inputs for your action
inputs:
  issue-number:
    description: 'The issue (or PR) number to reference when generating the PR'
    required: true
  model:
    description: 'LLM model to use for selecting files to be modified'
    required: false
  reasoning-effort:
    description: 'Constrains effort on reasoning for reasoning models. Supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used.'
    required: false
  aider-extra-args:
    description: 'Additional arguments to pass to the aider command (e.g., "--model gemini/gemini-2.5-pro-preview-03-25")'
    required: false
  repomix-extra-args:
    description: 'Extra arguments for repomix when generating context (e.g., "--ignore **/*.{json,md,out,sql},*ignore,.env*")'
    required: false
  dry-run:
    description: 'Run without making actual changes (no branch creation, no PR)'
    required: false
    default: 'false'
# Define the runs configuration
runs:
  using: 'node20'
  main: 'dist/action.js'
# Add branding to make your action stand out in the marketplace
branding:
  icon: 'git-pull-request'
  color: 'blue'
</file>

</files>
